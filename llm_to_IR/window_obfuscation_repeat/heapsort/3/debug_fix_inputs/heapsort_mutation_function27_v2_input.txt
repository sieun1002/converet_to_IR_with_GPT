; === ERROR LOG BEGIN [llvm-as] ===
; llvm-as-14: /home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/window_obfuscation_repeat/heapsort/3/heapsort_mutation_function271.ll:8:29: error: dso_location and DLL-StorageClass mismatch
; declare dso_local dllimport i64 @strlen(i8*)
;                             ^
; === ERROR LOG END ===

; ModuleID = 'pe_section_lookup'
source_filename = "pe_section_lookup"
target datalayout = "e-m:w-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

@off_1400043A0 = external dso_local global i8*, align 8

declare dso_local dllimport i64 @strlen(i8*)
declare dso_local dllimport i32 @strncmp(i8*, i8*, i64)

define dso_local i8* @sub_140002570(i8* %name) {
entry:
  %len = call i64 @strlen(i8* %name)
  %len_gt8 = icmp ugt i64 %len, 8
  br i1 %len_gt8, label %ret_null, label %after_len

after_len:
  %base_ptr = load i8*, i8** @off_1400043A0, align 8
  %mzwptr = bitcast i8* %base_ptr to i16*
  %mz = load i16, i16* %mzwptr, align 1
  %is_mz = icmp eq i16 %mz, 23117
  br i1 %is_mz, label %check_nt, label %ret_null

check_nt:
  %off_3c_ptr = getelementptr i8, i8* %base_ptr, i64 60
  %e_lfanew_ptr = bitcast i8* %off_3c_ptr to i32*
  %e_lfanew_i32 = load i32, i32* %e_lfanew_ptr, align 1
  %e_lfanew_i64 = sext i32 %e_lfanew_i32 to i64
  %nt = getelementptr i8, i8* %base_ptr, i64 %e_lfanew_i64
  %nt_sig_ptr = bitcast i8* %nt to i32*
  %nt_sig = load i32, i32* %nt_sig_ptr, align 1
  %sig_ok = icmp eq i32 %nt_sig, 17744
  br i1 %sig_ok, label %check_magic, label %ret_null

check_magic:
  %nt_plus_18 = getelementptr i8, i8* %nt, i64 24
  %magic_ptr = bitcast i8* %nt_plus_18 to i16*
  %magic = load i16, i16* %magic_ptr, align 1
  %is_pe32plus = icmp eq i16 %magic, 523
  br i1 %is_pe32plus, label %check_nsect, label %ret_null

check_nsect:
  %nt_plus_6 = getelementptr i8, i8* %nt, i64 6
  %nsect_ptr = bitcast i8* %nt_plus_6 to i16*
  %nsect16 = load i16, i16* %nsect_ptr, align 1
  %is_zero = icmp eq i16 %nsect16, 0
  br i1 %is_zero, label %ret_null, label %cont

cont:
  %nt_plus_14 = getelementptr i8, i8* %nt, i64 20
  %so_ptr = bitcast i8* %nt_plus_14 to i16*
  %so16 = load i16, i16* %so_ptr, align 1
  %so64 = zext i16 %so16 to i64
  %section_start_off = add i64 %so64, 24
  %section = getelementptr i8, i8* %nt, i64 %section_start_off
  %nsect32 = zext i16 %nsect16 to i32
  br label %loop

loop:
  %i = phi i32 [ 0, %cont ], [ %i_next, %loop_next ]
  %secptr = phi i8* [ %section, %cont ], [ %secptr_next, %loop_next ]
  %res = call i32 @strncmp(i8* %secptr, i8* %name, i64 8)
  %is_zero_cmp = icmp eq i32 %res, 0
  br i1 %is_zero_cmp, label %found, label %loop_next

loop_next:
  %i_next = add i32 %i, 1
  %secptr_next = getelementptr i8, i8* %secptr, i64 40
  %i_lt = icmp ult i32 %i_next, %nsect32
  br i1 %i_lt, label %loop, label %ret_null

found:
  ret i8* %secptr

ret_null:
  ret i8* null
}