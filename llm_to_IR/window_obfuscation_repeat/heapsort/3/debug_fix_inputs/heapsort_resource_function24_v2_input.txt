; === ERROR LOG BEGIN [llvm-as] ===
; llvm-as-14: /home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/window_obfuscation_repeat/heapsort/3/heapsort_resource_function241.ll:45:12: error: expected instruction opcode
;   %curr2 = %struct.Node* %curr
;            ^
; === ERROR LOG END ===

; ModuleID = 'fixed_module'
target triple = "x86_64-pc-windows-msvc"
target datalayout = "e-m:w-i64:64-f80:128-n8:16:32:64-S128"

%struct.Node = type { i32, [12 x i8], %struct.Node* }

@dword_1400070E8 = external dso_local global i32
@Block = external dso_local global %struct.Node*
@CriticalSection = external dso_local global i8

declare dso_local void @EnterCriticalSection(i8*)
declare dso_local void @LeaveCriticalSection(i8*)
declare dso_local void @free(i8*)

define dso_local i32 @sub_140002340(i32 %arg) {
entry:
  %gate = load i32, i32* @dword_1400070E8, align 4
  %gate_is_zero = icmp eq i32 %gate, 0
  br i1 %gate_is_zero, label %ret_zero, label %enter_cs

ret_zero:
  ret i32 0

enter_cs:
  call void @EnterCriticalSection(i8* @CriticalSection)
  %head = load %struct.Node*, %struct.Node** @Block, align 8
  %head_is_null = icmp eq %struct.Node* %head, null
  br i1 %head_is_null, label %leave_cs, label %loop

loop:
  %curr = phi %struct.Node* [ %head, %enter_cs ], [ %next2, %cont ]
  %prev = phi %struct.Node* [ null, %enter_cs ], [ %curr2, %cont ]
  %valptr = getelementptr inbounds %struct.Node, %struct.Node* %curr, i32 0, i32 0
  %val = load i32, i32* %valptr, align 4
  %nextptr = getelementptr inbounds %struct.Node, %struct.Node* %curr, i32 0, i32 2
  %next = load %struct.Node*, %struct.Node** %nextptr, align 8
  %eq = icmp eq i32 %val, %arg
  br i1 %eq, label %matched, label %no_match

no_match:
  %next_is_null = icmp eq %struct.Node* %next, null
  br i1 %next_is_null, label %leave_cs, label %cont

cont:
  %curr2 = %struct.Node* %curr
  %next2 = %struct.Node* %next
  br label %loop

matched:
  %prev_is_null = icmp eq %struct.Node* %prev, null
  br i1 %prev_is_null, label %remove_head, label %unlink_mid

remove_head:
  store %struct.Node* %next, %struct.Node** @Block, align 8
  br label %do_free

unlink_mid:
  %prev_next_ptr = getelementptr inbounds %struct.Node, %struct.Node* %prev, i32 0, i32 2
  store %struct.Node* %next, %struct.Node** %prev_next_ptr, align 8
  br label %do_free

do_free:
  %curr_cast = bitcast %struct.Node* %curr to i8*
  call void @free(i8* %curr_cast)
  br label %leave_cs

leave_cs:
  call void @LeaveCriticalSection(i8* @CriticalSection)
  ret i32 0
}