; === ERROR LOG BEGIN [llvm-as] ===
; /home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/window_obfuscation_repeat/heapsort/2/heapsort_resource_function81.ll:10:40: warning: ptr type is only supported in -opaque-pointers mode
; @sub_140002960 = alias i32 (i8*, ...), ptr @printf
;                                        ^
; llvm-as-14: /home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/window_obfuscation_repeat/heapsort/2/heapsort_resource_function81.ll:10:40: error: expected type
; @sub_140002960 = alias i32 (i8*, ...), ptr @printf
;                                        ^
; === ERROR LOG END ===

; ModuleID = 'fixed_module'
source_filename = "fixed_module"
target triple = "x86_64-pc-windows-msvc"

@Format = private unnamed_addr constant [9 x i8] c"Before: \00"
@byte_14000400D = private unnamed_addr constant [8 x i8] c"After: \00"
@str_d = private unnamed_addr constant [4 x i8] c"%d \00"

declare i32 @printf(i8*, ...)
@sub_140002960 = alias i32 (i8*, ...), ptr @printf
declare i32 @putchar(i32)

define void @sub_1400018F0() {
entry:
  ret void
}

define void @sub_140001450(i32* %p, i64 %n) {
entry:
  br label %for.i

for.i:                                            ; preds = %for.i.inc, %entry
  %i = phi i64 [ 0, %entry ], [ %i.next, %for.i.inc ]
  %cond.i = icmp ult i64 %i, %n
  br i1 %cond.i, label %for.body.i, label %ret

for.body.i:                                       ; preds = %for.i
  %j.init = add i64 %i, 1
  br label %for.j

for.j:                                            ; preds = %ifcmp, %for.body.i
  %minphi = phi i64 [ %i, %for.body.i ], [ %min.next, %ifcmp ]
  %jphi = phi i64 [ %j.init, %for.body.i ], [ %j.next, %ifcmp ]
  %cond.j = icmp ult i64 %jphi, %n
  br i1 %cond.j, label %ifcmp, label %after.j

ifcmp:                                            ; preds = %for.j
  %ptrj = getelementptr inbounds i32, i32* %p, i64 %jphi
  %valj = load i32, i32* %ptrj, align 4
  %ptrmin = getelementptr inbounds i32, i32* %p, i64 %minphi
  %valmin = load i32, i32* %ptrmin, align 4
  %lt = icmp slt i32 %valj, %valmin
  %min.next = select i1 %lt, i64 %jphi, i64 %minphi
  %j.next = add i64 %jphi, 1
  br label %for.j

after.j:                                          ; preds = %for.j
  %min.at.exit = phi i64 [ %minphi, %for.j ]
  %cmp.ne = icmp ne i64 %min.at.exit, %i
  br i1 %cmp.ne, label %do.swap, label %for.i.inc

do.swap:                                          ; preds = %after.j
  %ptr.i = getelementptr inbounds i32, i32* %p, i64 %i
  %ptr.min2 = getelementptr inbounds i32, i32* %p, i64 %min.at.exit
  %vi = load i32, i32* %ptr.i, align 4
  %vmin = load i32, i32* %ptr.min2, align 4
  store i32 %vmin, i32* %ptr.i, align 4
  store i32 %vi, i32* %ptr.min2, align 4
  br label %for.i.inc

for.i.inc:                                        ; preds = %do.swap, %after.j
  %i.next = add i64 %i, 1
  br label %for.i

ret:                                              ; preds = %for.i
  ret void
}

define i32 @sub_14000171D() {
entry:
  call void @sub_1400018F0()
  %arr = alloca [9 x i32], align 16
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %arr0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
  store i32 7, i32* %arr0, align 4
  %arr1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 1
  store i32 3, i32* %arr1, align 4
  %arr2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 2
  store i32 9, i32* %arr2, align 4
  %arr3 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 3
  store i32 1, i32* %arr3, align 4
  %arr4 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 4
  store i32 4, i32* %arr4, align 4
  %arr5 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 5
  store i32 8, i32* %arr5, align 4
  %arr6 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 6
  store i32 2, i32* %arr6, align 4
  %arr7 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 7
  store i32 6, i32* %arr7, align 4
  %arr8 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 8
  store i32 5, i32* %arr8, align 4
  store i64 9, i64* %len, align 8
  %fmt0 = getelementptr inbounds [9 x i8], [9 x i8]* @Format, i64 0, i64 0
  %call0 = call i32 (i8*, ...) @sub_140002960(i8* %fmt0)
  store i64 0, i64* %i, align 8
  br label %loop

loop:                                             ; preds = %body, %entry
  %iv = load i64, i64* %i, align 8
  %lv = load i64, i64* %len, align 8
  %cmp = icmp ult i64 %iv, %lv
  br i1 %cmp, label %body, label %after_loop

body:                                             ; preds = %loop
  %elem.ptr = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %iv
  %elem = load i32, i32* %elem.ptr, align 4
  %fmt_d = getelementptr inbounds [4 x i8], [4 x i8]* @str_d, i64 0, i64 0
  %call1 = call i32 (i8*, ...) @sub_140002960(i8* %fmt_d, i32 %elem)
  %iv.next = add i64 %iv, 1
  store i64 %iv.next, i64* %i, align 8
  br label %loop

after_loop:                                       ; preds = %loop
  %nl1 = call i32 @putchar(i32 10)
  %arrptr = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
  %lv2 = load i64, i64* %len, align 8
  call void @sub_140001450(i32* %arrptr, i64 %lv2)
  %fmt1 = getelementptr inbounds [8 x i8], [8 x i8]* @byte_14000400D, i64 0, i64 0
  %call2 = call i32 (i8*, ...) @sub_140002960(i8* %fmt1)
  store i64 0, i64* %j, align 8
  br label %loop2

loop2:                                            ; preds = %body2, %after_loop
  %jv = load i64, i64* %j, align 8
  %lv3 = load i64, i64* %len, align 8
  %cmp2 = icmp ult i64 %jv, %lv3
  br i1 %cmp2, label %body2, label %after2

body2:                                            ; preds = %loop2
  %elem2.ptr = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %jv
  %elem2 = load i32, i32* %elem2.ptr, align 4
  %fmt_d2 = getelementptr inbounds [4 x i8], [4 x i8]* @str_d, i64 0, i64 0
  %call3 = call i32 (i8*, ...) @sub_140002960(i8* %fmt_d2, i32 %elem2)
  %jv.next = add i64 %jv, 1
  store i64 %jv.next, i64* %j, align 8
  br label %loop2

after2:                                           ; preds = %loop2
  %nl2 = call i32 @putchar(i32 10)
  ret i32 0
}