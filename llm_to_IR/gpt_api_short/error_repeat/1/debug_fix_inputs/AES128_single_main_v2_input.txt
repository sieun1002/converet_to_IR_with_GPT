; === ERROR LOG BEGIN [llvm-as] ===
; llvm-as-14: ../../llm_to_IR/gpt_api_short/error_repeat/1/AES128_single_main1.ll:31:13: error: floating point constant invalid for type
;   store i64 0xA6D2AE2816157E2B, i64* %key64, align 16
;             ^
; === ERROR LOG END ===

; ModuleID = 'main'
target triple = "x86_64-unknown-linux-gnu"

; Symbol: main ; Address: 0x00001AA9
; Intent: AES-128 encrypt test vector and print ciphertext (confidence=0.90). Evidence: calls aes128_encrypt, prints 16 bytes as hex and known NIST AES test string.
; Preconditions: None
; Postconditions: Returns 0 after printing ciphertext twice (once computed, once reference)

@.str.ciph = private unnamed_addr constant [13 x i8] c"Ciphertext: \00", align 1
@.str.hex  = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@.str.ref  = private unnamed_addr constant [45 x i8] c"Ciphertext: 3925841d02dc09fbdc118597196a0b32\00", align 1

; Only the necessary external declarations:
; declare i32 @printf(i8*, ...)
; declare i32 @putchar(i32)
; (declare only other externs that are needed)
declare dso_local i32 @printf(i8*, ...)
declare dso_local i32 @putchar(i32)
declare dso_local i32 @puts(i8*)
declare dso_local void @aes128_encrypt(i8*, i8*, i8*)

define dso_local i32 @main() local_unnamed_addr {
entry:
  %out = alloca [16 x i8], align 16
  %pt = alloca [16 x i8], align 16
  %key = alloca [16 x i8], align 16
  %i = alloca i32, align 4

  ; key = 2b7e151628aed2a6abf7158809cf4f3c (little-endian halves)
  %key64 = bitcast [16 x i8]* %key to i64*
  store i64 0xA6D2AE2816157E2B, i64* %key64, align 16
  %key64.hi.ptr = getelementptr inbounds i64, i64* %key64, i64 1
  store i64 0x3C4FCF098815F7AB, i64* %key64.hi.ptr, align 8

  ; pt = 3243f6a8885a308d313198a2e0370734 (little-endian halves)
  %pt64 = bitcast [16 x i8]* %pt to i64*
  store i64 0x8D305A88A8F64332, i64* %pt64, align 16
  %pt64.hi.ptr = getelementptr inbounds i64, i64* %pt64, i64 1
  store i64 0x340737E0A2983131, i64* %pt64.hi.ptr, align 8

  ; aes128_encrypt(out, pt, key)
  %out.p = getelementptr inbounds [16 x i8], [16 x i8]* %out, i64 0, i64 0
  %pt.p  = getelementptr inbounds [16 x i8], [16 x i8]* %pt,  i64 0, i64 0
  %key.p = getelementptr inbounds [16 x i8], [16 x i8]* %key, i64 0, i64 0
  call void @aes128_encrypt(i8* %out.p, i8* %pt.p, i8* %key.p)

  ; print "Ciphertext: "
  %ciph.msg = getelementptr inbounds [13 x i8], [13 x i8]* @.str.ciph, i64 0, i64 0
  call i32 (i8*, ...) @printf(i8* %ciph.msg)

  store i32 0, i32* %i, align 4
  br label %loop

loop:
  %iv = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %iv, 15
  br i1 %cmp, label %body, label %after

body:
  %idx = sext i32 %iv to i64
  %b.ptr = getelementptr inbounds [16 x i8], [16 x i8]* %out, i64 0, i64 %idx
  %b = load i8, i8* %b.ptr, align 1
  %b32 = zext i8 %b to i32
  %hex.fmt = getelementptr inbounds [5 x i8], [5 x i8]* @.str.hex, i64 0, i64 0
  call i32 (i8*, ...) @printf(i8* %hex.fmt, i32 %b32)
  %inc = add nsw i32 %iv, 1
  store i32 %inc, i32* %i, align 4
  br label %loop

after:
  call i32 @putchar(i32 10)
  %ref.msg = getelementptr inbounds [45 x i8], [45 x i8]* @.str.ref, i64 0, i64 0
  call i32 @puts(i8* %ref.msg)
  ret i32 0
}