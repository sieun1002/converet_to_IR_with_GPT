; === ERROR LOG BEGIN [llvm-as] ===
; llvm-as-14: ../../llm_to_IR/gpt_api_short/error_repeat/1/insertionsort_main1.ll:17:1: error: expected '(' in function argument list
; define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
; ^
; === ERROR LOG END ===

; ModuleID = 'main'
target triple = "x86_64-unknown-linux-gnu"

; Symbol: main ; Address: 0x1247
; Intent: sort and print an array using insertion sort (confidence=0.88). Evidence: call to insertion_sort; loop printing "%d ".
; Preconditions:
; Postconditions:

@format = private unnamed_addr constant [4 x i8] c"%d \00"

declare i32 @_printf(i8*, ...)
declare i32 @_putchar(i32)
declare void @___stack_chk_fail() noreturn
declare void @insertion_sort(i32*, i64)
declare i64 @__stack_chk_guard

define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %canary = alloca i64, align 8
  %arr = alloca [10 x i32], align 16
  %guard0 = load i64, i64* @__stack_chk_guard, align 8
  store i64 %guard0, i64* %canary, align 8

  ; initialize array: 9,1,5,3,7,2,8,6,4,0
  %arr0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
  store i32 9,  i32* %arr0, align 4
  %arr1 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 1
  store i32 1,  i32* %arr1, align 4
  %arr2 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 2
  store i32 5,  i32* %arr2, align 4
  %arr3 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 3
  store i32 3,  i32* %arr3, align 4
  %arr4 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 4
  store i32 7,  i32* %arr4, align 4
  %arr5 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 5
  store i32 2,  i32* %arr5, align 4
  %arr6 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 6
  store i32 8,  i32* %arr6, align 4
  %arr7 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 7
  store i32 6,  i32* %arr7, align 4
  %arr8 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 8
  store i32 4,  i32* %arr8, align 4
  %arr9 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 9
  store i32 0,  i32* %arr9, align 4

  call void @insertion_sort(i32* %arr0, i64 10)

  br label %loop

loop:
  %i = phi i64 [ 0, %entry ], [ %i.next, %print.cont ]
  %cmp = icmp ult i64 %i, 10
  br i1 %cmp, label %print.body, label %after.loop

print.body:
  %elem.ptr = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %i
  %elem = load i32, i32* %elem.ptr, align 4
  %fmtptr = getelementptr inbounds [4 x i8], [4 x i8]* @format, i64 0, i64 0
  %call = call i32 (i8*, ...) @_printf(i8* %fmtptr, i32 %elem)
  br label %print.cont

print.cont:
  %i.next = add i64 %i, 1
  br label %loop

after.loop:
  %nl = call i32 @_putchar(i32 10)
  %guard1 = load i64, i64* @__stack_chk_guard, align 8
  %stored = load i64, i64* %canary, align 8
  %ok = icmp eq i64 %stored, %guard1
  br i1 %ok, label %ret, label %stkfail

stkfail:
  call void @___stack_chk_fail()
  unreachable

ret:
  ret i32 0
}