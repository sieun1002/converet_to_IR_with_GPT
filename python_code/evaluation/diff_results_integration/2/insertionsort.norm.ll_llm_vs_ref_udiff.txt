--- ref.ll
+++ insertionsort.norm.ll_llm_vs_ref.ll
@@ -1,260 +1,93 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/insertionsort.ll'
-source_filename = "../original/src/insertionsort.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
-target triple = "x86_64-pc-linux-gnu"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/integration/bc/2/insertionsort.ll'
+source_filename = "llvm-link"
+target triple = "x86_64-unknown-linux-gnu"
 
-@__const.main.a = private unnamed_addr constant [10 x i32] [i32 9, i32 1, i32 5, i32 3, i32 7, i32 2, i32 8, i32 6, i32 4, i32 0], align 16
 @.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
-@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
 
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local i32 @main() #0 !dbg !10 {
+define i32 @main() {
 entry:
-  %retval = alloca i32, align 4
-  %a = alloca [10 x i32], align 16
-  %n = alloca i64, align 8
-  %i = alloca i64, align 8
-  store i32 0, i32* %retval, align 4
-  call void @llvm.dbg.declare(metadata [10 x i32]* %a, metadata !15, metadata !DIExpression()), !dbg !19
-  %0 = bitcast [10 x i32]* %a to i8*, !dbg !19
-  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.a to i8*), i64 40, i1 false), !dbg !19
-  call void @llvm.dbg.declare(metadata i64* %n, metadata !20, metadata !DIExpression()), !dbg !24
-  store i64 10, i64* %n, align 8, !dbg !24
-  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 0, !dbg !25
-  %1 = load i64, i64* %n, align 8, !dbg !26
-  call void @insertion_sort(i32* noundef %arraydecay, i64 noundef %1), !dbg !27
-  call void @llvm.dbg.declare(metadata i64* %i, metadata !28, metadata !DIExpression()), !dbg !30
-  store i64 0, i64* %i, align 8, !dbg !30
-  br label %for.cond, !dbg !31
+  %arr = alloca [10 x i32], align 16
+  %0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
+  store i32 9, i32* %0, align 16
+  %1 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 1
+  store i32 1, i32* %1, align 4
+  %2 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 2
+  store i32 5, i32* %2, align 8
+  %3 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 3
+  store i32 3, i32* %3, align 4
+  %4 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 4
+  store i32 7, i32* %4, align 16
+  %5 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 5
+  store i32 2, i32* %5, align 4
+  %6 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 6
+  store i32 8, i32* %6, align 8
+  %7 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 7
+  store i32 6, i32* %7, align 4
+  %8 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 8
+  store i32 4, i32* %8, align 16
+  %9 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 9
+  store i32 0, i32* %9, align 4
+  call void @insertion_sort(i32* noundef nonnull %0, i64 noundef 10)
+  br label %loop
 
-for.cond:                                         ; preds = %for.inc, %entry
-  %2 = load i64, i64* %i, align 8, !dbg !32
-  %3 = load i64, i64* %n, align 8, !dbg !34
-  %cmp = icmp ult i64 %2, %3, !dbg !35
-  br i1 %cmp, label %for.body, label %for.end, !dbg !36
+loop:                                             ; preds = %body, %entry
+  %i.0 = phi i64 [ 0, %entry ], [ %14, %body ]
+  %10 = icmp ult i64 %i.0, 10
+  br i1 %10, label %body, label %after
 
-for.body:                                         ; preds = %for.cond
-  %4 = load i64, i64* %i, align 8, !dbg !37
-  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 %4, !dbg !39
-  %5 = load i32, i32* %arrayidx, align 4, !dbg !39
-  %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %5), !dbg !40
-  br label %for.inc, !dbg !41
+body:                                             ; preds = %loop
+  %11 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %i.0
+  %12 = load i32, i32* %11, align 4
+  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %12)
+  %14 = add i64 %i.0, 1
+  br label %loop
 
-for.inc:                                          ; preds = %for.body
-  %6 = load i64, i64* %i, align 8, !dbg !42
-  %inc = add i64 %6, 1, !dbg !42
-  store i64 %inc, i64* %i, align 8, !dbg !42
-  br label %for.cond, !dbg !43, !llvm.loop !44
-
-for.end:                                          ; preds = %for.cond
-  %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !47
-  ret i32 0, !dbg !48
+after:                                            ; preds = %loop
+  %15 = call i32 @putchar(i32 noundef 10)
+  ret i32 0
 }
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
+declare i32 @printf(i8* noundef, ...)
 
-; Function Attrs: argmemonly nofree nounwind willreturn
-declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
+declare i32 @putchar(i32 noundef)
 
-; Function Attrs: noinline nounwind optnone uwtable
-define internal void @insertion_sort(i32* noundef %a, i64 noundef %n) #0 !dbg !49 {
+define void @insertion_sort(i32* nocapture %arr, i64 %n) {
 entry:
-  %a.addr = alloca i32*, align 8
-  %n.addr = alloca i64, align 8
-  %i = alloca i64, align 8
-  %key = alloca i32, align 4
-  %j = alloca i64, align 8
-  store i32* %a, i32** %a.addr, align 8
-  call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !53, metadata !DIExpression()), !dbg !54
-  store i64 %n, i64* %n.addr, align 8
-  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !55, metadata !DIExpression()), !dbg !56
-  call void @llvm.dbg.declare(metadata i64* %i, metadata !57, metadata !DIExpression()), !dbg !59
-  store i64 1, i64* %i, align 8, !dbg !59
-  br label %for.cond, !dbg !60
+  br label %outer.cond
 
-for.cond:                                         ; preds = %for.inc, %entry
-  %0 = load i64, i64* %i, align 8, !dbg !61
-  %1 = load i64, i64* %n.addr, align 8, !dbg !63
-  %cmp = icmp ult i64 %0, %1, !dbg !64
-  br i1 %cmp, label %for.body, label %for.end, !dbg !65
+outer.cond:                                       ; preds = %inner.exit, %entry
+  %i = phi i64 [ 1, %entry ], [ %i.next, %inner.exit ]
+  %cmp.i.n = icmp ult i64 %i, %n
+  br i1 %cmp.i.n, label %outer.body, label %exit
 
-for.body:                                         ; preds = %for.cond
-  call void @llvm.dbg.declare(metadata i32* %key, metadata !66, metadata !DIExpression()), !dbg !68
-  %2 = load i32*, i32** %a.addr, align 8, !dbg !69
-  %3 = load i64, i64* %i, align 8, !dbg !70
-  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %3, !dbg !69
-  %4 = load i32, i32* %arrayidx, align 4, !dbg !69
-  store i32 %4, i32* %key, align 4, !dbg !68
-  call void @llvm.dbg.declare(metadata i64* %j, metadata !71, metadata !DIExpression()), !dbg !72
-  %5 = load i64, i64* %i, align 8, !dbg !73
-  store i64 %5, i64* %j, align 8, !dbg !72
-  br label %while.cond, !dbg !74
+outer.body:                                       ; preds = %outer.cond
+  %gep.i = getelementptr inbounds i32, i32* %arr, i64 %i
+  %key = load i32, i32* %gep.i, align 4
+  br label %inner.cond
 
-while.cond:                                       ; preds = %while.body, %for.body
-  %6 = load i64, i64* %j, align 8, !dbg !75
-  %cmp1 = icmp ugt i64 %6, 0, !dbg !76
-  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !77
+inner.cond:                                       ; preds = %inner.body, %outer.body
+  %j = phi i64 [ %i, %outer.body ], [ %j.prev, %inner.body ]
+  %j.ne.zero.not = icmp eq i64 %j, 0
+  br i1 %j.ne.zero.not, label %inner.exit, label %inner.cmp
 
-land.rhs:                                         ; preds = %while.cond
-  %7 = load i32*, i32** %a.addr, align 8, !dbg !78
-  %8 = load i64, i64* %j, align 8, !dbg !79
-  %sub = sub i64 %8, 1, !dbg !80
-  %arrayidx2 = getelementptr inbounds i32, i32* %7, i64 %sub, !dbg !78
-  %9 = load i32, i32* %arrayidx2, align 4, !dbg !78
-  %10 = load i32, i32* %key, align 4, !dbg !81
-  %cmp3 = icmp sgt i32 %9, %10, !dbg !82
-  br label %land.end
+inner.cmp:                                        ; preds = %inner.cond
+  %j.prev = add i64 %j, -1
+  %gep.prev = getelementptr inbounds i32, i32* %arr, i64 %j.prev
+  %prev = load i32, i32* %gep.prev, align 4
+  %key.lt.prev = icmp slt i32 %key, %prev
+  br i1 %key.lt.prev, label %inner.body, label %inner.exit
 
-land.end:                                         ; preds = %land.rhs, %while.cond
-  %11 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ], !dbg !83
-  br i1 %11, label %while.body, label %while.end, !dbg !74
+inner.body:                                       ; preds = %inner.cmp
+  %gep.j = getelementptr inbounds i32, i32* %arr, i64 %j
+  store i32 %prev, i32* %gep.j, align 4
+  br label %inner.cond
 
-while.body:                                       ; preds = %land.end
-  %12 = load i32*, i32** %a.addr, align 8, !dbg !84
-  %13 = load i64, i64* %j, align 8, !dbg !86
-  %sub4 = sub i64 %13, 1, !dbg !87
-  %arrayidx5 = getelementptr inbounds i32, i32* %12, i64 %sub4, !dbg !84
-  %14 = load i32, i32* %arrayidx5, align 4, !dbg !84
-  %15 = load i32*, i32** %a.addr, align 8, !dbg !88
-  %16 = load i64, i64* %j, align 8, !dbg !89
-  %arrayidx6 = getelementptr inbounds i32, i32* %15, i64 %16, !dbg !88
-  store i32 %14, i32* %arrayidx6, align 4, !dbg !90
-  %17 = load i64, i64* %j, align 8, !dbg !91
-  %dec = add i64 %17, -1, !dbg !91
-  store i64 %dec, i64* %j, align 8, !dbg !91
-  br label %while.cond, !dbg !74, !llvm.loop !92
+inner.exit:                                       ; preds = %inner.cmp, %inner.cond
+  %gep.final = getelementptr inbounds i32, i32* %arr, i64 %j
+  store i32 %key, i32* %gep.final, align 4
+  %i.next = add i64 %i, 1
+  br label %outer.cond
 
-while.end:                                        ; preds = %land.end
-  %18 = load i32, i32* %key, align 4, !dbg !94
-  %19 = load i32*, i32** %a.addr, align 8, !dbg !95
-  %20 = load i64, i64* %j, align 8, !dbg !96
-  %arrayidx7 = getelementptr inbounds i32, i32* %19, i64 %20, !dbg !95
-  store i32 %18, i32* %arrayidx7, align 4, !dbg !97
-  br label %for.inc, !dbg !98
-
-for.inc:                                          ; preds = %while.end
-  %21 = load i64, i64* %i, align 8, !dbg !99
-  %inc = add i64 %21, 1, !dbg !99
-  store i64 %inc, i64* %i, align 8, !dbg !99
-  br label %for.cond, !dbg !100, !llvm.loop !101
-
-for.end:                                          ; preds = %for.cond
-  ret void, !dbg !103
+exit:                                             ; preds = %outer.cond
+  ret void
 }
-
-declare i32 @printf(i8* noundef, ...) #3
-
-attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #2 = { argmemonly nofree nounwind willreturn }
-attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "../original/src/insertionsort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "9b39ced67c1e6732101e98b285c67a7b")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
-!3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 16, type: !11, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
-!11 = !DISubroutineType(types: !12)
-!12 = !{!13}
-!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!14 = !{}
-!15 = !DILocalVariable(name: "a", scope: !10, file: !1, line: 17, type: !16)
-!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 320, elements: !17)
-!17 = !{!18}
-!18 = !DISubrange(count: 10)
-!19 = !DILocation(line: 17, column: 9, scope: !10)
-!20 = !DILocalVariable(name: "n", scope: !10, file: !1, line: 18, type: !21)
-!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !22, line: 46, baseType: !23)
-!22 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
-!23 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
-!24 = !DILocation(line: 18, column: 12, scope: !10)
-!25 = !DILocation(line: 20, column: 20, scope: !10)
-!26 = !DILocation(line: 20, column: 23, scope: !10)
-!27 = !DILocation(line: 20, column: 5, scope: !10)
-!28 = !DILocalVariable(name: "i", scope: !29, file: !1, line: 22, type: !21)
-!29 = distinct !DILexicalBlock(scope: !10, file: !1, line: 22, column: 5)
-!30 = !DILocation(line: 22, column: 17, scope: !29)
-!31 = !DILocation(line: 22, column: 10, scope: !29)
-!32 = !DILocation(line: 22, column: 24, scope: !33)
-!33 = distinct !DILexicalBlock(scope: !29, file: !1, line: 22, column: 5)
-!34 = !DILocation(line: 22, column: 28, scope: !33)
-!35 = !DILocation(line: 22, column: 26, scope: !33)
-!36 = !DILocation(line: 22, column: 5, scope: !29)
-!37 = !DILocation(line: 23, column: 25, scope: !38)
-!38 = distinct !DILexicalBlock(scope: !33, file: !1, line: 22, column: 36)
-!39 = !DILocation(line: 23, column: 23, scope: !38)
-!40 = !DILocation(line: 23, column: 9, scope: !38)
-!41 = !DILocation(line: 24, column: 5, scope: !38)
-!42 = !DILocation(line: 22, column: 31, scope: !33)
-!43 = !DILocation(line: 22, column: 5, scope: !33)
-!44 = distinct !{!44, !36, !45, !46}
-!45 = !DILocation(line: 24, column: 5, scope: !29)
-!46 = !{!"llvm.loop.mustprogress"}
-!47 = !DILocation(line: 25, column: 5, scope: !10)
-!48 = !DILocation(line: 26, column: 5, scope: !10)
-!49 = distinct !DISubprogram(name: "insertion_sort", scope: !1, file: !1, line: 4, type: !50, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !14)
-!50 = !DISubroutineType(types: !51)
-!51 = !{null, !52, !21}
-!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
-!53 = !DILocalVariable(name: "a", arg: 1, scope: !49, file: !1, line: 4, type: !52)
-!54 = !DILocation(line: 4, column: 33, scope: !49)
-!55 = !DILocalVariable(name: "n", arg: 2, scope: !49, file: !1, line: 4, type: !21)
-!56 = !DILocation(line: 4, column: 43, scope: !49)
-!57 = !DILocalVariable(name: "i", scope: !58, file: !1, line: 5, type: !21)
-!58 = distinct !DILexicalBlock(scope: !49, file: !1, line: 5, column: 5)
-!59 = !DILocation(line: 5, column: 17, scope: !58)
-!60 = !DILocation(line: 5, column: 10, scope: !58)
-!61 = !DILocation(line: 5, column: 24, scope: !62)
-!62 = distinct !DILexicalBlock(scope: !58, file: !1, line: 5, column: 5)
-!63 = !DILocation(line: 5, column: 28, scope: !62)
-!64 = !DILocation(line: 5, column: 26, scope: !62)
-!65 = !DILocation(line: 5, column: 5, scope: !58)
-!66 = !DILocalVariable(name: "key", scope: !67, file: !1, line: 6, type: !13)
-!67 = distinct !DILexicalBlock(scope: !62, file: !1, line: 5, column: 36)
-!68 = !DILocation(line: 6, column: 13, scope: !67)
-!69 = !DILocation(line: 6, column: 19, scope: !67)
-!70 = !DILocation(line: 6, column: 21, scope: !67)
-!71 = !DILocalVariable(name: "j", scope: !67, file: !1, line: 7, type: !21)
-!72 = !DILocation(line: 7, column: 16, scope: !67)
-!73 = !DILocation(line: 7, column: 20, scope: !67)
-!74 = !DILocation(line: 8, column: 9, scope: !67)
-!75 = !DILocation(line: 8, column: 16, scope: !67)
-!76 = !DILocation(line: 8, column: 18, scope: !67)
-!77 = !DILocation(line: 8, column: 22, scope: !67)
-!78 = !DILocation(line: 8, column: 25, scope: !67)
-!79 = !DILocation(line: 8, column: 27, scope: !67)
-!80 = !DILocation(line: 8, column: 29, scope: !67)
-!81 = !DILocation(line: 8, column: 36, scope: !67)
-!82 = !DILocation(line: 8, column: 34, scope: !67)
-!83 = !DILocation(line: 0, scope: !67)
-!84 = !DILocation(line: 9, column: 20, scope: !85)
-!85 = distinct !DILexicalBlock(scope: !67, file: !1, line: 8, column: 41)
-!86 = !DILocation(line: 9, column: 22, scope: !85)
-!87 = !DILocation(line: 9, column: 24, scope: !85)
-!88 = !DILocation(line: 9, column: 13, scope: !85)
-!89 = !DILocation(line: 9, column: 15, scope: !85)
-!90 = !DILocation(line: 9, column: 18, scope: !85)
-!91 = !DILocation(line: 10, column: 13, scope: !85)
-!92 = distinct !{!92, !74, !93, !46}
-!93 = !DILocation(line: 11, column: 9, scope: !67)
-!94 = !DILocation(line: 12, column: 16, scope: !67)
-!95 = !DILocation(line: 12, column: 9, scope: !67)
-!96 = !DILocation(line: 12, column: 11, scope: !67)
-!97 = !DILocation(line: 12, column: 14, scope: !67)
-!98 = !DILocation(line: 13, column: 5, scope: !67)
-!99 = !DILocation(line: 5, column: 31, scope: !62)
-!100 = !DILocation(line: 5, column: 5, scope: !62)
-!101 = distinct !{!101, !65, !102, !46}
-!102 = !DILocation(line: 13, column: 5, scope: !58)
-!103 = !DILocation(line: 14, column: 1, scope: !49)
