- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/quicksort.ll'
?                                                                ----   ^ ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/integration/bc/4/quicksort.ll'
?                                                                  ++++ ^^^^ ^^^^
+ source_filename = "llvm-link"
- source_filename = "../original/src/quicksort.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- @__const.main.a = private unnamed_addr constant [10 x i32] [i32 9, i32 1, i32 5, i32 3, i32 7, i32 2, i32 8, i32 6, i32 4, i32 0], align 16
  @.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
- @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
  
+ define i32 @main() {
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !12 {
  entry:
-   %retval = alloca i32, align 4
-   %a = alloca [10 x i32], align 16
+   %arr = alloca [10 x i32], align 16
?     ++
-   %n = alloca i64, align 8
-   %k = alloca i64, align 8
+   %arr.gep0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
+   store i32 9, i32* %arr.gep0, align 16
+   %arr.gep1 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 1
+   store i32 1, i32* %arr.gep1, align 4
+   %arr.gep2 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 2
+   store i32 5, i32* %arr.gep2, align 8
+   %arr.gep3 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 3
+   store i32 3, i32* %arr.gep3, align 4
+   %arr.gep4 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 4
+   store i32 7, i32* %arr.gep4, align 16
+   %arr.gep5 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 5
+   store i32 2, i32* %arr.gep5, align 4
+   %arr.gep6 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 6
+   store i32 8, i32* %arr.gep6, align 8
+   %arr.gep7 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 7
+   store i32 6, i32* %arr.gep7, align 4
+   %arr.gep8 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 8
+   store i32 4, i32* %arr.gep8, align 16
+   %arr.gep9 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 9
-   store i32 0, i32* %retval, align 4
?                        ^^^^
+   store i32 0, i32* %arr.gep9, align 4
?                      + +++ ^^
+   call void @quick_sort(i32* nonnull %arr.gep0, i64 0, i64 9)
+   br label %loop.header
-   call void @llvm.dbg.declare(metadata [10 x i32]* %a, metadata !17, metadata !DIExpression()), !dbg !21
-   %0 = bitcast [10 x i32]* %a to i8*, !dbg !21
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.a to i8*), i64 40, i1 false), !dbg !21
-   call void @llvm.dbg.declare(metadata i64* %n, metadata !22, metadata !DIExpression()), !dbg !26
-   store i64 10, i64* %n, align 8, !dbg !26
-   %1 = load i64, i64* %n, align 8, !dbg !27
-   %cmp = icmp ugt i64 %1, 1, !dbg !29
-   br i1 %cmp, label %if.then, label %if.end, !dbg !30
  
- if.then:                                          ; preds = %entry
? ^^ -  ^                                       ----
+ loop.header:                                      ; preds = %loop.body, %entry
? ^^^^   ^^^^                                                ++++++++++++
+   %i = phi i64 [ 0, %entry ], [ %i.next, %loop.body ]
+   %cmp.loop = icmp ult i64 %i, 10
+   br i1 %cmp.loop, label %loop.body, label %loop.end
-   %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 0, !dbg !31
-   %2 = load i64, i64* %n, align 8, !dbg !32
-   %sub = sub nsw i64 %2, 1, !dbg !33
-   call void @quick_sort(i32* noundef %arraydecay, i64 noundef 0, i64 noundef %sub), !dbg !34
-   br label %if.end, !dbg !34
  
- if.end:                                           ; preds = %if.then, %entry
? ^^ ^^                                          ---           ^^ -  ^^^^ -- -
+ loop.body:                                        ; preds = %loop.header
? ^^^^ ^^ +                                                    ^^^^   ^^
-   call void @llvm.dbg.declare(metadata i64* %k, metadata !35, metadata !DIExpression()), !dbg !37
-   store i64 0, i64* %k, align 8, !dbg !37
-   br label %for.cond, !dbg !38
+   %elem.ptr = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %i
+   %elem = load i32, i32* %elem.ptr, align 4
+   %call.printf = call i32 (i8*, ...) @printf(i8* noundef nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %elem)
+   %i.next = add i64 %i, 1
+   br label %loop.header
  
- for.cond:                                         ; preds = %for.inc, %if.end
-   %3 = load i64, i64* %k, align 8, !dbg !39
-   %4 = load i64, i64* %n, align 8, !dbg !41
-   %cmp1 = icmp ult i64 %3, %4, !dbg !42
-   br i1 %cmp1, label %for.body, label %for.end, !dbg !43
- 
- for.body:                                         ; preds = %for.cond
-   %5 = load i64, i64* %k, align 8, !dbg !44
-   %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 %5, !dbg !45
-   %6 = load i32, i32* %arrayidx, align 4, !dbg !45
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %6), !dbg !46
-   br label %for.inc, !dbg !46
- 
- for.inc:                                          ; preds = %for.body
-   %7 = load i64, i64* %k, align 8, !dbg !47
-   %inc = add i64 %7, 1, !dbg !47
-   store i64 %inc, i64* %k, align 8, !dbg !47
-   br label %for.cond, !dbg !48, !llvm.loop !49
- 
- for.end:                                          ; preds = %for.cond
? ^ ^                                              -           ^  -----
+ loop.end:                                         ; preds = %loop.header
? ^ ^^                                                         ^ ++++++++
-   %call2 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !52
-   ret i32 0, !dbg !53
+   %call.putchar = call i32 @putchar(i32 10)
+   ret i32 0
  }
  
+ declare i32 @printf(i8*, ...)
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
  
+ declare i32 @putchar(i32)
- ; Function Attrs: argmemonly nofree nounwind willreturn
- declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
  
+ define dso_local void @quick_sort(i32* nocapture %arr, i64 %left, i64 %right) {
- ; Function Attrs: noinline nounwind optnone uwtable
- define internal void @quick_sort(i32* noundef %a, i64 noundef %lo, i64 noundef %hi) #0 !dbg !54 {
  entry:
+   br label %outer.loop
-   %a.addr = alloca i32*, align 8
-   %lo.addr = alloca i64, align 8
-   %hi.addr = alloca i64, align 8
-   %i = alloca i64, align 8
-   %j = alloca i64, align 8
-   %pivot = alloca i32, align 4
-   %t = alloca i32, align 4
-   store i32* %a, i32** %a.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !58, metadata !DIExpression()), !dbg !59
-   store i64 %lo, i64* %lo.addr, align 8
-   call void @llvm.dbg.declare(metadata i64* %lo.addr, metadata !60, metadata !DIExpression()), !dbg !61
-   store i64 %hi, i64* %hi.addr, align 8
-   call void @llvm.dbg.declare(metadata i64* %hi.addr, metadata !62, metadata !DIExpression()), !dbg !63
-   br label %while.cond, !dbg !64
  
- while.cond:                                       ; preds = %if.end28, %entry
? ^^^ --- ^^                                                       ----
+ outer.loop:                                       ; preds = %right.update, %left.update, %entry
? ^^^^^^  ^^                                                   + +++++++++++++++ + +++++
-   %0 = load i64, i64* %lo.addr, align 8, !dbg !65
-   %1 = load i64, i64* %hi.addr, align 8, !dbg !66
-   %cmp = icmp slt i64 %0, %1, !dbg !67
-   br i1 %cmp, label %while.body, label %while.end29, !dbg !64
+   %left.cur = phi i64 [ %left, %entry ], [ %i.cur, %left.update ], [ %left.cur, %right.update ]
+   %right.cur = phi i64 [ %right, %entry ], [ %right.cur, %left.update ], [ %j.cur, %right.update ]
+   %cmp.outer = icmp sgt i64 %right.cur, %left.cur
+   br i1 %cmp.outer, label %partition.entry, label %return
  
+ partition.entry:                                  ; preds = %outer.loop
+   %diff = sub i64 %right.cur, %left.cur
+   %sign = lshr i64 %diff, 63
+   %sum = add i64 %diff, %sign
+   %half = ashr i64 %sum, 1
+   %mid = add i64 %left.cur, %half
- while.body:                                       ; preds = %while.cond
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !68, metadata !DIExpression()), !dbg !70
-   %2 = load i64, i64* %lo.addr, align 8, !dbg !71
-   store i64 %2, i64* %i, align 8, !dbg !70
-   call void @llvm.dbg.declare(metadata i64* %j, metadata !72, metadata !DIExpression()), !dbg !73
-   %3 = load i64, i64* %hi.addr, align 8, !dbg !74
-   store i64 %3, i64* %j, align 8, !dbg !73
-   call void @llvm.dbg.declare(metadata i32* %pivot, metadata !75, metadata !DIExpression()), !dbg !76
-   %4 = load i32*, i32** %a.addr, align 8, !dbg !77
-   %5 = load i64, i64* %lo.addr, align 8, !dbg !78
-   %6 = load i64, i64* %hi.addr, align 8, !dbg !79
-   %7 = load i64, i64* %lo.addr, align 8, !dbg !80
-   %sub = sub nsw i64 %6, %7, !dbg !81
-   %div = sdiv i64 %sub, 2, !dbg !82
-   %add = add nsw i64 %5, %div, !dbg !83
-   %arrayidx = getelementptr inbounds i32, i32* %4, i64 %add, !dbg !77
?    ^ ------                                     ^       ^ -----------
+   %pivot.ptr = getelementptr inbounds i32, i32* %arr, i64 %mid
?    ^^^^^^^^                                      ^^^       ^^
+   %pivot.val = load i32, i32* %pivot.ptr, align 4
+   br label %inc.i.check
-   %8 = load i32, i32* %arrayidx, align 4, !dbg !77
-   store i32 %8, i32* %pivot, align 4, !dbg !76
-   br label %do.body, !dbg !84
  
- do.body:                                          ; preds = %do.cond, %while.body
-   br label %while.cond1, !dbg !85
+ inc.i.check:                                      ; preds = %do.swap, %inc.i.body, %partition.entry
+   %i.cur = phi i64 [ %left.cur, %partition.entry ], [ %i.next, %inc.i.body ], [ %i.inc, %do.swap ]
+   %j.forinc = phi i64 [ %right.cur, %partition.entry ], [ %right.cur, %inc.i.body ], [ %j.dec, %do.swap ]
+   %i.ptr = getelementptr inbounds i32, i32* %arr, i64 %i.cur
+   %i.val = load i32, i32* %i.ptr, align 4
+   %cmp.i = icmp slt i32 %i.val, %pivot.val
+   br i1 %cmp.i, label %inc.i.body, label %dec.j.check
  
+ inc.i.body:                                       ; preds = %inc.i.check
+   %i.next = add i64 %i.cur, 1
+   br label %inc.i.check
- while.cond1:                                      ; preds = %while.body4, %do.body
-   %9 = load i32*, i32** %a.addr, align 8, !dbg !87
-   %10 = load i64, i64* %i, align 8, !dbg !88
-   %arrayidx2 = getelementptr inbounds i32, i32* %9, i64 %10, !dbg !87
-   %11 = load i32, i32* %arrayidx2, align 4, !dbg !87
-   %12 = load i32, i32* %pivot, align 4, !dbg !89
-   %cmp3 = icmp slt i32 %11, %12, !dbg !90
-   br i1 %cmp3, label %while.body4, label %while.end, !dbg !85
  
- while.body4:                                      ; preds = %while.cond1
-   %13 = load i64, i64* %i, align 8, !dbg !91
-   %inc = add nsw i64 %13, 1, !dbg !91
-   store i64 %inc, i64* %i, align 8, !dbg !91
-   br label %while.cond1, !dbg !85, !llvm.loop !92
+ dec.j.check:                                      ; preds = %dec.j.body, %inc.i.check
+   %j.cur = phi i64 [ %j.forinc, %inc.i.check ], [ %j.next, %dec.j.body ]
+   %j.ptr = getelementptr inbounds i32, i32* %arr, i64 %j.cur
+   %j.val = load i32, i32* %j.ptr, align 4
+   %cmp.j = icmp sgt i32 %j.val, %pivot.val
+   br i1 %cmp.j, label %dec.j.body, label %partition.compare
  
- while.end:                                        ; preds = %while.cond1
? ^^^^  ^^                                         -           ^^^^   ^^^^
+ dec.j.body:                                       ; preds = %dec.j.check
? ^ + ^^^^ +                                                   ^ +++  ^^^^
-   br label %while.cond5, !dbg !93
+   %j.next = add i64 %j.cur, -1
+   br label %dec.j.check
  
+ partition.compare:                                ; preds = %dec.j.check
+   %cmp.le.not = icmp sgt i64 %i.cur, %j.cur
+   br i1 %cmp.le.not, label %after.partition, label %do.swap
- while.cond5:                                      ; preds = %while.body8, %while.end
-   %14 = load i32*, i32** %a.addr, align 8, !dbg !94
-   %15 = load i64, i64* %j, align 8, !dbg !95
-   %arrayidx6 = getelementptr inbounds i32, i32* %14, i64 %15, !dbg !94
-   %16 = load i32, i32* %arrayidx6, align 4, !dbg !94
-   %17 = load i32, i32* %pivot, align 4, !dbg !96
-   %cmp7 = icmp sgt i32 %16, %17, !dbg !97
-   br i1 %cmp7, label %while.body8, label %while.end9, !dbg !93
  
- while.body8:                                      ; preds = %while.cond5
-   %18 = load i64, i64* %j, align 8, !dbg !98
-   %dec = add nsw i64 %18, -1, !dbg !98
-   store i64 %dec, i64* %j, align 8, !dbg !98
-   br label %while.cond5, !dbg !93, !llvm.loop !99
+ do.swap:                                          ; preds = %partition.compare
+   store i32 %j.val, i32* %i.ptr, align 4
+   store i32 %i.val, i32* %j.ptr, align 4
+   %i.inc = add i64 %i.cur, 1
+   %j.dec = add i64 %j.cur, -1
+   br label %inc.i.check
  
- while.end9:                                       ; preds = %while.cond5
-   %19 = load i64, i64* %i, align 8, !dbg !100
-   %20 = load i64, i64* %j, align 8, !dbg !102
-   %cmp10 = icmp sle i64 %19, %20, !dbg !103
-   br i1 %cmp10, label %if.then, label %if.end, !dbg !104
+ after.partition:                                  ; preds = %partition.compare
+   %left.span = sub i64 %j.cur, %left.cur
+   %right.span = sub i64 %right.cur, %i.cur
+   %cmp.sizes.not = icmp slt i64 %left.span, %right.span
+   br i1 %cmp.sizes.not, label %left.branch, label %right.branch
  
- if.then:                                          ; preds = %while.end9
? ^  ^ --                                       ----           ^^ ^^^^ --
+ left.branch:                                      ; preds = %after.partition
? ^^ + ^^^^^                                                   ^^^^^^^^^^ ^^^
+   %need.left = icmp sgt i64 %j.cur, %left.cur
+   br i1 %need.left, label %left.recurse, label %left.update
-   call void @llvm.dbg.declare(metadata i32* %t, metadata !105, metadata !DIExpression()), !dbg !107
-   %21 = load i32*, i32** %a.addr, align 8, !dbg !108
-   %22 = load i64, i64* %i, align 8, !dbg !109
-   %arrayidx11 = getelementptr inbounds i32, i32* %21, i64 %22, !dbg !108
-   %23 = load i32, i32* %arrayidx11, align 4, !dbg !108
-   store i32 %23, i32* %t, align 4, !dbg !107
-   %24 = load i32*, i32** %a.addr, align 8, !dbg !110
-   %25 = load i64, i64* %j, align 8, !dbg !111
-   %arrayidx12 = getelementptr inbounds i32, i32* %24, i64 %25, !dbg !110
-   %26 = load i32, i32* %arrayidx12, align 4, !dbg !110
-   %27 = load i32*, i32** %a.addr, align 8, !dbg !112
-   %28 = load i64, i64* %i, align 8, !dbg !113
-   %arrayidx13 = getelementptr inbounds i32, i32* %27, i64 %28, !dbg !112
-   store i32 %26, i32* %arrayidx13, align 4, !dbg !114
-   %29 = load i32, i32* %t, align 4, !dbg !115
-   %30 = load i32*, i32** %a.addr, align 8, !dbg !116
-   %31 = load i64, i64* %j, align 8, !dbg !117
-   %arrayidx14 = getelementptr inbounds i32, i32* %30, i64 %31, !dbg !116
-   store i32 %29, i32* %arrayidx14, align 4, !dbg !118
-   %32 = load i64, i64* %i, align 8, !dbg !119
-   %inc15 = add nsw i64 %32, 1, !dbg !119
-   store i64 %inc15, i64* %i, align 8, !dbg !119
-   %33 = load i64, i64* %j, align 8, !dbg !120
-   %dec16 = add nsw i64 %33, -1, !dbg !120
-   store i64 %dec16, i64* %j, align 8, !dbg !120
-   br label %if.end, !dbg !121
  
- if.end:                                           ; preds = %if.then, %while.end9
-   br label %do.cond, !dbg !122
+ left.recurse:                                     ; preds = %left.branch
+   call void @quick_sort(i32* %arr, i64 %left.cur, i64 %j.cur)
+   br label %left.update
  
+ left.update:                                      ; preds = %left.recurse, %left.branch
+   br label %outer.loop
- do.cond:                                          ; preds = %if.end
-   %34 = load i64, i64* %i, align 8, !dbg !123
-   %35 = load i64, i64* %j, align 8, !dbg !124
-   %cmp17 = icmp sle i64 %34, %35, !dbg !125
-   br i1 %cmp17, label %do.body, label %do.end, !dbg !122, !llvm.loop !126
  
- do.end:                                           ; preds = %do.cond
? ^^ ^ ^                                      ------           ^^ ^  -
+ right.branch:                                     ; preds = %after.partition
? ^^^^^ ^^^ ^^                                                 ^^^^^ ^^^^^^^
+   %need.right = icmp sgt i64 %right.cur, %i.cur
+   br i1 %need.right, label %right.recurse, label %right.update
-   %36 = load i64, i64* %j, align 8, !dbg !128
-   %37 = load i64, i64* %lo.addr, align 8, !dbg !130
-   %sub18 = sub nsw i64 %36, %37, !dbg !131
-   %38 = load i64, i64* %hi.addr, align 8, !dbg !132
-   %39 = load i64, i64* %i, align 8, !dbg !133
-   %sub19 = sub nsw i64 %38, %39, !dbg !134
-   %cmp20 = icmp slt i64 %sub18, %sub19, !dbg !135
-   br i1 %cmp20, label %if.then21, label %if.else, !dbg !136
  
- if.then21:                                        ; preds = %do.end
?  ^ ^^ ^^^                                     ----           ^^ ^ ^
+ right.recurse:                                    ; preds = %right.branch
? + ^^^ ^ ^^^^^                                                ^^^^^ ^^^ ^^
+   call void @quick_sort(i32* %arr, i64 %i.cur, i64 %right.cur)
+   br label %right.update
-   %40 = load i64, i64* %lo.addr, align 8, !dbg !137
-   %41 = load i64, i64* %j, align 8, !dbg !140
-   %cmp22 = icmp slt i64 %40, %41, !dbg !141
-   br i1 %cmp22, label %if.then23, label %if.end24, !dbg !142
  
+ right.update:                                     ; preds = %right.recurse, %right.branch
+   br label %outer.loop
- if.then23:                                        ; preds = %if.then21
-   %42 = load i32*, i32** %a.addr, align 8, !dbg !143
-   %43 = load i64, i64* %lo.addr, align 8, !dbg !144
-   %44 = load i64, i64* %j, align 8, !dbg !145
-   call void @quick_sort(i32* noundef %42, i64 noundef %43, i64 noundef %44), !dbg !146
-   br label %if.end24, !dbg !146
  
- if.end24:                                         ; preds = %if.then23, %if.then21
-   %45 = load i64, i64* %i, align 8, !dbg !147
-   store i64 %45, i64* %lo.addr, align 8, !dbg !148
-   br label %if.end28, !dbg !149
- 
- if.else:                                          ; preds = %do.end
? ^^^ ^^^                                                      -  ^^^
+ return:                                           ; preds = %outer.loop
? ^ ^^^^                                           +            ++++ ^^^^
+   ret void
-   %46 = load i64, i64* %i, align 8, !dbg !150
-   %47 = load i64, i64* %hi.addr, align 8, !dbg !153
-   %cmp25 = icmp slt i64 %46, %47, !dbg !154
-   br i1 %cmp25, label %if.then26, label %if.end27, !dbg !155
- 
- if.then26:                                        ; preds = %if.else
-   %48 = load i32*, i32** %a.addr, align 8, !dbg !156
-   %49 = load i64, i64* %i, align 8, !dbg !157
-   %50 = load i64, i64* %hi.addr, align 8, !dbg !158
-   call void @quick_sort(i32* noundef %48, i64 noundef %49, i64 noundef %50), !dbg !159
-   br label %if.end27, !dbg !159
- 
- if.end27:                                         ; preds = %if.then26, %if.else
-   %51 = load i64, i64* %j, align 8, !dbg !160
-   store i64 %51, i64* %hi.addr, align 8, !dbg !161
-   br label %if.end28
- 
- if.end28:                                         ; preds = %if.end27, %if.end24
-   br label %while.cond, !dbg !64, !llvm.loop !162
- 
- while.end29:                                      ; preds = %while.cond
-   ret void, !dbg !164
  }
- 
- declare i32 @printf(i8* noundef, ...) #3
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { argmemonly nofree nounwind willreturn }
- attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!4, !5, !6, !7, !8, !9, !10}
- !llvm.ident = !{!11}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/quicksort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "3238381465f040c99953b92e9de03463")
- !2 = !{!3}
- !3 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
- !4 = !{i32 7, !"Dwarf Version", i32 5}
- !5 = !{i32 2, !"Debug Info Version", i32 3}
- !6 = !{i32 1, !"wchar_size", i32 4}
- !7 = !{i32 7, !"PIC Level", i32 2}
- !8 = !{i32 7, !"PIE Level", i32 2}
- !9 = !{i32 7, !"uwtable", i32 1}
- !10 = !{i32 7, !"frame-pointer", i32 2}
- !11 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !12 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 28, type: !13, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
- !13 = !DISubroutineType(types: !14)
- !14 = !{!15}
- !15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !16 = !{}
- !17 = !DILocalVariable(name: "a", scope: !12, file: !1, line: 29, type: !18)
- !18 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 320, elements: !19)
- !19 = !{!20}
- !20 = !DISubrange(count: 10)
- !21 = !DILocation(line: 29, column: 9, scope: !12)
- !22 = !DILocalVariable(name: "n", scope: !12, file: !1, line: 30, type: !23)
- !23 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !24, line: 46, baseType: !25)
- !24 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !25 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !26 = !DILocation(line: 30, column: 12, scope: !12)
- !27 = !DILocation(line: 32, column: 9, scope: !28)
- !28 = distinct !DILexicalBlock(scope: !12, file: !1, line: 32, column: 9)
- !29 = !DILocation(line: 32, column: 11, scope: !28)
- !30 = !DILocation(line: 32, column: 9, scope: !12)
- !31 = !DILocation(line: 32, column: 27, scope: !28)
- !32 = !DILocation(line: 32, column: 39, scope: !28)
- !33 = !DILocation(line: 32, column: 41, scope: !28)
- !34 = !DILocation(line: 32, column: 16, scope: !28)
- !35 = !DILocalVariable(name: "k", scope: !36, file: !1, line: 34, type: !23)
- !36 = distinct !DILexicalBlock(scope: !12, file: !1, line: 34, column: 5)
- !37 = !DILocation(line: 34, column: 17, scope: !36)
- !38 = !DILocation(line: 34, column: 10, scope: !36)
- !39 = !DILocation(line: 34, column: 24, scope: !40)
- !40 = distinct !DILexicalBlock(scope: !36, file: !1, line: 34, column: 5)
- !41 = !DILocation(line: 34, column: 28, scope: !40)
- !42 = !DILocation(line: 34, column: 26, scope: !40)
- !43 = !DILocation(line: 34, column: 5, scope: !36)
- !44 = !DILocation(line: 34, column: 52, scope: !40)
- !45 = !DILocation(line: 34, column: 50, scope: !40)
- !46 = !DILocation(line: 34, column: 36, scope: !40)
- !47 = !DILocation(line: 34, column: 31, scope: !40)
- !48 = !DILocation(line: 34, column: 5, scope: !40)
- !49 = distinct !{!49, !43, !50, !51}
- !50 = !DILocation(line: 34, column: 54, scope: !36)
- !51 = !{!"llvm.loop.mustprogress"}
- !52 = !DILocation(line: 35, column: 5, scope: !12)
- !53 = !DILocation(line: 36, column: 5, scope: !12)
- !54 = distinct !DISubprogram(name: "quick_sort", scope: !1, file: !1, line: 4, type: !55, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !16)
- !55 = !DISubroutineType(types: !56)
- !56 = !{null, !57, !3, !3}
- !57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
- !58 = !DILocalVariable(name: "a", arg: 1, scope: !54, file: !1, line: 4, type: !57)
- !59 = !DILocation(line: 4, column: 29, scope: !54)
- !60 = !DILocalVariable(name: "lo", arg: 2, scope: !54, file: !1, line: 4, type: !3)
- !61 = !DILocation(line: 4, column: 37, scope: !54)
- !62 = !DILocalVariable(name: "hi", arg: 3, scope: !54, file: !1, line: 4, type: !3)
- !63 = !DILocation(line: 4, column: 46, scope: !54)
- !64 = !DILocation(line: 5, column: 5, scope: !54)
- !65 = !DILocation(line: 5, column: 12, scope: !54)
- !66 = !DILocation(line: 5, column: 17, scope: !54)
- !67 = !DILocation(line: 5, column: 15, scope: !54)
- !68 = !DILocalVariable(name: "i", scope: !69, file: !1, line: 6, type: !3)
- !69 = distinct !DILexicalBlock(scope: !54, file: !1, line: 5, column: 21)
- !70 = !DILocation(line: 6, column: 14, scope: !69)
- !71 = !DILocation(line: 6, column: 18, scope: !69)
- !72 = !DILocalVariable(name: "j", scope: !69, file: !1, line: 6, type: !3)
- !73 = !DILocation(line: 6, column: 22, scope: !69)
- !74 = !DILocation(line: 6, column: 26, scope: !69)
- !75 = !DILocalVariable(name: "pivot", scope: !69, file: !1, line: 7, type: !15)
- !76 = !DILocation(line: 7, column: 13, scope: !69)
- !77 = !DILocation(line: 7, column: 21, scope: !69)
- !78 = !DILocation(line: 7, column: 23, scope: !69)
- !79 = !DILocation(line: 7, column: 29, scope: !69)
- !80 = !DILocation(line: 7, column: 34, scope: !69)
- !81 = !DILocation(line: 7, column: 32, scope: !69)
- !82 = !DILocation(line: 7, column: 38, scope: !69)
- !83 = !DILocation(line: 7, column: 26, scope: !69)
- !84 = !DILocation(line: 9, column: 9, scope: !69)
- !85 = !DILocation(line: 10, column: 13, scope: !86)
- !86 = distinct !DILexicalBlock(scope: !69, file: !1, line: 9, column: 12)
- !87 = !DILocation(line: 10, column: 20, scope: !86)
- !88 = !DILocation(line: 10, column: 22, scope: !86)
- !89 = !DILocation(line: 10, column: 27, scope: !86)
- !90 = !DILocation(line: 10, column: 25, scope: !86)
- !91 = !DILocation(line: 10, column: 35, scope: !86)
- !92 = distinct !{!92, !85, !91, !51}
- !93 = !DILocation(line: 11, column: 13, scope: !86)
- !94 = !DILocation(line: 11, column: 20, scope: !86)
- !95 = !DILocation(line: 11, column: 22, scope: !86)
- !96 = !DILocation(line: 11, column: 27, scope: !86)
- !97 = !DILocation(line: 11, column: 25, scope: !86)
- !98 = !DILocation(line: 11, column: 35, scope: !86)
- !99 = distinct !{!99, !93, !98, !51}
- !100 = !DILocation(line: 12, column: 17, scope: !101)
- !101 = distinct !DILexicalBlock(scope: !86, file: !1, line: 12, column: 17)
- !102 = !DILocation(line: 12, column: 22, scope: !101)
- !103 = !DILocation(line: 12, column: 19, scope: !101)
- !104 = !DILocation(line: 12, column: 17, scope: !86)
- !105 = !DILocalVariable(name: "t", scope: !106, file: !1, line: 13, type: !15)
- !106 = distinct !DILexicalBlock(scope: !101, file: !1, line: 12, column: 25)
- !107 = !DILocation(line: 13, column: 21, scope: !106)
- !108 = !DILocation(line: 13, column: 25, scope: !106)
- !109 = !DILocation(line: 13, column: 27, scope: !106)
- !110 = !DILocation(line: 13, column: 38, scope: !106)
- !111 = !DILocation(line: 13, column: 40, scope: !106)
- !112 = !DILocation(line: 13, column: 31, scope: !106)
- !113 = !DILocation(line: 13, column: 33, scope: !106)
- !114 = !DILocation(line: 13, column: 36, scope: !106)
- !115 = !DILocation(line: 13, column: 51, scope: !106)
- !116 = !DILocation(line: 13, column: 44, scope: !106)
- !117 = !DILocation(line: 13, column: 46, scope: !106)
- !118 = !DILocation(line: 13, column: 49, scope: !106)
- !119 = !DILocation(line: 14, column: 18, scope: !106)
- !120 = !DILocation(line: 14, column: 23, scope: !106)
- !121 = !DILocation(line: 15, column: 13, scope: !106)
- !122 = !DILocation(line: 16, column: 9, scope: !86)
- !123 = !DILocation(line: 16, column: 18, scope: !69)
- !124 = !DILocation(line: 16, column: 23, scope: !69)
- !125 = !DILocation(line: 16, column: 20, scope: !69)
- !126 = distinct !{!126, !84, !127, !51}
- !127 = !DILocation(line: 16, column: 24, scope: !69)
- !128 = !DILocation(line: 18, column: 14, scope: !129)
- !129 = distinct !DILexicalBlock(scope: !69, file: !1, line: 18, column: 13)
- !130 = !DILocation(line: 18, column: 18, scope: !129)
- !131 = !DILocation(line: 18, column: 16, scope: !129)
- !132 = !DILocation(line: 18, column: 25, scope: !129)
- !133 = !DILocation(line: 18, column: 30, scope: !129)
- !134 = !DILocation(line: 18, column: 28, scope: !129)
- !135 = !DILocation(line: 18, column: 22, scope: !129)
- !136 = !DILocation(line: 18, column: 13, scope: !69)
- !137 = !DILocation(line: 19, column: 17, scope: !138)
- !138 = distinct !DILexicalBlock(scope: !139, file: !1, line: 19, column: 17)
- !139 = distinct !DILexicalBlock(scope: !129, file: !1, line: 18, column: 34)
- !140 = !DILocation(line: 19, column: 22, scope: !138)
- !141 = !DILocation(line: 19, column: 20, scope: !138)
- !142 = !DILocation(line: 19, column: 17, scope: !139)
- !143 = !DILocation(line: 19, column: 36, scope: !138)
- !144 = !DILocation(line: 19, column: 39, scope: !138)
- !145 = !DILocation(line: 19, column: 43, scope: !138)
- !146 = !DILocation(line: 19, column: 25, scope: !138)
- !147 = !DILocation(line: 20, column: 18, scope: !139)
- !148 = !DILocation(line: 20, column: 16, scope: !139)
- !149 = !DILocation(line: 21, column: 9, scope: !139)
- !150 = !DILocation(line: 22, column: 17, scope: !151)
- !151 = distinct !DILexicalBlock(scope: !152, file: !1, line: 22, column: 17)
- !152 = distinct !DILexicalBlock(scope: !129, file: !1, line: 21, column: 16)
- !153 = !DILocation(line: 22, column: 21, scope: !151)
- !154 = !DILocation(line: 22, column: 19, scope: !151)
- !155 = !DILocation(line: 22, column: 17, scope: !152)
- !156 = !DILocation(line: 22, column: 36, scope: !151)
- !157 = !DILocation(line: 22, column: 39, scope: !151)
- !158 = !DILocation(line: 22, column: 42, scope: !151)
- !159 = !DILocation(line: 22, column: 25, scope: !151)
- !160 = !DILocation(line: 23, column: 18, scope: !152)
- !161 = !DILocation(line: 23, column: 16, scope: !152)
- !162 = distinct !{!162, !64, !163, !51}
- !163 = !DILocation(line: 25, column: 5, scope: !54)
- !164 = !DILocation(line: 26, column: 1, scope: !54)
