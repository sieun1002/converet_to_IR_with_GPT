- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/dijkstra_modular.ll'
?                                                                ----   ^ ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/integration/bc/3/dijkstra_modular.ll'
?                                                                  ++++ ^^^^ ^^^^
+ source_filename = "llvm-link"
- source_filename = "dijkstra_modular.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- %struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
- %struct._IO_marker = type opaque
?         ^^^^^ ^^^^
+ %struct.graph = type opaque
?         ^^ ^^
- %struct._IO_codecvt = type opaque
- %struct._IO_wide_data = type opaque
  
+ @stream = external global i8*, align 8
+ @byte_40202C = external global [0 x i8], align 1
- @.str = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
+ @.str.dd = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
?      +++
- @.str.1 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
?       ^
+ @.str.ddd = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
?       ^^^
- @.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
?       ^
+ @.str.d = private unnamed_addr constant [3 x i8] c"%d\00", align 1
?       ^
- @.str.3 = private unnamed_addr constant [16 x i8] c"dist[%d] = INF\0A\00", align 1
?      ^^
+ @.str_inf = private unnamed_addr constant [16 x i8] c"dist[%d] = INF\0A\00", align 1
?      ^^^^
- @.str.4 = private unnamed_addr constant [15 x i8] c"dist[%d] = %d\0A\00", align 1
?      ^^
+ @.str_val = private unnamed_addr constant [15 x i8] c"dist[%d] = %d\0A\00", align 1
?      ^^^^
- @stderr = external global %struct._IO_FILE*, align 8
- @.str.5 = private unnamed_addr constant [53 x i8] c"\EC\9E\85\EB\A0\A5 \ED\98\95\EC\8B\9D \EC\98\A4\EB\A5\98 \EB\98\90\EB\8A\94 \EB\B2\94\EC\9C\84 \EC\B4\88\EA\B3\BC\EC\9E\85\EB\8B\88\EB\8B\A4.\0A\00", align 1
  
+ define i32 @main() {
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @init_graph([100 x i32]* noundef %graph, i32 noundef %V) #0 !dbg !10 {
  entry:
-   %graph.addr = alloca [100 x i32]*, align 8
-   %V.addr = alloca i32, align 4
?    ^^ --
+   %var_8 = alloca i32, align 4
?    ^  ++
+   %var_C = alloca i32, align 4
+   %buf_graph = alloca i8, align 16
+   %buf_dist = alloca i8, align 16
+   %0 = bitcast i8* %buf_graph to %struct.graph*
+   %call_read = call i32 @read_graph(%struct.graph* nonnull %0, i32* nonnull %var_8, i32* nonnull %var_C)
+   %cmp_zero = icmp eq i32 %call_read, 0
+   br i1 %cmp_zero, label %loc_401724, label %loc_err
+ 
+ loc_err:                                          ; preds = %entry
+   %stream_val = load i8*, i8** @stream, align 8
+   %call_fprintf = call i32 (i8*, i8*, ...) @fprintf(i8* %stream_val, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @byte_40202C, i64 0, i64 0))
+   br label %loc_401753
+ 
+ loc_401724:                                       ; preds = %entry
+   %n_val = load i32, i32* %var_8, align 4
+   %m_val = load i32, i32* %var_C, align 4
+   %1 = bitcast i8* %buf_graph to [100 x i32]*
+   %2 = bitcast i8* %buf_dist to i32*
+   call void @dijkstra([100 x i32]* nonnull %1, i32 %n_val, i32 %m_val, i32* nonnull %2)
+   %n_val2 = load i32, i32* %var_8, align 4
+   call void @print_distances(i32* nonnull %2, i32 %n_val2)
+   br label %loc_401753
+ 
+ loc_401753:                                       ; preds = %loc_401724, %loc_err
+   %var_4.0 = phi i32 [ 0, %loc_401724 ], [ 1, %loc_err ]
+   ret i32 %var_4.0
+ }
+ 
+ declare i32 @fprintf(i8*, i8*, ...)
+ 
+ define dso_local void @init_graph(i32* noundef %p, i32 noundef %n) {
+ entry:
+   %cmp.n.pos = icmp sgt i32 %n, 0
+   br i1 %cmp.n.pos, label %outer.loop, label %done
+ 
+ outer.loop:                                       ; preds = %outer.cont, %entry
+   %i = phi i32 [ 0, %entry ], [ %i.next, %outer.cont ]
+   br label %inner.loop
+ 
+ inner.loop:                                       ; preds = %inner.body, %outer.loop
+   %j = phi i32 [ 0, %outer.loop ], [ %j.next, %inner.body ]
+   %j.cmp = icmp slt i32 %j, %n
+   br i1 %j.cmp, label %inner.body, label %outer.cont
+ 
+ inner.body:                                       ; preds = %inner.loop
+   %i64 = zext i32 %i to i64
+   %mul = mul nuw nsw i64 %i64, 100
+   %j64 = zext i32 %j to i64
+   %index = add nuw nsw i64 %mul, %j64
+   %elem.ptr = getelementptr inbounds i32, i32* %p, i64 %index
+   store i32 0, i32* %elem.ptr, align 4
+   %j.next = add nuw nsw i32 %j, 1
+   br label %inner.loop
+ 
+ outer.cont:                                       ; preds = %inner.loop
+   %i.next = add nuw nsw i32 %i, 1
+   %i.cmp = icmp slt i32 %i.next, %n
+   br i1 %i.cmp, label %outer.loop, label %done
+ 
+ done:                                             ; preds = %outer.cont, %entry
+   ret void
+ }
+ 
+ define dso_local void @add_edge(i32* nocapture %base, i32 %row, i32 %col, i32 %val, i32 %sym) {
+ entry:
+   %0 = or i32 %row, %col
+   %1 = icmp sgt i32 %0, -1
+   br i1 %1, label %do_store, label %ret
+ 
+ do_store:                                         ; preds = %entry
+   %row64 = sext i32 %row to i64
+   %col64 = sext i32 %col to i64
+   %mul = mul nsw i64 %row64, 100
+   %idx = add nsw i64 %mul, %col64
+   %ptr1 = getelementptr inbounds i32, i32* %base, i64 %idx
+   store i32 %val, i32* %ptr1, align 4
+   %symnz.not = icmp eq i32 %sym, 0
+   br i1 %symnz.not, label %ret, label %sym_store
+ 
+ sym_store:                                        ; preds = %do_store
+   %mul2 = mul nsw i64 %col64, 100
+   %idx2 = add nsw i64 %mul2, %row64
+   %ptr2 = getelementptr inbounds i32, i32* %base, i64 %idx2
+   store i32 %val, i32* %ptr2, align 4
+   br label %ret
+ 
+ ret:                                              ; preds = %sym_store, %do_store, %entry
+   ret void
+ }
+ 
+ define i32 @read_graph(%struct.graph* %g, i32* %n_ptr, i32* %src_ptr) {
+ entry:
-   %i = alloca i32, align 4
?    ^
+   %m = alloca i32, align 4
?    ^
-   %j = alloca i32, align 4
-   store [100 x i32]* %graph, [100 x i32]** %graph.addr, align 8
-   call void @llvm.dbg.declare(metadata [100 x i32]** %graph.addr, metadata !19, metadata !DIExpression()), !dbg !20
-   store i32 %V, i32* %V.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %V.addr, metadata !21, metadata !DIExpression()), !dbg !22
-   call void @llvm.dbg.declare(metadata i32* %i, metadata !23, metadata !DIExpression()), !dbg !25
-   store i32 0, i32* %i, align 4, !dbg !25
-   br label %for.cond, !dbg !26
- 
- for.cond:                                         ; preds = %for.inc6, %entry
-   %0 = load i32, i32* %i, align 4, !dbg !27
-   %1 = load i32, i32* %V.addr, align 4, !dbg !29
-   %cmp = icmp slt i32 %0, %1, !dbg !30
-   br i1 %cmp, label %for.body, label %for.end8, !dbg !31
- 
- for.body:                                         ; preds = %for.cond
-   call void @llvm.dbg.declare(metadata i32* %j, metadata !32, metadata !DIExpression()), !dbg !34
-   store i32 0, i32* %j, align 4, !dbg !34
-   br label %for.cond1, !dbg !35
- 
- for.cond1:                                        ; preds = %for.inc, %for.body
-   %2 = load i32, i32* %j, align 4, !dbg !36
-   %3 = load i32, i32* %V.addr, align 4, !dbg !38
-   %cmp2 = icmp slt i32 %2, %3, !dbg !39
-   br i1 %cmp2, label %for.body3, label %for.end, !dbg !40
- 
- for.body3:                                        ; preds = %for.cond1
-   %4 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !41
-   %5 = load i32, i32* %i, align 4, !dbg !42
-   %idxprom = sext i32 %5 to i64, !dbg !41
-   %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %4, i64 %idxprom, !dbg !41
-   %6 = load i32, i32* %j, align 4, !dbg !43
-   %idxprom4 = sext i32 %6 to i64, !dbg !41
-   %arrayidx5 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx, i64 0, i64 %idxprom4, !dbg !41
-   store i32 0, i32* %arrayidx5, align 4, !dbg !44
-   br label %for.inc, !dbg !41
- 
- for.inc:                                          ; preds = %for.body3
-   %7 = load i32, i32* %j, align 4, !dbg !45
-   %inc = add nsw i32 %7, 1, !dbg !45
-   store i32 %inc, i32* %j, align 4, !dbg !45
-   br label %for.cond1, !dbg !46, !llvm.loop !47
- 
- for.end:                                          ; preds = %for.cond1
-   br label %for.inc6, !dbg !48
- 
- for.inc6:                                         ; preds = %for.end
-   %8 = load i32, i32* %i, align 4, !dbg !50
-   %inc7 = add nsw i32 %8, 1, !dbg !50
-   store i32 %inc7, i32* %i, align 4, !dbg !50
-   br label %for.cond, !dbg !51, !llvm.loop !52
- 
- for.end8:                                         ; preds = %for.cond
-   ret void, !dbg !54
- }
- 
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
- 
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @add_edge([100 x i32]* noundef %graph, i32 noundef %u, i32 noundef %v, i32 noundef %w, i32 noundef %undirected) #0 !dbg !55 {
- entry:
-   %graph.addr = alloca [100 x i32]*, align 8
-   %u.addr = alloca i32, align 4
-   %v.addr = alloca i32, align 4
-   %w.addr = alloca i32, align 4
-   %undirected.addr = alloca i32, align 4
-   store [100 x i32]* %graph, [100 x i32]** %graph.addr, align 8
-   call void @llvm.dbg.declare(metadata [100 x i32]** %graph.addr, metadata !58, metadata !DIExpression()), !dbg !59
-   store i32 %u, i32* %u.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %u.addr, metadata !60, metadata !DIExpression()), !dbg !61
-   store i32 %v, i32* %v.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !62, metadata !DIExpression()), !dbg !63
-   store i32 %w, i32* %w.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %w.addr, metadata !64, metadata !DIExpression()), !dbg !65
-   store i32 %undirected, i32* %undirected.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %undirected.addr, metadata !66, metadata !DIExpression()), !dbg !67
-   %0 = load i32, i32* %u.addr, align 4, !dbg !68
-   %cmp = icmp slt i32 %0, 0, !dbg !70
-   br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !71
- 
- lor.lhs.false:                                    ; preds = %entry
-   %1 = load i32, i32* %v.addr, align 4, !dbg !72
-   %cmp1 = icmp slt i32 %1, 0, !dbg !73
-   br i1 %cmp1, label %if.then, label %if.end, !dbg !74
- 
- if.then:                                          ; preds = %lor.lhs.false, %entry
-   br label %if.end9, !dbg !75
- 
- if.end:                                           ; preds = %lor.lhs.false
-   %2 = load i32, i32* %w.addr, align 4, !dbg !76
-   %3 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !77
-   %4 = load i32, i32* %u.addr, align 4, !dbg !78
-   %idxprom = sext i32 %4 to i64, !dbg !77
-   %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %3, i64 %idxprom, !dbg !77
-   %5 = load i32, i32* %v.addr, align 4, !dbg !79
-   %idxprom2 = sext i32 %5 to i64, !dbg !77
-   %arrayidx3 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx, i64 0, i64 %idxprom2, !dbg !77
-   store i32 %2, i32* %arrayidx3, align 4, !dbg !80
-   %6 = load i32, i32* %undirected.addr, align 4, !dbg !81
-   %tobool = icmp ne i32 %6, 0, !dbg !81
-   br i1 %tobool, label %if.then4, label %if.end9, !dbg !83
- 
- if.then4:                                         ; preds = %if.end
-   %7 = load i32, i32* %w.addr, align 4, !dbg !84
-   %8 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !85
-   %9 = load i32, i32* %v.addr, align 4, !dbg !86
-   %idxprom5 = sext i32 %9 to i64, !dbg !85
-   %arrayidx6 = getelementptr inbounds [100 x i32], [100 x i32]* %8, i64 %idxprom5, !dbg !85
-   %10 = load i32, i32* %u.addr, align 4, !dbg !87
-   %idxprom7 = sext i32 %10 to i64, !dbg !85
-   %arrayidx8 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx6, i64 0, i64 %idxprom7, !dbg !85
-   store i32 %7, i32* %arrayidx8, align 4, !dbg !88
-   br label %if.end9, !dbg !85
- 
- if.end9:                                          ; preds = %if.then4, %if.end, %if.then
-   ret void, !dbg !89
- }
- 
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @read_graph([100 x i32]* noundef %graph, i32* noundef %V, i32* noundef %src) #0 !dbg !90 {
- entry:
-   %retval = alloca i32, align 4
-   %graph.addr = alloca [100 x i32]*, align 8
-   %V.addr = alloca i32*, align 8
-   %src.addr = alloca i32*, align 8
-   %E = alloca i32, align 4
-   %i = alloca i32, align 4
    %u = alloca i32, align 4
    %v = alloca i32, align 4
    %w = alloca i32, align 4
-   store [100 x i32]* %graph, [100 x i32]** %graph.addr, align 8
-   call void @llvm.dbg.declare(metadata [100 x i32]** %graph.addr, metadata !94, metadata !DIExpression()), !dbg !95
-   store i32* %V, i32** %V.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %V.addr, metadata !96, metadata !DIExpression()), !dbg !97
-   store i32* %src, i32** %src.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %src.addr, metadata !98, metadata !DIExpression()), !dbg !99
-   call void @llvm.dbg.declare(metadata i32* %E, metadata !100, metadata !DIExpression()), !dbg !101
-   %0 = load i32*, i32** %V.addr, align 8, !dbg !102
-   %call = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* noundef %0, i32* noundef %E), !dbg !104
?         -------                                   --------                                                                        ^^^^^^^^^          ^^^^  ^ -----------
+   %scanf1 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.dd, i64 0, i64 0), i32* %n_ptr, i32* nonnull %m)
?    +++++++++                                                                                         +++                      + ^^^^         ++ ^^  ^
-   %cmp = icmp ne i32 %call, 2, !dbg !105
-   br i1 %cmp, label %if.then, label %if.end, !dbg !106
+   %cmp.scanf1 = icmp eq i32 %scanf1, 2
+   br i1 %cmp.scanf1, label %check_nm, label %err
  
- if.then:                                          ; preds = %entry
? ^^^^                                             -
+ check_nm:                                         ; preds = %entry
? ^  +++ +
-   store i32 -1, i32* %retval, align 4, !dbg !107
-   br label %return, !dbg !107
+   %n.load = load i32, i32* %n_ptr, align 4
+   %m.load = load i32, i32* %m, align 4
+   %0 = add i32 %n.load, -1
+   %1 = icmp ult i32 %0, 100
+   %m.ge0 = icmp sgt i32 %m.load, -1
+   %all.ok = and i1 %1, %m.ge0
+   br i1 %all.ok, label %init_g, label %err
  
- if.end:                                           ; preds = %entry
?  --- ^                                                         ^^^
+ init_g:                                           ; preds = %check_nm
?   ^^^^                                                       ++ +++ ^
+   %2 = bitcast %struct.graph* %g to i32*
+   call void @init_graph(i32* %2, i32 %n.load)
+   br label %loop
-   %1 = load i32*, i32** %V.addr, align 8, !dbg !108
-   %2 = load i32, i32* %1, align 4, !dbg !110
-   %cmp1 = icmp sle i32 %2, 0, !dbg !111
-   br i1 %cmp1, label %if.then5, label %lor.lhs.false, !dbg !112
  
- lor.lhs.false:                                    ; preds = %if.end
-   %3 = load i32*, i32** %V.addr, align 8, !dbg !113
-   %4 = load i32, i32* %3, align 4, !dbg !114
-   %cmp2 = icmp sgt i32 %4, 100, !dbg !115
-   br i1 %cmp2, label %if.then5, label %lor.lhs.false3, !dbg !116
- 
- lor.lhs.false3:                                   ; preds = %lor.lhs.false
-   %5 = load i32, i32* %E, align 4, !dbg !117
-   %cmp4 = icmp slt i32 %5, 0, !dbg !118
-   br i1 %cmp4, label %if.then5, label %if.end6, !dbg !119
- 
- if.then5:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %if.end
-   store i32 -1, i32* %retval, align 4, !dbg !120
-   br label %return, !dbg !120
- 
- if.end6:                                          ; preds = %lor.lhs.false3
-   %6 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !121
-   %7 = load i32*, i32** %V.addr, align 8, !dbg !122
-   %8 = load i32, i32* %7, align 4, !dbg !123
-   call void @init_graph([100 x i32]* noundef %6, i32 noundef %8), !dbg !124
-   call void @llvm.dbg.declare(metadata i32* %i, metadata !125, metadata !DIExpression()), !dbg !127
-   store i32 0, i32* %i, align 4, !dbg !127
-   br label %for.cond, !dbg !128
- 
- for.cond:                                         ; preds = %for.inc, %if.end6
-   %9 = load i32, i32* %i, align 4, !dbg !129
-   %10 = load i32, i32* %E, align 4, !dbg !131
-   %cmp7 = icmp slt i32 %9, %10, !dbg !132
-   br i1 %cmp7, label %for.body, label %for.end, !dbg !133
- 
- for.body:                                         ; preds = %for.cond
? ^ --- ^^                                                     ^ ^^^^ ^
+ loop:                                             ; preds = %do_add, %init_g
? ^  ^                                          ++++           ^ ^^^^^^^^ ^^^^
+   %i.0 = phi i32 [ 0, %init_g ], [ %i.next, %do_add ]
-   call void @llvm.dbg.declare(metadata i32* %u, metadata !134, metadata !DIExpression()), !dbg !136
-   call void @llvm.dbg.declare(metadata i32* %v, metadata !137, metadata !DIExpression()), !dbg !138
-   call void @llvm.dbg.declare(metadata i32* %w, metadata !139, metadata !DIExpression()), !dbg !140
-   %call8 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32* noundef %u, i32* noundef %v, i32* noundef %w), !dbg !141
-   %cmp9 = icmp ne i32 %call8, 3, !dbg !143
-   br i1 %cmp9, label %if.then10, label %if.end11, !dbg !144
- 
- if.then10:                                        ; preds = %for.body
-   store i32 -1, i32* %retval, align 4, !dbg !145
-   br label %return, !dbg !145
- 
- if.end11:                                         ; preds = %for.body
-   %11 = load i32, i32* %u, align 4, !dbg !146
?    ^^                   ^         -----------
+   %m.cur = load i32, i32* %m, align 4
?    ^^^^^                   ^
-   %cmp12 = icmp slt i32 %11, 0, !dbg !148
-   br i1 %cmp12, label %if.then19, label %lor.lhs.false13, !dbg !149
+   %i.ge.m.not = icmp slt i32 %i.0, %m.cur
+   br i1 %i.ge.m.not, label %read_edge, label %after_edges
  
- lor.lhs.false13:                                  ; preds = %if.end11
-   %12 = load i32, i32* %u, align 4, !dbg !150
-   %13 = load i32*, i32** %V.addr, align 8, !dbg !151
-   %14 = load i32, i32* %13, align 4, !dbg !152
-   %cmp14 = icmp sge i32 %12, %14, !dbg !153
-   br i1 %cmp14, label %if.then19, label %lor.lhs.false15, !dbg !154
- 
- lor.lhs.false15:                                  ; preds = %lor.lhs.false13
-   %15 = load i32, i32* %v, align 4, !dbg !155
-   %cmp16 = icmp slt i32 %15, 0, !dbg !156
-   br i1 %cmp16, label %if.then19, label %lor.lhs.false17, !dbg !157
- 
- lor.lhs.false17:                                  ; preds = %lor.lhs.false15
-   %16 = load i32, i32* %v, align 4, !dbg !158
-   %17 = load i32*, i32** %V.addr, align 8, !dbg !159
-   %18 = load i32, i32* %17, align 4, !dbg !160
-   %cmp18 = icmp sge i32 %16, %18, !dbg !161
-   br i1 %cmp18, label %if.then19, label %if.end20, !dbg !162
- 
- if.then19:                                        ; preds = %lor.lhs.false17, %lor.lhs.false15, %lor.lhs.false13, %if.end11
-   store i32 -1, i32* %retval, align 4, !dbg !163
-   br label %return, !dbg !163
- 
- if.end20:                                         ; preds = %lor.lhs.false17
-   %19 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !164
-   %20 = load i32, i32* %u, align 4, !dbg !165
-   %21 = load i32, i32* %v, align 4, !dbg !166
-   %22 = load i32, i32* %w, align 4, !dbg !167
-   call void @add_edge([100 x i32]* noundef %19, i32 noundef %20, i32 noundef %21, i32 noundef %22, i32 noundef 1), !dbg !168
-   br label %for.inc, !dbg !169
- 
- for.inc:                                          ; preds = %if.end20
-   %23 = load i32, i32* %i, align 4, !dbg !170
-   %inc = add nsw i32 %23, 1, !dbg !170
-   store i32 %inc, i32* %i, align 4, !dbg !170
-   br label %for.cond, !dbg !171, !llvm.loop !172
- 
- for.end:                                          ; preds = %for.cond
? -- - ^                                          --           ^ --- ^^
+ read_edge:                                        ; preds = %loop
?   ^ +++++                                                    ^  ^
+   %scanf2 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.ddd, i64 0, i64 0), i32* nonnull %u, i32* nonnull %v, i32* nonnull %w)
+   %cmp.scanf2 = icmp eq i32 %scanf2, 3
+   br i1 %cmp.scanf2, label %validate_edge, label %err
-   %24 = load i32*, i32** %src.addr, align 8, !dbg !174
-   %call21 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %24), !dbg !176
-   %cmp22 = icmp ne i32 %call21, 1, !dbg !177
-   br i1 %cmp22, label %if.then23, label %if.end24, !dbg !178
  
+ validate_edge:                                    ; preds = %read_edge
+   %u.val = load i32, i32* %u, align 4
+   %v.val = load i32, i32* %v, align 4
+   %n.reload1 = load i32, i32* %n_ptr, align 4
+   %u.ge0 = icmp sgt i32 %u.val, -1
+   %u.lt.n = icmp slt i32 %u.val, %n.reload1
+   %u.ok = and i1 %u.ge0, %u.lt.n
+   %v.ge0 = icmp sgt i32 %v.val, -1
+   %v.lt.n = icmp slt i32 %v.val, %n.reload1
+   %v.ok = and i1 %v.ge0, %v.lt.n
+   %uv.ok = and i1 %u.ok, %v.ok
+   br i1 %uv.ok, label %do_add, label %err
+ 
+ do_add:                                           ; preds = %validate_edge
+   %w.val = load i32, i32* %w, align 4
+   call void @add_edge(i32* %2, i32 %u.val, i32 %v.val, i32 %w.val, i32 1)
+   %i.next = add nuw nsw i32 %i.0, 1
+   br label %loop
+ 
- if.then23:                                        ; preds = %for.end
? ^ - - ^^^                                       --           ^ ^^^^^
+ after_edges:                                      ; preds = %loop
? ^   ^^^^^^^                                                  ^ ^^
-   store i32 -1, i32* %retval, align 4, !dbg !179
-   br label %return, !dbg !179
+   %scanf3 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.d, i64 0, i64 0), i32* %src_ptr)
+   %cmp.scanf3 = icmp eq i32 %scanf3, 1
+   br i1 %cmp.scanf3, label %validate_src, label %err
  
- if.end24:                                         ; preds = %for.end
?  ^^ ^^^^                                      ----            ^ ^ -
+ validate_src:                                     ; preds = %after_edges
? +++ ^^^ ^^^^                                                 + ^^ ^  +++
-   %25 = load i32*, i32** %src.addr, align 8, !dbg !180
-   %26 = load i32, i32* %25, align 4, !dbg !182
-   %cmp25 = icmp slt i32 %26, 0, !dbg !183
-   br i1 %cmp25, label %if.then28, label %lor.lhs.false26, !dbg !184
+   %src.val = load i32, i32* %src_ptr, align 4
+   %n.reload2 = load i32, i32* %n_ptr, align 4
+   %src.ge0 = icmp sgt i32 %src.val, -1
+   %src.lt.n = icmp slt i32 %src.val, %n.reload2
+   %src.ok = and i1 %src.ge0, %src.lt.n
+   br i1 %src.ok, label %exit, label %err
  
+ err:                                              ; preds = %validate_src, %after_edges, %validate_edge, %read_edge, %check_nm, %entry
+   br label %exit
- lor.lhs.false26:                                  ; preds = %if.end24
-   %27 = load i32*, i32** %src.addr, align 8, !dbg !185
-   %28 = load i32, i32* %27, align 4, !dbg !186
-   %29 = load i32*, i32** %V.addr, align 8, !dbg !187
-   %30 = load i32, i32* %29, align 4, !dbg !188
-   %cmp27 = icmp sge i32 %28, %30, !dbg !189
-   br i1 %cmp27, label %if.then28, label %if.end29, !dbg !190
  
- if.then28:                                        ; preds = %lor.lhs.false26, %if.end24
-   store i32 -1, i32* %retval, align 4, !dbg !191
-   br label %return, !dbg !191
- 
- if.end29:                                         ; preds = %lor.lhs.false26
?  ^^^^^^^                                                     ^^^^^^^^^    ^^
+ exit:                                             ; preds = %validate_src, %err
? ++ ^                                          ++++           ^  ++++++ +++++ ^^
+   %ret.0 = phi i32 [ -1, %err ], [ 0, %validate_src ]
+   ret i32 %ret.0
-   store i32 0, i32* %retval, align 4, !dbg !192
-   br label %return, !dbg !192
- 
- return:                                           ; preds = %if.end29, %if.then28, %if.then23, %if.then19, %if.then10, %if.then5, %if.then
-   %31 = load i32, i32* %retval, align 4, !dbg !193
-   ret i32 %31, !dbg !193
  }
  
- declare i32 @__isoc99_scanf(i8* noundef, ...) #2
?                                --------      ---
+ declare i32 @__isoc99_scanf(i8*, ...)
  
+ define i32 @min_index(i32* %arr, i32* %flag, i32 %n) {
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @min_index(i32* noundef %dist, i32* noundef %visited, i32 noundef %V) #0 !dbg !194 {
  entry:
+   br label %loop
-   %dist.addr = alloca i32*, align 8
-   %visited.addr = alloca i32*, align 8
-   %V.addr = alloca i32, align 4
-   %u = alloca i32, align 4
-   %min = alloca i32, align 4
-   %i = alloca i32, align 4
-   store i32* %dist, i32** %dist.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %dist.addr, metadata !199, metadata !DIExpression()), !dbg !200
-   store i32* %visited, i32** %visited.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %visited.addr, metadata !201, metadata !DIExpression()), !dbg !202
-   store i32 %V, i32* %V.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %V.addr, metadata !203, metadata !DIExpression()), !dbg !204
-   call void @llvm.dbg.declare(metadata i32* %u, metadata !205, metadata !DIExpression()), !dbg !206
-   store i32 -1, i32* %u, align 4, !dbg !206
-   call void @llvm.dbg.declare(metadata i32* %min, metadata !207, metadata !DIExpression()), !dbg !208
-   store i32 2147483647, i32* %min, align 4, !dbg !208
-   call void @llvm.dbg.declare(metadata i32* %i, metadata !209, metadata !DIExpression()), !dbg !211
-   store i32 0, i32* %i, align 4, !dbg !211
-   br label %for.cond, !dbg !212
  
- for.cond:                                         ; preds = %for.inc, %entry
? ^ --- ^^                                                     ^^^^^^
+ loop:                                             ; preds = %latch, %entry
? ^  ^                                          ++++           ^^^ +
-   %0 = load i32, i32* %i, align 4, !dbg !213
-   %1 = load i32, i32* %V.addr, align 4, !dbg !215
+   %i = phi i32 [ 0, %entry ], [ %i.next, %latch ]
+   %minval = phi i32 [ 2147483647, %entry ], [ %minval.next, %latch ]
+   %minidx = phi i32 [ -1, %entry ], [ %minidx.next, %latch ]
-   %cmp = icmp slt i32 %0, %1, !dbg !216
?                        ^   ^^^^^^^^^^^^
+   %cmp = icmp slt i32 %i, %n
?                        ^   ^
-   br i1 %cmp, label %for.body, label %for.end, !dbg !217
+   br i1 %cmp, label %check_flag, label %exit
  
- for.body:                                         ; preds = %for.cond
?  ^^^^^^^                                        --           ^ --- ^^
+ check_flag:                                       ; preds = %loop
? ++++++ ^^^                                                   ^  ^
-   %2 = load i32*, i32** %visited.addr, align 8, !dbg !218
-   %3 = load i32, i32* %i, align 4, !dbg !221
-   %idxprom = sext i32 %3 to i64, !dbg !218
+   %idx.ext = sext i32 %i to i64
+   %flag.ptr = getelementptr inbounds i32, i32* %flag, i64 %idx.ext
+   %flag.val = load i32, i32* %flag.ptr, align 4
+   %iszero = icmp eq i32 %flag.val, 0
+   br i1 %iszero, label %maybe_update, label %latch
+ 
+ maybe_update:                                     ; preds = %check_flag
-   %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !218
?       ^^^^^                                     ^          ^^^^^^^^^^^^^^^
+   %arr.ptr = getelementptr inbounds i32, i32* %arr, i64 %idx.ext
?       ^^^^                                     ^^^          ^^^^
-   %4 = load i32, i32* %arrayidx, align 4, !dbg !218
-   %tobool = icmp ne i32 %4, 0, !dbg !218
-   br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !222
+   %arr.val = load i32, i32* %arr.ptr, align 4
+   %lt = icmp slt i32 %arr.val, %minval
+   %spec.select = select i1 %lt, i32 %arr.val, i32 %minval
+   %spec.select1 = select i1 %lt, i32 %i, i32 %minidx
+   br label %latch
  
+ latch:                                            ; preds = %maybe_update, %check_flag
+   %minval.next = phi i32 [ %minval, %check_flag ], [ %spec.select, %maybe_update ]
+   %minidx.next = phi i32 [ %minidx, %check_flag ], [ %spec.select1, %maybe_update ]
+   %i.next = add i32 %i, 1
+   br label %loop
- land.lhs.true:                                    ; preds = %for.body
-   %5 = load i32*, i32** %dist.addr, align 8, !dbg !223
-   %6 = load i32, i32* %i, align 4, !dbg !224
-   %idxprom1 = sext i32 %6 to i64, !dbg !223
-   %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1, !dbg !223
-   %7 = load i32, i32* %arrayidx2, align 4, !dbg !223
-   %8 = load i32, i32* %min, align 4, !dbg !225
-   %cmp3 = icmp slt i32 %7, %8, !dbg !226
-   br i1 %cmp3, label %if.then, label %if.end, !dbg !227
  
- if.then:                                          ; preds = %land.lhs.true
-   %9 = load i32*, i32** %dist.addr, align 8, !dbg !228
-   %10 = load i32, i32* %i, align 4, !dbg !230
-   %idxprom4 = sext i32 %10 to i64, !dbg !228
-   %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4, !dbg !228
-   %11 = load i32, i32* %arrayidx5, align 4, !dbg !228
-   store i32 %11, i32* %min, align 4, !dbg !231
-   %12 = load i32, i32* %i, align 4, !dbg !232
-   store i32 %12, i32* %u, align 4, !dbg !233
-   br label %if.end, !dbg !234
- 
- if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
-   br label %for.inc, !dbg !235
- 
- for.inc:                                          ; preds = %if.end
-   %13 = load i32, i32* %i, align 4, !dbg !236
-   %inc = add nsw i32 %13, 1, !dbg !236
-   store i32 %inc, i32* %i, align 4, !dbg !236
-   br label %for.cond, !dbg !237, !llvm.loop !238
- 
- for.end:                                          ; preds = %for.cond
? ---- ^^                                                      ^ --- ^^
+ exit:                                             ; preds = %loop
?  ^^^                                           +++           ^  ^
+   ret i32 %minidx
-   %14 = load i32, i32* %u, align 4, !dbg !240
-   ret i32 %14, !dbg !241
  }
  
+ define void @dijkstra([100 x i32]* %graph, i32 %n, i32 %src, i32* %dist) {
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @dijkstra([100 x i32]* noundef %graph, i32 noundef %V, i32 noundef %src, i32* noundef %out_dist) #0 !dbg !242 {
  entry:
-   %graph.addr = alloca [100 x i32]*, align 8
-   %V.addr = alloca i32, align 4
-   %src.addr = alloca i32, align 4
-   %out_dist.addr = alloca i32*, align 8
-   %visited = alloca [100 x i32], align 16
?    -- ----
+   %s = alloca [100 x i32], align 16
-   %i = alloca i32, align 4
-   %iter = alloca i32, align 4
-   %u = alloca i32, align 4
-   %v = alloca i32, align 4
-   %nd = alloca i32, align 4
-   store [100 x i32]* %graph, [100 x i32]** %graph.addr, align 8
-   call void @llvm.dbg.declare(metadata [100 x i32]** %graph.addr, metadata !245, metadata !DIExpression()), !dbg !246
-   store i32 %V, i32* %V.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %V.addr, metadata !247, metadata !DIExpression()), !dbg !248
-   store i32 %src, i32* %src.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !249, metadata !DIExpression()), !dbg !250
-   store i32* %out_dist, i32** %out_dist.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %out_dist.addr, metadata !251, metadata !DIExpression()), !dbg !252
-   call void @llvm.dbg.declare(metadata [100 x i32]* %visited, metadata !253, metadata !DIExpression()), !dbg !254
-   %0 = bitcast [100 x i32]* %visited to i8*, !dbg !254
?    ^                         -- ----       -----------
+   %s.i8 = bitcast [100 x i32]* %s to i8*
?    ^^^^
+   call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(400) %s.i8, i8 0, i64 400, i1 false)
+   br label %init
-   call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 400, i1 false), !dbg !254
-   call void @llvm.dbg.declare(metadata i32* %i, metadata !255, metadata !DIExpression()), !dbg !257
-   store i32 0, i32* %i, align 4, !dbg !257
-   br label %for.cond, !dbg !258
  
- for.cond:                                         ; preds = %for.inc, %entry
? ^^^^^^ ^                                                     ----  ^
+ init:                                             ; preds = %init.body, %entry
? ^ ^^                                          ++++             ^^^^^^^
+   %i = phi i32 [ 0, %entry ], [ %i.next, %init.body ]
+   %cmp.init = icmp slt i32 %i, %n
+   br i1 %cmp.init, label %init.body, label %after.init
-   %1 = load i32, i32* %i, align 4, !dbg !259
-   %2 = load i32, i32* %V.addr, align 4, !dbg !261
-   %cmp = icmp slt i32 %1, %2, !dbg !262
-   br i1 %cmp, label %for.body, label %for.end, !dbg !263
  
+ init.body:                                        ; preds = %init
+   %i.sext = sext i32 %i to i64
+   %dist.i.ptr = getelementptr i32, i32* %dist, i64 %i.sext
+   store i32 2147483647, i32* %dist.i.ptr, align 4
+   %i.next = add i32 %i, 1
+   br label %init
+ 
+ after.init:                                       ; preds = %init
+   %src.sext = sext i32 %src to i64
+   %dist.src.ptr = getelementptr i32, i32* %dist, i64 %src.sext
+   store i32 0, i32* %dist.src.ptr, align 4
+   br label %outer
+ 
+ outer:                                            ; preds = %outer.latch, %after.init
+   %j = phi i32 [ 0, %after.init ], [ %j.next, %outer.latch ]
+   %n.minus1 = add i32 %n, -1
+   %cmp.outer = icmp slt i32 %j, %n.minus1
+   br i1 %cmp.outer, label %outer.body, label %done
+ 
- for.body:                                         ; preds = %for.cond
? -                                               --           -  -----
+ outer.body:                                       ; preds = %outer
?  +++                                                          +++
-   %3 = load i32*, i32** %out_dist.addr, align 8, !dbg !264
-   %4 = load i32, i32* %i, align 4, !dbg !265
-   %idxprom = sext i32 %4 to i64, !dbg !264
-   %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !264
-   store i32 2147483647, i32* %arrayidx, align 4, !dbg !266
-   br label %for.inc, !dbg !264
- 
- for.inc:                                          ; preds = %for.body
-   %5 = load i32, i32* %i, align 4, !dbg !267
-   %inc = add nsw i32 %5, 1, !dbg !267
-   store i32 %inc, i32* %i, align 4, !dbg !267
-   br label %for.cond, !dbg !268, !llvm.loop !269
- 
- for.end:                                          ; preds = %for.cond
-   %6 = load i32*, i32** %out_dist.addr, align 8, !dbg !271
-   %7 = load i32, i32* %src.addr, align 4, !dbg !272
-   %idxprom1 = sext i32 %7 to i64, !dbg !271
-   %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom1, !dbg !271
-   store i32 0, i32* %arrayidx2, align 4, !dbg !273
-   call void @llvm.dbg.declare(metadata i32* %iter, metadata !274, metadata !DIExpression()), !dbg !276
-   store i32 0, i32* %iter, align 4, !dbg !276
-   br label %for.cond3, !dbg !277
- 
- for.cond3:                                        ; preds = %for.inc41, %for.end
-   %8 = load i32, i32* %iter, align 4, !dbg !278
-   %9 = load i32, i32* %V.addr, align 4, !dbg !280
-   %sub = sub nsw i32 %9, 1, !dbg !281
-   %cmp4 = icmp slt i32 %8, %sub, !dbg !282
-   br i1 %cmp4, label %for.body5, label %for.end43, !dbg !283
- 
- for.body5:                                        ; preds = %for.cond3
-   call void @llvm.dbg.declare(metadata i32* %u, metadata !284, metadata !DIExpression()), !dbg !286
-   %10 = load i32*, i32** %out_dist.addr, align 8, !dbg !287
-   %arraydecay = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 0, !dbg !288
?     ^^^^^ ---                                                     -- ----              -----------
+   %s.base = getelementptr inbounds [100 x i32], [100 x i32]* %s, i64 0, i64 0
?    +++ ^
+   %u = call i32 @min_index(i32* %dist, i32* nonnull %s.base, i32 %n)
+   %u.is.neg1 = icmp eq i32 %u, -1
+   br i1 %u.is.neg1, label %done, label %have.u
-   %11 = load i32, i32* %V.addr, align 4, !dbg !289
-   %call = call i32 @min_index(i32* noundef %10, i32* noundef %arraydecay, i32 noundef %11), !dbg !290
-   store i32 %call, i32* %u, align 4, !dbg !286
-   %12 = load i32, i32* %u, align 4, !dbg !291
-   %cmp6 = icmp eq i32 %12, -1, !dbg !293
-   br i1 %cmp6, label %if.then, label %if.end, !dbg !294
  
- if.then:                                          ; preds = %for.body5
-   br label %for.end43, !dbg !295
- 
- if.end:                                           ; preds = %for.body5
? ^^ ^^^                                                       -       -
+ have.u:                                           ; preds = %outer.body
? ^^^^ ^                                                        +++
+   %u.sext = sext i32 %u to i64
+   %s.u.ptr = getelementptr [100 x i32], [100 x i32]* %s, i64 0, i64 %u.sext
+   store i32 1, i32* %s.u.ptr, align 4
+   br label %inner
-   %13 = load i32, i32* %u, align 4, !dbg !296
-   %idxprom7 = sext i32 %13 to i64, !dbg !297
-   %arrayidx8 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom7, !dbg !297
-   store i32 1, i32* %arrayidx8, align 4, !dbg !298
-   call void @llvm.dbg.declare(metadata i32* %v, metadata !299, metadata !DIExpression()), !dbg !301
-   store i32 0, i32* %v, align 4, !dbg !301
-   br label %for.cond9, !dbg !302
  
- for.cond9:                                        ; preds = %for.inc38, %if.end
? ^^ ------                                                    ^^  ^^ ^^   ^^ ^^^
+ inner:                                            ; preds = %inner.latch, %have.u
? ^^^^                                          ++++           ^^^^  ^^^ ^   ^^^^ ^
+   %v = phi i32 [ 0, %have.u ], [ %v.next, %inner.latch ]
+   %cmp.v = icmp slt i32 %v, %n
+   br i1 %cmp.v, label %inner.body, label %outer.latch
-   %14 = load i32, i32* %v, align 4, !dbg !303
-   %15 = load i32, i32* %V.addr, align 4, !dbg !305
-   %cmp10 = icmp slt i32 %14, %15, !dbg !306
-   br i1 %cmp10, label %for.body11, label %for.end40, !dbg !307
  
- for.body11:                                       ; preds = %for.cond9
? ^^      --                                                   ^^ ------
+ inner.body:                                       ; preds = %inner
? ^^^^                                                         ^^^^
-   %16 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !308
-   %17 = load i32, i32* %u, align 4, !dbg !311
-   %idxprom12 = sext i32 %17 to i64, !dbg !308
-   %arrayidx13 = getelementptr inbounds [100 x i32], [100 x i32]* %16, i64 %idxprom12, !dbg !308
-   %18 = load i32, i32* %v, align 4, !dbg !312
-   %idxprom14 = sext i32 %18 to i64, !dbg !308
-   %arrayidx15 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx13, i64 0, i64 %idxprom14, !dbg !308
-   %19 = load i32, i32* %arrayidx15, align 4, !dbg !308
-   %tobool = icmp ne i32 %19, 0, !dbg !308
-   br i1 %tobool, label %land.lhs.true, label %if.end37, !dbg !313
+   %v.sext = sext i32 %v to i64
+   %cell.ptr = getelementptr [100 x i32], [100 x i32]* %graph, i64 %u.sext, i64 %v.sext
+   %w = load i32, i32* %cell.ptr, align 4
+   %edge.nz = icmp ne i32 %w, 0
+   %s.v.ptr = getelementptr [100 x i32], [100 x i32]* %s, i64 0, i64 %v.sext
+   %s.v.val = load i32, i32* %s.v.ptr, align 4
+   %s.v.zero = icmp eq i32 %s.v.val, 0
+   %dist.u.ptr = getelementptr i32, i32* %dist, i64 %u.sext
+   %dist.u = load i32, i32* %dist.u.ptr, align 4
+   %dist.u.notinf = icmp ne i32 %dist.u, 2147483647
+   %c1 = and i1 %edge.nz, %s.v.zero
+   %guard = and i1 %c1, %dist.u.notinf
+   br i1 %guard, label %relax, label %inner.latch
  
- land.lhs.true:                                    ; preds = %for.body11
?   ^^^^^^^^^^^                                                ^^      --
+ relax:                                            ; preds = %inner.body
? ++  ^                                     ++++++++           ^^^^
+   %sum = add nsw i32 %dist.u, %w
+   %dist.v.ptr = getelementptr i32, i32* %dist, i64 %v.sext
+   %dist.v = load i32, i32* %dist.v.ptr, align 4
+   %lt.cmp = icmp slt i32 %sum, %dist.v
+   br i1 %lt.cmp, label %update, label %inner.latch
-   %20 = load i32, i32* %v, align 4, !dbg !314
-   %idxprom16 = sext i32 %20 to i64, !dbg !315
-   %arrayidx17 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom16, !dbg !315
-   %21 = load i32, i32* %arrayidx17, align 4, !dbg !315
-   %tobool18 = icmp ne i32 %21, 0, !dbg !315
-   br i1 %tobool18, label %if.end37, label %land.lhs.true19, !dbg !316
  
- land.lhs.true19:                                  ; preds = %land.lhs.true
-   %22 = load i32*, i32** %out_dist.addr, align 8, !dbg !317
-   %23 = load i32, i32* %u, align 4, !dbg !318
-   %idxprom20 = sext i32 %23 to i64, !dbg !317
-   %arrayidx21 = getelementptr inbounds i32, i32* %22, i64 %idxprom20, !dbg !317
-   %24 = load i32, i32* %arrayidx21, align 4, !dbg !317
-   %cmp22 = icmp ne i32 %24, 2147483647, !dbg !319
-   br i1 %cmp22, label %if.then23, label %if.end37, !dbg !320
- 
- if.then23:                                        ; preds = %land.lhs.true19
-   call void @llvm.dbg.declare(metadata i32* %nd, metadata !321, metadata !DIExpression()), !dbg !323
-   %25 = load i32*, i32** %out_dist.addr, align 8, !dbg !324
-   %26 = load i32, i32* %u, align 4, !dbg !325
-   %idxprom24 = sext i32 %26 to i64, !dbg !324
-   %arrayidx25 = getelementptr inbounds i32, i32* %25, i64 %idxprom24, !dbg !324
-   %27 = load i32, i32* %arrayidx25, align 4, !dbg !324
-   %28 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !326
-   %29 = load i32, i32* %u, align 4, !dbg !327
-   %idxprom26 = sext i32 %29 to i64, !dbg !326
-   %arrayidx27 = getelementptr inbounds [100 x i32], [100 x i32]* %28, i64 %idxprom26, !dbg !326
-   %30 = load i32, i32* %v, align 4, !dbg !328
-   %idxprom28 = sext i32 %30 to i64, !dbg !326
-   %arrayidx29 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx27, i64 0, i64 %idxprom28, !dbg !326
-   %31 = load i32, i32* %arrayidx29, align 4, !dbg !326
-   %add = add nsw i32 %27, %31, !dbg !329
-   store i32 %add, i32* %nd, align 4, !dbg !323
-   %32 = load i32, i32* %nd, align 4, !dbg !330
-   %33 = load i32*, i32** %out_dist.addr, align 8, !dbg !332
-   %34 = load i32, i32* %v, align 4, !dbg !333
-   %idxprom30 = sext i32 %34 to i64, !dbg !332
-   %arrayidx31 = getelementptr inbounds i32, i32* %33, i64 %idxprom30, !dbg !332
-   %35 = load i32, i32* %arrayidx31, align 4, !dbg !332
-   %cmp32 = icmp slt i32 %32, %35, !dbg !334
-   br i1 %cmp32, label %if.then33, label %if.end36, !dbg !335
- 
- if.then33:                                        ; preds = %if.then23
? ^^^ - ---                                                    ^^^^^ ^^^
+ update:                                           ; preds = %relax
? ^^^^                                           +++           ^ ^^^
+   store i32 %sum, i32* %dist.v.ptr, align 4
+   br label %inner.latch
-   %36 = load i32, i32* %nd, align 4, !dbg !336
-   %37 = load i32*, i32** %out_dist.addr, align 8, !dbg !337
-   %38 = load i32, i32* %v, align 4, !dbg !338
-   %idxprom34 = sext i32 %38 to i64, !dbg !337
-   %arrayidx35 = getelementptr inbounds i32, i32* %37, i64 %idxprom34, !dbg !337
-   store i32 %36, i32* %arrayidx35, align 4, !dbg !339
-   br label %if.end36, !dbg !337
  
- if.end36:                                         ; preds = %if.then33, %if.then23
-   br label %if.end37, !dbg !340
+ inner.latch:                                      ; preds = %update, %relax, %inner.body
+   %v.next = add i32 %v, 1
+   br label %inner
  
- if.end37:                                         ; preds = %if.end36, %land.lhs.true19, %land.lhs.true, %for.body11
-   br label %for.inc38, !dbg !341
- 
- for.inc38:                                        ; preds = %if.end37
? -   ^^ ^^                                       --            ^^ ^^^^
+ outer.latch:                                      ; preds = %inner
?  +++  ^^^ ^                                                   ^^ ^
+   %j.next = add i32 %j, 1
+   br label %outer
-   %39 = load i32, i32* %v, align 4, !dbg !342
-   %inc39 = add nsw i32 %39, 1, !dbg !342
-   store i32 %inc39, i32* %v, align 4, !dbg !342
-   br label %for.cond9, !dbg !343, !llvm.loop !344
  
+ done:                                             ; preds = %outer.body, %outer
+   ret void
+ }
+ 
+ declare i8* @memset(i8*, i32, i64)
+ 
+ define void @print_distances(i32* %dist, i32 %n) {
+ entry:
+   br label %loop
+ 
+ loop:                                             ; preds = %inc, %entry
+   %i = phi i32 [ 0, %entry ], [ %i.next, %inc ]
+   %cmp = icmp slt i32 %i, %n
+   br i1 %cmp, label %body, label %exit
+ 
- for.end40:                                        ; preds = %for.cond9
? ^ ---- ^^                                                    ^ --- ^^^
+ body:                                             ; preds = %loop
? ^  ^                                         +++++           ^  ^
-   br label %for.inc41, !dbg !346
+   %idx.ext = zext i32 %i to i64
+   %ptr = getelementptr inbounds i32, i32* %dist, i64 %idx.ext
+   %val = load i32, i32* %ptr, align 4
+   %isinf = icmp eq i32 %val, 2147483647
+   br i1 %isinf, label %print_inf, label %print_val
  
- for.inc41:                                        ; preds = %for.end40
? ^^ -  ^^^                                                    ^ ---- ^^
+ print_inf:                                        ; preds = %body
? ^   ^^^^^                                                    ^  ^
+   %call1 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str_inf, i64 0, i64 0), i32 %i)
+   br label %inc
-   %40 = load i32, i32* %iter, align 4, !dbg !347
-   %inc42 = add nsw i32 %40, 1, !dbg !347
-   store i32 %inc42, i32* %iter, align 4, !dbg !347
-   br label %for.cond3, !dbg !348, !llvm.loop !349
  
- for.end43:                                        ; preds = %if.then, %for.cond3
? ^^ ^^ ^^^                                                    ^^^^^^^^^^^ ----- ^
+ print_val:                                        ; preds = %body
? ^ ^ ^^^^^                                                    ^  ^
-   ret void, !dbg !351
+   %call2 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @.str_val, i64 0, i64 0), i32 %i, i32 %val)
+   br label %inc
+ 
+ inc:                                              ; preds = %print_val, %print_inf
+   %i.next = add nuw nsw i32 %i, 1
+   br label %loop
+ 
+ exit:                                             ; preds = %loop
+   ret void
  }
+ 
+ declare i32 @printf(i8*, ...)
  
  ; Function Attrs: argmemonly nofree nounwind willreturn writeonly
- declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3
?                                                                                  ^
+ declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0
?                                                                                  ^
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @print_distances(i32* noundef %dist, i32 noundef %V) #0 !dbg !352 {
- entry:
-   %dist.addr = alloca i32*, align 8
-   %V.addr = alloca i32, align 4
-   %i = alloca i32, align 4
-   store i32* %dist, i32** %dist.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %dist.addr, metadata !355, metadata !DIExpression()), !dbg !356
-   store i32 %V, i32* %V.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %V.addr, metadata !357, metadata !DIExpression()), !dbg !358
-   call void @llvm.dbg.declare(metadata i32* %i, metadata !359, metadata !DIExpression()), !dbg !361
-   store i32 0, i32* %i, align 4, !dbg !361
-   br label %for.cond, !dbg !362
- 
- for.cond:                                         ; preds = %for.inc, %entry
-   %0 = load i32, i32* %i, align 4, !dbg !363
-   %1 = load i32, i32* %V.addr, align 4, !dbg !365
-   %cmp = icmp slt i32 %0, %1, !dbg !366
-   br i1 %cmp, label %for.body, label %for.end, !dbg !367
- 
- for.body:                                         ; preds = %for.cond
-   %2 = load i32*, i32** %dist.addr, align 8, !dbg !368
-   %3 = load i32, i32* %i, align 4, !dbg !371
-   %idxprom = sext i32 %3 to i64, !dbg !368
-   %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !368
-   %4 = load i32, i32* %arrayidx, align 4, !dbg !368
-   %cmp1 = icmp eq i32 %4, 2147483647, !dbg !372
-   br i1 %cmp1, label %if.then, label %if.else, !dbg !373
- 
- if.then:                                          ; preds = %for.body
-   %5 = load i32, i32* %i, align 4, !dbg !374
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 noundef %5), !dbg !375
-   br label %if.end, !dbg !375
- 
- if.else:                                          ; preds = %for.body
-   %6 = load i32, i32* %i, align 4, !dbg !376
-   %7 = load i32*, i32** %dist.addr, align 8, !dbg !377
-   %8 = load i32, i32* %i, align 4, !dbg !378
-   %idxprom2 = sext i32 %8 to i64, !dbg !377
-   %arrayidx3 = getelementptr inbounds i32, i32* %7, i64 %idxprom2, !dbg !377
-   %9 = load i32, i32* %arrayidx3, align 4, !dbg !377
-   %call4 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 noundef %6, i32 noundef %9), !dbg !379
-   br label %if.end
- 
- if.end:                                           ; preds = %if.else, %if.then
-   br label %for.inc, !dbg !380
- 
- for.inc:                                          ; preds = %if.end
-   %10 = load i32, i32* %i, align 4, !dbg !381
-   %inc = add nsw i32 %10, 1, !dbg !381
-   store i32 %inc, i32* %i, align 4, !dbg !381
-   br label %for.cond, !dbg !382, !llvm.loop !383
- 
- for.end:                                          ; preds = %for.cond
-   ret void, !dbg !385
- }
- 
- declare i32 @printf(i8* noundef, ...) #2
- 
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !386 {
- entry:
-   %retval = alloca i32, align 4
-   %V = alloca i32, align 4
-   %src = alloca i32, align 4
-   %graph = alloca [100 x [100 x i32]], align 16
-   %dist = alloca [100 x i32], align 16
-   store i32 0, i32* %retval, align 4
-   call void @llvm.dbg.declare(metadata i32* %V, metadata !389, metadata !DIExpression()), !dbg !390
-   call void @llvm.dbg.declare(metadata i32* %src, metadata !391, metadata !DIExpression()), !dbg !392
-   call void @llvm.dbg.declare(metadata [100 x [100 x i32]]* %graph, metadata !393, metadata !DIExpression()), !dbg !396
-   call void @llvm.dbg.declare(metadata [100 x i32]* %dist, metadata !397, metadata !DIExpression()), !dbg !398
-   %arraydecay = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %graph, i64 0, i64 0, !dbg !399
-   %call = call i32 @read_graph([100 x i32]* noundef %arraydecay, i32* noundef %V, i32* noundef %src), !dbg !401
-   %cmp = icmp ne i32 %call, 0, !dbg !402
-   br i1 %cmp, label %if.then, label %if.end, !dbg !403
- 
- if.then:                                          ; preds = %entry
-   %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !404
-   %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %0, i8* noundef getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0)), !dbg !406
-   store i32 1, i32* %retval, align 4, !dbg !407
-   br label %return, !dbg !407
- 
- if.end:                                           ; preds = %entry
-   %arraydecay2 = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %graph, i64 0, i64 0, !dbg !408
-   %1 = load i32, i32* %V, align 4, !dbg !409
-   %2 = load i32, i32* %src, align 4, !dbg !410
-   %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 0, !dbg !411
-   call void @dijkstra([100 x i32]* noundef %arraydecay2, i32 noundef %1, i32 noundef %2, i32* noundef %arraydecay3), !dbg !412
-   %arraydecay4 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 0, !dbg !413
-   %3 = load i32, i32* %V, align 4, !dbg !414
-   call void @print_distances(i32* noundef %arraydecay4, i32 noundef %3), !dbg !415
-   store i32 0, i32* %retval, align 4, !dbg !416
-   br label %return, !dbg !416
- 
- return:                                           ; preds = %if.end, %if.then
-   %4 = load i32, i32* %retval, align 4, !dbg !417
-   ret i32 %4, !dbg !417
- }
- 
- declare i32 @fprintf(%struct._IO_FILE* noundef, i8* noundef, ...) #2
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
?             ^
+ attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
?             ^
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "dijkstra_modular.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "47bf6ecccd84048d194510cb254a0651")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !10 = distinct !DISubprogram(name: "init_graph", scope: !1, file: !1, line: 11, type: !11, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !11 = !DISubroutineType(types: !12)
- !12 = !{null, !13, !15}
- !13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
- !14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 3200, elements: !16)
- !15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !16 = !{!17}
- !17 = !DISubrange(count: 100)
- !18 = !{}
- !19 = !DILocalVariable(name: "graph", arg: 1, scope: !10, file: !1, line: 11, type: !13)
- !20 = !DILocation(line: 11, column: 21, scope: !10)
- !21 = !DILocalVariable(name: "V", arg: 2, scope: !10, file: !1, line: 11, type: !15)
- !22 = !DILocation(line: 11, column: 42, scope: !10)
- !23 = !DILocalVariable(name: "i", scope: !24, file: !1, line: 12, type: !15)
- !24 = distinct !DILexicalBlock(scope: !10, file: !1, line: 12, column: 5)
- !25 = !DILocation(line: 12, column: 14, scope: !24)
- !26 = !DILocation(line: 12, column: 10, scope: !24)
- !27 = !DILocation(line: 12, column: 21, scope: !28)
- !28 = distinct !DILexicalBlock(scope: !24, file: !1, line: 12, column: 5)
- !29 = !DILocation(line: 12, column: 25, scope: !28)
- !30 = !DILocation(line: 12, column: 23, scope: !28)
- !31 = !DILocation(line: 12, column: 5, scope: !24)
- !32 = !DILocalVariable(name: "j", scope: !33, file: !1, line: 13, type: !15)
- !33 = distinct !DILexicalBlock(scope: !28, file: !1, line: 13, column: 9)
- !34 = !DILocation(line: 13, column: 18, scope: !33)
- !35 = !DILocation(line: 13, column: 14, scope: !33)
- !36 = !DILocation(line: 13, column: 25, scope: !37)
- !37 = distinct !DILexicalBlock(scope: !33, file: !1, line: 13, column: 9)
- !38 = !DILocation(line: 13, column: 29, scope: !37)
- !39 = !DILocation(line: 13, column: 27, scope: !37)
- !40 = !DILocation(line: 13, column: 9, scope: !33)
- !41 = !DILocation(line: 14, column: 13, scope: !37)
- !42 = !DILocation(line: 14, column: 19, scope: !37)
- !43 = !DILocation(line: 14, column: 22, scope: !37)
- !44 = !DILocation(line: 14, column: 25, scope: !37)
- !45 = !DILocation(line: 13, column: 32, scope: !37)
- !46 = !DILocation(line: 13, column: 9, scope: !37)
- !47 = distinct !{!47, !40, !48, !49}
- !48 = !DILocation(line: 14, column: 27, scope: !33)
- !49 = !{!"llvm.loop.mustprogress"}
- !50 = !DILocation(line: 12, column: 28, scope: !28)
- !51 = !DILocation(line: 12, column: 5, scope: !28)
- !52 = distinct !{!52, !31, !53, !49}
- !53 = !DILocation(line: 14, column: 27, scope: !24)
- !54 = !DILocation(line: 15, column: 1, scope: !10)
- !55 = distinct !DISubprogram(name: "add_edge", scope: !1, file: !1, line: 17, type: !56, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !56 = !DISubroutineType(types: !57)
- !57 = !{null, !13, !15, !15, !15, !15}
- !58 = !DILocalVariable(name: "graph", arg: 1, scope: !55, file: !1, line: 17, type: !13)
- !59 = !DILocation(line: 17, column: 19, scope: !55)
- !60 = !DILocalVariable(name: "u", arg: 2, scope: !55, file: !1, line: 17, type: !15)
- !61 = !DILocation(line: 17, column: 40, scope: !55)
- !62 = !DILocalVariable(name: "v", arg: 3, scope: !55, file: !1, line: 17, type: !15)
- !63 = !DILocation(line: 17, column: 47, scope: !55)
- !64 = !DILocalVariable(name: "w", arg: 4, scope: !55, file: !1, line: 17, type: !15)
- !65 = !DILocation(line: 17, column: 54, scope: !55)
- !66 = !DILocalVariable(name: "undirected", arg: 5, scope: !55, file: !1, line: 17, type: !15)
- !67 = !DILocation(line: 17, column: 61, scope: !55)
- !68 = !DILocation(line: 18, column: 9, scope: !69)
- !69 = distinct !DILexicalBlock(scope: !55, file: !1, line: 18, column: 9)
- !70 = !DILocation(line: 18, column: 11, scope: !69)
- !71 = !DILocation(line: 18, column: 15, scope: !69)
- !72 = !DILocation(line: 18, column: 18, scope: !69)
- !73 = !DILocation(line: 18, column: 20, scope: !69)
- !74 = !DILocation(line: 18, column: 9, scope: !55)
- !75 = !DILocation(line: 18, column: 25, scope: !69)
- !76 = !DILocation(line: 19, column: 19, scope: !55)
- !77 = !DILocation(line: 19, column: 5, scope: !55)
- !78 = !DILocation(line: 19, column: 11, scope: !55)
- !79 = !DILocation(line: 19, column: 14, scope: !55)
- !80 = !DILocation(line: 19, column: 17, scope: !55)
- !81 = !DILocation(line: 20, column: 9, scope: !82)
- !82 = distinct !DILexicalBlock(scope: !55, file: !1, line: 20, column: 9)
- !83 = !DILocation(line: 20, column: 9, scope: !55)
- !84 = !DILocation(line: 20, column: 35, scope: !82)
- !85 = !DILocation(line: 20, column: 21, scope: !82)
- !86 = !DILocation(line: 20, column: 27, scope: !82)
- !87 = !DILocation(line: 20, column: 30, scope: !82)
- !88 = !DILocation(line: 20, column: 33, scope: !82)
- !89 = !DILocation(line: 21, column: 1, scope: !55)
- !90 = distinct !DISubprogram(name: "read_graph", scope: !1, file: !1, line: 23, type: !91, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !91 = !DISubroutineType(types: !92)
- !92 = !{!15, !13, !93, !93}
- !93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
- !94 = !DILocalVariable(name: "graph", arg: 1, scope: !90, file: !1, line: 23, type: !13)
- !95 = !DILocation(line: 23, column: 20, scope: !90)
- !96 = !DILocalVariable(name: "V", arg: 2, scope: !90, file: !1, line: 23, type: !93)
- !97 = !DILocation(line: 23, column: 42, scope: !90)
- !98 = !DILocalVariable(name: "src", arg: 3, scope: !90, file: !1, line: 23, type: !93)
- !99 = !DILocation(line: 23, column: 50, scope: !90)
- !100 = !DILocalVariable(name: "E", scope: !90, file: !1, line: 24, type: !15)
- !101 = !DILocation(line: 24, column: 9, scope: !90)
- !102 = !DILocation(line: 25, column: 24, scope: !103)
- !103 = distinct !DILexicalBlock(scope: !90, file: !1, line: 25, column: 9)
- !104 = !DILocation(line: 25, column: 9, scope: !103)
- !105 = !DILocation(line: 25, column: 31, scope: !103)
- !106 = !DILocation(line: 25, column: 9, scope: !90)
- !107 = !DILocation(line: 25, column: 37, scope: !103)
- !108 = !DILocation(line: 26, column: 10, scope: !109)
- !109 = distinct !DILexicalBlock(scope: !90, file: !1, line: 26, column: 9)
- !110 = !DILocation(line: 26, column: 9, scope: !109)
- !111 = !DILocation(line: 26, column: 12, scope: !109)
- !112 = !DILocation(line: 26, column: 17, scope: !109)
- !113 = !DILocation(line: 26, column: 21, scope: !109)
- !114 = !DILocation(line: 26, column: 20, scope: !109)
- !115 = !DILocation(line: 26, column: 23, scope: !109)
- !116 = !DILocation(line: 26, column: 29, scope: !109)
- !117 = !DILocation(line: 26, column: 32, scope: !109)
- !118 = !DILocation(line: 26, column: 34, scope: !109)
- !119 = !DILocation(line: 26, column: 9, scope: !90)
- !120 = !DILocation(line: 26, column: 39, scope: !109)
- !121 = !DILocation(line: 28, column: 16, scope: !90)
- !122 = !DILocation(line: 28, column: 24, scope: !90)
- !123 = !DILocation(line: 28, column: 23, scope: !90)
- !124 = !DILocation(line: 28, column: 5, scope: !90)
- !125 = !DILocalVariable(name: "i", scope: !126, file: !1, line: 30, type: !15)
- !126 = distinct !DILexicalBlock(scope: !90, file: !1, line: 30, column: 5)
- !127 = !DILocation(line: 30, column: 14, scope: !126)
- !128 = !DILocation(line: 30, column: 10, scope: !126)
- !129 = !DILocation(line: 30, column: 21, scope: !130)
- !130 = distinct !DILexicalBlock(scope: !126, file: !1, line: 30, column: 5)
- !131 = !DILocation(line: 30, column: 25, scope: !130)
- !132 = !DILocation(line: 30, column: 23, scope: !130)
- !133 = !DILocation(line: 30, column: 5, scope: !126)
- !134 = !DILocalVariable(name: "u", scope: !135, file: !1, line: 31, type: !15)
- !135 = distinct !DILexicalBlock(scope: !130, file: !1, line: 30, column: 33)
- !136 = !DILocation(line: 31, column: 13, scope: !135)
- !137 = !DILocalVariable(name: "v", scope: !135, file: !1, line: 31, type: !15)
- !138 = !DILocation(line: 31, column: 16, scope: !135)
- !139 = !DILocalVariable(name: "w", scope: !135, file: !1, line: 31, type: !15)
- !140 = !DILocation(line: 31, column: 19, scope: !135)
- !141 = !DILocation(line: 32, column: 13, scope: !142)
- !142 = distinct !DILexicalBlock(scope: !135, file: !1, line: 32, column: 13)
- !143 = !DILocation(line: 32, column: 43, scope: !142)
- !144 = !DILocation(line: 32, column: 13, scope: !135)
- !145 = !DILocation(line: 32, column: 49, scope: !142)
- !146 = !DILocation(line: 33, column: 13, scope: !147)
- !147 = distinct !DILexicalBlock(scope: !135, file: !1, line: 33, column: 13)
- !148 = !DILocation(line: 33, column: 15, scope: !147)
- !149 = !DILocation(line: 33, column: 19, scope: !147)
- !150 = !DILocation(line: 33, column: 22, scope: !147)
- !151 = !DILocation(line: 33, column: 28, scope: !147)
- !152 = !DILocation(line: 33, column: 27, scope: !147)
- !153 = !DILocation(line: 33, column: 24, scope: !147)
- !154 = !DILocation(line: 33, column: 30, scope: !147)
- !155 = !DILocation(line: 33, column: 33, scope: !147)
- !156 = !DILocation(line: 33, column: 35, scope: !147)
- !157 = !DILocation(line: 33, column: 39, scope: !147)
- !158 = !DILocation(line: 33, column: 42, scope: !147)
- !159 = !DILocation(line: 33, column: 48, scope: !147)
- !160 = !DILocation(line: 33, column: 47, scope: !147)
- !161 = !DILocation(line: 33, column: 44, scope: !147)
- !162 = !DILocation(line: 33, column: 13, scope: !135)
- !163 = !DILocation(line: 33, column: 51, scope: !147)
- !164 = !DILocation(line: 34, column: 18, scope: !135)
- !165 = !DILocation(line: 34, column: 25, scope: !135)
- !166 = !DILocation(line: 34, column: 28, scope: !135)
- !167 = !DILocation(line: 34, column: 31, scope: !135)
- !168 = !DILocation(line: 34, column: 9, scope: !135)
- !169 = !DILocation(line: 35, column: 5, scope: !135)
- !170 = !DILocation(line: 30, column: 28, scope: !130)
- !171 = !DILocation(line: 30, column: 5, scope: !130)
- !172 = distinct !{!172, !133, !173, !49}
- !173 = !DILocation(line: 35, column: 5, scope: !126)
- !174 = !DILocation(line: 37, column: 21, scope: !175)
- !175 = distinct !DILexicalBlock(scope: !90, file: !1, line: 37, column: 9)
- !176 = !DILocation(line: 37, column: 9, scope: !175)
- !177 = !DILocation(line: 37, column: 26, scope: !175)
- !178 = !DILocation(line: 37, column: 9, scope: !90)
- !179 = !DILocation(line: 37, column: 32, scope: !175)
- !180 = !DILocation(line: 38, column: 10, scope: !181)
- !181 = distinct !DILexicalBlock(scope: !90, file: !1, line: 38, column: 9)
- !182 = !DILocation(line: 38, column: 9, scope: !181)
- !183 = !DILocation(line: 38, column: 14, scope: !181)
- !184 = !DILocation(line: 38, column: 18, scope: !181)
- !185 = !DILocation(line: 38, column: 22, scope: !181)
- !186 = !DILocation(line: 38, column: 21, scope: !181)
- !187 = !DILocation(line: 38, column: 30, scope: !181)
- !188 = !DILocation(line: 38, column: 29, scope: !181)
- !189 = !DILocation(line: 38, column: 26, scope: !181)
- !190 = !DILocation(line: 38, column: 9, scope: !90)
- !191 = !DILocation(line: 38, column: 33, scope: !181)
- !192 = !DILocation(line: 39, column: 5, scope: !90)
- !193 = !DILocation(line: 40, column: 1, scope: !90)
- !194 = distinct !DISubprogram(name: "min_index", scope: !1, file: !1, line: 42, type: !195, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !195 = !DISubroutineType(types: !196)
- !196 = !{!15, !197, !197, !15}
- !197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !198, size: 64)
- !198 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !15)
- !199 = !DILocalVariable(name: "dist", arg: 1, scope: !194, file: !1, line: 42, type: !197)
- !200 = !DILocation(line: 42, column: 25, scope: !194)
- !201 = !DILocalVariable(name: "visited", arg: 2, scope: !194, file: !1, line: 42, type: !197)
- !202 = !DILocation(line: 42, column: 43, scope: !194)
- !203 = !DILocalVariable(name: "V", arg: 3, scope: !194, file: !1, line: 42, type: !15)
- !204 = !DILocation(line: 42, column: 58, scope: !194)
- !205 = !DILocalVariable(name: "u", scope: !194, file: !1, line: 43, type: !15)
- !206 = !DILocation(line: 43, column: 9, scope: !194)
- !207 = !DILocalVariable(name: "min", scope: !194, file: !1, line: 43, type: !15)
- !208 = !DILocation(line: 43, column: 17, scope: !194)
- !209 = !DILocalVariable(name: "i", scope: !210, file: !1, line: 44, type: !15)
- !210 = distinct !DILexicalBlock(scope: !194, file: !1, line: 44, column: 5)
- !211 = !DILocation(line: 44, column: 14, scope: !210)
- !212 = !DILocation(line: 44, column: 10, scope: !210)
- !213 = !DILocation(line: 44, column: 21, scope: !214)
- !214 = distinct !DILexicalBlock(scope: !210, file: !1, line: 44, column: 5)
- !215 = !DILocation(line: 44, column: 25, scope: !214)
- !216 = !DILocation(line: 44, column: 23, scope: !214)
- !217 = !DILocation(line: 44, column: 5, scope: !210)
- !218 = !DILocation(line: 45, column: 14, scope: !219)
- !219 = distinct !DILexicalBlock(scope: !220, file: !1, line: 45, column: 13)
- !220 = distinct !DILexicalBlock(scope: !214, file: !1, line: 44, column: 33)
- !221 = !DILocation(line: 45, column: 22, scope: !219)
- !222 = !DILocation(line: 45, column: 25, scope: !219)
- !223 = !DILocation(line: 45, column: 28, scope: !219)
- !224 = !DILocation(line: 45, column: 33, scope: !219)
- !225 = !DILocation(line: 45, column: 38, scope: !219)
- !226 = !DILocation(line: 45, column: 36, scope: !219)
- !227 = !DILocation(line: 45, column: 13, scope: !220)
- !228 = !DILocation(line: 46, column: 19, scope: !229)
- !229 = distinct !DILexicalBlock(scope: !219, file: !1, line: 45, column: 43)
- !230 = !DILocation(line: 46, column: 24, scope: !229)
- !231 = !DILocation(line: 46, column: 17, scope: !229)
- !232 = !DILocation(line: 47, column: 17, scope: !229)
- !233 = !DILocation(line: 47, column: 15, scope: !229)
- !234 = !DILocation(line: 48, column: 9, scope: !229)
- !235 = !DILocation(line: 49, column: 5, scope: !220)
- !236 = !DILocation(line: 44, column: 28, scope: !214)
- !237 = !DILocation(line: 44, column: 5, scope: !214)
- !238 = distinct !{!238, !217, !239, !49}
- !239 = !DILocation(line: 49, column: 5, scope: !210)
- !240 = !DILocation(line: 50, column: 12, scope: !194)
- !241 = !DILocation(line: 50, column: 5, scope: !194)
- !242 = distinct !DISubprogram(name: "dijkstra", scope: !1, file: !1, line: 53, type: !243, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !243 = !DISubroutineType(types: !244)
- !244 = !{null, !13, !15, !15, !93}
- !245 = !DILocalVariable(name: "graph", arg: 1, scope: !242, file: !1, line: 53, type: !13)
- !246 = !DILocation(line: 53, column: 19, scope: !242)
- !247 = !DILocalVariable(name: "V", arg: 2, scope: !242, file: !1, line: 53, type: !15)
- !248 = !DILocation(line: 53, column: 40, scope: !242)
- !249 = !DILocalVariable(name: "src", arg: 3, scope: !242, file: !1, line: 53, type: !15)
- !250 = !DILocation(line: 53, column: 47, scope: !242)
- !251 = !DILocalVariable(name: "out_dist", arg: 4, scope: !242, file: !1, line: 53, type: !93)
- !252 = !DILocation(line: 53, column: 56, scope: !242)
- !253 = !DILocalVariable(name: "visited", scope: !242, file: !1, line: 54, type: !14)
- !254 = !DILocation(line: 54, column: 9, scope: !242)
- !255 = !DILocalVariable(name: "i", scope: !256, file: !1, line: 56, type: !15)
- !256 = distinct !DILexicalBlock(scope: !242, file: !1, line: 56, column: 5)
- !257 = !DILocation(line: 56, column: 14, scope: !256)
- !258 = !DILocation(line: 56, column: 10, scope: !256)
- !259 = !DILocation(line: 56, column: 21, scope: !260)
- !260 = distinct !DILexicalBlock(scope: !256, file: !1, line: 56, column: 5)
- !261 = !DILocation(line: 56, column: 25, scope: !260)
- !262 = !DILocation(line: 56, column: 23, scope: !260)
- !263 = !DILocation(line: 56, column: 5, scope: !256)
- !264 = !DILocation(line: 56, column: 33, scope: !260)
- !265 = !DILocation(line: 56, column: 42, scope: !260)
- !266 = !DILocation(line: 56, column: 45, scope: !260)
- !267 = !DILocation(line: 56, column: 28, scope: !260)
- !268 = !DILocation(line: 56, column: 5, scope: !260)
- !269 = distinct !{!269, !263, !270, !49}
- !270 = !DILocation(line: 56, column: 47, scope: !256)
- !271 = !DILocation(line: 57, column: 5, scope: !242)
- !272 = !DILocation(line: 57, column: 14, scope: !242)
- !273 = !DILocation(line: 57, column: 19, scope: !242)
- !274 = !DILocalVariable(name: "iter", scope: !275, file: !1, line: 59, type: !15)
- !275 = distinct !DILexicalBlock(scope: !242, file: !1, line: 59, column: 5)
- !276 = !DILocation(line: 59, column: 14, scope: !275)
- !277 = !DILocation(line: 59, column: 10, scope: !275)
- !278 = !DILocation(line: 59, column: 24, scope: !279)
- !279 = distinct !DILexicalBlock(scope: !275, file: !1, line: 59, column: 5)
- !280 = !DILocation(line: 59, column: 31, scope: !279)
- !281 = !DILocation(line: 59, column: 33, scope: !279)
- !282 = !DILocation(line: 59, column: 29, scope: !279)
- !283 = !DILocation(line: 59, column: 5, scope: !275)
- !284 = !DILocalVariable(name: "u", scope: !285, file: !1, line: 60, type: !15)
- !285 = distinct !DILexicalBlock(scope: !279, file: !1, line: 59, column: 46)
- !286 = !DILocation(line: 60, column: 13, scope: !285)
- !287 = !DILocation(line: 60, column: 27, scope: !285)
- !288 = !DILocation(line: 60, column: 37, scope: !285)
- !289 = !DILocation(line: 60, column: 46, scope: !285)
- !290 = !DILocation(line: 60, column: 17, scope: !285)
- !291 = !DILocation(line: 61, column: 13, scope: !292)
- !292 = distinct !DILexicalBlock(scope: !285, file: !1, line: 61, column: 13)
- !293 = !DILocation(line: 61, column: 15, scope: !292)
- !294 = !DILocation(line: 61, column: 13, scope: !285)
- !295 = !DILocation(line: 61, column: 22, scope: !292)
- !296 = !DILocation(line: 62, column: 17, scope: !285)
- !297 = !DILocation(line: 62, column: 9, scope: !285)
- !298 = !DILocation(line: 62, column: 20, scope: !285)
- !299 = !DILocalVariable(name: "v", scope: !300, file: !1, line: 64, type: !15)
- !300 = distinct !DILexicalBlock(scope: !285, file: !1, line: 64, column: 9)
- !301 = !DILocation(line: 64, column: 18, scope: !300)
- !302 = !DILocation(line: 64, column: 14, scope: !300)
- !303 = !DILocation(line: 64, column: 25, scope: !304)
- !304 = distinct !DILexicalBlock(scope: !300, file: !1, line: 64, column: 9)
- !305 = !DILocation(line: 64, column: 29, scope: !304)
- !306 = !DILocation(line: 64, column: 27, scope: !304)
- !307 = !DILocation(line: 64, column: 9, scope: !300)
- !308 = !DILocation(line: 65, column: 17, scope: !309)
- !309 = distinct !DILexicalBlock(scope: !310, file: !1, line: 65, column: 17)
- !310 = distinct !DILexicalBlock(scope: !304, file: !1, line: 64, column: 37)
- !311 = !DILocation(line: 65, column: 23, scope: !309)
- !312 = !DILocation(line: 65, column: 26, scope: !309)
- !313 = !DILocation(line: 65, column: 29, scope: !309)
- !314 = !DILocation(line: 65, column: 41, scope: !309)
- !315 = !DILocation(line: 65, column: 33, scope: !309)
- !316 = !DILocation(line: 65, column: 44, scope: !309)
- !317 = !DILocation(line: 65, column: 47, scope: !309)
- !318 = !DILocation(line: 65, column: 56, scope: !309)
- !319 = !DILocation(line: 65, column: 59, scope: !309)
- !320 = !DILocation(line: 65, column: 17, scope: !310)
- !321 = !DILocalVariable(name: "nd", scope: !322, file: !1, line: 66, type: !15)
- !322 = distinct !DILexicalBlock(scope: !309, file: !1, line: 65, column: 71)
- !323 = !DILocation(line: 66, column: 21, scope: !322)
- !324 = !DILocation(line: 66, column: 26, scope: !322)
- !325 = !DILocation(line: 66, column: 35, scope: !322)
- !326 = !DILocation(line: 66, column: 40, scope: !322)
- !327 = !DILocation(line: 66, column: 46, scope: !322)
- !328 = !DILocation(line: 66, column: 49, scope: !322)
- !329 = !DILocation(line: 66, column: 38, scope: !322)
- !330 = !DILocation(line: 67, column: 21, scope: !331)
- !331 = distinct !DILexicalBlock(scope: !322, file: !1, line: 67, column: 21)
- !332 = !DILocation(line: 67, column: 26, scope: !331)
- !333 = !DILocation(line: 67, column: 35, scope: !331)
- !334 = !DILocation(line: 67, column: 24, scope: !331)
- !335 = !DILocation(line: 67, column: 21, scope: !322)
- !336 = !DILocation(line: 67, column: 53, scope: !331)
- !337 = !DILocation(line: 67, column: 39, scope: !331)
- !338 = !DILocation(line: 67, column: 48, scope: !331)
- !339 = !DILocation(line: 67, column: 51, scope: !331)
- !340 = !DILocation(line: 68, column: 13, scope: !322)
- !341 = !DILocation(line: 69, column: 9, scope: !310)
- !342 = !DILocation(line: 64, column: 32, scope: !304)
- !343 = !DILocation(line: 64, column: 9, scope: !304)
- !344 = distinct !{!344, !307, !345, !49}
- !345 = !DILocation(line: 69, column: 9, scope: !300)
- !346 = !DILocation(line: 70, column: 5, scope: !285)
- !347 = !DILocation(line: 59, column: 38, scope: !279)
- !348 = !DILocation(line: 59, column: 5, scope: !279)
- !349 = distinct !{!349, !283, !350, !49}
- !350 = !DILocation(line: 70, column: 5, scope: !275)
- !351 = !DILocation(line: 71, column: 1, scope: !242)
- !352 = distinct !DISubprogram(name: "print_distances", scope: !1, file: !1, line: 73, type: !353, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !353 = !DISubroutineType(types: !354)
- !354 = !{null, !197, !15}
- !355 = !DILocalVariable(name: "dist", arg: 1, scope: !352, file: !1, line: 73, type: !197)
- !356 = !DILocation(line: 73, column: 32, scope: !352)
- !357 = !DILocalVariable(name: "V", arg: 2, scope: !352, file: !1, line: 73, type: !15)
- !358 = !DILocation(line: 73, column: 44, scope: !352)
- !359 = !DILocalVariable(name: "i", scope: !360, file: !1, line: 74, type: !15)
- !360 = distinct !DILexicalBlock(scope: !352, file: !1, line: 74, column: 5)
- !361 = !DILocation(line: 74, column: 14, scope: !360)
- !362 = !DILocation(line: 74, column: 10, scope: !360)
- !363 = !DILocation(line: 74, column: 21, scope: !364)
- !364 = distinct !DILexicalBlock(scope: !360, file: !1, line: 74, column: 5)
- !365 = !DILocation(line: 74, column: 25, scope: !364)
- !366 = !DILocation(line: 74, column: 23, scope: !364)
- !367 = !DILocation(line: 74, column: 5, scope: !360)
- !368 = !DILocation(line: 75, column: 13, scope: !369)
- !369 = distinct !DILexicalBlock(scope: !370, file: !1, line: 75, column: 13)
- !370 = distinct !DILexicalBlock(scope: !364, file: !1, line: 74, column: 33)
- !371 = !DILocation(line: 75, column: 18, scope: !369)
- !372 = !DILocation(line: 75, column: 21, scope: !369)
- !373 = !DILocation(line: 75, column: 13, scope: !370)
- !374 = !DILocation(line: 75, column: 60, scope: !369)
- !375 = !DILocation(line: 75, column: 33, scope: !369)
- !376 = !DILocation(line: 76, column: 55, scope: !369)
- !377 = !DILocation(line: 76, column: 58, scope: !369)
- !378 = !DILocation(line: 76, column: 63, scope: !369)
- !379 = !DILocation(line: 76, column: 29, scope: !369)
- !380 = !DILocation(line: 77, column: 5, scope: !370)
- !381 = !DILocation(line: 74, column: 28, scope: !364)
- !382 = !DILocation(line: 74, column: 5, scope: !364)
- !383 = distinct !{!383, !367, !384, !49}
- !384 = !DILocation(line: 77, column: 5, scope: !360)
- !385 = !DILocation(line: 78, column: 1, scope: !352)
- !386 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 80, type: !387, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !387 = !DISubroutineType(types: !388)
- !388 = !{!15}
- !389 = !DILocalVariable(name: "V", scope: !386, file: !1, line: 81, type: !15)
- !390 = !DILocation(line: 81, column: 9, scope: !386)
- !391 = !DILocalVariable(name: "src", scope: !386, file: !1, line: 81, type: !15)
- !392 = !DILocation(line: 81, column: 12, scope: !386)
- !393 = !DILocalVariable(name: "graph", scope: !386, file: !1, line: 82, type: !394)
- !394 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 320000, elements: !395)
- !395 = !{!17, !17}
- !396 = !DILocation(line: 82, column: 9, scope: !386)
- !397 = !DILocalVariable(name: "dist", scope: !386, file: !1, line: 83, type: !14)
- !398 = !DILocation(line: 83, column: 9, scope: !386)
- !399 = !DILocation(line: 85, column: 20, scope: !400)
- !400 = distinct !DILexicalBlock(scope: !386, file: !1, line: 85, column: 9)
- !401 = !DILocation(line: 85, column: 9, scope: !400)
- !402 = !DILocation(line: 85, column: 37, scope: !400)
- !403 = !DILocation(line: 85, column: 9, scope: !386)
- !404 = !DILocation(line: 86, column: 17, scope: !405)
- !405 = distinct !DILexicalBlock(scope: !400, file: !1, line: 85, column: 43)
- !406 = !DILocation(line: 86, column: 9, scope: !405)
- !407 = !DILocation(line: 87, column: 9, scope: !405)
- !408 = !DILocation(line: 90, column: 14, scope: !386)
- !409 = !DILocation(line: 90, column: 21, scope: !386)
- !410 = !DILocation(line: 90, column: 24, scope: !386)
- !411 = !DILocation(line: 90, column: 29, scope: !386)
- !412 = !DILocation(line: 90, column: 5, scope: !386)
- !413 = !DILocation(line: 91, column: 21, scope: !386)
- !414 = !DILocation(line: 91, column: 27, scope: !386)
- !415 = !DILocation(line: 91, column: 5, scope: !386)
- !416 = !DILocation(line: 92, column: 5, scope: !386)
- !417 = !DILocation(line: 93, column: 1, scope: !386)
