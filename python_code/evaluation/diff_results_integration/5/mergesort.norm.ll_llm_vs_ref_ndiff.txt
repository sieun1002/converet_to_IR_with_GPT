- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/mergesort.ll'
?                                                                ----   ^ ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/integration/bc/5/mergesort.ll'
?                                                                  ++++ ^^^^ ^^^^
- source_filename = "../original/src/mergesort.c"
+ source_filename = "llvm-link"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- @__const.main.a = private unnamed_addr constant [10 x i32] [i32 9, i32 1, i32 5, i32 3, i32 7, i32 2, i32 8, i32 6, i32 4, i32 0], align 16
  @.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
- @.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !13 {
+ ; Function Attrs: sspstrong
+ define i32 @main() #0 {
  entry:
-   %retval = alloca i32, align 4
-   %a = alloca [10 x i32], align 16
+   %arr = alloca [10 x i32], align 16
?     ++
-   %n = alloca i64, align 8
-   %i = alloca i64, align 8
-   store i32 0, i32* %retval, align 4
-   call void @llvm.dbg.declare(metadata [10 x i32]* %a, metadata !17, metadata !DIExpression()), !dbg !21
-   %0 = bitcast [10 x i32]* %a to i8*, !dbg !21
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.a to i8*), i64 40, i1 false), !dbg !21
-   call void @llvm.dbg.declare(metadata i64* %n, metadata !22, metadata !DIExpression()), !dbg !26
-   store i64 10, i64* %n, align 8, !dbg !26
-   %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 0, !dbg !27
?       ^^ ^^^^                                                                  ----------
+   %arr.idx0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
?       ^^ ^^                                                    ++
-   %1 = load i64, i64* %n, align 8, !dbg !28
+   store i32 9, i32* %arr.idx0, align 16
+   %arr.idx1 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 1
+   store i32 1, i32* %arr.idx1, align 4
+   %arr.idx2 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 2
+   store i32 5, i32* %arr.idx2, align 8
+   %arr.idx3 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 3
+   store i32 3, i32* %arr.idx3, align 4
+   %arr.idx4 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 4
+   store i32 7, i32* %arr.idx4, align 16
+   %arr.idx5 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 5
+   store i32 2, i32* %arr.idx5, align 4
+   %arr.idx6 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 6
+   store i32 8, i32* %arr.idx6, align 8
+   %arr.idx7 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 7
+   store i32 6, i32* %arr.idx7, align 4
+   %arr.idx8 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 8
+   store i32 4, i32* %arr.idx8, align 16
+   %arr.idx9 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 9
+   store i32 0, i32* %arr.idx9, align 4
-   call void @merge_sort(i32* noundef %arraydecay, i64 noundef %1), !dbg !29
?                                          ^^ ^^^^              -  ----------
+   call void @merge_sort(i32* noundef nonnull %arr.idx0, i64 noundef 10)
?                                      ++++++++    ^^ ^^               +
+   br label %loop
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !30, metadata !DIExpression()), !dbg !32
-   store i64 0, i64* %i, align 8, !dbg !32
-   br label %for.cond, !dbg !33
  
- for.cond:                                         ; preds = %for.inc, %entry
? ^ --- ^^                                                     ^ ^^^^^
+ loop:                                             ; preds = %body, %entry
? ^  ^                                          ++++           ^ ^^
+   %i = phi i64 [ 0, %entry ], [ %inc, %body ]
+   %cond = icmp ult i64 %i, 10
+   br i1 %cond, label %body, label %after
-   %2 = load i64, i64* %i, align 8, !dbg !34
-   %3 = load i64, i64* %n, align 8, !dbg !36
-   %cmp = icmp ult i64 %2, %3, !dbg !37
-   br i1 %cmp, label %for.body, label %for.end, !dbg !38
  
- for.body:                                         ; preds = %for.cond
? ----                                                         ^ --- ^^
+ body:                                             ; preds = %loop
?                                               ++++           ^  ^
-   %4 = load i64, i64* %i, align 8, !dbg !39
-   %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 %4, !dbg !41
?    ^ ------                                                                  ^^^^^^^^^^^
+   %elem.ptr = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %i
?    ^^^^^^^                                                     ++              ^
-   %5 = load i32, i32* %arrayidx, align 4, !dbg !41
+   %val = load i32, i32* %elem.ptr, align 4
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %5), !dbg !42
?                                                                                                                                  ^ ----------
+   %call.printf = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %val)
?        +++++++                                          +++++++++++++++++++++++++++                                                                                ^^^
-   br label %for.inc, !dbg !43
+   %inc = add i64 %i, 1
+   br label %loop
  
- for.inc:                                          ; preds = %for.body
?  ^ ----                                                      ^ --- ^^
+ after:                                            ; preds = %loop
? + ^^                                            ++           ^  ^
+   %call.putchar = call i32 @putchar(i32 noundef 10)
+   ret i32 0
-   %6 = load i64, i64* %i, align 8, !dbg !44
-   %inc = add i64 %6, 1, !dbg !44
-   store i64 %inc, i64* %i, align 8, !dbg !44
-   br label %for.cond, !dbg !45, !llvm.loop !46
- 
- for.end:                                          ; preds = %for.cond
-   %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !49
-   ret i32 0, !dbg !50
  }
  
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
+ declare i32 @printf(i8* noundef, ...)
+ 
+ declare i32 @putchar(i32 noundef)
+ 
+ define void @merge_sort(i32* %dest, i64 %n) {
+ entry:
+   %cmp_n = icmp ult i64 %n, 2
+   br i1 %cmp_n, label %ret, label %alloc
+ 
+ alloc:                                            ; preds = %entry
+   %size = shl i64 %n, 2
+   %tmpraw = call i8* @malloc(i64 %size)
+   %isnull = icmp eq i8* %tmpraw, null
+   br i1 %isnull, label %ret, label %init
+ 
+ init:                                             ; preds = %alloc
+   %tmpbuf = bitcast i8* %tmpraw to i32*
+   br label %outer
+ 
+ outer:                                            ; preds = %afterInner, %init
+   %src = phi i32* [ %dest, %init ], [ %buf, %afterInner ]
+   %buf = phi i32* [ %tmpbuf, %init ], [ %src, %afterInner ]
+   %run = phi i64 [ 1, %init ], [ %run_next, %afterInner ]
+   %cond_outer = icmp ult i64 %run, %n
+   br i1 %cond_outer, label %outer_body, label %outer_end
+ 
+ outer_body:                                       ; preds = %outer_body_end, %outer
+   %i = phi i64 [ 0, %outer ], [ %right_pre, %outer_body_end ]
+   %cond_i = icmp ult i64 %i, %n
+   br i1 %cond_i, label %merge_prep, label %afterInner
+ 
+ merge_prep:                                       ; preds = %outer_body
+   %mid_pre = add i64 %i, %run
+   %mid_lt_n = icmp ult i64 %mid_pre, %n
+   %mid = select i1 %mid_lt_n, i64 %mid_pre, i64 %n
+   %run_twice_prep = shl i64 %run, 1
+   %right_pre = add i64 %i, %run_twice_prep
+   %right_lt_n = icmp ult i64 %right_pre, %n
+   %right = select i1 %right_lt_n, i64 %right_pre, i64 %n
+   br label %merge_loop
+ 
+ merge_loop:                                       ; preds = %merge_next, %merge_prep
+   %k = phi i64 [ %i, %merge_prep ], [ %k_next, %merge_next ]
+   %l = phi i64 [ %i, %merge_prep ], [ %l_next_phi, %merge_next ]
+   %r = phi i64 [ %mid, %merge_prep ], [ %r_next_phi, %merge_next ]
+   %k_lt_right = icmp ult i64 %k, %right
+   br i1 %k_lt_right, label %choose, label %outer_body_end
+ 
+ choose:                                           ; preds = %merge_loop
+   %l_lt_mid = icmp ult i64 %l, %mid
+   br i1 %l_lt_mid, label %check_right_avail, label %take_right_from_choose
+ 
+ check_right_avail:                                ; preds = %choose
+   %r_lt_right = icmp ult i64 %r, %right
+   br i1 %r_lt_right, label %cmp_values, label %take_left_from_check
+ 
+ cmp_values:                                       ; preds = %check_right_avail
+   %l_ptr_cmp = getelementptr inbounds i32, i32* %src, i64 %l
+   %l_val_cmp = load i32, i32* %l_ptr_cmp, align 4
+   %r_ptr_cmp = getelementptr inbounds i32, i32* %src, i64 %r
+   %r_val_cmp = load i32, i32* %r_ptr_cmp, align 4
+   %le_cmp.not = icmp sgt i32 %l_val_cmp, %r_val_cmp
+   br i1 %le_cmp.not, label %take_right_from_cmp, label %take_left_from_cmp
+ 
+ take_left_from_check:                             ; preds = %check_right_avail
+   %l_ptr_store1 = getelementptr inbounds i32, i32* %src, i64 %l
+   %l_val_store1 = load i32, i32* %l_ptr_store1, align 4
+   %dst_ptr1 = getelementptr inbounds i32, i32* %buf, i64 %k
+   store i32 %l_val_store1, i32* %dst_ptr1, align 4
+   %l_inc1 = add i64 %l, 1
+   br label %merge_next
+ 
+ take_left_from_cmp:                               ; preds = %cmp_values
+   %dst_ptr2 = getelementptr inbounds i32, i32* %buf, i64 %k
+   store i32 %l_val_cmp, i32* %dst_ptr2, align 4
+   %l_inc2 = add i64 %l, 1
+   br label %merge_next
+ 
+ take_right_from_choose:                           ; preds = %choose
+   %r_ptr_store1 = getelementptr inbounds i32, i32* %src, i64 %r
+   %r_val_store1 = load i32, i32* %r_ptr_store1, align 4
+   %dst_ptr3 = getelementptr inbounds i32, i32* %buf, i64 %k
+   store i32 %r_val_store1, i32* %dst_ptr3, align 4
+   %r_inc1 = add i64 %r, 1
+   br label %merge_next
+ 
+ take_right_from_cmp:                              ; preds = %cmp_values
+   %dst_ptr4 = getelementptr inbounds i32, i32* %buf, i64 %k
+   store i32 %r_val_cmp, i32* %dst_ptr4, align 4
+   %r_inc2 = add i64 %r, 1
+   br label %merge_next
+ 
+ merge_next:                                       ; preds = %take_right_from_cmp, %take_right_from_choose, %take_left_from_cmp, %take_left_from_check
+   %l_next_phi = phi i64 [ %l_inc1, %take_left_from_check ], [ %l_inc2, %take_left_from_cmp ], [ %l, %take_right_from_choose ], [ %l, %take_right_from_cmp ]
+   %r_next_phi = phi i64 [ %r, %take_left_from_check ], [ %r, %take_left_from_cmp ], [ %r_inc1, %take_right_from_choose ], [ %r_inc2, %take_right_from_cmp ]
+   %k_next = add i64 %k, 1
+   br label %merge_loop
+ 
+ outer_body_end:                                   ; preds = %merge_loop
+   br label %outer_body
+ 
+ afterInner:                                       ; preds = %outer_body
+   %run_next = shl i64 %run, 1
+   br label %outer
+ 
+ outer_end:                                        ; preds = %outer
+   %src_eq_dest = icmp eq i32* %src, %dest
+   br i1 %src_eq_dest, label %free_and_ret, label %do_memcpy
+ 
+ do_memcpy:                                        ; preds = %outer_end
+   %dest_i8 = bitcast i32* %dest to i8*
+   %src_i8 = bitcast i32* %src to i8*
+   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %dest_i8, i8* align 1 %src_i8, i64 %size, i1 false)
+   br label %free_and_ret
+ 
+ free_and_ret:                                     ; preds = %do_memcpy, %outer_end
+   call void @free(i8* %tmpraw)
+   br label %ret
+ 
+ ret:                                              ; preds = %free_and_ret, %alloc, %entry
+   ret void
+ }
+ 
+ ; Function Attrs: nounwind
+ declare i8* @malloc(i64) #1
+ 
+ ; Function Attrs: nounwind
+ declare i8* @memcpy(i8*, i8*, i64) #1
+ 
+ ; Function Attrs: nounwind
+ declare void @free(i8*) #1
  
  ; Function Attrs: argmemonly nofree nounwind willreturn
  declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
  
+ attributes #0 = { sspstrong }
+ attributes #1 = { nounwind }
- ; Function Attrs: noinline nounwind optnone uwtable
- define internal void @merge_sort(i32* noundef %a, i64 noundef %n) #0 !dbg !51 {
- entry:
-   %a.addr = alloca i32*, align 8
-   %n.addr = alloca i64, align 8
-   %buf = alloca i32*, align 8
-   %src = alloca i32*, align 8
-   %dst = alloca i32*, align 8
-   %width = alloca i64, align 8
-   %i = alloca i64, align 8
-   %left = alloca i64, align 8
-   %mid = alloca i64, align 8
-   %right = alloca i64, align 8
-   %l = alloca i64, align 8
-   %r = alloca i64, align 8
-   %p = alloca i64, align 8
-   %tmp = alloca i32*, align 8
-   store i32* %a, i32** %a.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !54, metadata !DIExpression()), !dbg !55
-   store i64 %n, i64* %n.addr, align 8
-   call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !56, metadata !DIExpression()), !dbg !57
-   %0 = load i64, i64* %n.addr, align 8, !dbg !58
-   %cmp = icmp ult i64 %0, 2, !dbg !60
-   br i1 %cmp, label %if.then, label %if.end, !dbg !61
- 
- if.then:                                          ; preds = %entry
-   br label %return, !dbg !62
- 
- if.end:                                           ; preds = %entry
-   call void @llvm.dbg.declare(metadata i32** %buf, metadata !63, metadata !DIExpression()), !dbg !64
-   %1 = load i64, i64* %n.addr, align 8, !dbg !65
-   %mul = mul i64 %1, 4, !dbg !66
-   %call = call noalias i8* @malloc(i64 noundef %mul) #5, !dbg !67
-   %2 = bitcast i8* %call to i32*, !dbg !68
-   store i32* %2, i32** %buf, align 8, !dbg !64
-   %3 = load i32*, i32** %buf, align 8, !dbg !69
-   %tobool = icmp ne i32* %3, null, !dbg !69
-   br i1 %tobool, label %if.end2, label %if.then1, !dbg !71
- 
- if.then1:                                         ; preds = %if.end
-   br label %return, !dbg !72
- 
- if.end2:                                          ; preds = %if.end
-   call void @llvm.dbg.declare(metadata i32** %src, metadata !73, metadata !DIExpression()), !dbg !74
-   %4 = load i32*, i32** %a.addr, align 8, !dbg !75
-   store i32* %4, i32** %src, align 8, !dbg !74
-   call void @llvm.dbg.declare(metadata i32** %dst, metadata !76, metadata !DIExpression()), !dbg !77
-   %5 = load i32*, i32** %buf, align 8, !dbg !78
-   store i32* %5, i32** %dst, align 8, !dbg !77
-   call void @llvm.dbg.declare(metadata i64* %width, metadata !79, metadata !DIExpression()), !dbg !81
-   store i64 1, i64* %width, align 8, !dbg !81
-   br label %for.cond, !dbg !82
- 
- for.cond:                                         ; preds = %for.inc30, %if.end2
-   %6 = load i64, i64* %width, align 8, !dbg !83
-   %7 = load i64, i64* %n.addr, align 8, !dbg !85
-   %cmp3 = icmp ult i64 %6, %7, !dbg !86
-   br i1 %cmp3, label %for.body, label %for.end31, !dbg !87
- 
- for.body:                                         ; preds = %for.cond
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !88, metadata !DIExpression()), !dbg !90
-   store i64 0, i64* %i, align 8, !dbg !90
-   br label %while.cond, !dbg !91
- 
- while.cond:                                       ; preds = %for.end, %for.body
-   %8 = load i64, i64* %i, align 8, !dbg !92
-   %9 = load i64, i64* %n.addr, align 8, !dbg !93
-   %cmp4 = icmp ult i64 %8, %9, !dbg !94
-   br i1 %cmp4, label %while.body, label %while.end, !dbg !91
- 
- while.body:                                       ; preds = %while.cond
-   call void @llvm.dbg.declare(metadata i64* %left, metadata !95, metadata !DIExpression()), !dbg !97
-   %10 = load i64, i64* %i, align 8, !dbg !98
-   store i64 %10, i64* %left, align 8, !dbg !97
-   call void @llvm.dbg.declare(metadata i64* %mid, metadata !99, metadata !DIExpression()), !dbg !100
-   %11 = load i64, i64* %i, align 8, !dbg !101
-   %12 = load i64, i64* %width, align 8, !dbg !102
-   %add = add i64 %11, %12, !dbg !103
-   store i64 %add, i64* %mid, align 8, !dbg !100
-   %13 = load i64, i64* %mid, align 8, !dbg !104
-   %14 = load i64, i64* %n.addr, align 8, !dbg !106
-   %cmp5 = icmp ugt i64 %13, %14, !dbg !107
-   br i1 %cmp5, label %if.then6, label %if.end7, !dbg !108
- 
- if.then6:                                         ; preds = %while.body
-   %15 = load i64, i64* %n.addr, align 8, !dbg !109
-   store i64 %15, i64* %mid, align 8, !dbg !110
-   br label %if.end7, !dbg !111
- 
- if.end7:                                          ; preds = %if.then6, %while.body
-   call void @llvm.dbg.declare(metadata i64* %right, metadata !112, metadata !DIExpression()), !dbg !113
-   %16 = load i64, i64* %i, align 8, !dbg !114
-   %17 = load i64, i64* %width, align 8, !dbg !115
-   %mul8 = mul i64 2, %17, !dbg !116
-   %add9 = add i64 %16, %mul8, !dbg !117
-   store i64 %add9, i64* %right, align 8, !dbg !113
-   %18 = load i64, i64* %right, align 8, !dbg !118
-   %19 = load i64, i64* %n.addr, align 8, !dbg !120
-   %cmp10 = icmp ugt i64 %18, %19, !dbg !121
-   br i1 %cmp10, label %if.then11, label %if.end12, !dbg !122
- 
- if.then11:                                        ; preds = %if.end7
-   %20 = load i64, i64* %n.addr, align 8, !dbg !123
-   store i64 %20, i64* %right, align 8, !dbg !124
-   br label %if.end12, !dbg !125
- 
- if.end12:                                         ; preds = %if.then11, %if.end7
-   call void @llvm.dbg.declare(metadata i64* %l, metadata !126, metadata !DIExpression()), !dbg !127
-   %21 = load i64, i64* %left, align 8, !dbg !128
-   store i64 %21, i64* %l, align 8, !dbg !127
-   call void @llvm.dbg.declare(metadata i64* %r, metadata !129, metadata !DIExpression()), !dbg !130
-   %22 = load i64, i64* %mid, align 8, !dbg !131
-   store i64 %22, i64* %r, align 8, !dbg !130
-   call void @llvm.dbg.declare(metadata i64* %p, metadata !132, metadata !DIExpression()), !dbg !134
-   %23 = load i64, i64* %left, align 8, !dbg !135
-   store i64 %23, i64* %p, align 8, !dbg !134
-   br label %for.cond13, !dbg !136
- 
- for.cond13:                                       ; preds = %for.inc, %if.end12
-   %24 = load i64, i64* %p, align 8, !dbg !137
-   %25 = load i64, i64* %right, align 8, !dbg !139
-   %cmp14 = icmp ult i64 %24, %25, !dbg !140
-   br i1 %cmp14, label %for.body15, label %for.end, !dbg !141
- 
- for.body15:                                       ; preds = %for.cond13
-   %26 = load i64, i64* %l, align 8, !dbg !142
-   %27 = load i64, i64* %mid, align 8, !dbg !145
-   %cmp16 = icmp ult i64 %26, %27, !dbg !146
-   br i1 %cmp16, label %land.lhs.true, label %if.else, !dbg !147
- 
- land.lhs.true:                                    ; preds = %for.body15
-   %28 = load i64, i64* %r, align 8, !dbg !148
-   %29 = load i64, i64* %right, align 8, !dbg !149
-   %cmp17 = icmp uge i64 %28, %29, !dbg !150
-   br i1 %cmp17, label %if.then20, label %lor.lhs.false, !dbg !151
- 
- lor.lhs.false:                                    ; preds = %land.lhs.true
-   %30 = load i32*, i32** %src, align 8, !dbg !152
-   %31 = load i64, i64* %l, align 8, !dbg !153
-   %arrayidx = getelementptr inbounds i32, i32* %30, i64 %31, !dbg !152
-   %32 = load i32, i32* %arrayidx, align 4, !dbg !152
-   %33 = load i32*, i32** %src, align 8, !dbg !154
-   %34 = load i64, i64* %r, align 8, !dbg !155
-   %arrayidx18 = getelementptr inbounds i32, i32* %33, i64 %34, !dbg !154
-   %35 = load i32, i32* %arrayidx18, align 4, !dbg !154
-   %cmp19 = icmp sle i32 %32, %35, !dbg !156
-   br i1 %cmp19, label %if.then20, label %if.else, !dbg !157
- 
- if.then20:                                        ; preds = %lor.lhs.false, %land.lhs.true
-   %36 = load i32*, i32** %src, align 8, !dbg !158
-   %37 = load i64, i64* %l, align 8, !dbg !160
-   %inc = add i64 %37, 1, !dbg !160
-   store i64 %inc, i64* %l, align 8, !dbg !160
-   %arrayidx21 = getelementptr inbounds i32, i32* %36, i64 %37, !dbg !158
-   %38 = load i32, i32* %arrayidx21, align 4, !dbg !158
-   %39 = load i32*, i32** %dst, align 8, !dbg !161
-   %40 = load i64, i64* %p, align 8, !dbg !162
-   %arrayidx22 = getelementptr inbounds i32, i32* %39, i64 %40, !dbg !161
-   store i32 %38, i32* %arrayidx22, align 4, !dbg !163
-   br label %if.end26, !dbg !164
- 
- if.else:                                          ; preds = %lor.lhs.false, %for.body15
-   %41 = load i32*, i32** %src, align 8, !dbg !165
-   %42 = load i64, i64* %r, align 8, !dbg !167
-   %inc23 = add i64 %42, 1, !dbg !167
-   store i64 %inc23, i64* %r, align 8, !dbg !167
-   %arrayidx24 = getelementptr inbounds i32, i32* %41, i64 %42, !dbg !165
-   %43 = load i32, i32* %arrayidx24, align 4, !dbg !165
-   %44 = load i32*, i32** %dst, align 8, !dbg !168
-   %45 = load i64, i64* %p, align 8, !dbg !169
-   %arrayidx25 = getelementptr inbounds i32, i32* %44, i64 %45, !dbg !168
-   store i32 %43, i32* %arrayidx25, align 4, !dbg !170
-   br label %if.end26
- 
- if.end26:                                         ; preds = %if.else, %if.then20
-   br label %for.inc, !dbg !171
- 
- for.inc:                                          ; preds = %if.end26
-   %46 = load i64, i64* %p, align 8, !dbg !172
-   %inc27 = add i64 %46, 1, !dbg !172
-   store i64 %inc27, i64* %p, align 8, !dbg !172
-   br label %for.cond13, !dbg !173, !llvm.loop !174
- 
- for.end:                                          ; preds = %for.cond13
-   %47 = load i64, i64* %width, align 8, !dbg !176
-   %mul28 = mul i64 2, %47, !dbg !177
-   %48 = load i64, i64* %i, align 8, !dbg !178
-   %add29 = add i64 %48, %mul28, !dbg !178
-   store i64 %add29, i64* %i, align 8, !dbg !178
-   br label %while.cond, !dbg !91, !llvm.loop !179
- 
- while.end:                                        ; preds = %while.cond
-   call void @llvm.dbg.declare(metadata i32** %tmp, metadata !181, metadata !DIExpression()), !dbg !182
-   %49 = load i32*, i32** %src, align 8, !dbg !183
-   store i32* %49, i32** %tmp, align 8, !dbg !182
-   %50 = load i32*, i32** %dst, align 8, !dbg !184
-   store i32* %50, i32** %src, align 8, !dbg !185
-   %51 = load i32*, i32** %tmp, align 8, !dbg !186
-   store i32* %51, i32** %dst, align 8, !dbg !187
-   br label %for.inc30, !dbg !188
- 
- for.inc30:                                        ; preds = %while.end
-   %52 = load i64, i64* %width, align 8, !dbg !189
-   %shl = shl i64 %52, 1, !dbg !189
-   store i64 %shl, i64* %width, align 8, !dbg !189
-   br label %for.cond, !dbg !190, !llvm.loop !191
- 
- for.end31:                                        ; preds = %for.cond
-   %53 = load i32*, i32** %src, align 8, !dbg !193
-   %54 = load i32*, i32** %a.addr, align 8, !dbg !195
-   %cmp32 = icmp ne i32* %53, %54, !dbg !196
-   br i1 %cmp32, label %if.then33, label %if.end35, !dbg !197
- 
- if.then33:                                        ; preds = %for.end31
-   %55 = load i32*, i32** %a.addr, align 8, !dbg !198
-   %56 = bitcast i32* %55 to i8*, !dbg !200
-   %57 = load i32*, i32** %src, align 8, !dbg !201
-   %58 = bitcast i32* %57 to i8*, !dbg !200
-   %59 = load i64, i64* %n.addr, align 8, !dbg !202
-   %mul34 = mul i64 %59, 4, !dbg !203
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %58, i64 %mul34, i1 false), !dbg !200
-   br label %if.end35, !dbg !204
- 
- if.end35:                                         ; preds = %if.then33, %for.end31
-   %60 = load i32*, i32** %buf, align 8, !dbg !205
-   %61 = bitcast i32* %60 to i8*, !dbg !205
-   call void @free(i8* noundef %61) #5, !dbg !206
-   br label %return, !dbg !207
- 
- return:                                           ; preds = %if.end35, %if.then1, %if.then
-   ret void, !dbg !207
- }
- 
- declare i32 @printf(i8* noundef, ...) #3
- 
- ; Function Attrs: nounwind
- declare noalias i8* @malloc(i64 noundef) #4
- 
- ; Function Attrs: nounwind
- declare void @free(i8* noundef) #4
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
  attributes #2 = { argmemonly nofree nounwind willreturn }
- attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #5 = { nounwind }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!5, !6, !7, !8, !9, !10, !11}
- !llvm.ident = !{!12}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/mergesort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "e5c7704c5e402a79506634451abb1d09")
- !2 = !{!3}
- !3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
- !4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !5 = !{i32 7, !"Dwarf Version", i32 5}
- !6 = !{i32 2, !"Debug Info Version", i32 3}
- !7 = !{i32 1, !"wchar_size", i32 4}
- !8 = !{i32 7, !"PIC Level", i32 2}
- !9 = !{i32 7, !"PIE Level", i32 2}
- !10 = !{i32 7, !"uwtable", i32 1}
- !11 = !{i32 7, !"frame-pointer", i32 2}
- !12 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !13 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 42, type: !14, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
- !14 = !DISubroutineType(types: !15)
- !15 = !{!4}
- !16 = !{}
- !17 = !DILocalVariable(name: "a", scope: !13, file: !1, line: 43, type: !18)
- !18 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 320, elements: !19)
- !19 = !{!20}
- !20 = !DISubrange(count: 10)
- !21 = !DILocation(line: 43, column: 9, scope: !13)
- !22 = !DILocalVariable(name: "n", scope: !13, file: !1, line: 44, type: !23)
- !23 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !24, line: 46, baseType: !25)
- !24 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !25 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !26 = !DILocation(line: 44, column: 12, scope: !13)
- !27 = !DILocation(line: 46, column: 16, scope: !13)
- !28 = !DILocation(line: 46, column: 19, scope: !13)
- !29 = !DILocation(line: 46, column: 5, scope: !13)
- !30 = !DILocalVariable(name: "i", scope: !31, file: !1, line: 48, type: !23)
- !31 = distinct !DILexicalBlock(scope: !13, file: !1, line: 48, column: 5)
- !32 = !DILocation(line: 48, column: 17, scope: !31)
- !33 = !DILocation(line: 48, column: 10, scope: !31)
- !34 = !DILocation(line: 48, column: 24, scope: !35)
- !35 = distinct !DILexicalBlock(scope: !31, file: !1, line: 48, column: 5)
- !36 = !DILocation(line: 48, column: 28, scope: !35)
- !37 = !DILocation(line: 48, column: 26, scope: !35)
- !38 = !DILocation(line: 48, column: 5, scope: !31)
- !39 = !DILocation(line: 49, column: 25, scope: !40)
- !40 = distinct !DILexicalBlock(scope: !35, file: !1, line: 48, column: 36)
- !41 = !DILocation(line: 49, column: 23, scope: !40)
- !42 = !DILocation(line: 49, column: 9, scope: !40)
- !43 = !DILocation(line: 50, column: 5, scope: !40)
- !44 = !DILocation(line: 48, column: 31, scope: !35)
- !45 = !DILocation(line: 48, column: 5, scope: !35)
- !46 = distinct !{!46, !38, !47, !48}
- !47 = !DILocation(line: 50, column: 5, scope: !31)
- !48 = !{!"llvm.loop.mustprogress"}
- !49 = !DILocation(line: 51, column: 5, scope: !13)
- !50 = !DILocation(line: 52, column: 5, scope: !13)
- !51 = distinct !DISubprogram(name: "merge_sort", scope: !1, file: !1, line: 6, type: !52, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !16)
- !52 = !DISubroutineType(types: !53)
- !53 = !{null, !3, !23}
- !54 = !DILocalVariable(name: "a", arg: 1, scope: !51, file: !1, line: 6, type: !3)
- !55 = !DILocation(line: 6, column: 29, scope: !51)
- !56 = !DILocalVariable(name: "n", arg: 2, scope: !51, file: !1, line: 6, type: !23)
- !57 = !DILocation(line: 6, column: 39, scope: !51)
- !58 = !DILocation(line: 7, column: 9, scope: !59)
- !59 = distinct !DILexicalBlock(scope: !51, file: !1, line: 7, column: 9)
- !60 = !DILocation(line: 7, column: 11, scope: !59)
- !61 = !DILocation(line: 7, column: 9, scope: !51)
- !62 = !DILocation(line: 7, column: 16, scope: !59)
- !63 = !DILocalVariable(name: "buf", scope: !51, file: !1, line: 9, type: !3)
- !64 = !DILocation(line: 9, column: 10, scope: !51)
- !65 = !DILocation(line: 9, column: 30, scope: !51)
- !66 = !DILocation(line: 9, column: 32, scope: !51)
- !67 = !DILocation(line: 9, column: 23, scope: !51)
- !68 = !DILocation(line: 9, column: 16, scope: !51)
- !69 = !DILocation(line: 10, column: 10, scope: !70)
- !70 = distinct !DILexicalBlock(scope: !51, file: !1, line: 10, column: 9)
- !71 = !DILocation(line: 10, column: 9, scope: !51)
- !72 = !DILocation(line: 10, column: 15, scope: !70)
- !73 = !DILocalVariable(name: "src", scope: !51, file: !1, line: 12, type: !3)
- !74 = !DILocation(line: 12, column: 10, scope: !51)
- !75 = !DILocation(line: 12, column: 16, scope: !51)
- !76 = !DILocalVariable(name: "dst", scope: !51, file: !1, line: 12, type: !3)
- !77 = !DILocation(line: 12, column: 20, scope: !51)
- !78 = !DILocation(line: 12, column: 26, scope: !51)
- !79 = !DILocalVariable(name: "width", scope: !80, file: !1, line: 14, type: !23)
- !80 = distinct !DILexicalBlock(scope: !51, file: !1, line: 14, column: 5)
- !81 = !DILocation(line: 14, column: 17, scope: !80)
- !82 = !DILocation(line: 14, column: 10, scope: !80)
- !83 = !DILocation(line: 14, column: 28, scope: !84)
- !84 = distinct !DILexicalBlock(scope: !80, file: !1, line: 14, column: 5)
- !85 = !DILocation(line: 14, column: 36, scope: !84)
- !86 = !DILocation(line: 14, column: 34, scope: !84)
- !87 = !DILocation(line: 14, column: 5, scope: !80)
- !88 = !DILocalVariable(name: "i", scope: !89, file: !1, line: 15, type: !23)
- !89 = distinct !DILexicalBlock(scope: !84, file: !1, line: 14, column: 52)
- !90 = !DILocation(line: 15, column: 16, scope: !89)
- !91 = !DILocation(line: 16, column: 9, scope: !89)
- !92 = !DILocation(line: 16, column: 16, scope: !89)
- !93 = !DILocation(line: 16, column: 20, scope: !89)
- !94 = !DILocation(line: 16, column: 18, scope: !89)
- !95 = !DILocalVariable(name: "left", scope: !96, file: !1, line: 17, type: !23)
- !96 = distinct !DILexicalBlock(scope: !89, file: !1, line: 16, column: 23)
- !97 = !DILocation(line: 17, column: 20, scope: !96)
- !98 = !DILocation(line: 17, column: 27, scope: !96)
- !99 = !DILocalVariable(name: "mid", scope: !96, file: !1, line: 18, type: !23)
- !100 = !DILocation(line: 18, column: 20, scope: !96)
- !101 = !DILocation(line: 18, column: 27, scope: !96)
- !102 = !DILocation(line: 18, column: 31, scope: !96)
- !103 = !DILocation(line: 18, column: 29, scope: !96)
- !104 = !DILocation(line: 18, column: 45, scope: !105)
- !105 = distinct !DILexicalBlock(scope: !96, file: !1, line: 18, column: 45)
- !106 = !DILocation(line: 18, column: 52, scope: !105)
- !107 = !DILocation(line: 18, column: 50, scope: !105)
- !108 = !DILocation(line: 18, column: 45, scope: !96)
- !109 = !DILocation(line: 18, column: 62, scope: !105)
- !110 = !DILocation(line: 18, column: 60, scope: !105)
- !111 = !DILocation(line: 18, column: 55, scope: !105)
- !112 = !DILocalVariable(name: "right", scope: !96, file: !1, line: 19, type: !23)
- !113 = !DILocation(line: 19, column: 20, scope: !96)
- !114 = !DILocation(line: 19, column: 27, scope: !96)
- !115 = !DILocation(line: 19, column: 33, scope: !96)
- !116 = !DILocation(line: 19, column: 32, scope: !96)
- !117 = !DILocation(line: 19, column: 29, scope: !96)
- !118 = !DILocation(line: 19, column: 45, scope: !119)
- !119 = distinct !DILexicalBlock(scope: !96, file: !1, line: 19, column: 45)
- !120 = !DILocation(line: 19, column: 52, scope: !119)
- !121 = !DILocation(line: 19, column: 50, scope: !119)
- !122 = !DILocation(line: 19, column: 45, scope: !96)
- !123 = !DILocation(line: 19, column: 62, scope: !119)
- !124 = !DILocation(line: 19, column: 60, scope: !119)
- !125 = !DILocation(line: 19, column: 55, scope: !119)
- !126 = !DILocalVariable(name: "l", scope: !96, file: !1, line: 21, type: !23)
- !127 = !DILocation(line: 21, column: 20, scope: !96)
- !128 = !DILocation(line: 21, column: 24, scope: !96)
- !129 = !DILocalVariable(name: "r", scope: !96, file: !1, line: 21, type: !23)
- !130 = !DILocation(line: 21, column: 30, scope: !96)
- !131 = !DILocation(line: 21, column: 34, scope: !96)
- !132 = !DILocalVariable(name: "p", scope: !133, file: !1, line: 22, type: !23)
- !133 = distinct !DILexicalBlock(scope: !96, file: !1, line: 22, column: 13)
- !134 = !DILocation(line: 22, column: 25, scope: !133)
- !135 = !DILocation(line: 22, column: 29, scope: !133)
- !136 = !DILocation(line: 22, column: 18, scope: !133)
- !137 = !DILocation(line: 22, column: 35, scope: !138)
- !138 = distinct !DILexicalBlock(scope: !133, file: !1, line: 22, column: 13)
- !139 = !DILocation(line: 22, column: 39, scope: !138)
- !140 = !DILocation(line: 22, column: 37, scope: !138)
- !141 = !DILocation(line: 22, column: 13, scope: !133)
- !142 = !DILocation(line: 23, column: 21, scope: !143)
- !143 = distinct !DILexicalBlock(scope: !144, file: !1, line: 23, column: 21)
- !144 = distinct !DILexicalBlock(scope: !138, file: !1, line: 22, column: 51)
- !145 = !DILocation(line: 23, column: 25, scope: !143)
- !146 = !DILocation(line: 23, column: 23, scope: !143)
- !147 = !DILocation(line: 23, column: 29, scope: !143)
- !148 = !DILocation(line: 23, column: 33, scope: !143)
- !149 = !DILocation(line: 23, column: 38, scope: !143)
- !150 = !DILocation(line: 23, column: 35, scope: !143)
- !151 = !DILocation(line: 23, column: 44, scope: !143)
- !152 = !DILocation(line: 23, column: 47, scope: !143)
- !153 = !DILocation(line: 23, column: 51, scope: !143)
- !154 = !DILocation(line: 23, column: 57, scope: !143)
- !155 = !DILocation(line: 23, column: 61, scope: !143)
- !156 = !DILocation(line: 23, column: 54, scope: !143)
- !157 = !DILocation(line: 23, column: 21, scope: !144)
- !158 = !DILocation(line: 24, column: 30, scope: !159)
- !159 = distinct !DILexicalBlock(scope: !143, file: !1, line: 23, column: 66)
- !160 = !DILocation(line: 24, column: 35, scope: !159)
- !161 = !DILocation(line: 24, column: 21, scope: !159)
- !162 = !DILocation(line: 24, column: 25, scope: !159)
- !163 = !DILocation(line: 24, column: 28, scope: !159)
- !164 = !DILocation(line: 25, column: 17, scope: !159)
- !165 = !DILocation(line: 26, column: 30, scope: !166)
- !166 = distinct !DILexicalBlock(scope: !143, file: !1, line: 25, column: 24)
- !167 = !DILocation(line: 26, column: 35, scope: !166)
- !168 = !DILocation(line: 26, column: 21, scope: !166)
- !169 = !DILocation(line: 26, column: 25, scope: !166)
- !170 = !DILocation(line: 26, column: 28, scope: !166)
- !171 = !DILocation(line: 28, column: 13, scope: !144)
- !172 = !DILocation(line: 22, column: 46, scope: !138)
- !173 = !DILocation(line: 22, column: 13, scope: !138)
- !174 = distinct !{!174, !141, !175, !48}
- !175 = !DILocation(line: 28, column: 13, scope: !133)
- !176 = !DILocation(line: 29, column: 22, scope: !96)
- !177 = !DILocation(line: 29, column: 20, scope: !96)
- !178 = !DILocation(line: 29, column: 15, scope: !96)
- !179 = distinct !{!179, !91, !180, !48}
- !180 = !DILocation(line: 30, column: 9, scope: !89)
- !181 = !DILocalVariable(name: "tmp", scope: !89, file: !1, line: 32, type: !3)
- !182 = !DILocation(line: 32, column: 14, scope: !89)
- !183 = !DILocation(line: 32, column: 20, scope: !89)
- !184 = !DILocation(line: 32, column: 31, scope: !89)
- !185 = !DILocation(line: 32, column: 29, scope: !89)
- !186 = !DILocation(line: 32, column: 42, scope: !89)
- !187 = !DILocation(line: 32, column: 40, scope: !89)
- !188 = !DILocation(line: 33, column: 5, scope: !89)
- !189 = !DILocation(line: 14, column: 45, scope: !84)
- !190 = !DILocation(line: 14, column: 5, scope: !84)
- !191 = distinct !{!191, !87, !192, !48}
- !192 = !DILocation(line: 33, column: 5, scope: !80)
- !193 = !DILocation(line: 36, column: 9, scope: !194)
- !194 = distinct !DILexicalBlock(scope: !51, file: !1, line: 36, column: 9)
- !195 = !DILocation(line: 36, column: 16, scope: !194)
- !196 = !DILocation(line: 36, column: 13, scope: !194)
- !197 = !DILocation(line: 36, column: 9, scope: !51)
- !198 = !DILocation(line: 37, column: 16, scope: !199)
- !199 = distinct !DILexicalBlock(scope: !194, file: !1, line: 36, column: 19)
- !200 = !DILocation(line: 37, column: 9, scope: !199)
- !201 = !DILocation(line: 37, column: 19, scope: !199)
- !202 = !DILocation(line: 37, column: 24, scope: !199)
- !203 = !DILocation(line: 37, column: 26, scope: !199)
- !204 = !DILocation(line: 38, column: 5, scope: !199)
- !205 = !DILocation(line: 39, column: 10, scope: !51)
- !206 = !DILocation(line: 39, column: 5, scope: !51)
- !207 = !DILocation(line: 40, column: 1, scope: !51)
