--- ref.ll
+++ dijkstra_single_func_main.norm.ll_llm_vs_ref.ll
@@ -1,163 +1,61 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/dijkstra_single_func_main.ll'
-source_filename = "dijkstra_single.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/9/dijkstra_single_func_main.ll'
+source_filename = "recovered_main.ll"
+target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
 target triple = "x86_64-pc-linux-gnu"
 
-@.str.2 = external hidden unnamed_addr constant [6 x i8], align 1
-@.str.3 = external hidden unnamed_addr constant [9 x i8], align 1
-@.str.4 = external hidden unnamed_addr constant [3 x i8], align 1
+@.str3 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
+@.str1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
 
-; Function Attrs: noinline nounwind optnone uwtable
-declare dso_local void @dijkstra([100 x i32]* noundef, i32 noundef, i32 noundef) #0
+declare i32 @__isoc99_scanf(i8* noundef, ...) local_unnamed_addr
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
+declare i8* @memset(i8* noundef, i32 noundef, i64 noundef) local_unnamed_addr
 
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local i32 @main() #0 !dbg !10 {
+declare void @dijkstra(i32* noundef, i32 noundef, i32 noundef) local_unnamed_addr
+
+define dso_local i32 @main() local_unnamed_addr {
 entry:
-  %retval = alloca i32, align 4
-  %V = alloca i32, align 4
-  %E = alloca i32, align 4
-  %graph = alloca [100 x [100 x i32]], align 16
-  %i = alloca i32, align 4
-  %u = alloca i32, align 4
-  %v = alloca i32, align 4
-  %w = alloca i32, align 4
-  %src = alloca i32, align 4
-  store i32 0, i32* %retval, align 4
-  call void @llvm.dbg.declare(metadata i32* %V, metadata !15, metadata !DIExpression()), !dbg !16
-  call void @llvm.dbg.declare(metadata i32* %E, metadata !17, metadata !DIExpression()), !dbg !18
-  %call = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* noundef %V, i32* noundef %E), !dbg !19
-  call void @llvm.dbg.declare(metadata [100 x [100 x i32]]* %graph, metadata !20, metadata !DIExpression()), !dbg !24
-  %0 = bitcast [100 x [100 x i32]]* %graph to i8*, !dbg !24
-  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 40000, i1 false), !dbg !24
-  call void @llvm.dbg.declare(metadata i32* %i, metadata !25, metadata !DIExpression()), !dbg !27
-  store i32 0, i32* %i, align 4, !dbg !27
-  br label %for.cond, !dbg !28
+  %var_8 = alloca i32, align 4
+  %var_C = alloca i32, align 4
+  %s = alloca [100 x [100 x i32]], align 16
+  %var_9C58 = alloca i32, align 4
+  %var_9C5C = alloca i32, align 4
+  %var_9C60 = alloca i32, align 4
+  %var_9C64 = alloca i32, align 4
+  %call_scanf_0 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str3, i64 0, i64 3), i32* noundef nonnull %var_8, i32* noundef nonnull %var_C)
+  %s_i8 = bitcast [100 x [100 x i32]]* %s to i8*
+  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(40000) %s_i8, i8 noundef 0, i64 noundef 40000, i1 false)
+  br label %loop
 
-for.cond:                                         ; preds = %for.inc, %entry
-  %1 = load i32, i32* %i, align 4, !dbg !29
-  %2 = load i32, i32* %E, align 4, !dbg !31
-  %cmp = icmp slt i32 %1, %2, !dbg !32
-  br i1 %cmp, label %for.body, label %for.end, !dbg !33
+loop:                                             ; preds = %body, %entry
+  %i.0 = phi i32 [ 0, %entry ], [ %inc, %body ]
+  %m_val = load i32, i32* %var_C, align 4
+  %cmp.not = icmp slt i32 %i.0, %m_val
+  br i1 %cmp.not, label %body, label %after_loop
 
-for.body:                                         ; preds = %for.cond
-  call void @llvm.dbg.declare(metadata i32* %u, metadata !34, metadata !DIExpression()), !dbg !36
-  call void @llvm.dbg.declare(metadata i32* %v, metadata !37, metadata !DIExpression()), !dbg !38
-  call void @llvm.dbg.declare(metadata i32* %w, metadata !39, metadata !DIExpression()), !dbg !40
-  %call1 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i32* noundef %u, i32* noundef %v, i32* noundef %w), !dbg !41
-  %3 = load i32, i32* %w, align 4, !dbg !42
-  %4 = load i32, i32* %u, align 4, !dbg !43
-  %idxprom = sext i32 %4 to i64, !dbg !44
-  %arrayidx = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %graph, i64 0, i64 %idxprom, !dbg !44
-  %5 = load i32, i32* %v, align 4, !dbg !45
-  %idxprom2 = sext i32 %5 to i64, !dbg !44
-  %arrayidx3 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx, i64 0, i64 %idxprom2, !dbg !44
-  store i32 %3, i32* %arrayidx3, align 4, !dbg !46
-  %6 = load i32, i32* %w, align 4, !dbg !47
-  %7 = load i32, i32* %v, align 4, !dbg !48
-  %idxprom4 = sext i32 %7 to i64, !dbg !49
-  %arrayidx5 = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %graph, i64 0, i64 %idxprom4, !dbg !49
-  %8 = load i32, i32* %u, align 4, !dbg !50
-  %idxprom6 = sext i32 %8 to i64, !dbg !49
-  %arrayidx7 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx5, i64 0, i64 %idxprom6, !dbg !49
-  store i32 %6, i32* %arrayidx7, align 4, !dbg !51
-  br label %for.inc, !dbg !52
+body:                                             ; preds = %loop
+  %call_scanf_edges = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str3, i64 0, i64 0), i32* noundef nonnull %var_9C58, i32* noundef nonnull %var_9C5C, i32* noundef nonnull %var_9C60)
+  %u_val = load i32, i32* %var_9C58, align 4
+  %v_val = load i32, i32* %var_9C5C, align 4
+  %w_val = load i32, i32* %var_9C60, align 4
+  %u64 = sext i32 %u_val to i64
+  %v64 = sext i32 %v_val to i64
+  %elem_uv = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %s, i64 0, i64 %u64, i64 %v64
+  store i32 %w_val, i32* %elem_uv, align 4
+  %elem_vu = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %s, i64 0, i64 %v64, i64 %u64
+  store i32 %w_val, i32* %elem_vu, align 4
+  %inc = add nuw nsw i32 %i.0, 1
+  br label %loop
 
-for.inc:                                          ; preds = %for.body
-  %9 = load i32, i32* %i, align 4, !dbg !53
-  %inc = add nsw i32 %9, 1, !dbg !53
-  store i32 %inc, i32* %i, align 4, !dbg !53
-  br label %for.cond, !dbg !54, !llvm.loop !55
-
-for.end:                                          ; preds = %for.cond
-  call void @llvm.dbg.declare(metadata i32* %src, metadata !58, metadata !DIExpression()), !dbg !59
-  %call8 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32* noundef %src), !dbg !60
-  %arraydecay = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %graph, i64 0, i64 0, !dbg !61
-  %10 = load i32, i32* %V, align 4, !dbg !62
-  %11 = load i32, i32* %src, align 4, !dbg !63
-  call void @dijkstra([100 x i32]* noundef %arraydecay, i32 noundef %10, i32 noundef %11), !dbg !64
-  ret i32 0, !dbg !65
+after_loop:                                       ; preds = %loop
+  %call_scanf_last = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str1, i64 0, i64 0), i32* noundef nonnull %var_9C64)
+  %base_ptr = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %s, i64 0, i64 0, i64 0
+  %src = load i32, i32* %var_8, align 4
+  %dst = load i32, i32* %var_9C64, align 4
+  call void @dijkstra(i32* noundef nonnull %base_ptr, i32 noundef %src, i32 noundef %dst)
+  ret i32 0
 }
 
-declare i32 @__isoc99_scanf(i8* noundef, ...) #2
+; Function Attrs: argmemonly nofree nounwind willreturn writeonly
+declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0
 
-; Function Attrs: argmemonly nofree nounwind willreturn writeonly
-declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3
-
-attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "dijkstra_single.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "93a059610778ce79afcc0838333af313")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
-!3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 39, type: !11, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
-!11 = !DISubroutineType(types: !12)
-!12 = !{!13}
-!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!14 = !{}
-!15 = !DILocalVariable(name: "V", scope: !10, file: !1, line: 40, type: !13)
-!16 = !DILocation(line: 40, column: 9, scope: !10)
-!17 = !DILocalVariable(name: "E", scope: !10, file: !1, line: 40, type: !13)
-!18 = !DILocation(line: 40, column: 12, scope: !10)
-!19 = !DILocation(line: 41, column: 5, scope: !10)
-!20 = !DILocalVariable(name: "graph", scope: !10, file: !1, line: 43, type: !21)
-!21 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 320000, elements: !22)
-!22 = !{!23, !23}
-!23 = !DISubrange(count: 100)
-!24 = !DILocation(line: 43, column: 9, scope: !10)
-!25 = !DILocalVariable(name: "i", scope: !26, file: !1, line: 45, type: !13)
-!26 = distinct !DILexicalBlock(scope: !10, file: !1, line: 45, column: 5)
-!27 = !DILocation(line: 45, column: 14, scope: !26)
-!28 = !DILocation(line: 45, column: 10, scope: !26)
-!29 = !DILocation(line: 45, column: 21, scope: !30)
-!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 45, column: 5)
-!31 = !DILocation(line: 45, column: 25, scope: !30)
-!32 = !DILocation(line: 45, column: 23, scope: !30)
-!33 = !DILocation(line: 45, column: 5, scope: !26)
-!34 = !DILocalVariable(name: "u", scope: !35, file: !1, line: 46, type: !13)
-!35 = distinct !DILexicalBlock(scope: !30, file: !1, line: 45, column: 33)
-!36 = !DILocation(line: 46, column: 13, scope: !35)
-!37 = !DILocalVariable(name: "v", scope: !35, file: !1, line: 46, type: !13)
-!38 = !DILocation(line: 46, column: 16, scope: !35)
-!39 = !DILocalVariable(name: "w", scope: !35, file: !1, line: 46, type: !13)
-!40 = !DILocation(line: 46, column: 19, scope: !35)
-!41 = !DILocation(line: 47, column: 9, scope: !35)
-!42 = !DILocation(line: 48, column: 23, scope: !35)
-!43 = !DILocation(line: 48, column: 15, scope: !35)
-!44 = !DILocation(line: 48, column: 9, scope: !35)
-!45 = !DILocation(line: 48, column: 18, scope: !35)
-!46 = !DILocation(line: 48, column: 21, scope: !35)
-!47 = !DILocation(line: 49, column: 23, scope: !35)
-!48 = !DILocation(line: 49, column: 15, scope: !35)
-!49 = !DILocation(line: 49, column: 9, scope: !35)
-!50 = !DILocation(line: 49, column: 18, scope: !35)
-!51 = !DILocation(line: 49, column: 21, scope: !35)
-!52 = !DILocation(line: 50, column: 5, scope: !35)
-!53 = !DILocation(line: 45, column: 29, scope: !30)
-!54 = !DILocation(line: 45, column: 5, scope: !30)
-!55 = distinct !{!55, !33, !56, !57}
-!56 = !DILocation(line: 50, column: 5, scope: !26)
-!57 = !{!"llvm.loop.mustprogress"}
-!58 = !DILocalVariable(name: "src", scope: !10, file: !1, line: 52, type: !13)
-!59 = !DILocation(line: 52, column: 9, scope: !10)
-!60 = !DILocation(line: 53, column: 5, scope: !10)
-!61 = !DILocation(line: 55, column: 14, scope: !10)
-!62 = !DILocation(line: 55, column: 21, scope: !10)
-!63 = !DILocation(line: 55, column: 24, scope: !10)
-!64 = !DILocation(line: 55, column: 5, scope: !10)
-!65 = !DILocation(line: 56, column: 5, scope: !10)
+attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
