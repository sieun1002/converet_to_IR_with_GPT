--- ref.ll
+++ BFS_main.norm.ll_llm_vs_ref.ll
@@ -1,350 +1,114 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/BFS_main.ll'
-source_filename = "../original/src/BFS.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/9/BFS_main.ll'
+source_filename = "bfs_main.ll"
 target triple = "x86_64-pc-linux-gnu"
 
-@.str = external hidden unnamed_addr constant [21 x i8], align 1
-@.str.1 = external hidden unnamed_addr constant [6 x i8], align 1
-@.str.2 = external hidden unnamed_addr constant [2 x i8], align 1
-@.str.3 = external hidden unnamed_addr constant [1 x i8], align 1
-@.str.4 = external hidden unnamed_addr constant [2 x i8], align 1
-@.str.5 = external hidden unnamed_addr constant [23 x i8], align 1
+@__stack_chk_guard = external thread_local global i64
+@.str_hdr = private unnamed_addr constant [21 x i8] c"BFS order from %zu: \00", align 1
+@.str_pair = private unnamed_addr constant [6 x i8] c"%zu%s\00", align 1
+@.str_space = private unnamed_addr constant [2 x i8] c" \00", align 1
+@.str_empty = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
+@.str_dist = private unnamed_addr constant [23 x i8] c"dist(%zu -> %zu) = %d\0A\00", align 1
 
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local i32 @main() #0 !dbg !15 {
+; Function Attrs: noreturn
+declare void @__stack_chk_fail() #0
+
+declare void @bfs(i32* noundef, i64 noundef, i64 noundef, i32* noundef, i64* noundef, i64* noundef)
+
+declare i32 @printf(i8* noundef, ...)
+
+declare i32 @putchar(i32 noundef)
+
+; Function Attrs: argmemonly nofree nounwind willreturn writeonly
+declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1
+
+define i32 @main() local_unnamed_addr {
 entry:
-  %retval = alloca i32, align 4
-  %n = alloca i64, align 8
-  %g = alloca [49 x i32], align 16
-  %s = alloca i64, align 8
+  %adj = alloca [49 x i32], align 16
   %dist = alloca [7 x i32], align 16
   %order = alloca [7 x i64], align 16
-  %ord_len = alloca i64, align 8
-  %i = alloca i64, align 8
-  %i59 = alloca i64, align 8
-  store i32 0, i32* %retval, align 4
-  call void @llvm.dbg.declare(metadata i64* %n, metadata !20, metadata !DIExpression()), !dbg !21
-  store i64 7, i64* %n, align 8, !dbg !21
-  call void @llvm.dbg.declare(metadata [49 x i32]* %g, metadata !22, metadata !DIExpression()), !dbg !26
-  %0 = bitcast [49 x i32]* %g to i8*, !dbg !26
-  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 196, i1 false), !dbg !26
-  br label %do.body, !dbg !27
+  %order_len = alloca i64, align 8
+  %guard = load i64, i64* @__stack_chk_guard, align 4
+  %adj.cast = bitcast [49 x i32]* %adj to i8*
+  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(196) %adj.cast, i8 0, i64 196, i1 false)
+  %adj.idx1.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 1
+  store i32 1, i32* %adj.idx1.ptr, align 4
+  %adj.idx7.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 7
+  store i32 1, i32* %adj.idx7.ptr, align 4
+  %adj.idx2.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 2
+  store i32 1, i32* %adj.idx2.ptr, align 8
+  %adj.idx14.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 14
+  store i32 1, i32* %adj.idx14.ptr, align 8
+  %adj.idx10.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 10
+  store i32 1, i32* %adj.idx10.ptr, align 8
+  %adj.idx22.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 22
+  store i32 1, i32* %adj.idx22.ptr, align 8
+  %adj.idx11.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 11
+  store i32 1, i32* %adj.idx11.ptr, align 4
+  %adj.idx29.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 29
+  store i32 1, i32* %adj.idx29.ptr, align 4
+  %adj.idx19.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 19
+  store i32 1, i32* %adj.idx19.ptr, align 4
+  %adj.idx37.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 37
+  store i32 1, i32* %adj.idx37.ptr, align 4
+  %adj.idx33.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 33
+  store i32 1, i32* %adj.idx33.ptr, align 4
+  %adj.idx39.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 39
+  store i32 1, i32* %adj.idx39.ptr, align 4
+  %adj.idx41.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 41
+  store i32 1, i32* %adj.idx41.ptr, align 4
+  %adj.idx47.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 47
+  store i32 1, i32* %adj.idx47.ptr, align 4
+  store i64 0, i64* %order_len, align 8
+  %adj.base = getelementptr inbounds [49 x i32], [49 x i32]* %adj, i64 0, i64 0
+  %dist.base = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 0
+  %order.base = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 0
+  call void @bfs(i32* nonnull %adj.base, i64 7, i64 0, i32* nonnull %dist.base, i64* nonnull %order.base, i64* nonnull %order_len)
+  %call_hdr = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str_hdr, i64 0, i64 0), i64 0)
+  br label %loop_order
 
-do.body:                                          ; preds = %entry
-  %1 = load i64, i64* %n, align 8, !dbg !28
-  %mul = mul i64 0, %1, !dbg !28
-  %add = add i64 %mul, 1, !dbg !28
-  %arrayidx = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add, !dbg !28
-  store i32 1, i32* %arrayidx, align 4, !dbg !28
-  %2 = load i64, i64* %n, align 8, !dbg !28
-  %mul1 = mul i64 1, %2, !dbg !28
-  %add2 = add i64 %mul1, 0, !dbg !28
-  %arrayidx3 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add2, !dbg !28
-  store i32 1, i32* %arrayidx3, align 4, !dbg !28
-  br label %do.end, !dbg !28
+loop_order:                                       ; preds = %loop_body, %entry
+  %i.cur = phi i64 [ 0, %entry ], [ %i.plus1, %loop_body ]
+  %len.cur = load i64, i64* %order_len, align 8
+  %cond.cont = icmp ult i64 %i.cur, %len.cur
+  br i1 %cond.cont, label %loop_body, label %after_order
 
-do.end:                                           ; preds = %do.body
-  br label %do.body4, !dbg !30
+loop_body:                                        ; preds = %loop_order
+  %i.plus1 = add i64 %i.cur, 1
+  %has_more = icmp ult i64 %i.plus1, %len.cur
+  %delim.ptr = select i1 %has_more, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str_space, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str_empty, i64 0, i64 0)
+  %ord.elem.ptr = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 %i.cur
+  %ord.val = load i64, i64* %ord.elem.ptr, align 8
+  %call_pair = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str_pair, i64 0, i64 0), i64 %ord.val, i8* %delim.ptr)
+  br label %loop_order
 
-do.body4:                                         ; preds = %do.end
-  %3 = load i64, i64* %n, align 8, !dbg !31
-  %mul5 = mul i64 0, %3, !dbg !31
-  %add6 = add i64 %mul5, 2, !dbg !31
-  %arrayidx7 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add6, !dbg !31
-  store i32 1, i32* %arrayidx7, align 4, !dbg !31
-  %4 = load i64, i64* %n, align 8, !dbg !31
-  %mul8 = mul i64 2, %4, !dbg !31
-  %add9 = add i64 %mul8, 0, !dbg !31
-  %arrayidx10 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add9, !dbg !31
-  store i32 1, i32* %arrayidx10, align 4, !dbg !31
-  br label %do.end11, !dbg !31
+after_order:                                      ; preds = %loop_order
+  %nl = call i32 @putchar(i32 10)
+  br label %loop_dist
 
-do.end11:                                         ; preds = %do.body4
-  br label %do.body12, !dbg !33
+loop_dist:                                        ; preds = %dist_body, %after_order
+  %v.cur = phi i64 [ 0, %after_order ], [ %v.next, %dist_body ]
+  %cont.dist = icmp ult i64 %v.cur, 7
+  br i1 %cont.dist, label %dist_body, label %epilogue
 
-do.body12:                                        ; preds = %do.end11
-  %5 = load i64, i64* %n, align 8, !dbg !34
-  %mul13 = mul i64 1, %5, !dbg !34
-  %add14 = add i64 %mul13, 3, !dbg !34
-  %arrayidx15 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add14, !dbg !34
-  store i32 1, i32* %arrayidx15, align 4, !dbg !34
-  %6 = load i64, i64* %n, align 8, !dbg !34
-  %mul16 = mul i64 3, %6, !dbg !34
-  %add17 = add i64 %mul16, 1, !dbg !34
-  %arrayidx18 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add17, !dbg !34
-  store i32 1, i32* %arrayidx18, align 4, !dbg !34
-  br label %do.end19, !dbg !34
+dist_body:                                        ; preds = %loop_dist
+  %dist.ptr = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %v.cur
+  %dval = load i32, i32* %dist.ptr, align 4
+  %call_dist = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str_dist, i64 0, i64 0), i64 0, i64 %v.cur, i32 %dval)
+  %v.next = add i64 %v.cur, 1
+  br label %loop_dist
 
-do.end19:                                         ; preds = %do.body12
-  br label %do.body20, !dbg !36
+epilogue:                                         ; preds = %loop_dist
+  %guard.now = load i64, i64* @__stack_chk_guard, align 4
+  %guard.ok = icmp eq i64 %guard, %guard.now
+  br i1 %guard.ok, label %ret, label %stack_fail
 
-do.body20:                                        ; preds = %do.end19
-  %7 = load i64, i64* %n, align 8, !dbg !37
-  %mul21 = mul i64 1, %7, !dbg !37
-  %add22 = add i64 %mul21, 4, !dbg !37
-  %arrayidx23 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add22, !dbg !37
-  store i32 1, i32* %arrayidx23, align 4, !dbg !37
-  %8 = load i64, i64* %n, align 8, !dbg !37
-  %mul24 = mul i64 4, %8, !dbg !37
-  %add25 = add i64 %mul24, 1, !dbg !37
-  %arrayidx26 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add25, !dbg !37
-  store i32 1, i32* %arrayidx26, align 4, !dbg !37
-  br label %do.end27, !dbg !37
+stack_fail:                                       ; preds = %epilogue
+  call void @__stack_chk_fail()
+  unreachable
 
-do.end27:                                         ; preds = %do.body20
-  br label %do.body28, !dbg !39
-
-do.body28:                                        ; preds = %do.end27
-  %9 = load i64, i64* %n, align 8, !dbg !40
-  %mul29 = mul i64 2, %9, !dbg !40
-  %add30 = add i64 %mul29, 5, !dbg !40
-  %arrayidx31 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add30, !dbg !40
-  store i32 1, i32* %arrayidx31, align 4, !dbg !40
-  %10 = load i64, i64* %n, align 8, !dbg !40
-  %mul32 = mul i64 5, %10, !dbg !40
-  %add33 = add i64 %mul32, 2, !dbg !40
-  %arrayidx34 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add33, !dbg !40
-  store i32 1, i32* %arrayidx34, align 4, !dbg !40
-  br label %do.end35, !dbg !40
-
-do.end35:                                         ; preds = %do.body28
-  br label %do.body36, !dbg !42
-
-do.body36:                                        ; preds = %do.end35
-  %11 = load i64, i64* %n, align 8, !dbg !43
-  %mul37 = mul i64 4, %11, !dbg !43
-  %add38 = add i64 %mul37, 5, !dbg !43
-  %arrayidx39 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add38, !dbg !43
-  store i32 1, i32* %arrayidx39, align 4, !dbg !43
-  %12 = load i64, i64* %n, align 8, !dbg !43
-  %mul40 = mul i64 5, %12, !dbg !43
-  %add41 = add i64 %mul40, 4, !dbg !43
-  %arrayidx42 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add41, !dbg !43
-  store i32 1, i32* %arrayidx42, align 4, !dbg !43
-  br label %do.end43, !dbg !43
-
-do.end43:                                         ; preds = %do.body36
-  br label %do.body44, !dbg !45
-
-do.body44:                                        ; preds = %do.end43
-  %13 = load i64, i64* %n, align 8, !dbg !46
-  %mul45 = mul i64 5, %13, !dbg !46
-  %add46 = add i64 %mul45, 6, !dbg !46
-  %arrayidx47 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add46, !dbg !46
-  store i32 1, i32* %arrayidx47, align 4, !dbg !46
-  %14 = load i64, i64* %n, align 8, !dbg !46
-  %mul48 = mul i64 6, %14, !dbg !46
-  %add49 = add i64 %mul48, 5, !dbg !46
-  %arrayidx50 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add49, !dbg !46
-  store i32 1, i32* %arrayidx50, align 4, !dbg !46
-  br label %do.end51, !dbg !46
-
-do.end51:                                         ; preds = %do.body44
-  call void @llvm.dbg.declare(metadata i64* %s, metadata !48, metadata !DIExpression()), !dbg !49
-  store i64 0, i64* %s, align 8, !dbg !49
-  call void @llvm.dbg.declare(metadata [7 x i32]* %dist, metadata !50, metadata !DIExpression()), !dbg !54
-  call void @llvm.dbg.declare(metadata [7 x i64]* %order, metadata !55, metadata !DIExpression()), !dbg !57
-  call void @llvm.dbg.declare(metadata i64* %ord_len, metadata !58, metadata !DIExpression()), !dbg !59
-  store i64 0, i64* %ord_len, align 8, !dbg !59
-  %arraydecay = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 0, !dbg !60
-  %15 = load i64, i64* %n, align 8, !dbg !61
-  %16 = load i64, i64* %s, align 8, !dbg !62
-  %arraydecay52 = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 0, !dbg !63
-  %arraydecay53 = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 0, !dbg !64
-  call void @bfs(i32* noundef %arraydecay, i64 noundef %15, i64 noundef %16, i32* noundef %arraydecay52, i64* noundef %arraydecay53, i64* noundef %ord_len), !dbg !65
-  %17 = load i64, i64* %s, align 8, !dbg !66
-  %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef %17), !dbg !67
-  call void @llvm.dbg.declare(metadata i64* %i, metadata !68, metadata !DIExpression()), !dbg !70
-  store i64 0, i64* %i, align 8, !dbg !70
-  br label %for.cond, !dbg !71
-
-for.cond:                                         ; preds = %for.inc, %do.end51
-  %18 = load i64, i64* %i, align 8, !dbg !72
-  %19 = load i64, i64* %ord_len, align 8, !dbg !74
-  %cmp = icmp ult i64 %18, %19, !dbg !75
-  br i1 %cmp, label %for.body, label %for.end, !dbg !76
-
-for.body:                                         ; preds = %for.cond
-  %20 = load i64, i64* %i, align 8, !dbg !77
-  %arrayidx54 = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 %20, !dbg !79
-  %21 = load i64, i64* %arrayidx54, align 8, !dbg !79
-  %22 = load i64, i64* %i, align 8, !dbg !80
-  %add55 = add i64 %22, 1, !dbg !81
-  %23 = load i64, i64* %ord_len, align 8, !dbg !82
-  %cmp56 = icmp ult i64 %add55, %23, !dbg !83
-  %24 = zext i1 %cmp56 to i64, !dbg !84
-  %cond = select i1 %cmp56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), !dbg !84
-  %call57 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21, i8* noundef %cond), !dbg !85
-  br label %for.inc, !dbg !86
-
-for.inc:                                          ; preds = %for.body
-  %25 = load i64, i64* %i, align 8, !dbg !87
-  %inc = add i64 %25, 1, !dbg !87
-  store i64 %inc, i64* %i, align 8, !dbg !87
-  br label %for.cond, !dbg !88, !llvm.loop !89
-
-for.end:                                          ; preds = %for.cond
-  %call58 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !92
-  call void @llvm.dbg.declare(metadata i64* %i59, metadata !93, metadata !DIExpression()), !dbg !95
-  store i64 0, i64* %i59, align 8, !dbg !95
-  br label %for.cond60, !dbg !96
-
-for.cond60:                                       ; preds = %for.inc65, %for.end
-  %26 = load i64, i64* %i59, align 8, !dbg !97
-  %27 = load i64, i64* %n, align 8, !dbg !99
-  %cmp61 = icmp ult i64 %26, %27, !dbg !100
-  br i1 %cmp61, label %for.body62, label %for.end67, !dbg !101
-
-for.body62:                                       ; preds = %for.cond60
-  %28 = load i64, i64* %s, align 8, !dbg !102
-  %29 = load i64, i64* %i59, align 8, !dbg !104
-  %30 = load i64, i64* %i59, align 8, !dbg !105
-  %arrayidx63 = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %30, !dbg !106
-  %31 = load i32, i32* %arrayidx63, align 4, !dbg !106
-  %call64 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i64 noundef %28, i64 noundef %29, i32 noundef %31), !dbg !107
-  br label %for.inc65, !dbg !108
-
-for.inc65:                                        ; preds = %for.body62
-  %32 = load i64, i64* %i59, align 8, !dbg !109
-  %inc66 = add i64 %32, 1, !dbg !109
-  store i64 %inc66, i64* %i59, align 8, !dbg !109
-  br label %for.cond60, !dbg !110, !llvm.loop !111
-
-for.end67:                                        ; preds = %for.cond60
-  ret i32 0, !dbg !113
+ret:                                              ; preds = %epilogue
+  ret i32 0
 }
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
-
-; Function Attrs: argmemonly nofree nounwind willreturn writeonly
-declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2
-
-; Function Attrs: noinline nounwind optnone uwtable
-declare hidden void @bfs(i32* noundef, i64 noundef, i64 noundef, i32* noundef, i64* noundef, i64* noundef) #0
-
-declare i32 @printf(i8* noundef, ...) #3
-
-attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
-attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!7, !8, !9, !10, !11, !12, !13}
-!llvm.ident = !{!14}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "../original/src/BFS.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "4b96fd8fb8cbef06e0e928edea17e086")
-!2 = !{!3}
-!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
-!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !5, line: 46, baseType: !6)
-!5 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
-!6 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
-!7 = !{i32 7, !"Dwarf Version", i32 5}
-!8 = !{i32 2, !"Debug Info Version", i32 3}
-!9 = !{i32 1, !"wchar_size", i32 4}
-!10 = !{i32 7, !"PIC Level", i32 2}
-!11 = !{i32 7, !"PIE Level", i32 2}
-!12 = !{i32 7, !"uwtable", i32 1}
-!13 = !{i32 7, !"frame-pointer", i32 2}
-!14 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!15 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 33, type: !16, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
-!16 = !DISubroutineType(types: !17)
-!17 = !{!18}
-!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!19 = !{}
-!20 = !DILocalVariable(name: "n", scope: !15, file: !1, line: 34, type: !4)
-!21 = !DILocation(line: 34, column: 12, scope: !15)
-!22 = !DILocalVariable(name: "g", scope: !15, file: !1, line: 35, type: !23)
-!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 1568, elements: !24)
-!24 = !{!25}
-!25 = !DISubrange(count: 49)
-!26 = !DILocation(line: 35, column: 9, scope: !15)
-!27 = !DILocation(line: 38, column: 5, scope: !15)
-!28 = !DILocation(line: 38, column: 5, scope: !29)
-!29 = distinct !DILexicalBlock(scope: !15, file: !1, line: 38, column: 5)
-!30 = !DILocation(line: 38, column: 15, scope: !15)
-!31 = !DILocation(line: 38, column: 15, scope: !32)
-!32 = distinct !DILexicalBlock(scope: !15, file: !1, line: 38, column: 15)
-!33 = !DILocation(line: 38, column: 25, scope: !15)
-!34 = !DILocation(line: 38, column: 25, scope: !35)
-!35 = distinct !DILexicalBlock(scope: !15, file: !1, line: 38, column: 25)
-!36 = !DILocation(line: 38, column: 35, scope: !15)
-!37 = !DILocation(line: 38, column: 35, scope: !38)
-!38 = distinct !DILexicalBlock(scope: !15, file: !1, line: 38, column: 35)
-!39 = !DILocation(line: 38, column: 45, scope: !15)
-!40 = !DILocation(line: 38, column: 45, scope: !41)
-!41 = distinct !DILexicalBlock(scope: !15, file: !1, line: 38, column: 45)
-!42 = !DILocation(line: 38, column: 55, scope: !15)
-!43 = !DILocation(line: 38, column: 55, scope: !44)
-!44 = distinct !DILexicalBlock(scope: !15, file: !1, line: 38, column: 55)
-!45 = !DILocation(line: 38, column: 65, scope: !15)
-!46 = !DILocation(line: 38, column: 65, scope: !47)
-!47 = distinct !DILexicalBlock(scope: !15, file: !1, line: 38, column: 65)
-!48 = !DILocalVariable(name: "s", scope: !15, file: !1, line: 41, type: !4)
-!49 = !DILocation(line: 41, column: 12, scope: !15)
-!50 = !DILocalVariable(name: "dist", scope: !15, file: !1, line: 42, type: !51)
-!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 224, elements: !52)
-!52 = !{!53}
-!53 = !DISubrange(count: 7)
-!54 = !DILocation(line: 42, column: 9, scope: !15)
-!55 = !DILocalVariable(name: "order", scope: !15, file: !1, line: 43, type: !56)
-!56 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 448, elements: !52)
-!57 = !DILocation(line: 43, column: 12, scope: !15)
-!58 = !DILocalVariable(name: "ord_len", scope: !15, file: !1, line: 44, type: !4)
-!59 = !DILocation(line: 44, column: 12, scope: !15)
-!60 = !DILocation(line: 46, column: 9, scope: !15)
-!61 = !DILocation(line: 46, column: 12, scope: !15)
-!62 = !DILocation(line: 46, column: 15, scope: !15)
-!63 = !DILocation(line: 46, column: 18, scope: !15)
-!64 = !DILocation(line: 46, column: 24, scope: !15)
-!65 = !DILocation(line: 46, column: 5, scope: !15)
-!66 = !DILocation(line: 48, column: 36, scope: !15)
-!67 = !DILocation(line: 48, column: 5, scope: !15)
-!68 = !DILocalVariable(name: "i", scope: !69, file: !1, line: 49, type: !4)
-!69 = distinct !DILexicalBlock(scope: !15, file: !1, line: 49, column: 5)
-!70 = !DILocation(line: 49, column: 17, scope: !69)
-!71 = !DILocation(line: 49, column: 10, scope: !69)
-!72 = !DILocation(line: 49, column: 24, scope: !73)
-!73 = distinct !DILexicalBlock(scope: !69, file: !1, line: 49, column: 5)
-!74 = !DILocation(line: 49, column: 28, scope: !73)
-!75 = !DILocation(line: 49, column: 26, scope: !73)
-!76 = !DILocation(line: 49, column: 5, scope: !69)
-!77 = !DILocation(line: 50, column: 31, scope: !78)
-!78 = distinct !DILexicalBlock(scope: !73, file: !1, line: 49, column: 42)
-!79 = !DILocation(line: 50, column: 25, scope: !78)
-!80 = !DILocation(line: 50, column: 36, scope: !78)
-!81 = !DILocation(line: 50, column: 38, scope: !78)
-!82 = !DILocation(line: 50, column: 44, scope: !78)
-!83 = !DILocation(line: 50, column: 42, scope: !78)
-!84 = !DILocation(line: 50, column: 35, scope: !78)
-!85 = !DILocation(line: 50, column: 9, scope: !78)
-!86 = !DILocation(line: 51, column: 5, scope: !78)
-!87 = !DILocation(line: 49, column: 37, scope: !73)
-!88 = !DILocation(line: 49, column: 5, scope: !73)
-!89 = distinct !{!89, !76, !90, !91}
-!90 = !DILocation(line: 51, column: 5, scope: !69)
-!91 = !{!"llvm.loop.mustprogress"}
-!92 = !DILocation(line: 52, column: 5, scope: !15)
-!93 = !DILocalVariable(name: "i", scope: !94, file: !1, line: 54, type: !4)
-!94 = distinct !DILexicalBlock(scope: !15, file: !1, line: 54, column: 5)
-!95 = !DILocation(line: 54, column: 17, scope: !94)
-!96 = !DILocation(line: 54, column: 10, scope: !94)
-!97 = !DILocation(line: 54, column: 24, scope: !98)
-!98 = distinct !DILexicalBlock(scope: !94, file: !1, line: 54, column: 5)
-!99 = !DILocation(line: 54, column: 28, scope: !98)
-!100 = !DILocation(line: 54, column: 26, scope: !98)
-!101 = !DILocation(line: 54, column: 5, scope: !94)
-!102 = !DILocation(line: 55, column: 43, scope: !103)
-!103 = distinct !DILexicalBlock(scope: !98, file: !1, line: 54, column: 36)
-!104 = !DILocation(line: 55, column: 46, scope: !103)
-!105 = !DILocation(line: 55, column: 54, scope: !103)
-!106 = !DILocation(line: 55, column: 49, scope: !103)
-!107 = !DILocation(line: 55, column: 9, scope: !103)
-!108 = !DILocation(line: 56, column: 5, scope: !103)
-!109 = !DILocation(line: 54, column: 31, scope: !98)
-!110 = !DILocation(line: 54, column: 5, scope: !98)
-!111 = distinct !{!111, !101, !112, !91}
-!112 = !DILocation(line: 56, column: 5, scope: !94)
-!113 = !DILocation(line: 57, column: 5, scope: !15)
+attributes #0 = { noreturn }
+attributes #1 = { argmemonly nofree nounwind willreturn writeonly }
