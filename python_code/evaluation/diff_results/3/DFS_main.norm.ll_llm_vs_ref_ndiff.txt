- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/DFS_main.ll'
?                                                                  ^^^    ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/3/DFS_main.ll'
?                                                                +++++++++++++++++++++  ^^   ++++ ^
+ source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/3/DFS_main.ll"
- source_filename = "../original/src/DFS.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
+ declare noalias i8* @malloc(i64)
- @.str = external hidden unnamed_addr constant [24 x i8], align 1
- @.str.1 = external hidden unnamed_addr constant [6 x i8], align 1
- @.str.2 = external hidden unnamed_addr constant [2 x i8], align 1
- @.str.3 = external hidden unnamed_addr constant [1 x i8], align 1
- @.str.4 = external hidden unnamed_addr constant [2 x i8], align 1
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !17 {
+ declare void @free(i8*)
+ 
+ ; Function Attrs: nounwind
+ define dso_local void @dfs(i32* %adj, i64 %n, i64 %start, i64* %out, i64* %out_len_ptr) local_unnamed_addr #0 {
  entry:
+   %start_ge_n.not = icmp ult i64 %start, %n
+   br i1 %start_ge_n.not, label %alloc, label %early_ret
-   %retval = alloca i32, align 4
-   %n = alloca i64, align 8
-   %g = alloca [49 x i32], align 16
-   %s = alloca i64, align 8
-   %order = alloca [7 x i64], align 16
-   %ord_len = alloca i64, align 8
-   %i = alloca i64, align 8
-   store i32 0, i32* %retval, align 4
-   call void @llvm.dbg.declare(metadata i64* %n, metadata !21, metadata !DIExpression()), !dbg !22
-   store i64 7, i64* %n, align 8, !dbg !22
-   call void @llvm.dbg.declare(metadata [49 x i32]* %g, metadata !23, metadata !DIExpression()), !dbg !27
-   %0 = bitcast [49 x i32]* %g to i8*, !dbg !27
-   call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 196, i1 false), !dbg !27
-   br label %do.body, !dbg !28
  
+ common.ret:                                       ; preds = %cleanup, %alloc_fail, %early_ret
+   ret void
- do.body:                                          ; preds = %entry
-   %1 = load i64, i64* %n, align 8, !dbg !29
-   %mul = mul i64 0, %1, !dbg !29
-   %add = add i64 %mul, 1, !dbg !29
-   %arrayidx = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add, !dbg !29
-   store i32 1, i32* %arrayidx, align 4, !dbg !29
-   %2 = load i64, i64* %n, align 8, !dbg !29
-   %mul1 = mul i64 1, %2, !dbg !29
-   %add2 = add i64 %mul1, 0, !dbg !29
-   %arrayidx3 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add2, !dbg !29
-   store i32 1, i32* %arrayidx3, align 4, !dbg !29
-   br label %do.end, !dbg !29
  
- do.end:                                           ; preds = %do.body
? --- ^^                                         ---           ^^^^^^
+ early_ret:                                        ; preds = %entry
?  ^^^^^^^^                                                    ^^^^
-   br label %do.body4, !dbg !31
+   store i64 0, i64* %out_len_ptr, align 8
+   br label %common.ret
  
- do.body4:                                         ; preds = %do.end
? ^ ^^^^^^                                                     ---  ^
+ alloc:                                            ; preds = %entry
? ^^^ ^                                          +++             ^^^
-   %3 = load i64, i64* %n, align 8, !dbg !32
-   %mul5 = mul i64 0, %3, !dbg !32
-   %add6 = add i64 %mul5, 2, !dbg !32
-   %arrayidx7 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add6, !dbg !32
-   store i32 1, i32* %arrayidx7, align 4, !dbg !32
-   %4 = load i64, i64* %n, align 8, !dbg !32
-   %mul8 = mul i64 2, %4, !dbg !32
-   %add9 = add i64 %mul8, 0, !dbg !32
-   %arrayidx10 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add9, !dbg !32
-   store i32 1, i32* %arrayidx10, align 4, !dbg !32
-   br label %do.end11, !dbg !32
+   %size_vis = shl i64 %n, 2
+   %p_vis_i8 = call i8* @malloc(i64 %size_vis) #0
+   %visited = bitcast i8* %p_vis_i8 to i32*
+   %size_n8 = shl i64 %n, 3
+   %p_next_i8 = call i8* @malloc(i64 %size_n8) #0
+   %nextIndex = bitcast i8* %p_next_i8 to i64*
+   %p_stack_i8 = call i8* @malloc(i64 %size_n8) #0
+   %stack = bitcast i8* %p_stack_i8 to i64*
+   %vis_is_null = icmp eq i8* %p_vis_i8, null
+   %next_is_null = icmp eq i8* %p_next_i8, null
+   %stack_is_null = icmp eq i8* %p_stack_i8, null
+   %tmp_or1 = or i1 %vis_is_null, %next_is_null
+   %any_null = or i1 %tmp_or1, %stack_is_null
+   br i1 %any_null, label %alloc_fail, label %zero_loop
  
- do.end11:                                         ; preds = %do.body4
? ^ ^^^^^^                                        --           ^ ^^^^^^
+ alloc_fail:                                       ; preds = %alloc
? ^^^ ^^^^^^                                                   ^^^ ^
-   br label %do.body12, !dbg !34
+   call void @free(i8* %p_vis_i8)
+   call void @free(i8* %p_next_i8)
+   call void @free(i8* %p_stack_i8)
+   store i64 0, i64* %out_len_ptr, align 8
+   br label %common.ret
  
- do.body12:                                        ; preds = %do.end11
? ^ ^^ ^^^^                                                     ^^^^^^^
+ zero_loop:                                        ; preds = %alloc, %zero_body
? ^^^ ^^ ^^                                                    +++++++++++++++ ^
+   %i = phi i64 [ %i_next, %zero_body ], [ 0, %alloc ]
+   %cond_i = icmp ult i64 %i, %n
+   br i1 %cond_i, label %zero_body, label %after_zero
-   %5 = load i64, i64* %n, align 8, !dbg !35
-   %mul13 = mul i64 1, %5, !dbg !35
-   %add14 = add i64 %mul13, 3, !dbg !35
-   %arrayidx15 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add14, !dbg !35
-   store i32 1, i32* %arrayidx15, align 4, !dbg !35
-   %6 = load i64, i64* %n, align 8, !dbg !35
-   %mul16 = mul i64 3, %6, !dbg !35
-   %add17 = add i64 %mul16, 1, !dbg !35
-   %arrayidx18 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add17, !dbg !35
-   store i32 1, i32* %arrayidx18, align 4, !dbg !35
-   br label %do.end19, !dbg !35
  
- do.end19:                                         ; preds = %do.body12
?  ^^^^^^^                                         -           ^ ^^ ^^^^
+ zero_body:                                        ; preds = %zero_loop
? +++++++ ^                                                    ^^^ ^^ ^^
-   br label %do.body20, !dbg !37
+   %vis_ptr_i = getelementptr inbounds i32, i32* %visited, i64 %i
+   store i32 0, i32* %vis_ptr_i, align 4
+   %next_ptr_i = getelementptr inbounds i64, i64* %nextIndex, i64 %i
+   store i64 0, i64* %next_ptr_i, align 8
+   %i_next = add i64 %i, 1
+   br label %zero_loop
  
- do.body20:                                        ; preds = %do.end19
? ^ -------                                        -           ^ ^^^^^^
+ after_zero:                                       ; preds = %zero_loop
? ^^^^^^^^^                                                    ^^^ ^^^^^
+   store i64 0, i64* %out_len_ptr, align 8
+   store i64 %start, i64* %stack, align 8
+   %vis_ptr_start = getelementptr inbounds i32, i32* %visited, i64 %start
+   store i32 1, i32* %vis_ptr_start, align 4
+   store i64 %start, i64* %out, align 8
+   store i64 1, i64* %out_len_ptr, align 8
+   br label %loop_header
-   %7 = load i64, i64* %n, align 8, !dbg !38
-   %mul21 = mul i64 1, %7, !dbg !38
-   %add22 = add i64 %mul21, 4, !dbg !38
-   %arrayidx23 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add22, !dbg !38
-   store i32 1, i32* %arrayidx23, align 4, !dbg !38
-   %8 = load i64, i64* %n, align 8, !dbg !38
-   %mul24 = mul i64 4, %8, !dbg !38
-   %add25 = add i64 %mul24, 1, !dbg !38
-   %arrayidx26 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add25, !dbg !38
-   store i32 1, i32* %arrayidx26, align 4, !dbg !38
-   br label %do.end27, !dbg !38
  
- do.end27:                                         ; preds = %do.body20
-   br label %do.body28, !dbg !40
+ loop_header:                                      ; preds = %loop_back, %after_zero
+   %cur_len = phi i64 [ 1, %after_zero ], [ %cur_len1, %loop_back ]
+   %stackSize = phi i64 [ 1, %after_zero ], [ %stackSize_next, %loop_back ]
+   %has_items.not = icmp eq i64 %stackSize, 0
+   br i1 %has_items.not, label %cleanup, label %iter
  
- do.body28:                                        ; preds = %do.end27
? ^^^^^^^^^                                                     -- ^^^^
+ iter:                                             ; preds = %loop_header
? ^^^^                                         +++++           ++++++++  ^
+   %top_index = add i64 %stackSize, -1
+   %top_ptr = getelementptr inbounds i64, i64* %stack, i64 %top_index
-   %9 = load i64, i64* %n, align 8, !dbg !41
?    ^                   ^         ----------
+   %u = load i64, i64* %top_ptr, align 8
?    ^                   ^^^^^^^
+   %next_ptr_u = getelementptr inbounds i64, i64* %nextIndex, i64 %u
+   %j_init = load i64, i64* %next_ptr_u, align 8
+   br label %inner_loop
-   %mul29 = mul i64 2, %9, !dbg !41
-   %add30 = add i64 %mul29, 5, !dbg !41
-   %arrayidx31 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add30, !dbg !41
-   store i32 1, i32* %arrayidx31, align 4, !dbg !41
-   %10 = load i64, i64* %n, align 8, !dbg !41
-   %mul32 = mul i64 5, %10, !dbg !41
-   %add33 = add i64 %mul32, 2, !dbg !41
-   %arrayidx34 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add33, !dbg !41
-   store i32 1, i32* %arrayidx34, align 4, !dbg !41
-   br label %do.end35, !dbg !41
  
- do.end35:                                         ; preds = %do.body28
-   br label %do.body36, !dbg !43
+ inner_loop:                                       ; preds = %advance, %iter
+   %j = phi i64 [ %j_init, %iter ], [ %j_inc, %advance ]
+   %j_lt_n = icmp ult i64 %j, %n
+   br i1 %j_lt_n, label %inner_body, label %no_more_neighbors
  
- do.body36:                                        ; preds = %do.end35
? ^^^    --                                        -           ^ ^^^^^^
+ inner_body:                                       ; preds = %inner_loop
? ^^^^^^                                                       ^^^^^^^ ^^
+   %mul_un = mul i64 %u, %n
+   %idx_flat = add i64 %mul_un, %j
+   %adj_ptr = getelementptr inbounds i32, i32* %adj, i64 %idx_flat
+   %adj_val = load i32, i32* %adj_ptr, align 4
+   %edge = icmp ne i32 %adj_val, 0
+   %vis_ptr_j = getelementptr inbounds i32, i32* %visited, i64 %j
+   %vis_j = load i32, i32* %vis_ptr_j, align 4
+   %unvisited = icmp eq i32 %vis_j, 0
+   %can_traverse = and i1 %edge, %unvisited
+   br i1 %can_traverse, label %found, label %advance
-   %11 = load i64, i64* %n, align 8, !dbg !44
-   %mul37 = mul i64 4, %11, !dbg !44
-   %add38 = add i64 %mul37, 5, !dbg !44
-   %arrayidx39 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add38, !dbg !44
-   store i32 1, i32* %arrayidx39, align 4, !dbg !44
-   %12 = load i64, i64* %n, align 8, !dbg !44
-   %mul40 = mul i64 5, %12, !dbg !44
-   %add41 = add i64 %mul40, 4, !dbg !44
-   %arrayidx42 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add41, !dbg !44
-   store i32 1, i32* %arrayidx42, align 4, !dbg !44
-   br label %do.end43, !dbg !44
  
- do.end43:                                         ; preds = %do.body36
?  ^^ ----                                                     ^^^    --
+ advance:                                          ; preds = %inner_body
? + ^^^^                                           +           ^^^^^^
-   br label %do.body44, !dbg !46
+   %j_inc = add i64 %j, 1
+   br label %inner_loop
  
- do.body44:                                        ; preds = %do.end43
?  --------                                                     ^^^^^^^
+ found:                                            ; preds = %inner_body
? ++++                                          ++++           ++++++++ ^
-   %13 = load i64, i64* %n, align 8, !dbg !47
-   %mul45 = mul i64 5, %13, !dbg !47
-   %add46 = add i64 %mul45, 6, !dbg !47
-   %arrayidx47 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add46, !dbg !47
-   store i32 1, i32* %arrayidx47, align 4, !dbg !47
-   %14 = load i64, i64* %n, align 8, !dbg !47
-   %mul48 = mul i64 6, %14, !dbg !47
-   %add49 = add i64 %mul48, 5, !dbg !47
-   %arrayidx50 = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 %add49, !dbg !47
-   store i32 1, i32* %arrayidx50, align 4, !dbg !47
-   br label %do.end51, !dbg !47
+   %j_plus1 = add i64 %j, 1
+   store i64 %j_plus1, i64* %next_ptr_u, align 8
+   store i32 1, i32* %vis_ptr_j, align 4
+   %out_pos = getelementptr inbounds i64, i64* %out, i64 %cur_len
+   store i64 %j, i64* %out_pos, align 8
+   %new_len = add i64 %cur_len, 1
+   store i64 %new_len, i64* %out_len_ptr, align 8
+   %stack_pos_push = getelementptr inbounds i64, i64* %stack, i64 %stackSize
+   store i64 %j, i64* %stack_pos_push, align 8
+   %stackSize_inc = add i64 %stackSize, 1
+   br label %loop_back
  
+ no_more_neighbors:                                ; preds = %inner_loop
+   br label %loop_back
- do.end51:                                         ; preds = %do.body44
-   call void @llvm.dbg.declare(metadata i64* %s, metadata !49, metadata !DIExpression()), !dbg !50
-   store i64 0, i64* %s, align 8, !dbg !50
-   call void @llvm.dbg.declare(metadata [7 x i64]* %order, metadata !51, metadata !DIExpression()), !dbg !55
-   call void @llvm.dbg.declare(metadata i64* %ord_len, metadata !56, metadata !DIExpression()), !dbg !57
-   store i64 0, i64* %ord_len, align 8, !dbg !57
-   %arraydecay = getelementptr inbounds [49 x i32], [49 x i32]* %g, i64 0, i64 0, !dbg !58
-   %15 = load i64, i64* %n, align 8, !dbg !59
-   %16 = load i64, i64* %s, align 8, !dbg !60
-   %arraydecay52 = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 0, !dbg !61
-   call void @dfs(i32* noundef %arraydecay, i64 noundef %15, i64 noundef %16, i64* noundef %arraydecay52, i64* noundef %ord_len), !dbg !62
-   %17 = load i64, i64* %s, align 8, !dbg !63
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i64 noundef %17), !dbg !64
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !65, metadata !DIExpression()), !dbg !67
-   store i64 0, i64* %i, align 8, !dbg !67
-   br label %for.cond, !dbg !68
  
+ loop_back:                                        ; preds = %no_more_neighbors, %found
+   %cur_len1 = phi i64 [ %new_len, %found ], [ %cur_len, %no_more_neighbors ]
+   %stackSize_next = phi i64 [ %stackSize_inc, %found ], [ %top_index, %no_more_neighbors ]
+   br label %loop_header
- for.cond:                                         ; preds = %for.inc, %do.end51
-   %18 = load i64, i64* %i, align 8, !dbg !69
-   %19 = load i64, i64* %ord_len, align 8, !dbg !71
-   %cmp = icmp ult i64 %18, %19, !dbg !72
-   br i1 %cmp, label %for.body, label %for.end, !dbg !73
  
- for.body:                                         ; preds = %for.cond
-   %20 = load i64, i64* %i, align 8, !dbg !74
-   %arrayidx53 = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 %20, !dbg !76
-   %21 = load i64, i64* %arrayidx53, align 8, !dbg !76
-   %22 = load i64, i64* %i, align 8, !dbg !77
-   %add54 = add i64 %22, 1, !dbg !78
-   %23 = load i64, i64* %ord_len, align 8, !dbg !79
-   %cmp55 = icmp ult i64 %add54, %23, !dbg !80
-   %24 = zext i1 %cmp55 to i64, !dbg !81
-   %cond = select i1 %cmp55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), !dbg !81
-   %call56 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 noundef %21, i8* noundef %cond), !dbg !82
-   br label %for.inc, !dbg !83
- 
- for.inc:                                          ; preds = %for.body
-   %25 = load i64, i64* %i, align 8, !dbg !84
-   %inc = add i64 %25, 1, !dbg !84
-   store i64 %inc, i64* %i, align 8, !dbg !84
-   br label %for.cond, !dbg !85, !llvm.loop !86
- 
- for.end:                                          ; preds = %for.cond
? ^^^^  ^                                                      ^  -----
+ cleanup:                                          ; preds = %loop_header
? ^^ + ^^                                                      ^ ++++++++
-   %call57 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !89
-   ret i32 0, !dbg !90
+   call void @free(i8* %p_vis_i8)
+   call void @free(i8* %p_next_i8)
+   call void @free(i8* %p_stack_i8)
+   br label %common.ret
  }
  
+ attributes #0 = { nounwind }
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
- 
- ; Function Attrs: argmemonly nofree nounwind willreturn writeonly
- declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2
- 
- ; Function Attrs: noinline nounwind optnone uwtable
- declare hidden void @dfs(i32* noundef, i64 noundef, i64 noundef, i64* noundef, i64* noundef) #0
- 
- declare i32 @printf(i8* noundef, ...) #3
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
- attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!9, !10, !11, !12, !13, !14, !15}
- !llvm.ident = !{!16}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/DFS.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "0cff5236e125c0a127adcaed33b60657")
- !2 = !{!3, !5}
- !3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
- !4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
- !6 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !7, line: 46, baseType: !8)
- !7 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !8 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !9 = !{i32 7, !"Dwarf Version", i32 5}
- !10 = !{i32 2, !"Debug Info Version", i32 3}
- !11 = !{i32 1, !"wchar_size", i32 4}
- !12 = !{i32 7, !"PIC Level", i32 2}
- !13 = !{i32 7, !"PIE Level", i32 2}
- !14 = !{i32 7, !"uwtable", i32 1}
- !15 = !{i32 7, !"frame-pointer", i32 2}
- !16 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !17 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 50, type: !18, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !20)
- !18 = !DISubroutineType(types: !19)
- !19 = !{!4}
- !20 = !{}
- !21 = !DILocalVariable(name: "n", scope: !17, file: !1, line: 51, type: !6)
- !22 = !DILocation(line: 51, column: 12, scope: !17)
- !23 = !DILocalVariable(name: "g", scope: !17, file: !1, line: 52, type: !24)
- !24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 1568, elements: !25)
- !25 = !{!26}
- !26 = !DISubrange(count: 49)
- !27 = !DILocation(line: 52, column: 9, scope: !17)
- !28 = !DILocation(line: 55, column: 5, scope: !17)
- !29 = !DILocation(line: 55, column: 5, scope: !30)
- !30 = distinct !DILexicalBlock(scope: !17, file: !1, line: 55, column: 5)
- !31 = !DILocation(line: 55, column: 15, scope: !17)
- !32 = !DILocation(line: 55, column: 15, scope: !33)
- !33 = distinct !DILexicalBlock(scope: !17, file: !1, line: 55, column: 15)
- !34 = !DILocation(line: 55, column: 25, scope: !17)
- !35 = !DILocation(line: 55, column: 25, scope: !36)
- !36 = distinct !DILexicalBlock(scope: !17, file: !1, line: 55, column: 25)
- !37 = !DILocation(line: 55, column: 35, scope: !17)
- !38 = !DILocation(line: 55, column: 35, scope: !39)
- !39 = distinct !DILexicalBlock(scope: !17, file: !1, line: 55, column: 35)
- !40 = !DILocation(line: 55, column: 45, scope: !17)
- !41 = !DILocation(line: 55, column: 45, scope: !42)
- !42 = distinct !DILexicalBlock(scope: !17, file: !1, line: 55, column: 45)
- !43 = !DILocation(line: 55, column: 55, scope: !17)
- !44 = !DILocation(line: 55, column: 55, scope: !45)
- !45 = distinct !DILexicalBlock(scope: !17, file: !1, line: 55, column: 55)
- !46 = !DILocation(line: 55, column: 65, scope: !17)
- !47 = !DILocation(line: 55, column: 65, scope: !48)
- !48 = distinct !DILexicalBlock(scope: !17, file: !1, line: 55, column: 65)
- !49 = !DILocalVariable(name: "s", scope: !17, file: !1, line: 58, type: !6)
- !50 = !DILocation(line: 58, column: 12, scope: !17)
- !51 = !DILocalVariable(name: "order", scope: !17, file: !1, line: 59, type: !52)
- !52 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 448, elements: !53)
- !53 = !{!54}
- !54 = !DISubrange(count: 7)
- !55 = !DILocation(line: 59, column: 12, scope: !17)
- !56 = !DILocalVariable(name: "ord_len", scope: !17, file: !1, line: 60, type: !6)
- !57 = !DILocation(line: 60, column: 12, scope: !17)
- !58 = !DILocation(line: 62, column: 9, scope: !17)
- !59 = !DILocation(line: 62, column: 12, scope: !17)
- !60 = !DILocation(line: 62, column: 15, scope: !17)
- !61 = !DILocation(line: 62, column: 18, scope: !17)
- !62 = !DILocation(line: 62, column: 5, scope: !17)
- !63 = !DILocation(line: 64, column: 39, scope: !17)
- !64 = !DILocation(line: 64, column: 5, scope: !17)
- !65 = !DILocalVariable(name: "i", scope: !66, file: !1, line: 65, type: !6)
- !66 = distinct !DILexicalBlock(scope: !17, file: !1, line: 65, column: 5)
- !67 = !DILocation(line: 65, column: 17, scope: !66)
- !68 = !DILocation(line: 65, column: 10, scope: !66)
- !69 = !DILocation(line: 65, column: 24, scope: !70)
- !70 = distinct !DILexicalBlock(scope: !66, file: !1, line: 65, column: 5)
- !71 = !DILocation(line: 65, column: 28, scope: !70)
- !72 = !DILocation(line: 65, column: 26, scope: !70)
- !73 = !DILocation(line: 65, column: 5, scope: !66)
- !74 = !DILocation(line: 66, column: 31, scope: !75)
- !75 = distinct !DILexicalBlock(scope: !70, file: !1, line: 65, column: 42)
- !76 = !DILocation(line: 66, column: 25, scope: !75)
- !77 = !DILocation(line: 66, column: 36, scope: !75)
- !78 = !DILocation(line: 66, column: 38, scope: !75)
- !79 = !DILocation(line: 66, column: 44, scope: !75)
- !80 = !DILocation(line: 66, column: 42, scope: !75)
- !81 = !DILocation(line: 66, column: 35, scope: !75)
- !82 = !DILocation(line: 66, column: 9, scope: !75)
- !83 = !DILocation(line: 67, column: 5, scope: !75)
- !84 = !DILocation(line: 65, column: 37, scope: !70)
- !85 = !DILocation(line: 65, column: 5, scope: !70)
- !86 = distinct !{!86, !73, !87, !88}
- !87 = !DILocation(line: 67, column: 5, scope: !66)
- !88 = !{!"llvm.loop.mustprogress"}
- !89 = !DILocation(line: 68, column: 5, scope: !17)
- !90 = !DILocation(line: 69, column: 5, scope: !17)
