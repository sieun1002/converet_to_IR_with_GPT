- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/mergesort_function.ll'
?                                                                  ^^^    ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/3/mergesort_function.ll'
?                                                                +++++++++++++++++++++  ^^   ++++ ^
+ source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/3/mergesort_function.ll"
- source_filename = "../original/src/mergesort.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
+ declare i8* @malloc(i64)
+ 
+ declare void @free(i8*)
+ 
+ declare i8* @memcpy(i8*, i8*, i64)
+ 
+ define void @merge_sort(i32* %dest, i64 %n) {
+ entry:
+   %cmp_n_le1 = icmp ult i64 %n, 2
+   br i1 %cmp_n_le1, label %ret, label %alloc
+ 
+ alloc:                                            ; preds = %entry
+   %bytes = shl i64 %n, 2
+   %tmp_ptr_i8 = call i8* @malloc(i64 %bytes)
+   %isnull = icmp eq i8* %tmp_ptr_i8, null
+   br i1 %isnull, label %ret, label %init
+ 
+ init:                                             ; preds = %alloc
+   %tmp_ptr = bitcast i8* %tmp_ptr_i8 to i32*
+   br label %outer.cond
+ 
+ outer.cond:                                       ; preds = %outer.swap, %init
+   %width.phi = phi i64 [ 1, %init ], [ %tw, %outer.swap ]
+   %src.phi = phi i32* [ %dest, %init ], [ %buf.phi, %outer.swap ]
+   %buf.phi = phi i32* [ %tmp_ptr, %init ], [ %src.phi, %outer.swap ]
+   %cmp_width = icmp ult i64 %width.phi, %n
+   br i1 %cmp_width, label %inner.cond, label %after.loops
+ 
+ inner.cond:                                       ; preds = %merge.done, %outer.cond
+   %i.phi = phi i64 [ 0, %outer.cond ], [ %i_plus_2w, %merge.done ]
+   %tw = shl i64 %width.phi, 1
+   %i.cmp = icmp ult i64 %i.phi, %n
+   br i1 %i.cmp, label %chunk.setup, label %outer.swap
+ 
+ chunk.setup:                                      ; preds = %inner.cond
+   %i_plus_w = add i64 %i.phi, %width.phi
+   %mid.le.not = icmp ugt i64 %i_plus_w, %n
+   %mid = select i1 %mid.le.not, i64 %n, i64 %i_plus_w
+   %i_plus_2w = add i64 %i.phi, %tw
+   %end.le.not = icmp ugt i64 %i_plus_2w, %n
+   %end = select i1 %end.le.not, i64 %n, i64 %i_plus_2w
+   br label %merge.header
+ 
+ merge.header:                                     ; preds = %choose.right, %choose.left, %chunk.setup
+   %j.phi = phi i64 [ %i.phi, %chunk.setup ], [ %j.next, %choose.left ], [ %j.phi, %choose.right ]
+   %k.phi = phi i64 [ %mid, %chunk.setup ], [ %k.phi, %choose.left ], [ %k.next, %choose.right ]
+   %d.phi = phi i64 [ %i.phi, %chunk.setup ], [ %d.next.left, %choose.left ], [ %d.next.right, %choose.right ]
+   %d.cmp = icmp ult i64 %d.phi, %end
+   br i1 %d.cmp, label %choose.pre, label %merge.done
+ 
+ choose.pre:                                       ; preds = %merge.header
+   %left.avail = icmp ult i64 %j.phi, %mid
+   br i1 %left.avail, label %check.right, label %choose.pre.choose.right_crit_edge
+ 
+ choose.pre.choose.right_crit_edge:                ; preds = %choose.pre
+   %src.r.ptr2.phi.trans.insert = getelementptr inbounds i32, i32* %src.phi, i64 %k.phi
+   %rval2.pre = load i32, i32* %src.r.ptr2.phi.trans.insert, align 4
+   br label %choose.right
+ 
+ check.right:                                      ; preds = %choose.pre
+   %right.avail = icmp ult i64 %k.phi, %end
+   br i1 %right.avail, label %cmp.values, label %check.right.choose.left_crit_edge
+ 
+ check.right.choose.left_crit_edge:                ; preds = %check.right
+   %src.l.ptr2.phi.trans.insert = getelementptr inbounds i32, i32* %src.phi, i64 %j.phi
+   %lval2.pre = load i32, i32* %src.l.ptr2.phi.trans.insert, align 4
+   br label %choose.left
+ 
+ cmp.values:                                       ; preds = %check.right
+   %left.ptr = getelementptr inbounds i32, i32* %src.phi, i64 %j.phi
+   %left.load = load i32, i32* %left.ptr, align 4
+   %right.ptr = getelementptr inbounds i32, i32* %src.phi, i64 %k.phi
+   %right.load = load i32, i32* %right.ptr, align 4
+   %le.cmp.not = icmp sgt i32 %left.load, %right.load
+   br i1 %le.cmp.not, label %choose.right, label %choose.left
+ 
+ choose.left:                                      ; preds = %check.right.choose.left_crit_edge, %cmp.values
+   %lval2 = phi i32 [ %lval2.pre, %check.right.choose.left_crit_edge ], [ %left.load, %cmp.values ]
+   %dst.ptr.left = getelementptr inbounds i32, i32* %buf.phi, i64 %d.phi
+   store i32 %lval2, i32* %dst.ptr.left, align 4
+   %j.next = add i64 %j.phi, 1
+   %d.next.left = add i64 %d.phi, 1
+   br label %merge.header
+ 
+ choose.right:                                     ; preds = %choose.pre.choose.right_crit_edge, %cmp.values
+   %rval2 = phi i32 [ %rval2.pre, %choose.pre.choose.right_crit_edge ], [ %right.load, %cmp.values ]
+   %dst.ptr.right = getelementptr inbounds i32, i32* %buf.phi, i64 %d.phi
+   store i32 %rval2, i32* %dst.ptr.right, align 4
+   %k.next = add i64 %k.phi, 1
+   %d.next.right = add i64 %d.phi, 1
+   br label %merge.header
+ 
+ merge.done:                                       ; preds = %merge.header
+   br label %inner.cond
+ 
+ outer.swap:                                       ; preds = %inner.cond
+   br label %outer.cond
+ 
+ after.loops:                                      ; preds = %outer.cond
+   %src.ne.dest.not = icmp eq i32* %src.phi, %dest
+   br i1 %src.ne.dest.not, label %skip.copy, label %do.copy
+ 
+ do.copy:                                          ; preds = %after.loops
+   %dest.i8 = bitcast i32* %dest to i8*
+   %src.i8 = bitcast i32* %src.phi to i8*
+   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %dest.i8, i8* align 1 %src.i8, i64 %bytes, i1 false)
+   br label %skip.copy
+ 
+ skip.copy:                                        ; preds = %do.copy, %after.loops
+   call void @free(i8* %tmp_ptr_i8)
+   br label %ret
+ 
+ ret:                                              ; preds = %skip.copy, %alloc, %entry
+   ret void
+ }
  
  ; Function Attrs: argmemonly nofree nounwind willreturn
- declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1
?                                                                                                                           ^
+ declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0
?                                                                                                                           ^
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define hidden void @merge_sort(i32* noundef %a, i64 noundef %n) #2 !dbg !13 {
- entry:
-   %a.addr = alloca i32*, align 8
-   %n.addr = alloca i64, align 8
-   %buf = alloca i32*, align 8
-   %src = alloca i32*, align 8
-   %dst = alloca i32*, align 8
-   %width = alloca i64, align 8
-   %i = alloca i64, align 8
-   %left = alloca i64, align 8
-   %mid = alloca i64, align 8
-   %right = alloca i64, align 8
-   %l = alloca i64, align 8
-   %r = alloca i64, align 8
-   %p = alloca i64, align 8
-   %tmp = alloca i32*, align 8
-   store i32* %a, i32** %a.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !20, metadata !DIExpression()), !dbg !21
-   store i64 %n, i64* %n.addr, align 8
-   call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !22, metadata !DIExpression()), !dbg !23
-   %0 = load i64, i64* %n.addr, align 8, !dbg !24
-   %cmp = icmp ult i64 %0, 2, !dbg !26
-   br i1 %cmp, label %if.then, label %if.end, !dbg !27
- 
- if.then:                                          ; preds = %entry
-   br label %return, !dbg !28
- 
- if.end:                                           ; preds = %entry
-   call void @llvm.dbg.declare(metadata i32** %buf, metadata !29, metadata !DIExpression()), !dbg !30
-   %1 = load i64, i64* %n.addr, align 8, !dbg !31
-   %mul = mul i64 %1, 4, !dbg !32
-   %call = call noalias i8* @malloc(i64 noundef %mul) #4, !dbg !33
-   %2 = bitcast i8* %call to i32*, !dbg !34
-   store i32* %2, i32** %buf, align 8, !dbg !30
-   %3 = load i32*, i32** %buf, align 8, !dbg !35
-   %tobool = icmp ne i32* %3, null, !dbg !35
-   br i1 %tobool, label %if.end2, label %if.then1, !dbg !37
- 
- if.then1:                                         ; preds = %if.end
-   br label %return, !dbg !38
- 
- if.end2:                                          ; preds = %if.end
-   call void @llvm.dbg.declare(metadata i32** %src, metadata !39, metadata !DIExpression()), !dbg !40
-   %4 = load i32*, i32** %a.addr, align 8, !dbg !41
-   store i32* %4, i32** %src, align 8, !dbg !40
-   call void @llvm.dbg.declare(metadata i32** %dst, metadata !42, metadata !DIExpression()), !dbg !43
-   %5 = load i32*, i32** %buf, align 8, !dbg !44
-   store i32* %5, i32** %dst, align 8, !dbg !43
-   call void @llvm.dbg.declare(metadata i64* %width, metadata !45, metadata !DIExpression()), !dbg !47
-   store i64 1, i64* %width, align 8, !dbg !47
-   br label %for.cond, !dbg !48
- 
- for.cond:                                         ; preds = %for.inc30, %if.end2
-   %6 = load i64, i64* %width, align 8, !dbg !49
-   %7 = load i64, i64* %n.addr, align 8, !dbg !51
-   %cmp3 = icmp ult i64 %6, %7, !dbg !52
-   br i1 %cmp3, label %for.body, label %for.end31, !dbg !53
- 
- for.body:                                         ; preds = %for.cond
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !54, metadata !DIExpression()), !dbg !56
-   store i64 0, i64* %i, align 8, !dbg !56
-   br label %while.cond, !dbg !57
- 
- while.cond:                                       ; preds = %for.end, %for.body
-   %8 = load i64, i64* %i, align 8, !dbg !58
-   %9 = load i64, i64* %n.addr, align 8, !dbg !59
-   %cmp4 = icmp ult i64 %8, %9, !dbg !60
-   br i1 %cmp4, label %while.body, label %while.end, !dbg !57
- 
- while.body:                                       ; preds = %while.cond
-   call void @llvm.dbg.declare(metadata i64* %left, metadata !61, metadata !DIExpression()), !dbg !63
-   %10 = load i64, i64* %i, align 8, !dbg !64
-   store i64 %10, i64* %left, align 8, !dbg !63
-   call void @llvm.dbg.declare(metadata i64* %mid, metadata !65, metadata !DIExpression()), !dbg !66
-   %11 = load i64, i64* %i, align 8, !dbg !67
-   %12 = load i64, i64* %width, align 8, !dbg !68
-   %add = add i64 %11, %12, !dbg !69
-   store i64 %add, i64* %mid, align 8, !dbg !66
-   %13 = load i64, i64* %mid, align 8, !dbg !70
-   %14 = load i64, i64* %n.addr, align 8, !dbg !72
-   %cmp5 = icmp ugt i64 %13, %14, !dbg !73
-   br i1 %cmp5, label %if.then6, label %if.end7, !dbg !74
- 
- if.then6:                                         ; preds = %while.body
-   %15 = load i64, i64* %n.addr, align 8, !dbg !75
-   store i64 %15, i64* %mid, align 8, !dbg !76
-   br label %if.end7, !dbg !77
- 
- if.end7:                                          ; preds = %if.then6, %while.body
-   call void @llvm.dbg.declare(metadata i64* %right, metadata !78, metadata !DIExpression()), !dbg !79
-   %16 = load i64, i64* %i, align 8, !dbg !80
-   %17 = load i64, i64* %width, align 8, !dbg !81
-   %mul8 = mul i64 2, %17, !dbg !82
-   %add9 = add i64 %16, %mul8, !dbg !83
-   store i64 %add9, i64* %right, align 8, !dbg !79
-   %18 = load i64, i64* %right, align 8, !dbg !84
-   %19 = load i64, i64* %n.addr, align 8, !dbg !86
-   %cmp10 = icmp ugt i64 %18, %19, !dbg !87
-   br i1 %cmp10, label %if.then11, label %if.end12, !dbg !88
- 
- if.then11:                                        ; preds = %if.end7
-   %20 = load i64, i64* %n.addr, align 8, !dbg !89
-   store i64 %20, i64* %right, align 8, !dbg !90
-   br label %if.end12, !dbg !91
- 
- if.end12:                                         ; preds = %if.then11, %if.end7
-   call void @llvm.dbg.declare(metadata i64* %l, metadata !92, metadata !DIExpression()), !dbg !93
-   %21 = load i64, i64* %left, align 8, !dbg !94
-   store i64 %21, i64* %l, align 8, !dbg !93
-   call void @llvm.dbg.declare(metadata i64* %r, metadata !95, metadata !DIExpression()), !dbg !96
-   %22 = load i64, i64* %mid, align 8, !dbg !97
-   store i64 %22, i64* %r, align 8, !dbg !96
-   call void @llvm.dbg.declare(metadata i64* %p, metadata !98, metadata !DIExpression()), !dbg !100
-   %23 = load i64, i64* %left, align 8, !dbg !101
-   store i64 %23, i64* %p, align 8, !dbg !100
-   br label %for.cond13, !dbg !102
- 
- for.cond13:                                       ; preds = %for.inc, %if.end12
-   %24 = load i64, i64* %p, align 8, !dbg !103
-   %25 = load i64, i64* %right, align 8, !dbg !105
-   %cmp14 = icmp ult i64 %24, %25, !dbg !106
-   br i1 %cmp14, label %for.body15, label %for.end, !dbg !107
- 
- for.body15:                                       ; preds = %for.cond13
-   %26 = load i64, i64* %l, align 8, !dbg !108
-   %27 = load i64, i64* %mid, align 8, !dbg !111
-   %cmp16 = icmp ult i64 %26, %27, !dbg !112
-   br i1 %cmp16, label %land.lhs.true, label %if.else, !dbg !113
- 
- land.lhs.true:                                    ; preds = %for.body15
-   %28 = load i64, i64* %r, align 8, !dbg !114
-   %29 = load i64, i64* %right, align 8, !dbg !115
-   %cmp17 = icmp uge i64 %28, %29, !dbg !116
-   br i1 %cmp17, label %if.then20, label %lor.lhs.false, !dbg !117
- 
- lor.lhs.false:                                    ; preds = %land.lhs.true
-   %30 = load i32*, i32** %src, align 8, !dbg !118
-   %31 = load i64, i64* %l, align 8, !dbg !119
-   %arrayidx = getelementptr inbounds i32, i32* %30, i64 %31, !dbg !118
-   %32 = load i32, i32* %arrayidx, align 4, !dbg !118
-   %33 = load i32*, i32** %src, align 8, !dbg !120
-   %34 = load i64, i64* %r, align 8, !dbg !121
-   %arrayidx18 = getelementptr inbounds i32, i32* %33, i64 %34, !dbg !120
-   %35 = load i32, i32* %arrayidx18, align 4, !dbg !120
-   %cmp19 = icmp sle i32 %32, %35, !dbg !122
-   br i1 %cmp19, label %if.then20, label %if.else, !dbg !123
- 
- if.then20:                                        ; preds = %lor.lhs.false, %land.lhs.true
-   %36 = load i32*, i32** %src, align 8, !dbg !124
-   %37 = load i64, i64* %l, align 8, !dbg !126
-   %inc = add i64 %37, 1, !dbg !126
-   store i64 %inc, i64* %l, align 8, !dbg !126
-   %arrayidx21 = getelementptr inbounds i32, i32* %36, i64 %37, !dbg !124
-   %38 = load i32, i32* %arrayidx21, align 4, !dbg !124
-   %39 = load i32*, i32** %dst, align 8, !dbg !127
-   %40 = load i64, i64* %p, align 8, !dbg !128
-   %arrayidx22 = getelementptr inbounds i32, i32* %39, i64 %40, !dbg !127
-   store i32 %38, i32* %arrayidx22, align 4, !dbg !129
-   br label %if.end26, !dbg !130
- 
- if.else:                                          ; preds = %lor.lhs.false, %for.body15
-   %41 = load i32*, i32** %src, align 8, !dbg !131
-   %42 = load i64, i64* %r, align 8, !dbg !133
-   %inc23 = add i64 %42, 1, !dbg !133
-   store i64 %inc23, i64* %r, align 8, !dbg !133
-   %arrayidx24 = getelementptr inbounds i32, i32* %41, i64 %42, !dbg !131
-   %43 = load i32, i32* %arrayidx24, align 4, !dbg !131
-   %44 = load i32*, i32** %dst, align 8, !dbg !134
-   %45 = load i64, i64* %p, align 8, !dbg !135
-   %arrayidx25 = getelementptr inbounds i32, i32* %44, i64 %45, !dbg !134
-   store i32 %43, i32* %arrayidx25, align 4, !dbg !136
-   br label %if.end26
- 
- if.end26:                                         ; preds = %if.else, %if.then20
-   br label %for.inc, !dbg !137
- 
- for.inc:                                          ; preds = %if.end26
-   %46 = load i64, i64* %p, align 8, !dbg !138
-   %inc27 = add i64 %46, 1, !dbg !138
-   store i64 %inc27, i64* %p, align 8, !dbg !138
-   br label %for.cond13, !dbg !139, !llvm.loop !140
- 
- for.end:                                          ; preds = %for.cond13
-   %47 = load i64, i64* %width, align 8, !dbg !143
-   %mul28 = mul i64 2, %47, !dbg !144
-   %48 = load i64, i64* %i, align 8, !dbg !145
-   %add29 = add i64 %48, %mul28, !dbg !145
-   store i64 %add29, i64* %i, align 8, !dbg !145
-   br label %while.cond, !dbg !57, !llvm.loop !146
- 
- while.end:                                        ; preds = %while.cond
-   call void @llvm.dbg.declare(metadata i32** %tmp, metadata !148, metadata !DIExpression()), !dbg !149
-   %49 = load i32*, i32** %src, align 8, !dbg !150
-   store i32* %49, i32** %tmp, align 8, !dbg !149
-   %50 = load i32*, i32** %dst, align 8, !dbg !151
-   store i32* %50, i32** %src, align 8, !dbg !152
-   %51 = load i32*, i32** %tmp, align 8, !dbg !153
-   store i32* %51, i32** %dst, align 8, !dbg !154
-   br label %for.inc30, !dbg !155
- 
- for.inc30:                                        ; preds = %while.end
-   %52 = load i64, i64* %width, align 8, !dbg !156
-   %shl = shl i64 %52, 1, !dbg !156
-   store i64 %shl, i64* %width, align 8, !dbg !156
-   br label %for.cond, !dbg !157, !llvm.loop !158
- 
- for.end31:                                        ; preds = %for.cond
-   %53 = load i32*, i32** %src, align 8, !dbg !160
-   %54 = load i32*, i32** %a.addr, align 8, !dbg !162
-   %cmp32 = icmp ne i32* %53, %54, !dbg !163
-   br i1 %cmp32, label %if.then33, label %if.end35, !dbg !164
- 
- if.then33:                                        ; preds = %for.end31
-   %55 = load i32*, i32** %a.addr, align 8, !dbg !165
-   %56 = bitcast i32* %55 to i8*, !dbg !167
-   %57 = load i32*, i32** %src, align 8, !dbg !168
-   %58 = bitcast i32* %57 to i8*, !dbg !167
-   %59 = load i64, i64* %n.addr, align 8, !dbg !169
-   %mul34 = mul i64 %59, 4, !dbg !170
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %58, i64 %mul34, i1 false), !dbg !167
-   br label %if.end35, !dbg !171
- 
- if.end35:                                         ; preds = %if.then33, %for.end31
-   %60 = load i32*, i32** %buf, align 8, !dbg !172
-   %61 = bitcast i32* %60 to i8*, !dbg !172
-   call void @free(i8* noundef %61) #4, !dbg !173
-   br label %return, !dbg !174
- 
- return:                                           ; preds = %if.end35, %if.then1, %if.then
-   ret void, !dbg !174
- }
- 
- ; Function Attrs: nounwind
- declare noalias i8* @malloc(i64 noundef) #3
- 
- ; Function Attrs: nounwind
- declare void @free(i8* noundef) #3
- 
- attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #1 = { argmemonly nofree nounwind willreturn }
?             ^
+ attributes #0 = { argmemonly nofree nounwind willreturn }
?             ^
- attributes #2 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #4 = { nounwind }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!5, !6, !7, !8, !9, !10, !11}
- !llvm.ident = !{!12}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/mergesort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "e5c7704c5e402a79506634451abb1d09")
- !2 = !{!3}
- !3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
- !4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !5 = !{i32 7, !"Dwarf Version", i32 5}
- !6 = !{i32 2, !"Debug Info Version", i32 3}
- !7 = !{i32 1, !"wchar_size", i32 4}
- !8 = !{i32 7, !"PIC Level", i32 2}
- !9 = !{i32 7, !"PIE Level", i32 2}
- !10 = !{i32 7, !"uwtable", i32 1}
- !11 = !{i32 7, !"frame-pointer", i32 2}
- !12 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !13 = distinct !DISubprogram(name: "merge_sort", scope: !1, file: !1, line: 6, type: !14, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !19)
- !14 = !DISubroutineType(types: !15)
- !15 = !{null, !3, !16}
- !16 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !17, line: 46, baseType: !18)
- !17 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !18 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !19 = !{}
- !20 = !DILocalVariable(name: "a", arg: 1, scope: !13, file: !1, line: 6, type: !3)
- !21 = !DILocation(line: 6, column: 29, scope: !13)
- !22 = !DILocalVariable(name: "n", arg: 2, scope: !13, file: !1, line: 6, type: !16)
- !23 = !DILocation(line: 6, column: 39, scope: !13)
- !24 = !DILocation(line: 7, column: 9, scope: !25)
- !25 = distinct !DILexicalBlock(scope: !13, file: !1, line: 7, column: 9)
- !26 = !DILocation(line: 7, column: 11, scope: !25)
- !27 = !DILocation(line: 7, column: 9, scope: !13)
- !28 = !DILocation(line: 7, column: 16, scope: !25)
- !29 = !DILocalVariable(name: "buf", scope: !13, file: !1, line: 9, type: !3)
- !30 = !DILocation(line: 9, column: 10, scope: !13)
- !31 = !DILocation(line: 9, column: 30, scope: !13)
- !32 = !DILocation(line: 9, column: 32, scope: !13)
- !33 = !DILocation(line: 9, column: 23, scope: !13)
- !34 = !DILocation(line: 9, column: 16, scope: !13)
- !35 = !DILocation(line: 10, column: 10, scope: !36)
- !36 = distinct !DILexicalBlock(scope: !13, file: !1, line: 10, column: 9)
- !37 = !DILocation(line: 10, column: 9, scope: !13)
- !38 = !DILocation(line: 10, column: 15, scope: !36)
- !39 = !DILocalVariable(name: "src", scope: !13, file: !1, line: 12, type: !3)
- !40 = !DILocation(line: 12, column: 10, scope: !13)
- !41 = !DILocation(line: 12, column: 16, scope: !13)
- !42 = !DILocalVariable(name: "dst", scope: !13, file: !1, line: 12, type: !3)
- !43 = !DILocation(line: 12, column: 20, scope: !13)
- !44 = !DILocation(line: 12, column: 26, scope: !13)
- !45 = !DILocalVariable(name: "width", scope: !46, file: !1, line: 14, type: !16)
- !46 = distinct !DILexicalBlock(scope: !13, file: !1, line: 14, column: 5)
- !47 = !DILocation(line: 14, column: 17, scope: !46)
- !48 = !DILocation(line: 14, column: 10, scope: !46)
- !49 = !DILocation(line: 14, column: 28, scope: !50)
- !50 = distinct !DILexicalBlock(scope: !46, file: !1, line: 14, column: 5)
- !51 = !DILocation(line: 14, column: 36, scope: !50)
- !52 = !DILocation(line: 14, column: 34, scope: !50)
- !53 = !DILocation(line: 14, column: 5, scope: !46)
- !54 = !DILocalVariable(name: "i", scope: !55, file: !1, line: 15, type: !16)
- !55 = distinct !DILexicalBlock(scope: !50, file: !1, line: 14, column: 52)
- !56 = !DILocation(line: 15, column: 16, scope: !55)
- !57 = !DILocation(line: 16, column: 9, scope: !55)
- !58 = !DILocation(line: 16, column: 16, scope: !55)
- !59 = !DILocation(line: 16, column: 20, scope: !55)
- !60 = !DILocation(line: 16, column: 18, scope: !55)
- !61 = !DILocalVariable(name: "left", scope: !62, file: !1, line: 17, type: !16)
- !62 = distinct !DILexicalBlock(scope: !55, file: !1, line: 16, column: 23)
- !63 = !DILocation(line: 17, column: 20, scope: !62)
- !64 = !DILocation(line: 17, column: 27, scope: !62)
- !65 = !DILocalVariable(name: "mid", scope: !62, file: !1, line: 18, type: !16)
- !66 = !DILocation(line: 18, column: 20, scope: !62)
- !67 = !DILocation(line: 18, column: 27, scope: !62)
- !68 = !DILocation(line: 18, column: 31, scope: !62)
- !69 = !DILocation(line: 18, column: 29, scope: !62)
- !70 = !DILocation(line: 18, column: 45, scope: !71)
- !71 = distinct !DILexicalBlock(scope: !62, file: !1, line: 18, column: 45)
- !72 = !DILocation(line: 18, column: 52, scope: !71)
- !73 = !DILocation(line: 18, column: 50, scope: !71)
- !74 = !DILocation(line: 18, column: 45, scope: !62)
- !75 = !DILocation(line: 18, column: 62, scope: !71)
- !76 = !DILocation(line: 18, column: 60, scope: !71)
- !77 = !DILocation(line: 18, column: 55, scope: !71)
- !78 = !DILocalVariable(name: "right", scope: !62, file: !1, line: 19, type: !16)
- !79 = !DILocation(line: 19, column: 20, scope: !62)
- !80 = !DILocation(line: 19, column: 27, scope: !62)
- !81 = !DILocation(line: 19, column: 33, scope: !62)
- !82 = !DILocation(line: 19, column: 32, scope: !62)
- !83 = !DILocation(line: 19, column: 29, scope: !62)
- !84 = !DILocation(line: 19, column: 45, scope: !85)
- !85 = distinct !DILexicalBlock(scope: !62, file: !1, line: 19, column: 45)
- !86 = !DILocation(line: 19, column: 52, scope: !85)
- !87 = !DILocation(line: 19, column: 50, scope: !85)
- !88 = !DILocation(line: 19, column: 45, scope: !62)
- !89 = !DILocation(line: 19, column: 62, scope: !85)
- !90 = !DILocation(line: 19, column: 60, scope: !85)
- !91 = !DILocation(line: 19, column: 55, scope: !85)
- !92 = !DILocalVariable(name: "l", scope: !62, file: !1, line: 21, type: !16)
- !93 = !DILocation(line: 21, column: 20, scope: !62)
- !94 = !DILocation(line: 21, column: 24, scope: !62)
- !95 = !DILocalVariable(name: "r", scope: !62, file: !1, line: 21, type: !16)
- !96 = !DILocation(line: 21, column: 30, scope: !62)
- !97 = !DILocation(line: 21, column: 34, scope: !62)
- !98 = !DILocalVariable(name: "p", scope: !99, file: !1, line: 22, type: !16)
- !99 = distinct !DILexicalBlock(scope: !62, file: !1, line: 22, column: 13)
- !100 = !DILocation(line: 22, column: 25, scope: !99)
- !101 = !DILocation(line: 22, column: 29, scope: !99)
- !102 = !DILocation(line: 22, column: 18, scope: !99)
- !103 = !DILocation(line: 22, column: 35, scope: !104)
- !104 = distinct !DILexicalBlock(scope: !99, file: !1, line: 22, column: 13)
- !105 = !DILocation(line: 22, column: 39, scope: !104)
- !106 = !DILocation(line: 22, column: 37, scope: !104)
- !107 = !DILocation(line: 22, column: 13, scope: !99)
- !108 = !DILocation(line: 23, column: 21, scope: !109)
- !109 = distinct !DILexicalBlock(scope: !110, file: !1, line: 23, column: 21)
- !110 = distinct !DILexicalBlock(scope: !104, file: !1, line: 22, column: 51)
- !111 = !DILocation(line: 23, column: 25, scope: !109)
- !112 = !DILocation(line: 23, column: 23, scope: !109)
- !113 = !DILocation(line: 23, column: 29, scope: !109)
- !114 = !DILocation(line: 23, column: 33, scope: !109)
- !115 = !DILocation(line: 23, column: 38, scope: !109)
- !116 = !DILocation(line: 23, column: 35, scope: !109)
- !117 = !DILocation(line: 23, column: 44, scope: !109)
- !118 = !DILocation(line: 23, column: 47, scope: !109)
- !119 = !DILocation(line: 23, column: 51, scope: !109)
- !120 = !DILocation(line: 23, column: 57, scope: !109)
- !121 = !DILocation(line: 23, column: 61, scope: !109)
- !122 = !DILocation(line: 23, column: 54, scope: !109)
- !123 = !DILocation(line: 23, column: 21, scope: !110)
- !124 = !DILocation(line: 24, column: 30, scope: !125)
- !125 = distinct !DILexicalBlock(scope: !109, file: !1, line: 23, column: 66)
- !126 = !DILocation(line: 24, column: 35, scope: !125)
- !127 = !DILocation(line: 24, column: 21, scope: !125)
- !128 = !DILocation(line: 24, column: 25, scope: !125)
- !129 = !DILocation(line: 24, column: 28, scope: !125)
- !130 = !DILocation(line: 25, column: 17, scope: !125)
- !131 = !DILocation(line: 26, column: 30, scope: !132)
- !132 = distinct !DILexicalBlock(scope: !109, file: !1, line: 25, column: 24)
- !133 = !DILocation(line: 26, column: 35, scope: !132)
- !134 = !DILocation(line: 26, column: 21, scope: !132)
- !135 = !DILocation(line: 26, column: 25, scope: !132)
- !136 = !DILocation(line: 26, column: 28, scope: !132)
- !137 = !DILocation(line: 28, column: 13, scope: !110)
- !138 = !DILocation(line: 22, column: 46, scope: !104)
- !139 = !DILocation(line: 22, column: 13, scope: !104)
- !140 = distinct !{!140, !107, !141, !142}
- !141 = !DILocation(line: 28, column: 13, scope: !99)
- !142 = !{!"llvm.loop.mustprogress"}
- !143 = !DILocation(line: 29, column: 22, scope: !62)
- !144 = !DILocation(line: 29, column: 20, scope: !62)
- !145 = !DILocation(line: 29, column: 15, scope: !62)
- !146 = distinct !{!146, !57, !147, !142}
- !147 = !DILocation(line: 30, column: 9, scope: !55)
- !148 = !DILocalVariable(name: "tmp", scope: !55, file: !1, line: 32, type: !3)
- !149 = !DILocation(line: 32, column: 14, scope: !55)
- !150 = !DILocation(line: 32, column: 20, scope: !55)
- !151 = !DILocation(line: 32, column: 31, scope: !55)
- !152 = !DILocation(line: 32, column: 29, scope: !55)
- !153 = !DILocation(line: 32, column: 42, scope: !55)
- !154 = !DILocation(line: 32, column: 40, scope: !55)
- !155 = !DILocation(line: 33, column: 5, scope: !55)
- !156 = !DILocation(line: 14, column: 45, scope: !50)
- !157 = !DILocation(line: 14, column: 5, scope: !50)
- !158 = distinct !{!158, !53, !159, !142}
- !159 = !DILocation(line: 33, column: 5, scope: !46)
- !160 = !DILocation(line: 36, column: 9, scope: !161)
- !161 = distinct !DILexicalBlock(scope: !13, file: !1, line: 36, column: 9)
- !162 = !DILocation(line: 36, column: 16, scope: !161)
- !163 = !DILocation(line: 36, column: 13, scope: !161)
- !164 = !DILocation(line: 36, column: 9, scope: !13)
- !165 = !DILocation(line: 37, column: 16, scope: !166)
- !166 = distinct !DILexicalBlock(scope: !161, file: !1, line: 36, column: 19)
- !167 = !DILocation(line: 37, column: 9, scope: !166)
- !168 = !DILocation(line: 37, column: 19, scope: !166)
- !169 = !DILocation(line: 37, column: 24, scope: !166)
- !170 = !DILocation(line: 37, column: 26, scope: !166)
- !171 = !DILocation(line: 38, column: 5, scope: !166)
- !172 = !DILocation(line: 39, column: 10, scope: !13)
- !173 = !DILocation(line: 39, column: 5, scope: !13)
- !174 = !DILocation(line: 40, column: 1, scope: !13)
