--- ref.ll
+++ BFS_function.norm.ll_llm_vs_ref.ll
@@ -1,367 +1,118 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/BFS_function.ll'
-source_filename = "../original/src/BFS.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
-target triple = "x86_64-pc-linux-gnu"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/3/BFS_function.ll'
+source_filename = "bfs_module"
+target triple = "x86_64-unknown-linux-gnu"
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
+; Function Attrs: nounwind
+declare noalias i8* @malloc(i64) #0
 
-; Function Attrs: noinline nounwind optnone uwtable
-define hidden void @bfs(i32* noundef %g, i64 noundef %n, i64 noundef %s, i32* noundef %dist, i64* noundef %order, i64* noundef %ord_len) #1 !dbg !15 {
+; Function Attrs: nounwind
+declare void @free(i8* nocapture) #0
+
+; Function Attrs: nounwind
+define void @bfs(i32* %adj, i64 %n, i64 %start, i32* %dist, i64* %out, i64* %count) local_unnamed_addr #0 {
 entry:
-  %g.addr = alloca i32*, align 8
-  %n.addr = alloca i64, align 8
-  %s.addr = alloca i64, align 8
-  %dist.addr = alloca i32*, align 8
-  %order.addr = alloca i64*, align 8
-  %ord_len.addr = alloca i64*, align 8
-  %i = alloca i64, align 8
-  %q = alloca i64*, align 8
-  %head = alloca i64, align 8
-  %tail = alloca i64, align 8
-  %u = alloca i64, align 8
-  %v = alloca i64, align 8
-  store i32* %g, i32** %g.addr, align 8
-  call void @llvm.dbg.declare(metadata i32** %g.addr, metadata !23, metadata !DIExpression()), !dbg !24
-  store i64 %n, i64* %n.addr, align 8
-  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !25, metadata !DIExpression()), !dbg !26
-  store i64 %s, i64* %s.addr, align 8
-  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !27, metadata !DIExpression()), !dbg !28
-  store i32* %dist, i32** %dist.addr, align 8
-  call void @llvm.dbg.declare(metadata i32** %dist.addr, metadata !29, metadata !DIExpression()), !dbg !30
-  store i64* %order, i64** %order.addr, align 8
-  call void @llvm.dbg.declare(metadata i64** %order.addr, metadata !31, metadata !DIExpression()), !dbg !32
-  store i64* %ord_len, i64** %ord_len.addr, align 8
-  call void @llvm.dbg.declare(metadata i64** %ord_len.addr, metadata !33, metadata !DIExpression()), !dbg !34
-  %0 = load i64, i64* %n.addr, align 8, !dbg !35
-  %cmp = icmp eq i64 %0, 0, !dbg !37
-  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !38
+  %n_is_zero = icmp eq i64 %n, 0
+  br i1 %n_is_zero, label %early_ret0, label %check_start
 
-lor.lhs.false:                                    ; preds = %entry
-  %1 = load i64, i64* %s.addr, align 8, !dbg !39
-  %2 = load i64, i64* %n.addr, align 8, !dbg !40
-  %cmp1 = icmp uge i64 %1, %2, !dbg !41
-  br i1 %cmp1, label %if.then, label %if.end, !dbg !42
+common.ret:                                       ; preds = %done, %malloc_fail, %early_ret0_2, %early_ret0
+  ret void
 
-if.then:                                          ; preds = %lor.lhs.false, %entry
-  %3 = load i64*, i64** %ord_len.addr, align 8, !dbg !43
-  store i64 0, i64* %3, align 8, !dbg !45
-  br label %return, !dbg !46
+early_ret0:                                       ; preds = %entry
+  store i64 0, i64* %count, align 8
+  br label %common.ret
 
-if.end:                                           ; preds = %lor.lhs.false
-  call void @llvm.dbg.declare(metadata i64* %i, metadata !47, metadata !DIExpression()), !dbg !49
-  store i64 0, i64* %i, align 8, !dbg !49
-  br label %for.cond, !dbg !50
+check_start:                                      ; preds = %entry
+  %start_ok = icmp ult i64 %start, %n
+  br i1 %start_ok, label %init_loop, label %early_ret0_2
 
-for.cond:                                         ; preds = %for.inc, %if.end
-  %4 = load i64, i64* %i, align 8, !dbg !51
-  %5 = load i64, i64* %n.addr, align 8, !dbg !53
-  %cmp2 = icmp ult i64 %4, %5, !dbg !54
-  br i1 %cmp2, label %for.body, label %for.end, !dbg !55
+early_ret0_2:                                     ; preds = %check_start
+  store i64 0, i64* %count, align 8
+  br label %common.ret
 
-for.body:                                         ; preds = %for.cond
-  %6 = load i32*, i32** %dist.addr, align 8, !dbg !56
-  %7 = load i64, i64* %i, align 8, !dbg !57
-  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %7, !dbg !56
-  store i32 -1, i32* %arrayidx, align 4, !dbg !58
-  br label %for.inc, !dbg !56
+init_loop:                                        ; preds = %check_start, %init_body
+  %i = phi i64 [ %i.next, %init_body ], [ 0, %check_start ]
+  %i_cond = icmp ult i64 %i, %n
+  br i1 %i_cond, label %init_body, label %after_init
 
-for.inc:                                          ; preds = %for.body
-  %8 = load i64, i64* %i, align 8, !dbg !59
-  %inc = add i64 %8, 1, !dbg !59
-  store i64 %inc, i64* %i, align 8, !dbg !59
-  br label %for.cond, !dbg !60, !llvm.loop !61
+init_body:                                        ; preds = %init_loop
+  %dist_i_ptr = getelementptr inbounds i32, i32* %dist, i64 %i
+  store i32 -1, i32* %dist_i_ptr, align 4
+  %i.next = add i64 %i, 1
+  br label %init_loop
 
-for.end:                                          ; preds = %for.cond
-  call void @llvm.dbg.declare(metadata i64** %q, metadata !64, metadata !DIExpression()), !dbg !65
-  %9 = load i64, i64* %n.addr, align 8, !dbg !66
-  %mul = mul i64 %9, 8, !dbg !67
-  %call = call noalias i8* @malloc(i64 noundef %mul) #3, !dbg !68
-  %10 = bitcast i8* %call to i64*, !dbg !69
-  store i64* %10, i64** %q, align 8, !dbg !65
-  %11 = load i64*, i64** %q, align 8, !dbg !70
-  %tobool = icmp ne i64* %11, null, !dbg !70
-  br i1 %tobool, label %if.end4, label %if.then3, !dbg !72
+after_init:                                       ; preds = %init_loop
+  %size.bytes = shl i64 %n, 3
+  %q.raw = call i8* @malloc(i64 %size.bytes)
+  %q = bitcast i8* %q.raw to i64*
+  %q.isnull = icmp eq i8* %q.raw, null
+  br i1 %q.isnull, label %malloc_fail, label %post_alloc
 
-if.then3:                                         ; preds = %for.end
-  %12 = load i64*, i64** %ord_len.addr, align 8, !dbg !73
-  store i64 0, i64* %12, align 8, !dbg !75
-  br label %return, !dbg !76
+malloc_fail:                                      ; preds = %after_init
+  store i64 0, i64* %count, align 8
+  br label %common.ret
 
-if.end4:                                          ; preds = %for.end
-  call void @llvm.dbg.declare(metadata i64* %head, metadata !77, metadata !DIExpression()), !dbg !78
-  store i64 0, i64* %head, align 8, !dbg !78
-  call void @llvm.dbg.declare(metadata i64* %tail, metadata !79, metadata !DIExpression()), !dbg !80
-  store i64 0, i64* %tail, align 8, !dbg !80
-  %13 = load i32*, i32** %dist.addr, align 8, !dbg !81
-  %14 = load i64, i64* %s.addr, align 8, !dbg !82
-  %arrayidx5 = getelementptr inbounds i32, i32* %13, i64 %14, !dbg !81
-  store i32 0, i32* %arrayidx5, align 4, !dbg !83
-  %15 = load i64, i64* %s.addr, align 8, !dbg !84
-  %16 = load i64*, i64** %q, align 8, !dbg !85
-  %17 = load i64, i64* %tail, align 8, !dbg !86
-  %inc6 = add i64 %17, 1, !dbg !86
-  store i64 %inc6, i64* %tail, align 8, !dbg !86
-  %arrayidx7 = getelementptr inbounds i64, i64* %16, i64 %17, !dbg !85
-  store i64 %15, i64* %arrayidx7, align 8, !dbg !87
-  %18 = load i64*, i64** %ord_len.addr, align 8, !dbg !88
-  store i64 0, i64* %18, align 8, !dbg !89
-  br label %while.cond, !dbg !90
+post_alloc:                                       ; preds = %after_init
+  %dist_start_ptr = getelementptr inbounds i32, i32* %dist, i64 %start
+  store i32 0, i32* %dist_start_ptr, align 4
+  store i64 %start, i64* %q, align 8
+  store i64 0, i64* %count, align 8
+  br label %bfs_loop
 
-while.cond:                                       ; preds = %for.end30, %if.end4
-  %19 = load i64, i64* %head, align 8, !dbg !91
-  %20 = load i64, i64* %tail, align 8, !dbg !92
-  %cmp8 = icmp ult i64 %19, %20, !dbg !93
-  br i1 %cmp8, label %while.body, label %while.end, !dbg !90
+bfs_loop:                                         ; preds = %neighbors, %post_alloc
+  %head = phi i64 [ 0, %post_alloc ], [ %head.next0, %neighbors ]
+  %tail = phi i64 [ 1, %post_alloc ], [ %tail.cur, %neighbors ]
+  %has_items = icmp ult i64 %head, %tail
+  br i1 %has_items, label %dequeue, label %done
 
-while.body:                                       ; preds = %while.cond
-  call void @llvm.dbg.declare(metadata i64* %u, metadata !94, metadata !DIExpression()), !dbg !96
-  %21 = load i64*, i64** %q, align 8, !dbg !97
-  %22 = load i64, i64* %head, align 8, !dbg !98
-  %inc9 = add i64 %22, 1, !dbg !98
-  store i64 %inc9, i64* %head, align 8, !dbg !98
-  %arrayidx10 = getelementptr inbounds i64, i64* %21, i64 %22, !dbg !97
-  %23 = load i64, i64* %arrayidx10, align 8, !dbg !97
-  store i64 %23, i64* %u, align 8, !dbg !96
-  %24 = load i64, i64* %u, align 8, !dbg !99
-  %25 = load i64*, i64** %order.addr, align 8, !dbg !100
-  %26 = load i64*, i64** %ord_len.addr, align 8, !dbg !101
-  %27 = load i64, i64* %26, align 8, !dbg !102
-  %inc11 = add i64 %27, 1, !dbg !102
-  store i64 %inc11, i64* %26, align 8, !dbg !102
-  %arrayidx12 = getelementptr inbounds i64, i64* %25, i64 %27, !dbg !100
-  store i64 %24, i64* %arrayidx12, align 8, !dbg !103
-  call void @llvm.dbg.declare(metadata i64* %v, metadata !104, metadata !DIExpression()), !dbg !106
-  store i64 0, i64* %v, align 8, !dbg !106
-  br label %for.cond13, !dbg !107
+dequeue:                                          ; preds = %bfs_loop
+  %u.ptr = getelementptr inbounds i64, i64* %q, i64 %head
+  %u = load i64, i64* %u.ptr, align 8
+  %head.next0 = add i64 %head, 1
+  %cnt.old = load i64, i64* %count, align 8
+  %out.slot = getelementptr inbounds i64, i64* %out, i64 %cnt.old
+  store i64 %u, i64* %out.slot, align 8
+  %cnt.new = add i64 %cnt.old, 1
+  store i64 %cnt.new, i64* %count, align 8
+  br label %neighbors
 
-for.cond13:                                       ; preds = %for.inc28, %while.body
-  %28 = load i64, i64* %v, align 8, !dbg !108
-  %29 = load i64, i64* %n.addr, align 8, !dbg !110
-  %cmp14 = icmp ult i64 %28, %29, !dbg !111
-  br i1 %cmp14, label %for.body15, label %for.end30, !dbg !112
+neighbors:                                        ; preds = %neighbors_latch, %dequeue
+  %v = phi i64 [ 0, %dequeue ], [ %v.next, %neighbors_latch ]
+  %tail.cur = phi i64 [ %tail, %dequeue ], [ %tail.next, %neighbors_latch ]
+  %more_v = icmp ult i64 %v, %n
+  br i1 %more_v, label %neighbors_body, label %bfs_loop
 
-for.body15:                                       ; preds = %for.cond13
-  %30 = load i32*, i32** %g.addr, align 8, !dbg !113
-  %31 = load i64, i64* %u, align 8, !dbg !116
-  %32 = load i64, i64* %n.addr, align 8, !dbg !117
-  %mul16 = mul i64 %31, %32, !dbg !118
-  %33 = load i64, i64* %v, align 8, !dbg !119
-  %add = add i64 %mul16, %33, !dbg !120
-  %arrayidx17 = getelementptr inbounds i32, i32* %30, i64 %add, !dbg !113
-  %34 = load i32, i32* %arrayidx17, align 4, !dbg !113
-  %tobool18 = icmp ne i32 %34, 0, !dbg !113
-  br i1 %tobool18, label %land.lhs.true, label %if.end27, !dbg !121
+neighbors_body:                                   ; preds = %neighbors
+  %mul = mul i64 %u, %n
+  %idx = add i64 %mul, %v
+  %adj.ptr = getelementptr inbounds i32, i32* %adj, i64 %idx
+  %adj.val = load i32, i32* %adj.ptr, align 4
+  %adj.zero = icmp eq i32 %adj.val, 0
+  br i1 %adj.zero, label %neighbors_latch, label %check_unvis
 
-land.lhs.true:                                    ; preds = %for.body15
-  %35 = load i32*, i32** %dist.addr, align 8, !dbg !122
-  %36 = load i64, i64* %v, align 8, !dbg !123
-  %arrayidx19 = getelementptr inbounds i32, i32* %35, i64 %36, !dbg !122
-  %37 = load i32, i32* %arrayidx19, align 4, !dbg !122
-  %cmp20 = icmp eq i32 %37, -1, !dbg !124
-  br i1 %cmp20, label %if.then21, label %if.end27, !dbg !125
+check_unvis:                                      ; preds = %neighbors_body
+  %dist.v.ptr = getelementptr inbounds i32, i32* %dist, i64 %v
+  %dist.v = load i32, i32* %dist.v.ptr, align 4
+  %is_unvis = icmp eq i32 %dist.v, -1
+  br i1 %is_unvis, label %visit_neighbor, label %neighbors_latch
 
-if.then21:                                        ; preds = %land.lhs.true
-  %38 = load i32*, i32** %dist.addr, align 8, !dbg !126
-  %39 = load i64, i64* %u, align 8, !dbg !128
-  %arrayidx22 = getelementptr inbounds i32, i32* %38, i64 %39, !dbg !126
-  %40 = load i32, i32* %arrayidx22, align 4, !dbg !126
-  %add23 = add nsw i32 %40, 1, !dbg !129
-  %41 = load i32*, i32** %dist.addr, align 8, !dbg !130
-  %42 = load i64, i64* %v, align 8, !dbg !131
-  %arrayidx24 = getelementptr inbounds i32, i32* %41, i64 %42, !dbg !130
-  store i32 %add23, i32* %arrayidx24, align 4, !dbg !132
-  %43 = load i64, i64* %v, align 8, !dbg !133
-  %44 = load i64*, i64** %q, align 8, !dbg !134
-  %45 = load i64, i64* %tail, align 8, !dbg !135
-  %inc25 = add i64 %45, 1, !dbg !135
-  store i64 %inc25, i64* %tail, align 8, !dbg !135
-  %arrayidx26 = getelementptr inbounds i64, i64* %44, i64 %45, !dbg !134
-  store i64 %43, i64* %arrayidx26, align 8, !dbg !136
-  br label %if.end27, !dbg !137
+visit_neighbor:                                   ; preds = %check_unvis
+  %dist.u.ptr = getelementptr inbounds i32, i32* %dist, i64 %u
+  %dist.u = load i32, i32* %dist.u.ptr, align 4
+  %dist.u.plus1 = add nsw i32 %dist.u, 1
+  store i32 %dist.u.plus1, i32* %dist.v.ptr, align 4
+  %q.tail.ptr = getelementptr inbounds i64, i64* %q, i64 %tail.cur
+  store i64 %v, i64* %q.tail.ptr, align 8
+  %tail.inc = add i64 %tail.cur, 1
+  br label %neighbors_latch
 
-if.end27:                                         ; preds = %if.then21, %land.lhs.true, %for.body15
-  br label %for.inc28, !dbg !138
+neighbors_latch:                                  ; preds = %neighbors_body, %check_unvis, %visit_neighbor
+  %tail.next = phi i64 [ %tail.inc, %visit_neighbor ], [ %tail.cur, %check_unvis ], [ %tail.cur, %neighbors_body ]
+  %v.next = add i64 %v, 1
+  br label %neighbors
 
-for.inc28:                                        ; preds = %if.end27
-  %46 = load i64, i64* %v, align 8, !dbg !139
-  %inc29 = add i64 %46, 1, !dbg !139
-  store i64 %inc29, i64* %v, align 8, !dbg !139
-  br label %for.cond13, !dbg !140, !llvm.loop !141
-
-for.end30:                                        ; preds = %for.cond13
-  br label %while.cond, !dbg !90, !llvm.loop !143
-
-while.end:                                        ; preds = %while.cond
-  %47 = load i64*, i64** %q, align 8, !dbg !145
-  %48 = bitcast i64* %47 to i8*, !dbg !145
-  call void @free(i8* noundef %48) #3, !dbg !146
-  br label %return, !dbg !147
-
-return:                                           ; preds = %while.end, %if.then3, %if.then
-  ret void, !dbg !147
+done:                                             ; preds = %bfs_loop
+  call void @free(i8* %q.raw)
+  br label %common.ret
 }
 
-; Function Attrs: nounwind
-declare noalias i8* @malloc(i64 noundef) #2
-
-; Function Attrs: nounwind
-declare void @free(i8* noundef) #2
-
-attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #1 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #3 = { nounwind }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!7, !8, !9, !10, !11, !12, !13}
-!llvm.ident = !{!14}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "../original/src/BFS.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "4b96fd8fb8cbef06e0e928edea17e086")
-!2 = !{!3}
-!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
-!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !5, line: 46, baseType: !6)
-!5 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
-!6 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
-!7 = !{i32 7, !"Dwarf Version", i32 5}
-!8 = !{i32 2, !"Debug Info Version", i32 3}
-!9 = !{i32 1, !"wchar_size", i32 4}
-!10 = !{i32 7, !"PIC Level", i32 2}
-!11 = !{i32 7, !"PIE Level", i32 2}
-!12 = !{i32 7, !"uwtable", i32 1}
-!13 = !{i32 7, !"frame-pointer", i32 2}
-!14 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!15 = distinct !DISubprogram(name: "bfs", scope: !1, file: !1, line: 5, type: !16, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !22)
-!16 = !DISubroutineType(types: !17)
-!17 = !{null, !18, !4, !4, !21, !3, !3}
-!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
-!19 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !20)
-!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
-!22 = !{}
-!23 = !DILocalVariable(name: "g", arg: 1, scope: !15, file: !1, line: 5, type: !18)
-!24 = !DILocation(line: 5, column: 28, scope: !15)
-!25 = !DILocalVariable(name: "n", arg: 2, scope: !15, file: !1, line: 5, type: !4)
-!26 = !DILocation(line: 5, column: 38, scope: !15)
-!27 = !DILocalVariable(name: "s", arg: 3, scope: !15, file: !1, line: 5, type: !4)
-!28 = !DILocation(line: 5, column: 48, scope: !15)
-!29 = !DILocalVariable(name: "dist", arg: 4, scope: !15, file: !1, line: 5, type: !21)
-!30 = !DILocation(line: 5, column: 56, scope: !15)
-!31 = !DILocalVariable(name: "order", arg: 5, scope: !15, file: !1, line: 5, type: !3)
-!32 = !DILocation(line: 5, column: 70, scope: !15)
-!33 = !DILocalVariable(name: "ord_len", arg: 6, scope: !15, file: !1, line: 5, type: !3)
-!34 = !DILocation(line: 5, column: 85, scope: !15)
-!35 = !DILocation(line: 6, column: 9, scope: !36)
-!36 = distinct !DILexicalBlock(scope: !15, file: !1, line: 6, column: 9)
-!37 = !DILocation(line: 6, column: 11, scope: !36)
-!38 = !DILocation(line: 6, column: 16, scope: !36)
-!39 = !DILocation(line: 6, column: 19, scope: !36)
-!40 = !DILocation(line: 6, column: 24, scope: !36)
-!41 = !DILocation(line: 6, column: 21, scope: !36)
-!42 = !DILocation(line: 6, column: 9, scope: !15)
-!43 = !DILocation(line: 6, column: 30, scope: !44)
-!44 = distinct !DILexicalBlock(scope: !36, file: !1, line: 6, column: 27)
-!45 = !DILocation(line: 6, column: 38, scope: !44)
-!46 = !DILocation(line: 6, column: 43, scope: !44)
-!47 = !DILocalVariable(name: "i", scope: !48, file: !1, line: 8, type: !4)
-!48 = distinct !DILexicalBlock(scope: !15, file: !1, line: 8, column: 5)
-!49 = !DILocation(line: 8, column: 17, scope: !48)
-!50 = !DILocation(line: 8, column: 10, scope: !48)
-!51 = !DILocation(line: 8, column: 24, scope: !52)
-!52 = distinct !DILexicalBlock(scope: !48, file: !1, line: 8, column: 5)
-!53 = !DILocation(line: 8, column: 28, scope: !52)
-!54 = !DILocation(line: 8, column: 26, scope: !52)
-!55 = !DILocation(line: 8, column: 5, scope: !48)
-!56 = !DILocation(line: 8, column: 36, scope: !52)
-!57 = !DILocation(line: 8, column: 41, scope: !52)
-!58 = !DILocation(line: 8, column: 44, scope: !52)
-!59 = !DILocation(line: 8, column: 31, scope: !52)
-!60 = !DILocation(line: 8, column: 5, scope: !52)
-!61 = distinct !{!61, !55, !62, !63}
-!62 = !DILocation(line: 8, column: 47, scope: !48)
-!63 = !{!"llvm.loop.mustprogress"}
-!64 = !DILocalVariable(name: "q", scope: !15, file: !1, line: 10, type: !3)
-!65 = !DILocation(line: 10, column: 13, scope: !15)
-!66 = !DILocation(line: 10, column: 34, scope: !15)
-!67 = !DILocation(line: 10, column: 36, scope: !15)
-!68 = !DILocation(line: 10, column: 27, scope: !15)
-!69 = !DILocation(line: 10, column: 17, scope: !15)
-!70 = !DILocation(line: 11, column: 10, scope: !71)
-!71 = distinct !DILexicalBlock(scope: !15, file: !1, line: 11, column: 9)
-!72 = !DILocation(line: 11, column: 9, scope: !15)
-!73 = !DILocation(line: 11, column: 16, scope: !74)
-!74 = distinct !DILexicalBlock(scope: !71, file: !1, line: 11, column: 13)
-!75 = !DILocation(line: 11, column: 24, scope: !74)
-!76 = !DILocation(line: 11, column: 29, scope: !74)
-!77 = !DILocalVariable(name: "head", scope: !15, file: !1, line: 13, type: !4)
-!78 = !DILocation(line: 13, column: 12, scope: !15)
-!79 = !DILocalVariable(name: "tail", scope: !15, file: !1, line: 13, type: !4)
-!80 = !DILocation(line: 13, column: 22, scope: !15)
-!81 = !DILocation(line: 14, column: 5, scope: !15)
-!82 = !DILocation(line: 14, column: 10, scope: !15)
-!83 = !DILocation(line: 14, column: 13, scope: !15)
-!84 = !DILocation(line: 15, column: 17, scope: !15)
-!85 = !DILocation(line: 15, column: 5, scope: !15)
-!86 = !DILocation(line: 15, column: 11, scope: !15)
-!87 = !DILocation(line: 15, column: 15, scope: !15)
-!88 = !DILocation(line: 17, column: 6, scope: !15)
-!89 = !DILocation(line: 17, column: 14, scope: !15)
-!90 = !DILocation(line: 18, column: 5, scope: !15)
-!91 = !DILocation(line: 18, column: 12, scope: !15)
-!92 = !DILocation(line: 18, column: 19, scope: !15)
-!93 = !DILocation(line: 18, column: 17, scope: !15)
-!94 = !DILocalVariable(name: "u", scope: !95, file: !1, line: 19, type: !4)
-!95 = distinct !DILexicalBlock(scope: !15, file: !1, line: 18, column: 25)
-!96 = !DILocation(line: 19, column: 16, scope: !95)
-!97 = !DILocation(line: 19, column: 20, scope: !95)
-!98 = !DILocation(line: 19, column: 26, scope: !95)
-!99 = !DILocation(line: 20, column: 31, scope: !95)
-!100 = !DILocation(line: 20, column: 9, scope: !95)
-!101 = !DILocation(line: 20, column: 17, scope: !95)
-!102 = !DILocation(line: 20, column: 25, scope: !95)
-!103 = !DILocation(line: 20, column: 29, scope: !95)
-!104 = !DILocalVariable(name: "v", scope: !105, file: !1, line: 22, type: !4)
-!105 = distinct !DILexicalBlock(scope: !95, file: !1, line: 22, column: 9)
-!106 = !DILocation(line: 22, column: 21, scope: !105)
-!107 = !DILocation(line: 22, column: 14, scope: !105)
-!108 = !DILocation(line: 22, column: 28, scope: !109)
-!109 = distinct !DILexicalBlock(scope: !105, file: !1, line: 22, column: 9)
-!110 = !DILocation(line: 22, column: 32, scope: !109)
-!111 = !DILocation(line: 22, column: 30, scope: !109)
-!112 = !DILocation(line: 22, column: 9, scope: !105)
-!113 = !DILocation(line: 23, column: 17, scope: !114)
-!114 = distinct !DILexicalBlock(scope: !115, file: !1, line: 23, column: 17)
-!115 = distinct !DILexicalBlock(scope: !109, file: !1, line: 22, column: 40)
-!116 = !DILocation(line: 23, column: 19, scope: !114)
-!117 = !DILocation(line: 23, column: 21, scope: !114)
-!118 = !DILocation(line: 23, column: 20, scope: !114)
-!119 = !DILocation(line: 23, column: 25, scope: !114)
-!120 = !DILocation(line: 23, column: 23, scope: !114)
-!121 = !DILocation(line: 23, column: 28, scope: !114)
-!122 = !DILocation(line: 23, column: 31, scope: !114)
-!123 = !DILocation(line: 23, column: 36, scope: !114)
-!124 = !DILocation(line: 23, column: 39, scope: !114)
-!125 = !DILocation(line: 23, column: 17, scope: !115)
-!126 = !DILocation(line: 24, column: 27, scope: !127)
-!127 = distinct !DILexicalBlock(scope: !114, file: !1, line: 23, column: 46)
-!128 = !DILocation(line: 24, column: 32, scope: !127)
-!129 = !DILocation(line: 24, column: 35, scope: !127)
-!130 = !DILocation(line: 24, column: 17, scope: !127)
-!131 = !DILocation(line: 24, column: 22, scope: !127)
-!132 = !DILocation(line: 24, column: 25, scope: !127)
-!133 = !DILocation(line: 25, column: 29, scope: !127)
-!134 = !DILocation(line: 25, column: 17, scope: !127)
-!135 = !DILocation(line: 25, column: 23, scope: !127)
-!136 = !DILocation(line: 25, column: 27, scope: !127)
-!137 = !DILocation(line: 26, column: 13, scope: !127)
-!138 = !DILocation(line: 27, column: 9, scope: !115)
-!139 = !DILocation(line: 22, column: 35, scope: !109)
-!140 = !DILocation(line: 22, column: 9, scope: !109)
-!141 = distinct !{!141, !112, !142, !63}
-!142 = !DILocation(line: 27, column: 9, scope: !105)
-!143 = distinct !{!143, !90, !144, !63}
-!144 = !DILocation(line: 28, column: 5, scope: !15)
-!145 = !DILocation(line: 30, column: 10, scope: !15)
-!146 = !DILocation(line: 30, column: 5, scope: !15)
-!147 = !DILocation(line: 31, column: 1, scope: !15)
+attributes #0 = { nounwind }
