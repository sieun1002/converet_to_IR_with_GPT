--- ref.ll
+++ linearsearch_main.norm.ll_mcsema_vs_ref.ll
@@ -1,106 +1,59 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/linearsearch_main.ll'
-source_filename = "../original/src/linearsearch.c"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/mcsema/ll/O0/linearsearch_main.ll'
+source_filename = "llvm-link"
 target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
-target triple = "x86_64-pc-linux-gnu"
+target triple = "x86_64-pc-linux-gnu-elf"
 
-@__const.main.arr = external hidden unnamed_addr constant [5 x i32], align 16
-@.str = external hidden unnamed_addr constant [27 x i8], align 1
-@.str.1 = external hidden unnamed_addr constant [19 x i8], align 1
+%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
+%struct.ArchState = type { i32, i32, %union.anon }
+%union.VectorReg = type { %union.vec512_t }
+%union.vec512_t = type { %struct.uint64v8_t }
+%struct.uint64v8_t = type { [8 x i64] }
+%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
+%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
+%union.SegmentSelector = type { i16 }
+%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
+%struct.Reg = type { %union.anon }
+%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
+%struct.X87Stack = type { [8 x %struct.anon.3] }
+%struct.anon.3 = type { [6 x i8], %struct.float80_t }
+%struct.float80_t = type { [10 x i8] }
+%struct.MMX = type { [8 x %struct.anon.4] }
+%struct.anon.4 = type { i64, %union.vec64_t }
+%union.vec64_t = type { %struct.uint64v1_t }
+%struct.uint64v1_t = type { [1 x i64] }
+%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
+%union.anon = type { i64 }
+%union.FPU = type { %struct.anon.13 }
+%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
+%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
+%union.FPUAbridgedTagWord = type { i8 }
+%union.FPUControlStatus = type { i32 }
+%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
+%union.anon.11 = type { %struct.float80_t }
+%union.vec128_t = type { %struct.uint128v1_t }
+%struct.uint128v1_t = type { [1 x i128] }
+%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
+%struct.SegmentShadow = type { %union.anon, i32, i32 }
+%struct.Memory = type opaque
 
-; Function Attrs: noinline nounwind optnone uwtable
-declare dso_local i32 @linear_search(i32* noundef, i32 noundef, i32 noundef) #0
+@0 = external hidden constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)*
+@1 = external hidden constant void ()*
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
-
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local i32 @main() #0 !dbg !10 {
-entry:
-  %retval = alloca i32, align 4
-  %arr = alloca [5 x i32], align 16
-  %n = alloca i32, align 4
-  %target = alloca i32, align 4
-  %result = alloca i32, align 4
-  store i32 0, i32* %retval, align 4
-  call void @llvm.dbg.declare(metadata [5 x i32]* %arr, metadata !15, metadata !DIExpression()), !dbg !19
-  %0 = bitcast [5 x i32]* %arr to i8*, !dbg !19
-  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.arr to i8*), i64 20, i1 false), !dbg !19
-  call void @llvm.dbg.declare(metadata i32* %n, metadata !20, metadata !DIExpression()), !dbg !21
-  store i32 5, i32* %n, align 4, !dbg !21
-  call void @llvm.dbg.declare(metadata i32* %target, metadata !22, metadata !DIExpression()), !dbg !23
-  store i32 4, i32* %target, align 4, !dbg !23
-  call void @llvm.dbg.declare(metadata i32* %result, metadata !24, metadata !DIExpression()), !dbg !25
-  %arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 0, !dbg !26
-  %1 = load i32, i32* %n, align 4, !dbg !27
-  %2 = load i32, i32* %target, align 4, !dbg !28
-  %call = call i32 @linear_search(i32* noundef %arraydecay, i32 noundef %1, i32 noundef %2), !dbg !29
-  store i32 %call, i32* %result, align 4, !dbg !25
-  %3 = load i32, i32* %result, align 4, !dbg !30
-  %cmp = icmp ne i32 %3, -1, !dbg !32
-  br i1 %cmp, label %if.then, label %if.else, !dbg !33
-
-if.then:                                          ; preds = %entry
-  %4 = load i32, i32* %result, align 4, !dbg !34
-  %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 noundef %4), !dbg !35
-  br label %if.end, !dbg !35
-
-if.else:                                          ; preds = %entry
-  %call2 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)), !dbg !36
-  br label %if.end
-
-if.end:                                           ; preds = %if.else, %if.then
-  ret i32 0, !dbg !37
+; Function Attrs: naked nobuiltin noinline
+define dllexport x86_64_sysvcc i32 @main(i32 %param0, i8** %param1, i8** %param2) #0 !remill.function.type !4 {
+  call void asm sideeffect "pushq $0;pushq $$0x11d7;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull elementtype(%struct.Memory* (%struct.State*, i64, %struct.Memory*)*) @0, void ()** nonnull elementtype(void ()*) @1) #1
+  ret i32 undef
 }
 
-; Function Attrs: argmemonly nofree nounwind willreturn
-declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
+attributes #0 = { naked nobuiltin noinline }
+attributes #1 = { nounwind }
 
-declare i32 @printf(i8* noundef, ...) #3
+!llvm.ident = !{!0, !0, !0}
+!llvm.module.flags = !{!1, !2, !3}
+!llvm.dbg.cu = !{}
 
-attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #2 = { argmemonly nofree nounwind willreturn }
-attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "../original/src/linearsearch.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "b82228440e1fc68a5f0ccb5f1cd642bd")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
+!0 = !{!"clang version 9.0.1 (https://github.com/trailofbits/vcpkg.git 4592a93cc4ca82f1963dba08413c43639662d7ae)"}
+!1 = !{i32 1, !"wchar_size", i32 4}
+!2 = !{i32 2, !"Dwarf Version", i32 4}
 !3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 11, type: !11, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
-!11 = !DISubroutineType(types: !12)
-!12 = !{!13}
-!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!14 = !{}
-!15 = !DILocalVariable(name: "arr", scope: !10, file: !1, line: 12, type: !16)
-!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 160, elements: !17)
-!17 = !{!18}
-!18 = !DISubrange(count: 5)
-!19 = !DILocation(line: 12, column: 9, scope: !10)
-!20 = !DILocalVariable(name: "n", scope: !10, file: !1, line: 13, type: !13)
-!21 = !DILocation(line: 13, column: 9, scope: !10)
-!22 = !DILocalVariable(name: "target", scope: !10, file: !1, line: 14, type: !13)
-!23 = !DILocation(line: 14, column: 9, scope: !10)
-!24 = !DILocalVariable(name: "result", scope: !10, file: !1, line: 16, type: !13)
-!25 = !DILocation(line: 16, column: 9, scope: !10)
-!26 = !DILocation(line: 16, column: 32, scope: !10)
-!27 = !DILocation(line: 16, column: 37, scope: !10)
-!28 = !DILocation(line: 16, column: 40, scope: !10)
-!29 = !DILocation(line: 16, column: 18, scope: !10)
-!30 = !DILocation(line: 18, column: 9, scope: !31)
-!31 = distinct !DILexicalBlock(scope: !10, file: !1, line: 18, column: 9)
-!32 = !DILocation(line: 18, column: 16, scope: !31)
-!33 = !DILocation(line: 18, column: 9, scope: !10)
-!34 = !DILocation(line: 19, column: 47, scope: !31)
-!35 = !DILocation(line: 19, column: 9, scope: !31)
-!36 = !DILocation(line: 21, column: 9, scope: !31)
-!37 = !DILocation(line: 23, column: 5, scope: !10)
+!4 = !{!"base.entrypoint"}
