--- ref.ll
+++ selectionsort_main.norm.ll_llm_vs_ref.ll
@@ -1,120 +1,45 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/selectionsort_main.ll'
-source_filename = "selectionsort.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/3/selectionsort_main.ll'
+source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/3/selectionsort_main.ll"
+target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
 target triple = "x86_64-pc-linux-gnu"
 
-@__const.main.arr = external hidden unnamed_addr constant [5 x i32], align 16
-@.str = external hidden unnamed_addr constant [15 x i8], align 1
-@.str.1 = external hidden unnamed_addr constant [4 x i8], align 1
+@.str = private unnamed_addr constant [15 x i8] c"Sorted array: \00", align 1
+@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
 
-; Function Attrs: noinline nounwind optnone uwtable
-declare dso_local void @selection_sort(i32* noundef, i32 noundef) #0
+declare void @selection_sort(i32*, i32)
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
+declare i32 @printf(i8*, ...)
 
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local i32 @main() #0 !dbg !10 {
+define i32 @main() {
 entry:
-  %retval = alloca i32, align 4
   %arr = alloca [5 x i32], align 16
-  %n = alloca i32, align 4
-  %i = alloca i32, align 4
-  store i32 0, i32* %retval, align 4
-  call void @llvm.dbg.declare(metadata [5 x i32]* %arr, metadata !15, metadata !DIExpression()), !dbg !19
-  %0 = bitcast [5 x i32]* %arr to i8*, !dbg !19
-  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.arr to i8*), i64 20, i1 false), !dbg !19
-  call void @llvm.dbg.declare(metadata i32* %n, metadata !20, metadata !DIExpression()), !dbg !21
-  store i32 5, i32* %n, align 4, !dbg !21
-  %arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 0, !dbg !22
-  %1 = load i32, i32* %n, align 4, !dbg !23
-  call void @selection_sort(i32* noundef %arraydecay, i32 noundef %1), !dbg !24
-  %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)), !dbg !25
-  call void @llvm.dbg.declare(metadata i32* %i, metadata !26, metadata !DIExpression()), !dbg !28
-  store i32 0, i32* %i, align 4, !dbg !28
-  br label %for.cond, !dbg !29
+  %arr0ptr = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 0
+  store i32 29, i32* %arr0ptr, align 16
+  %arr1ptr = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 1
+  store i32 10, i32* %arr1ptr, align 4
+  %arr2ptr = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 2
+  store i32 14, i32* %arr2ptr, align 8
+  %arr3ptr = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 3
+  store i32 37, i32* %arr3ptr, align 4
+  %arr4ptr = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 4
+  store i32 13, i32* %arr4ptr, align 16
+  call void @selection_sort(i32* nonnull %arr0ptr, i32 5)
+  %call0 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
+  br label %loop.cond
 
-for.cond:                                         ; preds = %for.inc, %entry
-  %2 = load i32, i32* %i, align 4, !dbg !30
-  %3 = load i32, i32* %n, align 4, !dbg !32
-  %cmp = icmp slt i32 %2, %3, !dbg !33
-  br i1 %cmp, label %for.body, label %for.end, !dbg !34
+loop.cond:                                        ; preds = %loop.body, %entry
+  %i.0 = phi i32 [ 0, %entry ], [ %inc, %loop.body ]
+  %cmp = icmp ult i32 %i.0, 5
+  br i1 %cmp, label %loop.body, label %after.loop
 
-for.body:                                         ; preds = %for.cond
-  %4 = load i32, i32* %i, align 4, !dbg !35
-  %idxprom = sext i32 %4 to i64, !dbg !37
-  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 %idxprom, !dbg !37
-  %5 = load i32, i32* %arrayidx, align 4, !dbg !37
-  %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %5), !dbg !38
-  br label %for.inc, !dbg !39
+loop.body:                                        ; preds = %loop.cond
+  %i.ext = zext i32 %i.0 to i64
+  %elem.ptr = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 %i.ext
+  %elem = load i32, i32* %elem.ptr, align 4
+  %call1 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %elem)
+  %inc = add nuw nsw i32 %i.0, 1
+  br label %loop.cond
 
-for.inc:                                          ; preds = %for.body
-  %6 = load i32, i32* %i, align 4, !dbg !40
-  %inc = add nsw i32 %6, 1, !dbg !40
-  store i32 %inc, i32* %i, align 4, !dbg !40
-  br label %for.cond, !dbg !41, !llvm.loop !42
-
-for.end:                                          ; preds = %for.cond
-  ret i32 0, !dbg !45
+after.loop:                                       ; preds = %loop.cond
+  ret i32 0
 }
-
-; Function Attrs: argmemonly nofree nounwind willreturn
-declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
-
-declare i32 @printf(i8* noundef, ...) #3
-
-attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #2 = { argmemonly nofree nounwind willreturn }
-attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "selectionsort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "ac7f15bc1ec4c657fabaf0eecd830beb")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
-!3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 19, type: !11, scopeLine: 19, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
-!11 = !DISubroutineType(types: !12)
-!12 = !{!13}
-!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!14 = !{}
-!15 = !DILocalVariable(name: "arr", scope: !10, file: !1, line: 20, type: !16)
-!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 160, elements: !17)
-!17 = !{!18}
-!18 = !DISubrange(count: 5)
-!19 = !DILocation(line: 20, column: 9, scope: !10)
-!20 = !DILocalVariable(name: "n", scope: !10, file: !1, line: 21, type: !13)
-!21 = !DILocation(line: 21, column: 9, scope: !10)
-!22 = !DILocation(line: 23, column: 20, scope: !10)
-!23 = !DILocation(line: 23, column: 25, scope: !10)
-!24 = !DILocation(line: 23, column: 5, scope: !10)
-!25 = !DILocation(line: 25, column: 5, scope: !10)
-!26 = !DILocalVariable(name: "i", scope: !27, file: !1, line: 26, type: !13)
-!27 = distinct !DILexicalBlock(scope: !10, file: !1, line: 26, column: 5)
-!28 = !DILocation(line: 26, column: 14, scope: !27)
-!29 = !DILocation(line: 26, column: 10, scope: !27)
-!30 = !DILocation(line: 26, column: 21, scope: !31)
-!31 = distinct !DILexicalBlock(scope: !27, file: !1, line: 26, column: 5)
-!32 = !DILocation(line: 26, column: 25, scope: !31)
-!33 = !DILocation(line: 26, column: 23, scope: !31)
-!34 = !DILocation(line: 26, column: 5, scope: !27)
-!35 = !DILocation(line: 27, column: 27, scope: !36)
-!36 = distinct !DILexicalBlock(scope: !31, file: !1, line: 26, column: 33)
-!37 = !DILocation(line: 27, column: 23, scope: !36)
-!38 = !DILocation(line: 27, column: 9, scope: !36)
-!39 = !DILocation(line: 28, column: 5, scope: !36)
-!40 = !DILocation(line: 26, column: 29, scope: !31)
-!41 = !DILocation(line: 26, column: 5, scope: !31)
-!42 = distinct !{!42, !34, !43, !44}
-!43 = !DILocation(line: 28, column: 5, scope: !27)
-!44 = !{!"llvm.loop.mustprogress"}
-!45 = !DILocation(line: 30, column: 5, scope: !10)
