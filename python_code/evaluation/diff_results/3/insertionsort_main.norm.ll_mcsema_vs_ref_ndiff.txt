- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/insertionsort_main.ll'
?                                                                ^^^^^^ -
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/mcsema/ll/O0/insertionsort_main.ll'
?                                                                ^^^^^    +++
- source_filename = "../original/src/insertionsort.c"
+ source_filename = "llvm-link"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
- target triple = "x86_64-pc-linux-gnu"
+ target triple = "x86_64-pc-linux-gnu-elf"
?                                     ++++
  
- @__const.main.a = external hidden unnamed_addr constant [10 x i32], align 16
- @.str = external hidden unnamed_addr constant [4 x i8], align 1
- @.str.1 = external hidden unnamed_addr constant [2 x i8], align 1
+ %struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
+ %struct.ArchState = type { i32, i32, %union.anon }
+ %union.VectorReg = type { %union.vec512_t }
+ %union.vec512_t = type { %struct.uint64v8_t }
+ %struct.uint64v8_t = type { [8 x i64] }
+ %struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
+ %struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
+ %union.SegmentSelector = type { i16 }
+ %struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
+ %struct.Reg = type { %union.anon }
+ %struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
+ %struct.X87Stack = type { [8 x %struct.anon.3] }
+ %struct.anon.3 = type { [6 x i8], %struct.float80_t }
+ %struct.float80_t = type { [10 x i8] }
+ %struct.MMX = type { [8 x %struct.anon.4] }
+ %struct.anon.4 = type { i64, %union.vec64_t }
+ %union.vec64_t = type { %struct.uint64v1_t }
+ %struct.uint64v1_t = type { [1 x i64] }
+ %struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
+ %union.anon = type { i64 }
+ %union.FPU = type { %struct.anon.13 }
+ %struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
+ %struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
+ %union.FPUAbridgedTagWord = type { i8 }
+ %union.FPUControlStatus = type { i32 }
+ %struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
+ %union.anon.11 = type { %struct.float80_t }
+ %union.vec128_t = type { %struct.uint128v1_t }
+ %struct.uint128v1_t = type { [1 x i128] }
+ %struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
+ %struct.SegmentShadow = type { %union.anon, i32, i32 }
+ %struct.Memory = type opaque
  
+ @0 = external hidden constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)*
+ @1 = external hidden constant void ()*
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !10 {
- entry:
-   %retval = alloca i32, align 4
-   %a = alloca [10 x i32], align 16
-   %n = alloca i64, align 8
-   %i = alloca i64, align 8
-   store i32 0, i32* %retval, align 4
-   call void @llvm.dbg.declare(metadata [10 x i32]* %a, metadata !15, metadata !DIExpression()), !dbg !19
-   %0 = bitcast [10 x i32]* %a to i8*, !dbg !19
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.a to i8*), i64 40, i1 false), !dbg !19
-   call void @llvm.dbg.declare(metadata i64* %n, metadata !20, metadata !DIExpression()), !dbg !24
-   store i64 10, i64* %n, align 8, !dbg !24
-   %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 0, !dbg !25
-   %1 = load i64, i64* %n, align 8, !dbg !26
-   call void @insertion_sort(i32* noundef %arraydecay, i64 noundef %1), !dbg !27
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !28, metadata !DIExpression()), !dbg !30
-   store i64 0, i64* %i, align 8, !dbg !30
-   br label %for.cond, !dbg !31
  
+ ; Function Attrs: naked nobuiltin noinline
+ define dllexport x86_64_sysvcc i32 @main(i32 %param0, i8** %param1, i8** %param2) #0 !remill.function.type !4 {
+   call void asm sideeffect "pushq $0;pushq $$0x1247;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull elementtype(%struct.Memory* (%struct.State*, i64, %struct.Memory*)*) @0, void ()** nonnull elementtype(void ()*) @1) #1
+   ret i32 undef
- for.cond:                                         ; preds = %for.inc, %entry
-   %2 = load i64, i64* %i, align 8, !dbg !32
-   %3 = load i64, i64* %n, align 8, !dbg !34
-   %cmp = icmp ult i64 %2, %3, !dbg !35
-   br i1 %cmp, label %for.body, label %for.end, !dbg !36
- 
- for.body:                                         ; preds = %for.cond
-   %4 = load i64, i64* %i, align 8, !dbg !37
-   %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %a, i64 0, i64 %4, !dbg !39
-   %5 = load i32, i32* %arrayidx, align 4, !dbg !39
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %5), !dbg !40
-   br label %for.inc, !dbg !41
- 
- for.inc:                                          ; preds = %for.body
-   %6 = load i64, i64* %i, align 8, !dbg !42
-   %inc = add i64 %6, 1, !dbg !42
-   store i64 %inc, i64* %i, align 8, !dbg !42
-   br label %for.cond, !dbg !43, !llvm.loop !44
- 
- for.end:                                          ; preds = %for.cond
-   %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !47
-   ret i32 0, !dbg !48
  }
  
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
+ attributes #0 = { naked nobuiltin noinline }
+ attributes #1 = { nounwind }
  
- ; Function Attrs: argmemonly nofree nounwind willreturn
- declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
+ !llvm.ident = !{!0, !0, !0}
+ !llvm.module.flags = !{!1, !2, !3}
+ !llvm.dbg.cu = !{}
  
+ !0 = !{!"clang version 9.0.1 (https://github.com/trailofbits/vcpkg.git 4592a93cc4ca82f1963dba08413c43639662d7ae)"}
+ !1 = !{i32 1, !"wchar_size", i32 4}
- ; Function Attrs: noinline nounwind optnone uwtable
- declare hidden void @insertion_sort(i32* noundef, i64 noundef) #0
- 
- declare i32 @printf(i8* noundef, ...) #3
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { argmemonly nofree nounwind willreturn }
- attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/insertionsort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "9b39ced67c1e6732101e98b285c67a7b")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
?            ^                        ^
+ !2 = !{i32 2, !"Dwarf Version", i32 4}
?            ^                        ^
  !3 = !{i32 2, !"Debug Info Version", i32 3}
+ !4 = !{!"base.entrypoint"}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 16, type: !11, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
- !11 = !DISubroutineType(types: !12)
- !12 = !{!13}
- !13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !14 = !{}
- !15 = !DILocalVariable(name: "a", scope: !10, file: !1, line: 17, type: !16)
- !16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 320, elements: !17)
- !17 = !{!18}
- !18 = !DISubrange(count: 10)
- !19 = !DILocation(line: 17, column: 9, scope: !10)
- !20 = !DILocalVariable(name: "n", scope: !10, file: !1, line: 18, type: !21)
- !21 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !22, line: 46, baseType: !23)
- !22 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !23 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !24 = !DILocation(line: 18, column: 12, scope: !10)
- !25 = !DILocation(line: 20, column: 20, scope: !10)
- !26 = !DILocation(line: 20, column: 23, scope: !10)
- !27 = !DILocation(line: 20, column: 5, scope: !10)
- !28 = !DILocalVariable(name: "i", scope: !29, file: !1, line: 22, type: !21)
- !29 = distinct !DILexicalBlock(scope: !10, file: !1, line: 22, column: 5)
- !30 = !DILocation(line: 22, column: 17, scope: !29)
- !31 = !DILocation(line: 22, column: 10, scope: !29)
- !32 = !DILocation(line: 22, column: 24, scope: !33)
- !33 = distinct !DILexicalBlock(scope: !29, file: !1, line: 22, column: 5)
- !34 = !DILocation(line: 22, column: 28, scope: !33)
- !35 = !DILocation(line: 22, column: 26, scope: !33)
- !36 = !DILocation(line: 22, column: 5, scope: !29)
- !37 = !DILocation(line: 23, column: 25, scope: !38)
- !38 = distinct !DILexicalBlock(scope: !33, file: !1, line: 22, column: 36)
- !39 = !DILocation(line: 23, column: 23, scope: !38)
- !40 = !DILocation(line: 23, column: 9, scope: !38)
- !41 = !DILocation(line: 24, column: 5, scope: !38)
- !42 = !DILocation(line: 22, column: 31, scope: !33)
- !43 = !DILocation(line: 22, column: 5, scope: !33)
- !44 = distinct !{!44, !36, !45, !46}
- !45 = !DILocation(line: 24, column: 5, scope: !29)
- !46 = !{!"llvm.loop.mustprogress"}
- !47 = !DILocation(line: 25, column: 5, scope: !10)
- !48 = !DILocation(line: 26, column: 5, scope: !10)
