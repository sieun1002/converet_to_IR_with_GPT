- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/dijkstra_modular_function1.ll'
?                                                                  ^^^    ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/1/dijkstra_modular_function1.ll'
?                                                                +++++++++++++++++++++  ^^   ++++ ^
+ source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/1/dijkstra_modular_function1.ll"
- source_filename = "dijkstra_modular.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
+ define void @init_graph([100 x i32]* %matrix, i32 %n) {
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @init_graph([100 x i32]* noundef %graph, i32 noundef %V) #0 !dbg !10 {
  entry:
+   br label %outer.cond
-   %graph.addr = alloca [100 x i32]*, align 8
-   %V.addr = alloca i32, align 4
-   %i = alloca i32, align 4
-   %j = alloca i32, align 4
-   store [100 x i32]* %graph, [100 x i32]** %graph.addr, align 8
-   call void @llvm.dbg.declare(metadata [100 x i32]** %graph.addr, metadata !19, metadata !DIExpression()), !dbg !20
-   store i32 %V, i32* %V.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %V.addr, metadata !21, metadata !DIExpression()), !dbg !22
-   call void @llvm.dbg.declare(metadata i32* %i, metadata !23, metadata !DIExpression()), !dbg !25
-   store i32 0, i32* %i, align 4, !dbg !25
-   br label %for.cond, !dbg !26
  
- for.cond:                                         ; preds = %for.inc6, %entry
? -                                               --           -      -
+ outer.cond:                                       ; preds = %outer.inc, %entry
?  +++                                                          +++
+   %i = phi i32 [ 0, %entry ], [ %i.next, %outer.inc ]
+   %cmp.outer = icmp slt i32 %i, %n
+   br i1 %cmp.outer, label %inner.cond, label %exit
-   %0 = load i32, i32* %i, align 4, !dbg !27
-   %1 = load i32, i32* %V.addr, align 4, !dbg !29
-   %cmp = icmp slt i32 %0, %1, !dbg !30
-   br i1 %cmp, label %for.body, label %for.end8, !dbg !31
  
- for.body:                                         ; preds = %for.cond
-   call void @llvm.dbg.declare(metadata i32* %j, metadata !32, metadata !DIExpression()), !dbg !34
-   store i32 0, i32* %j, align 4, !dbg !34
-   br label %for.cond1, !dbg !35
+ inner.cond:                                       ; preds = %outer.cond, %inner.body
+   %j = phi i32 [ %j.next, %inner.body ], [ 0, %outer.cond ]
+   %cmp.inner = icmp slt i32 %j, %n
+   br i1 %cmp.inner, label %inner.body, label %outer.inc
  
- for.cond1:                                        ; preds = %for.inc, %for.body
-   %2 = load i32, i32* %j, align 4, !dbg !36
-   %3 = load i32, i32* %V.addr, align 4, !dbg !38
-   %cmp2 = icmp slt i32 %2, %3, !dbg !39
-   br i1 %cmp2, label %for.body3, label %for.end, !dbg !40
+ inner.body:                                       ; preds = %inner.cond
+   %i.ext = zext i32 %i to i64
+   %j.ext = zext i32 %j to i64
+   %eltptr = getelementptr inbounds [100 x i32], [100 x i32]* %matrix, i64 %i.ext, i64 %j.ext
+   store i32 0, i32* %eltptr, align 4
+   %j.next = add nuw nsw i32 %j, 1
+   br label %inner.cond
  
- for.body3:                                        ; preds = %for.cond1
? -   ^^^^^                                                    ^^      -
+ outer.inc:                                        ; preds = %inner.cond
?  +++  ^^^                                                    ^^^^
+   %i.next = add nuw nsw i32 %i, 1
+   br label %outer.cond
-   %4 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !41
-   %5 = load i32, i32* %i, align 4, !dbg !42
-   %idxprom = sext i32 %5 to i64, !dbg !41
-   %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %4, i64 %idxprom, !dbg !41
-   %6 = load i32, i32* %j, align 4, !dbg !43
-   %idxprom4 = sext i32 %6 to i64, !dbg !41
-   %arrayidx5 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx, i64 0, i64 %idxprom4, !dbg !41
-   store i32 0, i32* %arrayidx5, align 4, !dbg !44
-   br label %for.inc, !dbg !41
  
- for.inc:                                          ; preds = %for.body3
-   %7 = load i32, i32* %j, align 4, !dbg !45
-   %inc = add nsw i32 %7, 1, !dbg !45
-   store i32 %inc, i32* %j, align 4, !dbg !45
-   br label %for.cond1, !dbg !46, !llvm.loop !47
- 
- for.end:                                          ; preds = %for.cond1
? ---- ^^                                                      -       -
+ exit:                                             ; preds = %outer.cond
?  ^^^                                           +++            +++
+   ret void
-   br label %for.inc6, !dbg !48
- 
- for.inc6:                                         ; preds = %for.end
-   %8 = load i32, i32* %i, align 4, !dbg !50
-   %inc7 = add nsw i32 %8, 1, !dbg !50
-   store i32 %inc7, i32* %i, align 4, !dbg !50
-   br label %for.cond, !dbg !51, !llvm.loop !52
- 
- for.end8:                                         ; preds = %for.cond
-   ret void, !dbg !54
  }
- 
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "dijkstra_modular.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "47bf6ecccd84048d194510cb254a0651")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !10 = distinct !DISubprogram(name: "init_graph", scope: !1, file: !1, line: 11, type: !11, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !11 = !DISubroutineType(types: !12)
- !12 = !{null, !13, !15}
- !13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
- !14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 3200, elements: !16)
- !15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !16 = !{!17}
- !17 = !DISubrange(count: 100)
- !18 = !{}
- !19 = !DILocalVariable(name: "graph", arg: 1, scope: !10, file: !1, line: 11, type: !13)
- !20 = !DILocation(line: 11, column: 21, scope: !10)
- !21 = !DILocalVariable(name: "V", arg: 2, scope: !10, file: !1, line: 11, type: !15)
- !22 = !DILocation(line: 11, column: 42, scope: !10)
- !23 = !DILocalVariable(name: "i", scope: !24, file: !1, line: 12, type: !15)
- !24 = distinct !DILexicalBlock(scope: !10, file: !1, line: 12, column: 5)
- !25 = !DILocation(line: 12, column: 14, scope: !24)
- !26 = !DILocation(line: 12, column: 10, scope: !24)
- !27 = !DILocation(line: 12, column: 21, scope: !28)
- !28 = distinct !DILexicalBlock(scope: !24, file: !1, line: 12, column: 5)
- !29 = !DILocation(line: 12, column: 25, scope: !28)
- !30 = !DILocation(line: 12, column: 23, scope: !28)
- !31 = !DILocation(line: 12, column: 5, scope: !24)
- !32 = !DILocalVariable(name: "j", scope: !33, file: !1, line: 13, type: !15)
- !33 = distinct !DILexicalBlock(scope: !28, file: !1, line: 13, column: 9)
- !34 = !DILocation(line: 13, column: 18, scope: !33)
- !35 = !DILocation(line: 13, column: 14, scope: !33)
- !36 = !DILocation(line: 13, column: 25, scope: !37)
- !37 = distinct !DILexicalBlock(scope: !33, file: !1, line: 13, column: 9)
- !38 = !DILocation(line: 13, column: 29, scope: !37)
- !39 = !DILocation(line: 13, column: 27, scope: !37)
- !40 = !DILocation(line: 13, column: 9, scope: !33)
- !41 = !DILocation(line: 14, column: 13, scope: !37)
- !42 = !DILocation(line: 14, column: 19, scope: !37)
- !43 = !DILocation(line: 14, column: 22, scope: !37)
- !44 = !DILocation(line: 14, column: 25, scope: !37)
- !45 = !DILocation(line: 13, column: 32, scope: !37)
- !46 = !DILocation(line: 13, column: 9, scope: !37)
- !47 = distinct !{!47, !40, !48, !49}
- !48 = !DILocation(line: 14, column: 27, scope: !33)
- !49 = !{!"llvm.loop.mustprogress"}
- !50 = !DILocation(line: 12, column: 28, scope: !28)
- !51 = !DILocation(line: 12, column: 5, scope: !28)
- !52 = distinct !{!52, !31, !53, !49}
- !53 = !DILocation(line: 14, column: 27, scope: !24)
- !54 = !DILocation(line: 15, column: 1, scope: !10)
