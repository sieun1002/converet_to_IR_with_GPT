- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/binarysearch_main.ll'
?                                                                  ^^^    ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/2/binarysearch_main.ll'
?                                                                +++++++++++++++++++++  ^^   ++++ ^
+ source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/2/binarysearch_main.ll"
- source_filename = "../original/src/binarysearch.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
- target triple = "x86_64-pc-linux-gnu"
  
+ @.str = private unnamed_addr constant [21 x i8] c"key %d -> index %ld\0A\00", align 1
+ @.str.1 = private unnamed_addr constant [21 x i8] c"key %d -> not found\0A\00", align 1
- @__const.main.a = external hidden unnamed_addr constant [9 x i32], align 16
- @__const.main.keys = external hidden unnamed_addr constant [3 x i32], align 4
- @.str = external hidden unnamed_addr constant [21 x i8], align 1
- @.str.1 = external hidden unnamed_addr constant [21 x i8], align 1
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !12 {
+ declare i32 @printf(i8*, ...)
+ 
+ declare i64 @binary_search(i32*, i64, i32)
+ 
+ define i32 @main() {
  entry:
-   %retval = alloca i32, align 4
-   %a = alloca [9 x i32], align 16
+   %arr = alloca [9 x i32], align 16
?     ++
-   %n = alloca i64, align 8
-   %keys = alloca [3 x i32], align 4
?                                   ^
+   %keys = alloca [3 x i32], align 16
?                                   ^^
-   %qn = alloca i64, align 8
-   %i = alloca i64, align 8
-   %idx = alloca i64, align 8
+   %arr0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
+   store i32 -5, i32* %arr0, align 16
+   %arr1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 1
+   store i32 -1, i32* %arr1, align 4
+   %arr2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 2
-   store i32 0, i32* %retval, align 4
?                       ^^^^^        ^
+   store i32 0, i32* %arr2, align 8
?                      + ^^        ^
-   call void @llvm.dbg.declare(metadata [9 x i32]* %a, metadata !17, metadata !DIExpression()), !dbg !21
-   %0 = bitcast [9 x i32]* %a to i8*, !dbg !21
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([9 x i32]* @__const.main.a to i8*), i64 36, i1 false), !dbg !21
-   call void @llvm.dbg.declare(metadata i64* %n, metadata !22, metadata !DIExpression()), !dbg !26
-   store i64 9, i64* %n, align 8, !dbg !26
-   call void @llvm.dbg.declare(metadata [3 x i32]* %keys, metadata !27, metadata !DIExpression()), !dbg !31
-   %1 = bitcast [3 x i32]* %keys to i8*, !dbg !31
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 bitcast ([3 x i32]* @__const.main.keys to i8*), i64 12, i1 false), !dbg !31
-   call void @llvm.dbg.declare(metadata i64* %qn, metadata !32, metadata !DIExpression()), !dbg !33
-   store i64 3, i64* %qn, align 8, !dbg !33
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !34, metadata !DIExpression()), !dbg !36
-   store i64 0, i64* %i, align 8, !dbg !36
-   br label %for.cond, !dbg !37
+   %arr3 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 3
+   store i32 2, i32* %arr3, align 4
+   %arr4 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 4
+   store i32 2, i32* %arr4, align 16
+   %arr5 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 5
+   store i32 3, i32* %arr5, align 4
+   %arr6 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 6
+   store i32 7, i32* %arr6, align 8
+   %arr7 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 7
+   store i32 9, i32* %arr7, align 4
+   %arr8 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 8
+   store i32 12, i32* %arr8, align 16
+   %keys0 = getelementptr inbounds [3 x i32], [3 x i32]* %keys, i64 0, i64 0
+   store i32 2, i32* %keys0, align 16
+   %keys1 = getelementptr inbounds [3 x i32], [3 x i32]* %keys, i64 0, i64 1
+   store i32 5, i32* %keys1, align 4
+   %keys2 = getelementptr inbounds [3 x i32], [3 x i32]* %keys, i64 0, i64 2
+   store i32 -5, i32* %keys2, align 8
+   br label %loop.cond
  
- for.cond:                                         ; preds = %for.inc, %entry
? ^ ^                                              -           ----
+ loop.cond:                                        ; preds = %inc, %entry
? ^ ^^
+   %i.addr.0 = phi i64 [ 0, %entry ], [ %i.next, %inc ]
+   %cmp = icmp ult i64 %i.addr.0, 3
-   %2 = load i64, i64* %i, align 8, !dbg !38
-   %3 = load i64, i64* %qn, align 8, !dbg !40
-   %cmp = icmp ult i64 %2, %3, !dbg !41
-   br i1 %cmp, label %for.body, label %for.end, !dbg !42
?                      ^ ^              ---- ^^^^^^^^^^^^
+   br i1 %cmp, label %loop.body, label %exit
?                      ^ ^^               ^^^
  
- for.body:                                         ; preds = %for.cond
? ^ ^                                              -           ^ ^
+ loop.body:                                        ; preds = %loop.cond
? ^ ^^                                                         ^ ^^
-   call void @llvm.dbg.declare(metadata i64* %idx, metadata !43, metadata !DIExpression()), !dbg !45
-   %arraydecay = getelementptr inbounds [9 x i32], [9 x i32]* %a, i64 0, i64 0, !dbg !46
-   %4 = load i64, i64* %n, align 8, !dbg !47
-   %5 = load i64, i64* %i, align 8, !dbg !48
-   %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %keys, i64 0, i64 %5, !dbg !49
?    ^ ------                                                                   ^^^^ ^^^^^^
+   %key.ptr = getelementptr inbounds [3 x i32], [3 x i32]* %keys, i64 0, i64 %i.addr.0
?    ^^^^^^                                                                    ^^^ ^^^^
+   %key = load i32, i32* %key.ptr, align 4
+   %bs.ret = call i64 @binary_search(i32* nonnull %arr0, i64 9, i32 %key)
+   %neg = icmp slt i64 %bs.ret, 0
+   br i1 %neg, label %notfound, label %found
-   %6 = load i32, i32* %arrayidx, align 4, !dbg !49
-   %call = call i64 @binary_search(i32* noundef %arraydecay, i64 noundef %4, i32 noundef %6), !dbg !50
-   store i64 %call, i64* %idx, align 8, !dbg !45
-   %7 = load i64, i64* %idx, align 8, !dbg !51
-   %cmp1 = icmp sge i64 %7, 0, !dbg !53
-   br i1 %cmp1, label %if.then, label %if.else, !dbg !54
  
- if.then:                                          ; preds = %for.body
? - ^^^^                                                       ^ ^
+ found:                                            ; preds = %loop.body
?  ^^ +                                           ++           ^ ^^
+   %printf.ok = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 %key, i64 %bs.ret)
+   br label %inc
-   %8 = load i64, i64* %i, align 8, !dbg !55
-   %arrayidx2 = getelementptr inbounds [3 x i32], [3 x i32]* %keys, i64 0, i64 %8, !dbg !56
-   %9 = load i32, i32* %arrayidx2, align 4, !dbg !56
-   %10 = load i64, i64* %idx, align 8, !dbg !57
-   %call3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 noundef %9, i64 noundef %10), !dbg !58
-   br label %if.end, !dbg !58
  
- if.else:                                          ; preds = %for.body
? ^ ^^^^^                                          -           ^ ^
+ notfound:                                         ; preds = %loop.body
? ^^^ ^^^^                                                     ^ ^^
-   %11 = load i64, i64* %i, align 8, !dbg !59
-   %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %keys, i64 0, i64 %11, !dbg !60
-   %12 = load i32, i32* %arrayidx4, align 4, !dbg !60
-   %call5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 noundef %12), !dbg !61
?        --------                                                                                                              ^^^^^ ^^^^^ ----------
+   %printf.nf = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 %key)
?    ++++++++++++                                       +++++++++++++++++++++++++++                                                                           ^^ ^
-   br label %if.end
?              --- ^
+   br label %inc
?               ^
  
- if.end:                                           ; preds = %if.else, %if.then
?  --- ^                                                       ^ ^^^^^   - ^^^^
+ inc:                                              ; preds = %notfound, %found
?   ^                                            +++           ^^^ ^^^^    ^^ +
-   br label %for.inc, !dbg !62
+   %i.next = add i64 %i.addr.0, 1
+   br label %loop.cond
  
- for.inc:                                          ; preds = %if.end
-   %13 = load i64, i64* %i, align 8, !dbg !63
-   %inc = add i64 %13, 1, !dbg !63
-   store i64 %inc, i64* %i, align 8, !dbg !63
-   br label %for.cond, !dbg !64, !llvm.loop !65
- 
- for.end:                                          ; preds = %for.cond
? ---- ^^                                                      ^ ^
+ exit:                                             ; preds = %loop.cond
?  ^^^                                           +++           ^ ^^
-   ret i32 0, !dbg !68
+   ret i32 0
  }
- 
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
- 
- ; Function Attrs: argmemonly nofree nounwind willreturn
- declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
- 
- ; Function Attrs: noinline nounwind optnone uwtable
- declare hidden i64 @binary_search(i32* noundef, i64 noundef, i32 noundef) #0
- 
- declare i32 @printf(i8* noundef, ...) #3
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { argmemonly nofree nounwind willreturn }
- attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!4, !5, !6, !7, !8, !9, !10}
- !llvm.ident = !{!11}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/binarysearch.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "08f90fb2bdfb727335b70b6850a46ad9")
- !2 = !{!3}
- !3 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
- !4 = !{i32 7, !"Dwarf Version", i32 5}
- !5 = !{i32 2, !"Debug Info Version", i32 3}
- !6 = !{i32 1, !"wchar_size", i32 4}
- !7 = !{i32 7, !"PIC Level", i32 2}
- !8 = !{i32 7, !"PIE Level", i32 2}
- !9 = !{i32 7, !"uwtable", i32 1}
- !10 = !{i32 7, !"frame-pointer", i32 2}
- !11 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !12 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 15, type: !13, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !16)
- !13 = !DISubroutineType(types: !14)
- !14 = !{!15}
- !15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !16 = !{}
- !17 = !DILocalVariable(name: "a", scope: !12, file: !1, line: 16, type: !18)
- !18 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 288, elements: !19)
- !19 = !{!20}
- !20 = !DISubrange(count: 9)
- !21 = !DILocation(line: 16, column: 9, scope: !12)
- !22 = !DILocalVariable(name: "n", scope: !12, file: !1, line: 17, type: !23)
- !23 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !24, line: 46, baseType: !25)
- !24 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !25 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !26 = !DILocation(line: 17, column: 12, scope: !12)
- !27 = !DILocalVariable(name: "keys", scope: !12, file: !1, line: 19, type: !28)
- !28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 96, elements: !29)
- !29 = !{!30}
- !30 = !DISubrange(count: 3)
- !31 = !DILocation(line: 19, column: 9, scope: !12)
- !32 = !DILocalVariable(name: "qn", scope: !12, file: !1, line: 20, type: !23)
- !33 = !DILocation(line: 20, column: 12, scope: !12)
- !34 = !DILocalVariable(name: "i", scope: !35, file: !1, line: 22, type: !23)
- !35 = distinct !DILexicalBlock(scope: !12, file: !1, line: 22, column: 5)
- !36 = !DILocation(line: 22, column: 17, scope: !35)
- !37 = !DILocation(line: 22, column: 10, scope: !35)
- !38 = !DILocation(line: 22, column: 24, scope: !39)
- !39 = distinct !DILexicalBlock(scope: !35, file: !1, line: 22, column: 5)
- !40 = !DILocation(line: 22, column: 28, scope: !39)
- !41 = !DILocation(line: 22, column: 26, scope: !39)
- !42 = !DILocation(line: 22, column: 5, scope: !35)
- !43 = !DILocalVariable(name: "idx", scope: !44, file: !1, line: 23, type: !3)
- !44 = distinct !DILexicalBlock(scope: !39, file: !1, line: 22, column: 37)
- !45 = !DILocation(line: 23, column: 14, scope: !44)
- !46 = !DILocation(line: 23, column: 34, scope: !44)
- !47 = !DILocation(line: 23, column: 37, scope: !44)
- !48 = !DILocation(line: 23, column: 45, scope: !44)
- !49 = !DILocation(line: 23, column: 40, scope: !44)
- !50 = !DILocation(line: 23, column: 20, scope: !44)
- !51 = !DILocation(line: 24, column: 13, scope: !52)
- !52 = distinct !DILexicalBlock(scope: !44, file: !1, line: 24, column: 13)
- !53 = !DILocation(line: 24, column: 17, scope: !52)
- !54 = !DILocation(line: 24, column: 13, scope: !44)
- !55 = !DILocation(line: 24, column: 60, scope: !52)
- !56 = !DILocation(line: 24, column: 55, scope: !52)
- !57 = !DILocation(line: 24, column: 64, scope: !52)
- !58 = !DILocation(line: 24, column: 23, scope: !52)
- !59 = !DILocation(line: 25, column: 60, scope: !52)
- !60 = !DILocation(line: 25, column: 55, scope: !52)
- !61 = !DILocation(line: 25, column: 23, scope: !52)
- !62 = !DILocation(line: 26, column: 5, scope: !44)
- !63 = !DILocation(line: 22, column: 32, scope: !39)
- !64 = !DILocation(line: 22, column: 5, scope: !39)
- !65 = distinct !{!65, !42, !66, !67}
- !66 = !DILocation(line: 26, column: 5, scope: !35)
- !67 = !{!"llvm.loop.mustprogress"}
- !68 = !DILocation(line: 27, column: 5, scope: !12)
