- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/insertionsort_function.ll'
?                                                                  ^^^    ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/2/insertionsort_function.ll'
?                                                                +++++++++++++++++++++  ^^   ++++ ^
+ source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/2/insertionsort_function.ll"
- source_filename = "../original/src/insertionsort.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
- target triple = "x86_64-pc-linux-gnu"
?                         ^^
+ target triple = "x86_64-unknown-linux-gnu"
?                         ^^^^^^^
  
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
+ define void @insertion_sort(i32* nocapture %arr, i64 %n) {
+ entry:
+   br label %outer.cond
  
+ outer.cond:                                       ; preds = %inner.exit, %entry
+   %i = phi i64 [ 1, %entry ], [ %i.next, %inner.exit ]
+   %cmp.i.n = icmp ult i64 %i, %n
+   br i1 %cmp.i.n, label %outer.body, label %exit
- ; Function Attrs: noinline nounwind optnone uwtable
- define hidden void @insertion_sort(i32* noundef %a, i64 noundef %n) #1 !dbg !10 {
- entry:
-   %a.addr = alloca i32*, align 8
-   %n.addr = alloca i64, align 8
-   %i = alloca i64, align 8
-   %key = alloca i32, align 4
-   %j = alloca i64, align 8
-   store i32* %a, i32** %a.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !19, metadata !DIExpression()), !dbg !20
-   store i64 %n, i64* %n.addr, align 8
-   call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !21, metadata !DIExpression()), !dbg !22
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !23, metadata !DIExpression()), !dbg !25
-   store i64 1, i64* %i, align 8, !dbg !25
-   br label %for.cond, !dbg !26
  
+ outer.body:                                       ; preds = %outer.cond
+   %gep.i = getelementptr inbounds i32, i32* %arr, i64 %i
+   %key = load i32, i32* %gep.i, align 4
+   br label %inner.cond
- for.cond:                                         ; preds = %for.inc, %entry
-   %0 = load i64, i64* %i, align 8, !dbg !27
-   %1 = load i64, i64* %n.addr, align 8, !dbg !29
-   %cmp = icmp ult i64 %0, %1, !dbg !30
-   br i1 %cmp, label %for.body, label %for.end, !dbg !31
  
+ inner.cond:                                       ; preds = %inner.body, %outer.body
+   %j = phi i64 [ %i, %outer.body ], [ %j.prev, %inner.body ]
+   %j.ne.zero.not = icmp eq i64 %j, 0
+   br i1 %j.ne.zero.not, label %inner.exit, label %inner.cmp
- for.body:                                         ; preds = %for.cond
-   call void @llvm.dbg.declare(metadata i32* %key, metadata !32, metadata !DIExpression()), !dbg !34
-   %2 = load i32*, i32** %a.addr, align 8, !dbg !35
-   %3 = load i64, i64* %i, align 8, !dbg !36
-   %arrayidx = getelementptr inbounds i32, i32* %2, i64 %3, !dbg !35
-   %4 = load i32, i32* %arrayidx, align 4, !dbg !35
-   store i32 %4, i32* %key, align 4, !dbg !34
-   call void @llvm.dbg.declare(metadata i64* %j, metadata !37, metadata !DIExpression()), !dbg !38
-   %5 = load i64, i64* %i, align 8, !dbg !39
-   store i64 %5, i64* %j, align 8, !dbg !38
-   br label %while.cond, !dbg !40
  
- while.cond:                                       ; preds = %while.body, %for.body
-   %6 = load i64, i64* %j, align 8, !dbg !41
-   %cmp1 = icmp ugt i64 %6, 0, !dbg !42
-   br i1 %cmp1, label %land.rhs, label %land.end, !dbg !43
+ inner.cmp:                                        ; preds = %inner.cond
+   %j.prev = add i64 %j, -1
+   %gep.prev = getelementptr inbounds i32, i32* %arr, i64 %j.prev
+   %prev = load i32, i32* %gep.prev, align 4
+   %key.lt.prev = icmp slt i32 %key, %prev
+   br i1 %key.lt.prev, label %inner.body, label %inner.exit
  
- land.rhs:                                         ; preds = %while.cond
? ^^  ^^^^                                        --           -- ^   ^^^
+ inner.body:                                       ; preds = %inner.cmp
? ^ ++++++ ^                                                    ^^ +  ^^
-   %7 = load i32*, i32** %a.addr, align 8, !dbg !44
-   %8 = load i64, i64* %j, align 8, !dbg !45
-   %sub = sub i64 %8, 1, !dbg !46
-   %arrayidx2 = getelementptr inbounds i32, i32* %7, i64 %sub, !dbg !44
?    ^^^^^^^^^                                     ^       ^^^^^^^^^^^^^
+   %gep.j = getelementptr inbounds i32, i32* %arr, i64 %j
?    ^^^^^                                     ^^^       ^
+   store i32 %prev, i32* %gep.j, align 4
-   %9 = load i32, i32* %arrayidx2, align 4, !dbg !44
-   %10 = load i32, i32* %key, align 4, !dbg !47
-   %cmp3 = icmp sgt i32 %9, %10, !dbg !48
-   br label %land.end
?             ^^ ^ ^
+   br label %inner.cond
?             ^ ^^^ ^^
  
- land.end:                                         ; preds = %land.rhs, %while.cond
? ^^ ^  ^^                                        --           ^^ ^  ----------
+ inner.exit:                                       ; preds = %inner.cmp, %inner.cond
? ^ ^^^  ^^^                                                   ^ ^^^ ++++++++++
-   %11 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ], !dbg !49
-   br i1 %11, label %while.body, label %while.end, !dbg !40
+   %gep.final = getelementptr inbounds i32, i32* %arr, i64 %j
+   store i32 %key, i32* %gep.final, align 4
+   %i.next = add i64 %i, 1
+   br label %outer.cond
  
- while.body:                                       ; preds = %land.end
-   %12 = load i32*, i32** %a.addr, align 8, !dbg !50
-   %13 = load i64, i64* %j, align 8, !dbg !52
-   %sub4 = sub i64 %13, 1, !dbg !53
-   %arrayidx5 = getelementptr inbounds i32, i32* %12, i64 %sub4, !dbg !50
-   %14 = load i32, i32* %arrayidx5, align 4, !dbg !50
-   %15 = load i32*, i32** %a.addr, align 8, !dbg !54
-   %16 = load i64, i64* %j, align 8, !dbg !55
-   %arrayidx6 = getelementptr inbounds i32, i32* %15, i64 %16, !dbg !54
-   store i32 %14, i32* %arrayidx6, align 4, !dbg !56
-   %17 = load i64, i64* %j, align 8, !dbg !57
-   %dec = add i64 %17, -1, !dbg !57
-   store i64 %dec, i64* %j, align 8, !dbg !57
-   br label %while.cond, !dbg !40, !llvm.loop !58
- 
- while.end:                                        ; preds = %land.end
-   %18 = load i32, i32* %key, align 4, !dbg !61
-   %19 = load i32*, i32** %a.addr, align 8, !dbg !62
-   %20 = load i64, i64* %j, align 8, !dbg !63
-   %arrayidx7 = getelementptr inbounds i32, i32* %19, i64 %20, !dbg !62
-   store i32 %18, i32* %arrayidx7, align 4, !dbg !64
-   br label %for.inc, !dbg !65
- 
- for.inc:                                          ; preds = %while.end
-   %21 = load i64, i64* %i, align 8, !dbg !66
-   %inc = add i64 %21, 1, !dbg !66
-   store i64 %inc, i64* %i, align 8, !dbg !66
-   br label %for.cond, !dbg !67, !llvm.loop !68
- 
- for.end:                                          ; preds = %for.cond
? ---- ^^                                                      -
+ exit:                                             ; preds = %outer.cond
?  ^^^                                           +++            +++
-   ret void, !dbg !70
+   ret void
  }
- 
- attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #1 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/insertionsort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "9b39ced67c1e6732101e98b285c67a7b")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !10 = distinct !DISubprogram(name: "insertion_sort", scope: !1, file: !1, line: 4, type: !11, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !11 = !DISubroutineType(types: !12)
- !12 = !{null, !13, !15}
- !13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
- !14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !15 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !16, line: 46, baseType: !17)
- !16 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !17 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !18 = !{}
- !19 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !1, line: 4, type: !13)
- !20 = !DILocation(line: 4, column: 33, scope: !10)
- !21 = !DILocalVariable(name: "n", arg: 2, scope: !10, file: !1, line: 4, type: !15)
- !22 = !DILocation(line: 4, column: 43, scope: !10)
- !23 = !DILocalVariable(name: "i", scope: !24, file: !1, line: 5, type: !15)
- !24 = distinct !DILexicalBlock(scope: !10, file: !1, line: 5, column: 5)
- !25 = !DILocation(line: 5, column: 17, scope: !24)
- !26 = !DILocation(line: 5, column: 10, scope: !24)
- !27 = !DILocation(line: 5, column: 24, scope: !28)
- !28 = distinct !DILexicalBlock(scope: !24, file: !1, line: 5, column: 5)
- !29 = !DILocation(line: 5, column: 28, scope: !28)
- !30 = !DILocation(line: 5, column: 26, scope: !28)
- !31 = !DILocation(line: 5, column: 5, scope: !24)
- !32 = !DILocalVariable(name: "key", scope: !33, file: !1, line: 6, type: !14)
- !33 = distinct !DILexicalBlock(scope: !28, file: !1, line: 5, column: 36)
- !34 = !DILocation(line: 6, column: 13, scope: !33)
- !35 = !DILocation(line: 6, column: 19, scope: !33)
- !36 = !DILocation(line: 6, column: 21, scope: !33)
- !37 = !DILocalVariable(name: "j", scope: !33, file: !1, line: 7, type: !15)
- !38 = !DILocation(line: 7, column: 16, scope: !33)
- !39 = !DILocation(line: 7, column: 20, scope: !33)
- !40 = !DILocation(line: 8, column: 9, scope: !33)
- !41 = !DILocation(line: 8, column: 16, scope: !33)
- !42 = !DILocation(line: 8, column: 18, scope: !33)
- !43 = !DILocation(line: 8, column: 22, scope: !33)
- !44 = !DILocation(line: 8, column: 25, scope: !33)
- !45 = !DILocation(line: 8, column: 27, scope: !33)
- !46 = !DILocation(line: 8, column: 29, scope: !33)
- !47 = !DILocation(line: 8, column: 36, scope: !33)
- !48 = !DILocation(line: 8, column: 34, scope: !33)
- !49 = !DILocation(line: 0, scope: !33)
- !50 = !DILocation(line: 9, column: 20, scope: !51)
- !51 = distinct !DILexicalBlock(scope: !33, file: !1, line: 8, column: 41)
- !52 = !DILocation(line: 9, column: 22, scope: !51)
- !53 = !DILocation(line: 9, column: 24, scope: !51)
- !54 = !DILocation(line: 9, column: 13, scope: !51)
- !55 = !DILocation(line: 9, column: 15, scope: !51)
- !56 = !DILocation(line: 9, column: 18, scope: !51)
- !57 = !DILocation(line: 10, column: 13, scope: !51)
- !58 = distinct !{!58, !40, !59, !60}
- !59 = !DILocation(line: 11, column: 9, scope: !33)
- !60 = !{!"llvm.loop.mustprogress"}
- !61 = !DILocation(line: 12, column: 16, scope: !33)
- !62 = !DILocation(line: 12, column: 9, scope: !33)
- !63 = !DILocation(line: 12, column: 11, scope: !33)
- !64 = !DILocation(line: 12, column: 14, scope: !33)
- !65 = !DILocation(line: 13, column: 5, scope: !33)
- !66 = !DILocation(line: 5, column: 31, scope: !28)
- !67 = !DILocation(line: 5, column: 5, scope: !28)
- !68 = distinct !{!68, !31, !69, !60}
- !69 = !DILocation(line: 13, column: 5, scope: !24)
- !70 = !DILocation(line: 14, column: 1, scope: !10)
