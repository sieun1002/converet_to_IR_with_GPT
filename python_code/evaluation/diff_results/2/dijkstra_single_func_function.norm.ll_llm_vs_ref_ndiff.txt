- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/dijkstra_single_func_function.ll'
?                                                                  ^^^    ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/2/dijkstra_single_func_function.ll'
?                                                                +++++++++++++++++++++  ^^   ++++ ^
+ source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/2/dijkstra_single_func_function.ll"
- source_filename = "dijkstra_single.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- @.str = external hidden unnamed_addr constant [16 x i8], align 1
- @.str.1 = external hidden unnamed_addr constant [15 x i8], align 1
+ @.str_inf = private constant [16 x i8] c"dist[%d] = INF\0A\00"
+ @.str_val = private constant [15 x i8] c"dist[%d] = %d\0A\00"
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @dijkstra([100 x i32]* noundef %graph, i32 noundef %V, i32 noundef %src) #0 !dbg !10 {
+ declare i32 @printf(i8*, ...)
+ 
+ define void @dijkstra(i32* %graph, i32 %n, i32 %src) {
  entry:
+   %n64 = sext i32 %n to i64
-   %graph.addr = alloca [100 x i32]*, align 8
-   %V.addr = alloca i32, align 4
-   %src.addr = alloca i32, align 4
-   %dist = alloca [100 x i32], align 16
?                  -------   -
+   %dist = alloca i32, i64 %n64, align 16
?                      ++++++++++
-   %visited = alloca [100 x i32], align 16
?                     -------   -
+   %visited = alloca i32, i64 %n64, align 16
?                         ++++++++++
+   br label %init.loop
-   %i = alloca i32, align 4
-   %c = alloca i32, align 4
-   %u = alloca i32, align 4
-   %min = alloca i32, align 4
-   %i8 = alloca i32, align 4
-   %v = alloca i32, align 4
-   %i70 = alloca i32, align 4
-   store [100 x i32]* %graph, [100 x i32]** %graph.addr, align 8
-   call void @llvm.dbg.declare(metadata [100 x i32]** %graph.addr, metadata !19, metadata !DIExpression()), !dbg !20
-   store i32 %V, i32* %V.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %V.addr, metadata !21, metadata !DIExpression()), !dbg !22
-   store i32 %src, i32* %src.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !23, metadata !DIExpression()), !dbg !24
-   call void @llvm.dbg.declare(metadata [100 x i32]* %dist, metadata !25, metadata !DIExpression()), !dbg !26
-   call void @llvm.dbg.declare(metadata [100 x i32]* %visited, metadata !27, metadata !DIExpression()), !dbg !28
-   call void @llvm.dbg.declare(metadata i32* %i, metadata !29, metadata !DIExpression()), !dbg !31
-   store i32 0, i32* %i, align 4, !dbg !31
-   br label %for.cond, !dbg !32
  
- for.cond:                                         ; preds = %for.inc, %entry
? ^ --- ^^                                         -           ----  ^
+ init.loop:                                        ; preds = %init.body, %entry
? ^^^^^^  ^                                                      ^^^^^^^
+   %i.init = phi i32 [ 0, %entry ], [ %i.next, %init.body ]
+   %init.cmp = icmp slt i32 %i.init, %n
+   br i1 %init.cmp, label %init.body, label %init.end
-   %0 = load i32, i32* %i, align 4, !dbg !33
-   %1 = load i32, i32* %V.addr, align 4, !dbg !35
-   %cmp = icmp slt i32 %0, %1, !dbg !36
-   br i1 %cmp, label %for.body, label %for.end, !dbg !37
  
- for.body:                                         ; preds = %for.cond
? ^^^                                              -           ^ --- ^^
+ init.body:                                        ; preds = %init.loop
? ^^^^                                                         ^^^^^^  ^
+   %i.init.64 = zext i32 %i.init to i64
+   %dist.ptr.init = getelementptr inbounds i32, i32* %dist, i64 %i.init.64
-   %2 = load i32, i32* %i, align 4, !dbg !38
-   %idxprom = sext i32 %2 to i64, !dbg !40
-   %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom, !dbg !40
-   store i32 2147483647, i32* %arrayidx, align 4, !dbg !41
?                               ^ ^^^ ^^         ----------
+   store i32 2147483647, i32* %dist.ptr.init, align 4
?                               ^^^^^^^ ^ ^^^
+   %visited.ptr.init = getelementptr inbounds i32, i32* %visited, i64 %i.init.64
+   store i32 0, i32* %visited.ptr.init, align 4
+   %i.next = add nuw nsw i32 %i.init, 1
+   br label %init.loop
-   %3 = load i32, i32* %i, align 4, !dbg !42
-   %idxprom1 = sext i32 %3 to i64, !dbg !43
-   %arrayidx2 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom1, !dbg !43
-   store i32 0, i32* %arrayidx2, align 4, !dbg !44
-   br label %for.inc, !dbg !45
  
- for.inc:                                          ; preds = %for.body
? ----  ^                                          -           ^ --- ^^
+ init.end:                                         ; preds = %init.loop
?   ^^^^^^                                                     ^^^^^^  ^
-   %4 = load i32, i32* %i, align 4, !dbg !46
-   %inc = add nsw i32 %4, 1, !dbg !46
-   store i32 %inc, i32* %i, align 4, !dbg !46
-   br label %for.cond, !dbg !47, !llvm.loop !48
+   %src64 = sext i32 %src to i64
+   %dist.src.ptr = getelementptr inbounds i32, i32* %dist, i64 %src64
+   store i32 0, i32* %dist.src.ptr, align 4
+   br label %outer.loop
  
- for.end:                                          ; preds = %for.cond
? -   ^^^                                        ---           -    ^
+ outer.loop:                                       ; preds = %outer.latch, %init.end
?  +++  ^^^^                                                    +++  +++ ^^^^^^^^^^
+   %count = phi i32 [ 0, %init.end ], [ %count.next, %outer.latch ]
+   %n.minus1 = add nsw i32 %n, -1
+   %outer.cmp = icmp slt i32 %count, %n.minus1
+   br i1 %outer.cmp, label %select.loop, label %after.outer
-   %5 = load i32, i32* %src.addr, align 4, !dbg !51
-   %idxprom3 = sext i32 %5 to i64, !dbg !52
-   %arrayidx4 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom3, !dbg !52
-   store i32 0, i32* %arrayidx4, align 4, !dbg !53
-   call void @llvm.dbg.declare(metadata i32* %c, metadata !54, metadata !DIExpression()), !dbg !56
-   store i32 0, i32* %c, align 4, !dbg !56
-   br label %for.cond5, !dbg !57
  
- for.cond5:                                        ; preds = %for.inc67, %for.end
-   %6 = load i32, i32* %c, align 4, !dbg !58
-   %7 = load i32, i32* %V.addr, align 4, !dbg !60
-   %sub = sub nsw i32 %7, 1, !dbg !61
-   %cmp6 = icmp slt i32 %6, %sub, !dbg !62
-   br i1 %cmp6, label %for.body7, label %for.end69, !dbg !63
+ select.loop:                                      ; preds = %outer.loop, %select.body
+   %v.sel = phi i32 [ %v.sel.next, %select.body ], [ 0, %outer.loop ]
+   %u.cur = phi i32 [ %u.next, %select.body ], [ -1, %outer.loop ]
+   %min.cur = phi i32 [ %min.next, %select.body ], [ 2147483647, %outer.loop ]
+   %sel.cmp = icmp slt i32 %v.sel, %n
+   br i1 %sel.cmp, label %select.body, label %select.end
  
- for.body7:                                        ; preds = %for.cond5
? ^^^     -                                       --           ^ --- ^^^
+ select.body:                                      ; preds = %select.loop
? ^^^^^^                                                       ^^^^^^^^  ^
-   call void @llvm.dbg.declare(metadata i32* %u, metadata !64, metadata !DIExpression()), !dbg !66
-   store i32 -1, i32* %u, align 4, !dbg !66
-   call void @llvm.dbg.declare(metadata i32* %min, metadata !67, metadata !DIExpression()), !dbg !68
-   store i32 2147483647, i32* %min, align 4, !dbg !68
-   call void @llvm.dbg.declare(metadata i32* %i8, metadata !69, metadata !DIExpression()), !dbg !71
-   store i32 0, i32* %i8, align 4, !dbg !71
-   br label %for.cond9, !dbg !72
+   %v.sel.64 = zext i32 %v.sel to i64
+   %vis.v.ptr = getelementptr inbounds i32, i32* %visited, i64 %v.sel.64
+   %vis.v = load i32, i32* %vis.v.ptr, align 4
+   %is.unvisited = icmp eq i32 %vis.v, 0
+   %dist.v.ptr = getelementptr inbounds i32, i32* %dist, i64 %v.sel.64
+   %dist.v = load i32, i32* %dist.v.ptr, align 4
+   %is.less = icmp slt i32 %dist.v, %min.cur
+   %cond.update = and i1 %is.unvisited, %is.less
+   %u.next = select i1 %cond.update, i32 %v.sel, i32 %u.cur
+   %min.next = select i1 %cond.update, i32 %dist.v, i32 %min.cur
+   %v.sel.next = add nuw nsw i32 %v.sel, 1
+   br label %select.loop
  
+ select.end:                                       ; preds = %select.loop
+   %u.neg1 = icmp eq i32 %u.cur, -1
+   br i1 %u.neg1, label %after.outer, label %relax.init
- for.cond9:                                        ; preds = %for.inc19, %for.body7
-   %8 = load i32, i32* %i8, align 4, !dbg !73
-   %9 = load i32, i32* %V.addr, align 4, !dbg !75
-   %cmp10 = icmp slt i32 %8, %9, !dbg !76
-   br i1 %cmp10, label %for.body11, label %for.end21, !dbg !77
  
- for.body11:                                       ; preds = %for.cond9
? --  ^^^^^^                                                   ^^^ ^^  -
+ relax.init:                                       ; preds = %select.end
?  ++++ ^^^^                                                   ^^^^^^ ^
+   %u.fin.64 = sext i32 %u.cur to i64
+   %visited.u.ptr = getelementptr inbounds i32, i32* %visited, i64 %u.fin.64
+   store i32 1, i32* %visited.u.ptr, align 4
+   br label %relax.loop
-   %10 = load i32, i32* %i8, align 4, !dbg !78
-   %idxprom12 = sext i32 %10 to i64, !dbg !81
-   %arrayidx13 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom12, !dbg !81
-   %11 = load i32, i32* %arrayidx13, align 4, !dbg !81
-   %tobool = icmp ne i32 %11, 0, !dbg !81
-   br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !82
  
- land.lhs.true:                                    ; preds = %for.body11
?   ^^  ^^^^^^^                                                --      ^^
+ relax.loop:                                       ; preds = %relax.body, %relax.init
? ++  ^  ^^^                                     +++            ++++     ^^^^^^^^^^^^^
+   %v.rel = phi i32 [ 0, %relax.init ], [ %v.rel.next, %relax.body ]
+   %rel.cmp = icmp slt i32 %v.rel, %n
+   br i1 %rel.cmp, label %relax.body, label %outer.latch
-   %12 = load i32, i32* %i8, align 4, !dbg !83
-   %idxprom14 = sext i32 %12 to i64, !dbg !84
-   %arrayidx15 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom14, !dbg !84
-   %13 = load i32, i32* %arrayidx15, align 4, !dbg !84
-   %14 = load i32, i32* %min, align 4, !dbg !85
-   %cmp16 = icmp slt i32 %13, %14, !dbg !86
-   br i1 %cmp16, label %if.then, label %if.end, !dbg !87
  
- if.then:                                          ; preds = %land.lhs.true
? ^^ ^^^^                                        ---             ^^  ^^^^^^^
+ relax.body:                                       ; preds = %relax.loop
? ^^^^^ ^^^^                                                   ++  ^  ^^^
-   %15 = load i32, i32* %i8, align 4, !dbg !88
-   %idxprom17 = sext i32 %15 to i64, !dbg !90
-   %arrayidx18 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom17, !dbg !90
-   %16 = load i32, i32* %arrayidx18, align 4, !dbg !90
-   store i32 %16, i32* %min, align 4, !dbg !91
-   %17 = load i32, i32* %i8, align 4, !dbg !92
-   store i32 %17, i32* %u, align 4, !dbg !93
-   br label %if.end, !dbg !94
+   %v.rel.64 = zext i32 %v.rel to i64
+   %u.mul = mul nsw i64 %u.fin.64, 100
+   %idx.linear = add nsw i64 %u.mul, %v.rel.64
+   %adj.ptr = getelementptr i32, i32* %graph, i64 %idx.linear
+   %w = load i32, i32* %adj.ptr, align 4
+   %has.edge = icmp ne i32 %w, 0
+   %vis.v2.ptr = getelementptr inbounds i32, i32* %visited, i64 %v.rel.64
+   %vis.v2 = load i32, i32* %vis.v2.ptr, align 4
+   %is.unvisited2 = icmp eq i32 %vis.v2, 0
+   %dist.u.ptr = getelementptr inbounds i32, i32* %dist, i64 %u.fin.64
+   %dist.u = load i32, i32* %dist.u.ptr, align 4
+   %u.not.inf = icmp ne i32 %dist.u, 2147483647
+   %sum = add i32 %dist.u, %w
+   %dist.v2.ptr = getelementptr inbounds i32, i32* %dist, i64 %v.rel.64
+   %dist.v2 = load i32, i32* %dist.v2.ptr, align 4
+   %is.better = icmp sgt i32 %dist.v2, %sum
+   %c1 = and i1 %has.edge, %is.unvisited2
+   %c2 = and i1 %c1, %u.not.inf
+   %do.update = and i1 %c2, %is.better
+   %spec.store.select = select i1 %do.update, i32 %sum, i32 %dist.v2
+   store i32 %spec.store.select, i32* %dist.v2.ptr, align 4
+   %v.rel.next = add nuw nsw i32 %v.rel, 1
+   br label %relax.loop
  
- if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body11
-   br label %for.inc19, !dbg !95
+ outer.latch:                                      ; preds = %relax.loop
+   %count.next = add nuw nsw i32 %count, 1
+   br label %outer.loop
  
- for.inc19:                                        ; preds = %if.end
?  ^  ^^^^^                                       --           ^^
+ after.outer:                                      ; preds = %select.end, %outer.loop
? + ^^  ^^^^^                                                  ^^^^^^    +++++++++++++
+   br label %print.loop
-   %18 = load i32, i32* %i8, align 4, !dbg !96
-   %inc20 = add nsw i32 %18, 1, !dbg !96
-   store i32 %inc20, i32* %i8, align 4, !dbg !96
-   br label %for.cond9, !dbg !97, !llvm.loop !98
  
- for.end21:                                        ; preds = %for.cond9
-   %19 = load i32, i32* %u, align 4, !dbg !100
-   %cmp22 = icmp eq i32 %19, -1, !dbg !102
-   br i1 %cmp22, label %if.then23, label %if.end24, !dbg !103
+ print.loop:                                       ; preds = %print.latch, %after.outer
+   %i.print = phi i32 [ 0, %after.outer ], [ %i.print.next, %print.latch ]
+   %print.cmp = icmp slt i32 %i.print, %n
+   br i1 %print.cmp, label %print.body, label %ret
  
- if.then23:                                        ; preds = %for.end21
?  ^ ^^^^^^                                        -           ^ ^^^^^^^
+ print.body:                                       ; preds = %print.loop
? ++ ^^ ^^^^                                                   ^^^^^^^ ^^
-   br label %for.end69, !dbg !104
+   %i.print.64 = zext i32 %i.print to i64
+   %dist.i.ptr = getelementptr inbounds i32, i32* %dist, i64 %i.print.64
+   %dist.i = load i32, i32* %dist.i.ptr, align 4
+   %is.inf = icmp eq i32 %dist.i, 2147483647
+   br i1 %is.inf, label %print.inf, label %print.val
  
- if.end24:                                         ; preds = %for.end21
?   ------                                         -           ^ ---- ^^
+ print.inf:                                        ; preds = %print.body
? ++ +++++                                                     ^^^^^^^  ^
+   %call.inf = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str_inf, i64 0, i64 0), i32 %i.print)
+   br label %print.latch
-   %20 = load i32, i32* %u, align 4, !dbg !105
-   %idxprom25 = sext i32 %20 to i64, !dbg !106
-   %arrayidx26 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom25, !dbg !106
-   store i32 1, i32* %arrayidx26, align 4, !dbg !107
-   call void @llvm.dbg.declare(metadata i32* %v, metadata !108, metadata !DIExpression()), !dbg !110
-   store i32 0, i32* %v, align 4, !dbg !110
-   br label %for.cond27, !dbg !111
  
- for.cond27:                                       ; preds = %for.inc64, %if.end24
? ^^  ^^^^^^                                                   ^^ -  ^^^^^^^^ ^^ ^^
+ print.val:                                        ; preds = %print.body
? ^ +++ ^^^                                        +           ^   ^ ^^ ^
+   %call.val = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @.str_val, i64 0, i64 0), i32 %i.print, i32 %dist.i)
+   br label %print.latch
-   %21 = load i32, i32* %v, align 4, !dbg !112
-   %22 = load i32, i32* %V.addr, align 4, !dbg !114
-   %cmp28 = icmp slt i32 %21, %22, !dbg !115
-   br i1 %cmp28, label %for.body29, label %for.end66, !dbg !116
  
+ print.latch:                                      ; preds = %print.val, %print.inf
+   %i.print.next = add nuw nsw i32 %i.print, 1
+   br label %print.loop
- for.body29:                                       ; preds = %for.cond27
-   %23 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !117
-   %24 = load i32, i32* %u, align 4, !dbg !120
-   %idxprom30 = sext i32 %24 to i64, !dbg !117
-   %arrayidx31 = getelementptr inbounds [100 x i32], [100 x i32]* %23, i64 %idxprom30, !dbg !117
-   %25 = load i32, i32* %v, align 4, !dbg !121
-   %idxprom32 = sext i32 %25 to i64, !dbg !117
-   %arrayidx33 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx31, i64 0, i64 %idxprom32, !dbg !117
-   %26 = load i32, i32* %arrayidx33, align 4, !dbg !117
-   %tobool34 = icmp ne i32 %26, 0, !dbg !117
-   br i1 %tobool34, label %land.lhs.true35, label %if.end63, !dbg !122
  
- land.lhs.true35:                                  ; preds = %for.body29
-   %27 = load i32, i32* %v, align 4, !dbg !123
-   %idxprom36 = sext i32 %27 to i64, !dbg !124
-   %arrayidx37 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom36, !dbg !124
-   %28 = load i32, i32* %arrayidx37, align 4, !dbg !124
-   %tobool38 = icmp ne i32 %28, 0, !dbg !124
-   br i1 %tobool38, label %if.end63, label %land.lhs.true39, !dbg !125
- 
- land.lhs.true39:                                  ; preds = %land.lhs.true35
-   %29 = load i32, i32* %u, align 4, !dbg !126
-   %idxprom40 = sext i32 %29 to i64, !dbg !127
-   %arrayidx41 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom40, !dbg !127
-   %30 = load i32, i32* %arrayidx41, align 4, !dbg !127
-   %cmp42 = icmp ne i32 %30, 2147483647, !dbg !128
-   br i1 %cmp42, label %land.lhs.true43, label %if.end63, !dbg !129
- 
- land.lhs.true43:                                  ; preds = %land.lhs.true39
-   %31 = load i32, i32* %v, align 4, !dbg !130
-   %idxprom44 = sext i32 %31 to i64, !dbg !131
-   %arrayidx45 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom44, !dbg !131
-   %32 = load i32, i32* %arrayidx45, align 4, !dbg !131
-   %33 = load i32, i32* %u, align 4, !dbg !132
-   %idxprom46 = sext i32 %33 to i64, !dbg !133
-   %arrayidx47 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom46, !dbg !133
-   %34 = load i32, i32* %arrayidx47, align 4, !dbg !133
-   %35 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !134
-   %36 = load i32, i32* %u, align 4, !dbg !135
-   %idxprom48 = sext i32 %36 to i64, !dbg !134
-   %arrayidx49 = getelementptr inbounds [100 x i32], [100 x i32]* %35, i64 %idxprom48, !dbg !134
-   %37 = load i32, i32* %v, align 4, !dbg !136
-   %idxprom50 = sext i32 %37 to i64, !dbg !134
-   %arrayidx51 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx49, i64 0, i64 %idxprom50, !dbg !134
-   %38 = load i32, i32* %arrayidx51, align 4, !dbg !134
-   %add = add nsw i32 %34, %38, !dbg !137
-   %cmp52 = icmp sgt i32 %32, %add, !dbg !138
-   br i1 %cmp52, label %if.then53, label %if.end63, !dbg !139
- 
- if.then53:                                        ; preds = %land.lhs.true43
-   %39 = load i32, i32* %u, align 4, !dbg !140
-   %idxprom54 = sext i32 %39 to i64, !dbg !142
-   %arrayidx55 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom54, !dbg !142
-   %40 = load i32, i32* %arrayidx55, align 4, !dbg !142
-   %41 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !143
-   %42 = load i32, i32* %u, align 4, !dbg !144
-   %idxprom56 = sext i32 %42 to i64, !dbg !143
-   %arrayidx57 = getelementptr inbounds [100 x i32], [100 x i32]* %41, i64 %idxprom56, !dbg !143
-   %43 = load i32, i32* %v, align 4, !dbg !145
-   %idxprom58 = sext i32 %43 to i64, !dbg !143
-   %arrayidx59 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx57, i64 0, i64 %idxprom58, !dbg !143
-   %44 = load i32, i32* %arrayidx59, align 4, !dbg !143
-   %add60 = add nsw i32 %40, %44, !dbg !146
-   %45 = load i32, i32* %v, align 4, !dbg !147
-   %idxprom61 = sext i32 %45 to i64, !dbg !148
-   %arrayidx62 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom61, !dbg !148
-   store i32 %add60, i32* %arrayidx62, align 4, !dbg !149
-   br label %if.end63, !dbg !150
- 
- if.end63:                                         ; preds = %if.then53, %land.lhs.true43, %land.lhs.true39, %land.lhs.true35, %for.body29
-   br label %for.inc64, !dbg !151
- 
- for.inc64:                                        ; preds = %if.end63
-   %46 = load i32, i32* %v, align 4, !dbg !152
-   %inc65 = add nsw i32 %46, 1, !dbg !152
-   store i32 %inc65, i32* %v, align 4, !dbg !152
-   br label %for.cond27, !dbg !153, !llvm.loop !154
- 
- for.end66:                                        ; preds = %for.cond27
-   br label %for.inc67, !dbg !156
- 
- for.inc67:                                        ; preds = %for.end66
-   %47 = load i32, i32* %c, align 4, !dbg !157
-   %inc68 = add nsw i32 %47, 1, !dbg !157
-   store i32 %inc68, i32* %c, align 4, !dbg !157
-   br label %for.cond5, !dbg !158, !llvm.loop !159
- 
- for.end69:                                        ; preds = %if.then23, %for.cond5
-   call void @llvm.dbg.declare(metadata i32* %i70, metadata !161, metadata !DIExpression()), !dbg !163
-   store i32 0, i32* %i70, align 4, !dbg !163
-   br label %for.cond71, !dbg !164
- 
- for.cond71:                                       ; preds = %for.inc82, %for.end69
-   %48 = load i32, i32* %i70, align 4, !dbg !165
-   %49 = load i32, i32* %V.addr, align 4, !dbg !167
-   %cmp72 = icmp slt i32 %48, %49, !dbg !168
-   br i1 %cmp72, label %for.body73, label %for.end84, !dbg !169
- 
- for.body73:                                       ; preds = %for.cond71
-   %50 = load i32, i32* %i70, align 4, !dbg !170
-   %idxprom74 = sext i32 %50 to i64, !dbg !173
-   %arrayidx75 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom74, !dbg !173
-   %51 = load i32, i32* %arrayidx75, align 4, !dbg !173
-   %cmp76 = icmp eq i32 %51, 2147483647, !dbg !174
-   br i1 %cmp76, label %if.then77, label %if.else, !dbg !175
- 
- if.then77:                                        ; preds = %for.body73
-   %52 = load i32, i32* %i70, align 4, !dbg !176
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 noundef %52), !dbg !177
-   br label %if.end81, !dbg !177
- 
- if.else:                                          ; preds = %for.body73
? ^^^ ^^^                                                      ^ --- ^^^^
+ ret:                                              ; preds = %print.loop
? ^ ^                                           ++++           ^^^^^^^  ^
+   ret void
-   %53 = load i32, i32* %i70, align 4, !dbg !178
-   %54 = load i32, i32* %i70, align 4, !dbg !179
-   %idxprom78 = sext i32 %54 to i64, !dbg !180
-   %arrayidx79 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 %idxprom78, !dbg !180
-   %55 = load i32, i32* %arrayidx79, align 4, !dbg !180
-   %call80 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 noundef %53, i32 noundef %55), !dbg !181
-   br label %if.end81
- 
- if.end81:                                         ; preds = %if.else, %if.then77
-   br label %for.inc82, !dbg !182
- 
- for.inc82:                                        ; preds = %if.end81
-   %56 = load i32, i32* %i70, align 4, !dbg !183
-   %inc83 = add nsw i32 %56, 1, !dbg !183
-   store i32 %inc83, i32* %i70, align 4, !dbg !183
-   br label %for.cond71, !dbg !184, !llvm.loop !185
- 
- for.end84:                                        ; preds = %for.cond71
-   ret void, !dbg !187
  }
- 
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
- 
- declare i32 @printf(i8* noundef, ...) #2
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "dijkstra_single.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "93a059610778ce79afcc0838333af313")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !10 = distinct !DISubprogram(name: "dijkstra", scope: !1, file: !1, line: 4, type: !11, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !11 = !DISubroutineType(types: !12)
- !12 = !{null, !13, !15, !15}
- !13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
- !14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 3200, elements: !16)
- !15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !16 = !{!17}
- !17 = !DISubrange(count: 100)
- !18 = !{}
- !19 = !DILocalVariable(name: "graph", arg: 1, scope: !10, file: !1, line: 4, type: !13)
- !20 = !DILocation(line: 4, column: 19, scope: !10)
- !21 = !DILocalVariable(name: "V", arg: 2, scope: !10, file: !1, line: 4, type: !15)
- !22 = !DILocation(line: 4, column: 40, scope: !10)
- !23 = !DILocalVariable(name: "src", arg: 3, scope: !10, file: !1, line: 4, type: !15)
- !24 = !DILocation(line: 4, column: 47, scope: !10)
- !25 = !DILocalVariable(name: "dist", scope: !10, file: !1, line: 5, type: !14)
- !26 = !DILocation(line: 5, column: 9, scope: !10)
- !27 = !DILocalVariable(name: "visited", scope: !10, file: !1, line: 6, type: !14)
- !28 = !DILocation(line: 6, column: 9, scope: !10)
- !29 = !DILocalVariable(name: "i", scope: !30, file: !1, line: 8, type: !15)
- !30 = distinct !DILexicalBlock(scope: !10, file: !1, line: 8, column: 5)
- !31 = !DILocation(line: 8, column: 14, scope: !30)
- !32 = !DILocation(line: 8, column: 10, scope: !30)
- !33 = !DILocation(line: 8, column: 21, scope: !34)
- !34 = distinct !DILexicalBlock(scope: !30, file: !1, line: 8, column: 5)
- !35 = !DILocation(line: 8, column: 25, scope: !34)
- !36 = !DILocation(line: 8, column: 23, scope: !34)
- !37 = !DILocation(line: 8, column: 5, scope: !30)
- !38 = !DILocation(line: 9, column: 14, scope: !39)
- !39 = distinct !DILexicalBlock(scope: !34, file: !1, line: 8, column: 33)
- !40 = !DILocation(line: 9, column: 9, scope: !39)
- !41 = !DILocation(line: 9, column: 17, scope: !39)
- !42 = !DILocation(line: 10, column: 17, scope: !39)
- !43 = !DILocation(line: 10, column: 9, scope: !39)
- !44 = !DILocation(line: 10, column: 20, scope: !39)
- !45 = !DILocation(line: 11, column: 5, scope: !39)
- !46 = !DILocation(line: 8, column: 29, scope: !34)
- !47 = !DILocation(line: 8, column: 5, scope: !34)
- !48 = distinct !{!48, !37, !49, !50}
- !49 = !DILocation(line: 11, column: 5, scope: !30)
- !50 = !{!"llvm.loop.mustprogress"}
- !51 = !DILocation(line: 12, column: 10, scope: !10)
- !52 = !DILocation(line: 12, column: 5, scope: !10)
- !53 = !DILocation(line: 12, column: 15, scope: !10)
- !54 = !DILocalVariable(name: "c", scope: !55, file: !1, line: 14, type: !15)
- !55 = distinct !DILexicalBlock(scope: !10, file: !1, line: 14, column: 5)
- !56 = !DILocation(line: 14, column: 14, scope: !55)
- !57 = !DILocation(line: 14, column: 10, scope: !55)
- !58 = !DILocation(line: 14, column: 21, scope: !59)
- !59 = distinct !DILexicalBlock(scope: !55, file: !1, line: 14, column: 5)
- !60 = !DILocation(line: 14, column: 25, scope: !59)
- !61 = !DILocation(line: 14, column: 27, scope: !59)
- !62 = !DILocation(line: 14, column: 23, scope: !59)
- !63 = !DILocation(line: 14, column: 5, scope: !55)
- !64 = !DILocalVariable(name: "u", scope: !65, file: !1, line: 15, type: !15)
- !65 = distinct !DILexicalBlock(scope: !59, file: !1, line: 14, column: 37)
- !66 = !DILocation(line: 15, column: 13, scope: !65)
- !67 = !DILocalVariable(name: "min", scope: !65, file: !1, line: 15, type: !15)
- !68 = !DILocation(line: 15, column: 21, scope: !65)
- !69 = !DILocalVariable(name: "i", scope: !70, file: !1, line: 16, type: !15)
- !70 = distinct !DILexicalBlock(scope: !65, file: !1, line: 16, column: 9)
- !71 = !DILocation(line: 16, column: 18, scope: !70)
- !72 = !DILocation(line: 16, column: 14, scope: !70)
- !73 = !DILocation(line: 16, column: 25, scope: !74)
- !74 = distinct !DILexicalBlock(scope: !70, file: !1, line: 16, column: 9)
- !75 = !DILocation(line: 16, column: 29, scope: !74)
- !76 = !DILocation(line: 16, column: 27, scope: !74)
- !77 = !DILocation(line: 16, column: 9, scope: !70)
- !78 = !DILocation(line: 17, column: 26, scope: !79)
- !79 = distinct !DILexicalBlock(scope: !80, file: !1, line: 17, column: 17)
- !80 = distinct !DILexicalBlock(scope: !74, file: !1, line: 16, column: 37)
- !81 = !DILocation(line: 17, column: 18, scope: !79)
- !82 = !DILocation(line: 17, column: 29, scope: !79)
- !83 = !DILocation(line: 17, column: 37, scope: !79)
- !84 = !DILocation(line: 17, column: 32, scope: !79)
- !85 = !DILocation(line: 17, column: 42, scope: !79)
- !86 = !DILocation(line: 17, column: 40, scope: !79)
- !87 = !DILocation(line: 17, column: 17, scope: !80)
- !88 = !DILocation(line: 18, column: 28, scope: !89)
- !89 = distinct !DILexicalBlock(scope: !79, file: !1, line: 17, column: 47)
- !90 = !DILocation(line: 18, column: 23, scope: !89)
- !91 = !DILocation(line: 18, column: 21, scope: !89)
- !92 = !DILocation(line: 19, column: 21, scope: !89)
- !93 = !DILocation(line: 19, column: 19, scope: !89)
- !94 = !DILocation(line: 20, column: 13, scope: !89)
- !95 = !DILocation(line: 21, column: 9, scope: !80)
- !96 = !DILocation(line: 16, column: 33, scope: !74)
- !97 = !DILocation(line: 16, column: 9, scope: !74)
- !98 = distinct !{!98, !77, !99, !50}
- !99 = !DILocation(line: 21, column: 9, scope: !70)
- !100 = !DILocation(line: 22, column: 13, scope: !101)
- !101 = distinct !DILexicalBlock(scope: !65, file: !1, line: 22, column: 13)
- !102 = !DILocation(line: 22, column: 15, scope: !101)
- !103 = !DILocation(line: 22, column: 13, scope: !65)
- !104 = !DILocation(line: 22, column: 22, scope: !101)
- !105 = !DILocation(line: 23, column: 17, scope: !65)
- !106 = !DILocation(line: 23, column: 9, scope: !65)
- !107 = !DILocation(line: 23, column: 20, scope: !65)
- !108 = !DILocalVariable(name: "v", scope: !109, file: !1, line: 25, type: !15)
- !109 = distinct !DILexicalBlock(scope: !65, file: !1, line: 25, column: 9)
- !110 = !DILocation(line: 25, column: 18, scope: !109)
- !111 = !DILocation(line: 25, column: 14, scope: !109)
- !112 = !DILocation(line: 25, column: 25, scope: !113)
- !113 = distinct !DILexicalBlock(scope: !109, file: !1, line: 25, column: 9)
- !114 = !DILocation(line: 25, column: 29, scope: !113)
- !115 = !DILocation(line: 25, column: 27, scope: !113)
- !116 = !DILocation(line: 25, column: 9, scope: !109)
- !117 = !DILocation(line: 26, column: 17, scope: !118)
- !118 = distinct !DILexicalBlock(scope: !119, file: !1, line: 26, column: 17)
- !119 = distinct !DILexicalBlock(scope: !113, file: !1, line: 25, column: 37)
- !120 = !DILocation(line: 26, column: 23, scope: !118)
- !121 = !DILocation(line: 26, column: 26, scope: !118)
- !122 = !DILocation(line: 26, column: 29, scope: !118)
- !123 = !DILocation(line: 26, column: 41, scope: !118)
- !124 = !DILocation(line: 26, column: 33, scope: !118)
- !125 = !DILocation(line: 26, column: 44, scope: !118)
- !126 = !DILocation(line: 26, column: 52, scope: !118)
- !127 = !DILocation(line: 26, column: 47, scope: !118)
- !128 = !DILocation(line: 26, column: 55, scope: !118)
- !129 = !DILocation(line: 26, column: 66, scope: !118)
- !130 = !DILocation(line: 27, column: 22, scope: !118)
- !131 = !DILocation(line: 27, column: 17, scope: !118)
- !132 = !DILocation(line: 27, column: 32, scope: !118)
- !133 = !DILocation(line: 27, column: 27, scope: !118)
- !134 = !DILocation(line: 27, column: 37, scope: !118)
- !135 = !DILocation(line: 27, column: 43, scope: !118)
- !136 = !DILocation(line: 27, column: 46, scope: !118)
- !137 = !DILocation(line: 27, column: 35, scope: !118)
- !138 = !DILocation(line: 27, column: 25, scope: !118)
- !139 = !DILocation(line: 26, column: 17, scope: !119)
- !140 = !DILocation(line: 28, column: 32, scope: !141)
- !141 = distinct !DILexicalBlock(scope: !118, file: !1, line: 27, column: 50)
- !142 = !DILocation(line: 28, column: 27, scope: !141)
- !143 = !DILocation(line: 28, column: 37, scope: !141)
- !144 = !DILocation(line: 28, column: 43, scope: !141)
- !145 = !DILocation(line: 28, column: 46, scope: !141)
- !146 = !DILocation(line: 28, column: 35, scope: !141)
- !147 = !DILocation(line: 28, column: 22, scope: !141)
- !148 = !DILocation(line: 28, column: 17, scope: !141)
- !149 = !DILocation(line: 28, column: 25, scope: !141)
- !150 = !DILocation(line: 29, column: 13, scope: !141)
- !151 = !DILocation(line: 30, column: 9, scope: !119)
- !152 = !DILocation(line: 25, column: 33, scope: !113)
- !153 = !DILocation(line: 25, column: 9, scope: !113)
- !154 = distinct !{!154, !116, !155, !50}
- !155 = !DILocation(line: 30, column: 9, scope: !109)
- !156 = !DILocation(line: 31, column: 5, scope: !65)
- !157 = !DILocation(line: 14, column: 33, scope: !59)
- !158 = !DILocation(line: 14, column: 5, scope: !59)
- !159 = distinct !{!159, !63, !160, !50}
- !160 = !DILocation(line: 31, column: 5, scope: !55)
- !161 = !DILocalVariable(name: "i", scope: !162, file: !1, line: 33, type: !15)
- !162 = distinct !DILexicalBlock(scope: !10, file: !1, line: 33, column: 5)
- !163 = !DILocation(line: 33, column: 14, scope: !162)
- !164 = !DILocation(line: 33, column: 10, scope: !162)
- !165 = !DILocation(line: 33, column: 21, scope: !166)
- !166 = distinct !DILexicalBlock(scope: !162, file: !1, line: 33, column: 5)
- !167 = !DILocation(line: 33, column: 25, scope: !166)
- !168 = !DILocation(line: 33, column: 23, scope: !166)
- !169 = !DILocation(line: 33, column: 5, scope: !162)
- !170 = !DILocation(line: 34, column: 18, scope: !171)
- !171 = distinct !DILexicalBlock(scope: !172, file: !1, line: 34, column: 13)
- !172 = distinct !DILexicalBlock(scope: !166, file: !1, line: 33, column: 33)
- !173 = !DILocation(line: 34, column: 13, scope: !171)
- !174 = !DILocation(line: 34, column: 21, scope: !171)
- !175 = !DILocation(line: 34, column: 13, scope: !172)
- !176 = !DILocation(line: 34, column: 60, scope: !171)
- !177 = !DILocation(line: 34, column: 33, scope: !171)
- !178 = !DILocation(line: 35, column: 40, scope: !171)
- !179 = !DILocation(line: 35, column: 48, scope: !171)
- !180 = !DILocation(line: 35, column: 43, scope: !171)
- !181 = !DILocation(line: 35, column: 14, scope: !171)
- !182 = !DILocation(line: 36, column: 5, scope: !172)
- !183 = !DILocation(line: 33, column: 29, scope: !166)
- !184 = !DILocation(line: 33, column: 5, scope: !166)
- !185 = distinct !{!185, !169, !186, !50}
- !186 = !DILocation(line: 36, column: 5, scope: !162)
- !187 = !DILocation(line: 37, column: 1, scope: !10)
