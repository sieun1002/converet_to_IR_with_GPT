--- ref.ll
+++ dijkstra_modular_main.norm.ll_llm_vs_ref.ll
@@ -1,123 +1,44 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/dijkstra_modular_main.ll'
-source_filename = "dijkstra_modular.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/8/dijkstra_modular_main.ll'
+source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/8/dijkstra_modular_main.ll"
 target triple = "x86_64-pc-linux-gnu"
 
-%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
-%struct._IO_marker = type opaque
-%struct._IO_codecvt = type opaque
-%struct._IO_wide_data = type opaque
+@__bss_start = external global i8*
+@byte_40202C = external global i8
 
-@stderr = external global %struct._IO_FILE*, align 8
-@.str.5 = external hidden unnamed_addr constant [53 x i8], align 1
+declare i32 @read_graph(i8*, i32*, i32*)
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
+declare void @dijkstra(i8*, i32, i32, i8*)
 
-; Function Attrs: noinline nounwind optnone uwtable
-declare dso_local i32 @read_graph([100 x i32]* noundef, i32* noundef, i32* noundef) #1
+declare void @print_distances(i8*, i32)
 
-; Function Attrs: noinline nounwind optnone uwtable
-declare dso_local void @dijkstra([100 x i32]* noundef, i32 noundef, i32 noundef, i32* noundef) #1
+declare i32 @fprintf(i8*, i8*, ...)
 
-; Function Attrs: noinline nounwind optnone uwtable
-declare dso_local void @print_distances(i32* noundef, i32 noundef) #1
+define i32 @main() {
+entry:
+  %var8 = alloca i32, align 4
+  %varC = alloca i32, align 4
+  %graph = alloca [40016 x i8], align 16
+  %dist = alloca [40352 x i8], align 16
+  %graphptr = getelementptr inbounds [40016 x i8], [40016 x i8]* %graph, i64 0, i64 0
+  %distptr = getelementptr inbounds [40352 x i8], [40352 x i8]* %dist, i64 0, i64 0
+  %call_read = call i32 @read_graph(i8* nonnull %graphptr, i32* nonnull %var8, i32* nonnull %varC)
+  %cmp_ok = icmp eq i32 %call_read, 0
+  br i1 %cmp_ok, label %bb_ok, label %bb_err
 
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local i32 @main() #1 !dbg !10 {
-entry:
-  %retval = alloca i32, align 4
-  %V = alloca i32, align 4
-  %src = alloca i32, align 4
-  %graph = alloca [100 x [100 x i32]], align 16
-  %dist = alloca [100 x i32], align 16
-  store i32 0, i32* %retval, align 4
-  call void @llvm.dbg.declare(metadata i32* %V, metadata !15, metadata !DIExpression()), !dbg !16
-  call void @llvm.dbg.declare(metadata i32* %src, metadata !17, metadata !DIExpression()), !dbg !18
-  call void @llvm.dbg.declare(metadata [100 x [100 x i32]]* %graph, metadata !19, metadata !DIExpression()), !dbg !23
-  call void @llvm.dbg.declare(metadata [100 x i32]* %dist, metadata !24, metadata !DIExpression()), !dbg !27
-  %arraydecay = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %graph, i64 0, i64 0, !dbg !28
-  %call = call i32 @read_graph([100 x i32]* noundef %arraydecay, i32* noundef %V, i32* noundef %src), !dbg !30
-  %cmp = icmp ne i32 %call, 0, !dbg !31
-  br i1 %cmp, label %if.then, label %if.end, !dbg !32
+bb_err:                                           ; preds = %entry
+  %stream_ptr = load i8*, i8** @__bss_start, align 8
+  %call_fprintf = call i32 (i8*, i8*, ...) @fprintf(i8* %stream_ptr, i8* nonnull @byte_40202C)
+  br label %bb_end
 
-if.then:                                          ; preds = %entry
-  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !33
-  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %0, i8* noundef getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0)), !dbg !35
-  store i32 1, i32* %retval, align 4, !dbg !36
-  br label %return, !dbg !36
+bb_ok:                                            ; preds = %entry
+  %n_val = load i32, i32* %var8, align 4
+  %src_val = load i32, i32* %varC, align 4
+  call void @dijkstra(i8* nonnull %graphptr, i32 %n_val, i32 %src_val, i8* nonnull %distptr)
+  %n_val2 = load i32, i32* %var8, align 4
+  call void @print_distances(i8* nonnull %distptr, i32 %n_val2)
+  br label %bb_end
 
-if.end:                                           ; preds = %entry
-  %arraydecay2 = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* %graph, i64 0, i64 0, !dbg !37
-  %1 = load i32, i32* %V, align 4, !dbg !38
-  %2 = load i32, i32* %src, align 4, !dbg !39
-  %arraydecay3 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 0, !dbg !40
-  call void @dijkstra([100 x i32]* noundef %arraydecay2, i32 noundef %1, i32 noundef %2, i32* noundef %arraydecay3), !dbg !41
-  %arraydecay4 = getelementptr inbounds [100 x i32], [100 x i32]* %dist, i64 0, i64 0, !dbg !42
-  %3 = load i32, i32* %V, align 4, !dbg !43
-  call void @print_distances(i32* noundef %arraydecay4, i32 noundef %3), !dbg !44
-  store i32 0, i32* %retval, align 4, !dbg !45
-  br label %return, !dbg !45
-
-return:                                           ; preds = %if.end, %if.then
-  %4 = load i32, i32* %retval, align 4, !dbg !46
-  ret i32 %4, !dbg !46
+bb_end:                                           ; preds = %bb_ok, %bb_err
+  %var4.0 = phi i32 [ 0, %bb_ok ], [ 1, %bb_err ]
+  ret i32 %var4.0
 }
-
-declare i32 @fprintf(%struct._IO_FILE* noundef, i8* noundef, ...) #2
-
-attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #1 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "dijkstra_modular.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "47bf6ecccd84048d194510cb254a0651")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
-!3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 80, type: !11, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
-!11 = !DISubroutineType(types: !12)
-!12 = !{!13}
-!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!14 = !{}
-!15 = !DILocalVariable(name: "V", scope: !10, file: !1, line: 81, type: !13)
-!16 = !DILocation(line: 81, column: 9, scope: !10)
-!17 = !DILocalVariable(name: "src", scope: !10, file: !1, line: 81, type: !13)
-!18 = !DILocation(line: 81, column: 12, scope: !10)
-!19 = !DILocalVariable(name: "graph", scope: !10, file: !1, line: 82, type: !20)
-!20 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 320000, elements: !21)
-!21 = !{!22, !22}
-!22 = !DISubrange(count: 100)
-!23 = !DILocation(line: 82, column: 9, scope: !10)
-!24 = !DILocalVariable(name: "dist", scope: !10, file: !1, line: 83, type: !25)
-!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 3200, elements: !26)
-!26 = !{!22}
-!27 = !DILocation(line: 83, column: 9, scope: !10)
-!28 = !DILocation(line: 85, column: 20, scope: !29)
-!29 = distinct !DILexicalBlock(scope: !10, file: !1, line: 85, column: 9)
-!30 = !DILocation(line: 85, column: 9, scope: !29)
-!31 = !DILocation(line: 85, column: 37, scope: !29)
-!32 = !DILocation(line: 85, column: 9, scope: !10)
-!33 = !DILocation(line: 86, column: 17, scope: !34)
-!34 = distinct !DILexicalBlock(scope: !29, file: !1, line: 85, column: 43)
-!35 = !DILocation(line: 86, column: 9, scope: !34)
-!36 = !DILocation(line: 87, column: 9, scope: !34)
-!37 = !DILocation(line: 90, column: 14, scope: !10)
-!38 = !DILocation(line: 90, column: 21, scope: !10)
-!39 = !DILocation(line: 90, column: 24, scope: !10)
-!40 = !DILocation(line: 90, column: 29, scope: !10)
-!41 = !DILocation(line: 90, column: 5, scope: !10)
-!42 = !DILocation(line: 91, column: 21, scope: !10)
-!43 = !DILocation(line: 91, column: 27, scope: !10)
-!44 = !DILocation(line: 91, column: 5, scope: !10)
-!45 = !DILocation(line: 92, column: 5, scope: !10)
-!46 = !DILocation(line: 93, column: 1, scope: !10)
