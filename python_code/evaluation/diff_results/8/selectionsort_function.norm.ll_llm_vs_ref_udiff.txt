--- ref.ll
+++ selectionsort_function.norm.ll_llm_vs_ref.ll
@@ -1,205 +1,47 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/selectionsort_function.ll'
-source_filename = "selectionsort.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/8/selectionsort_function.ll'
+source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/8/selectionsort_function.ll"
 target triple = "x86_64-pc-linux-gnu"
 
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local void @selection_sort(i32* noundef %arr, i32 noundef %n) #0 !dbg !10 {
+define void @selection_sort(i32* nocapture %arr, i32 %n) {
 entry:
-  %arr.addr = alloca i32*, align 8
-  %n.addr = alloca i32, align 4
-  %i = alloca i32, align 4
-  %j = alloca i32, align 4
-  %min_idx = alloca i32, align 4
-  %temp = alloca i32, align 4
-  store i32* %arr, i32** %arr.addr, align 8
-  call void @llvm.dbg.declare(metadata i32** %arr.addr, metadata !16, metadata !DIExpression()), !dbg !17
-  store i32 %n, i32* %n.addr, align 4
-  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18, metadata !DIExpression()), !dbg !19
-  call void @llvm.dbg.declare(metadata i32* %i, metadata !20, metadata !DIExpression()), !dbg !21
-  call void @llvm.dbg.declare(metadata i32* %j, metadata !22, metadata !DIExpression()), !dbg !23
-  call void @llvm.dbg.declare(metadata i32* %min_idx, metadata !24, metadata !DIExpression()), !dbg !25
-  call void @llvm.dbg.declare(metadata i32* %temp, metadata !26, metadata !DIExpression()), !dbg !27
-  store i32 0, i32* %i, align 4, !dbg !28
-  br label %for.cond, !dbg !30
+  br label %outer.cond
 
-for.cond:                                         ; preds = %for.inc15, %entry
-  %0 = load i32, i32* %i, align 4, !dbg !31
-  %1 = load i32, i32* %n.addr, align 4, !dbg !33
-  %sub = sub nsw i32 %1, 1, !dbg !34
-  %cmp = icmp slt i32 %0, %sub, !dbg !35
-  br i1 %cmp, label %for.body, label %for.end17, !dbg !36
+outer.cond:                                       ; preds = %after.inner, %entry
+  %i.0 = phi i32 [ 0, %entry ], [ %i.next, %after.inner ]
+  %n.minus1 = add nsw i32 %n, -1
+  %cmp.outer = icmp slt i32 %i.0, %n.minus1
+  br i1 %cmp.outer, label %inner.cond, label %exit
 
-for.body:                                         ; preds = %for.cond
-  %2 = load i32, i32* %i, align 4, !dbg !37
-  store i32 %2, i32* %min_idx, align 4, !dbg !39
-  %3 = load i32, i32* %i, align 4, !dbg !40
-  %add = add nsw i32 %3, 1, !dbg !42
-  store i32 %add, i32* %j, align 4, !dbg !43
-  br label %for.cond1, !dbg !44
+inner.cond:                                       ; preds = %outer.cond, %inner.body
+  %j.0.in = phi i32 [ %j.0, %inner.body ], [ %i.0, %outer.cond ]
+  %min.0 = phi i32 [ %j.0.min.0, %inner.body ], [ %i.0, %outer.cond ]
+  %j.0 = add nuw nsw i32 %j.0.in, 1
+  %cmp.j.n = icmp slt i32 %j.0, %n
+  br i1 %cmp.j.n, label %inner.body, label %after.inner
 
-for.cond1:                                        ; preds = %for.inc, %for.body
-  %4 = load i32, i32* %j, align 4, !dbg !45
-  %5 = load i32, i32* %n.addr, align 4, !dbg !47
-  %cmp2 = icmp slt i32 %4, %5, !dbg !48
-  br i1 %cmp2, label %for.body3, label %for.end, !dbg !49
+inner.body:                                       ; preds = %inner.cond
+  %j.ext = zext i32 %j.0 to i64
+  %gep.j = getelementptr inbounds i32, i32* %arr, i64 %j.ext
+  %val.j = load i32, i32* %gep.j, align 4
+  %min.ext = sext i32 %min.0 to i64
+  %gep.min = getelementptr inbounds i32, i32* %arr, i64 %min.ext
+  %val.min = load i32, i32* %gep.min, align 4
+  %cmp.lt = icmp slt i32 %val.j, %val.min
+  %j.0.min.0 = select i1 %cmp.lt, i32 %j.0, i32 %min.0
+  br label %inner.cond
 
-for.body3:                                        ; preds = %for.cond1
-  %6 = load i32*, i32** %arr.addr, align 8, !dbg !50
-  %7 = load i32, i32* %j, align 4, !dbg !53
-  %idxprom = sext i32 %7 to i64, !dbg !50
-  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !50
-  %8 = load i32, i32* %arrayidx, align 4, !dbg !50
-  %9 = load i32*, i32** %arr.addr, align 8, !dbg !54
-  %10 = load i32, i32* %min_idx, align 4, !dbg !55
-  %idxprom4 = sext i32 %10 to i64, !dbg !54
-  %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4, !dbg !54
-  %11 = load i32, i32* %arrayidx5, align 4, !dbg !54
-  %cmp6 = icmp slt i32 %8, %11, !dbg !56
-  br i1 %cmp6, label %if.then, label %if.end, !dbg !57
+after.inner:                                      ; preds = %inner.cond
+  %i.ext = zext i32 %i.0 to i64
+  %gep.i = getelementptr inbounds i32, i32* %arr, i64 %i.ext
+  %val.i = load i32, i32* %gep.i, align 4
+  %min.ext2 = sext i32 %min.0 to i64
+  %gep.min2 = getelementptr inbounds i32, i32* %arr, i64 %min.ext2
+  %val.min2 = load i32, i32* %gep.min2, align 4
+  store i32 %val.min2, i32* %gep.i, align 4
+  store i32 %val.i, i32* %gep.min2, align 4
+  %i.next = add nuw nsw i32 %i.0, 1
+  br label %outer.cond
 
-if.then:                                          ; preds = %for.body3
-  %12 = load i32, i32* %j, align 4, !dbg !58
-  store i32 %12, i32* %min_idx, align 4, !dbg !60
-  br label %if.end, !dbg !61
-
-if.end:                                           ; preds = %if.then, %for.body3
-  br label %for.inc, !dbg !62
-
-for.inc:                                          ; preds = %if.end
-  %13 = load i32, i32* %j, align 4, !dbg !63
-  %inc = add nsw i32 %13, 1, !dbg !63
-  store i32 %inc, i32* %j, align 4, !dbg !63
-  br label %for.cond1, !dbg !64, !llvm.loop !65
-
-for.end:                                          ; preds = %for.cond1
-  %14 = load i32*, i32** %arr.addr, align 8, !dbg !68
-  %15 = load i32, i32* %i, align 4, !dbg !69
-  %idxprom7 = sext i32 %15 to i64, !dbg !68
-  %arrayidx8 = getelementptr inbounds i32, i32* %14, i64 %idxprom7, !dbg !68
-  %16 = load i32, i32* %arrayidx8, align 4, !dbg !68
-  store i32 %16, i32* %temp, align 4, !dbg !70
-  %17 = load i32*, i32** %arr.addr, align 8, !dbg !71
-  %18 = load i32, i32* %min_idx, align 4, !dbg !72
-  %idxprom9 = sext i32 %18 to i64, !dbg !71
-  %arrayidx10 = getelementptr inbounds i32, i32* %17, i64 %idxprom9, !dbg !71
-  %19 = load i32, i32* %arrayidx10, align 4, !dbg !71
-  %20 = load i32*, i32** %arr.addr, align 8, !dbg !73
-  %21 = load i32, i32* %i, align 4, !dbg !74
-  %idxprom11 = sext i32 %21 to i64, !dbg !73
-  %arrayidx12 = getelementptr inbounds i32, i32* %20, i64 %idxprom11, !dbg !73
-  store i32 %19, i32* %arrayidx12, align 4, !dbg !75
-  %22 = load i32, i32* %temp, align 4, !dbg !76
-  %23 = load i32*, i32** %arr.addr, align 8, !dbg !77
-  %24 = load i32, i32* %min_idx, align 4, !dbg !78
-  %idxprom13 = sext i32 %24 to i64, !dbg !77
-  %arrayidx14 = getelementptr inbounds i32, i32* %23, i64 %idxprom13, !dbg !77
-  store i32 %22, i32* %arrayidx14, align 4, !dbg !79
-  br label %for.inc15, !dbg !80
-
-for.inc15:                                        ; preds = %for.end
-  %25 = load i32, i32* %i, align 4, !dbg !81
-  %inc16 = add nsw i32 %25, 1, !dbg !81
-  store i32 %inc16, i32* %i, align 4, !dbg !81
-  br label %for.cond, !dbg !82, !llvm.loop !83
-
-for.end17:                                        ; preds = %for.cond
-  ret void, !dbg !85
+exit:                                             ; preds = %outer.cond
+  ret void
 }
-
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
-
-attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "selectionsort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "ac7f15bc1ec4c657fabaf0eecd830beb")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
-!3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "selection_sort", scope: !1, file: !1, line: 3, type: !11, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
-!11 = !DISubroutineType(types: !12)
-!12 = !{null, !13, !14}
-!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
-!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!15 = !{}
-!16 = !DILocalVariable(name: "arr", arg: 1, scope: !10, file: !1, line: 3, type: !13)
-!17 = !DILocation(line: 3, column: 25, scope: !10)
-!18 = !DILocalVariable(name: "n", arg: 2, scope: !10, file: !1, line: 3, type: !14)
-!19 = !DILocation(line: 3, column: 36, scope: !10)
-!20 = !DILocalVariable(name: "i", scope: !10, file: !1, line: 4, type: !14)
-!21 = !DILocation(line: 4, column: 9, scope: !10)
-!22 = !DILocalVariable(name: "j", scope: !10, file: !1, line: 4, type: !14)
-!23 = !DILocation(line: 4, column: 12, scope: !10)
-!24 = !DILocalVariable(name: "min_idx", scope: !10, file: !1, line: 4, type: !14)
-!25 = !DILocation(line: 4, column: 15, scope: !10)
-!26 = !DILocalVariable(name: "temp", scope: !10, file: !1, line: 4, type: !14)
-!27 = !DILocation(line: 4, column: 24, scope: !10)
-!28 = !DILocation(line: 6, column: 12, scope: !29)
-!29 = distinct !DILexicalBlock(scope: !10, file: !1, line: 6, column: 5)
-!30 = !DILocation(line: 6, column: 10, scope: !29)
-!31 = !DILocation(line: 6, column: 17, scope: !32)
-!32 = distinct !DILexicalBlock(scope: !29, file: !1, line: 6, column: 5)
-!33 = !DILocation(line: 6, column: 21, scope: !32)
-!34 = !DILocation(line: 6, column: 23, scope: !32)
-!35 = !DILocation(line: 6, column: 19, scope: !32)
-!36 = !DILocation(line: 6, column: 5, scope: !29)
-!37 = !DILocation(line: 7, column: 19, scope: !38)
-!38 = distinct !DILexicalBlock(scope: !32, file: !1, line: 6, column: 33)
-!39 = !DILocation(line: 7, column: 17, scope: !38)
-!40 = !DILocation(line: 8, column: 18, scope: !41)
-!41 = distinct !DILexicalBlock(scope: !38, file: !1, line: 8, column: 9)
-!42 = !DILocation(line: 8, column: 20, scope: !41)
-!43 = !DILocation(line: 8, column: 16, scope: !41)
-!44 = !DILocation(line: 8, column: 14, scope: !41)
-!45 = !DILocation(line: 8, column: 25, scope: !46)
-!46 = distinct !DILexicalBlock(scope: !41, file: !1, line: 8, column: 9)
-!47 = !DILocation(line: 8, column: 29, scope: !46)
-!48 = !DILocation(line: 8, column: 27, scope: !46)
-!49 = !DILocation(line: 8, column: 9, scope: !41)
-!50 = !DILocation(line: 9, column: 17, scope: !51)
-!51 = distinct !DILexicalBlock(scope: !52, file: !1, line: 9, column: 17)
-!52 = distinct !DILexicalBlock(scope: !46, file: !1, line: 8, column: 37)
-!53 = !DILocation(line: 9, column: 21, scope: !51)
-!54 = !DILocation(line: 9, column: 26, scope: !51)
-!55 = !DILocation(line: 9, column: 30, scope: !51)
-!56 = !DILocation(line: 9, column: 24, scope: !51)
-!57 = !DILocation(line: 9, column: 17, scope: !52)
-!58 = !DILocation(line: 10, column: 27, scope: !59)
-!59 = distinct !DILexicalBlock(scope: !51, file: !1, line: 9, column: 40)
-!60 = !DILocation(line: 10, column: 25, scope: !59)
-!61 = !DILocation(line: 11, column: 13, scope: !59)
-!62 = !DILocation(line: 12, column: 9, scope: !52)
-!63 = !DILocation(line: 8, column: 33, scope: !46)
-!64 = !DILocation(line: 8, column: 9, scope: !46)
-!65 = distinct !{!65, !49, !66, !67}
-!66 = !DILocation(line: 12, column: 9, scope: !41)
-!67 = !{!"llvm.loop.mustprogress"}
-!68 = !DILocation(line: 13, column: 16, scope: !38)
-!69 = !DILocation(line: 13, column: 20, scope: !38)
-!70 = !DILocation(line: 13, column: 14, scope: !38)
-!71 = !DILocation(line: 14, column: 18, scope: !38)
-!72 = !DILocation(line: 14, column: 22, scope: !38)
-!73 = !DILocation(line: 14, column: 9, scope: !38)
-!74 = !DILocation(line: 14, column: 13, scope: !38)
-!75 = !DILocation(line: 14, column: 16, scope: !38)
-!76 = !DILocation(line: 15, column: 24, scope: !38)
-!77 = !DILocation(line: 15, column: 9, scope: !38)
-!78 = !DILocation(line: 15, column: 13, scope: !38)
-!79 = !DILocation(line: 15, column: 22, scope: !38)
-!80 = !DILocation(line: 16, column: 5, scope: !38)
-!81 = !DILocation(line: 6, column: 29, scope: !32)
-!82 = !DILocation(line: 6, column: 5, scope: !32)
-!83 = distinct !{!83, !36, !84, !67}
-!84 = !DILocation(line: 16, column: 5, scope: !29)
-!85 = !DILocation(line: 17, column: 1, scope: !10)
