--- ref.ll
+++ bubblesort_function.norm.ll_llm_vs_ref.ll
@@ -1,214 +1,46 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/bubblesort_function.ll'
-source_filename = "../original/src/bubblesort.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/8/bubblesort_function.ll'
+source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/8/bubblesort_function.ll"
 target triple = "x86_64-pc-linux-gnu"
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
+define void @bubble_sort(i32* %arr, i64 %n) {
+entry:
+  %cmp0 = icmp ult i64 %n, 2
+  br i1 %cmp0, label %ret, label %outer.header
 
-; Function Attrs: noinline nounwind optnone uwtable
-define hidden void @bubble_sort(i32* noundef %a, i64 noundef %n) #1 !dbg !10 {
-entry:
-  %a.addr = alloca i32*, align 8
-  %n.addr = alloca i64, align 8
-  %end = alloca i64, align 8
-  %last_swapped = alloca i64, align 8
-  %i = alloca i64, align 8
-  %t = alloca i32, align 4
-  store i32* %a, i32** %a.addr, align 8
-  call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !19, metadata !DIExpression()), !dbg !20
-  store i64 %n, i64* %n.addr, align 8
-  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !21, metadata !DIExpression()), !dbg !22
-  %0 = load i64, i64* %n.addr, align 8, !dbg !23
-  %cmp = icmp ult i64 %0, 2, !dbg !25
-  br i1 %cmp, label %if.then, label %if.end, !dbg !26
+outer.header:                                     ; preds = %inner.exit, %entry
+  %newn = phi i64 [ %n, %entry ], [ %last.cur, %inner.exit ]
+  %cmp1 = icmp ugt i64 %newn, 1
+  br i1 %cmp1, label %inner.header, label %ret
 
-if.then:                                          ; preds = %entry
-  br label %while.end, !dbg !27
+inner.header:                                     ; preds = %outer.header, %inner.latch
+  %i = phi i64 [ %i.next, %inner.latch ], [ 1, %outer.header ]
+  %last.cur = phi i64 [ %last.next, %inner.latch ], [ 0, %outer.header ]
+  %cmp2 = icmp ult i64 %i, %newn
+  br i1 %cmp2, label %inner.body, label %inner.exit
 
-if.end:                                           ; preds = %entry
-  call void @llvm.dbg.declare(metadata i64* %end, metadata !28, metadata !DIExpression()), !dbg !29
-  %1 = load i64, i64* %n.addr, align 8, !dbg !30
-  store i64 %1, i64* %end, align 8, !dbg !29
-  br label %while.cond, !dbg !31
+inner.body:                                       ; preds = %inner.header
+  %idx.im1 = add i64 %i, -1
+  %ptr.im1 = getelementptr inbounds i32, i32* %arr, i64 %idx.im1
+  %val.im1 = load i32, i32* %ptr.im1, align 4
+  %ptr.i = getelementptr inbounds i32, i32* %arr, i64 %i
+  %val.i = load i32, i32* %ptr.i, align 4
+  %cmp3 = icmp sgt i32 %val.im1, %val.i
+  br i1 %cmp3, label %swap, label %inner.latch
 
-while.cond:                                       ; preds = %if.end15, %if.end
-  %2 = load i64, i64* %end, align 8, !dbg !32
-  %cmp1 = icmp ugt i64 %2, 1, !dbg !33
-  br i1 %cmp1, label %while.body, label %while.end, !dbg !31
+swap:                                             ; preds = %inner.body
+  store i32 %val.i, i32* %ptr.im1, align 4
+  store i32 %val.im1, i32* %ptr.i, align 4
+  br label %inner.latch
 
-while.body:                                       ; preds = %while.cond
-  call void @llvm.dbg.declare(metadata i64* %last_swapped, metadata !34, metadata !DIExpression()), !dbg !36
-  store i64 0, i64* %last_swapped, align 8, !dbg !36
-  call void @llvm.dbg.declare(metadata i64* %i, metadata !37, metadata !DIExpression()), !dbg !39
-  store i64 1, i64* %i, align 8, !dbg !39
-  br label %for.cond, !dbg !40
+inner.latch:                                      ; preds = %inner.body, %swap
+  %last.next = phi i64 [ %i, %swap ], [ %last.cur, %inner.body ]
+  %i.next = add i64 %i, 1
+  br label %inner.header
 
-for.cond:                                         ; preds = %for.inc, %while.body
-  %3 = load i64, i64* %i, align 8, !dbg !41
-  %4 = load i64, i64* %end, align 8, !dbg !43
-  %cmp2 = icmp ult i64 %3, %4, !dbg !44
-  br i1 %cmp2, label %for.body, label %for.end, !dbg !45
+inner.exit:                                       ; preds = %inner.header
+  %iszero = icmp eq i64 %last.cur, 0
+  br i1 %iszero, label %ret, label %outer.header
 
-for.body:                                         ; preds = %for.cond
-  %5 = load i32*, i32** %a.addr, align 8, !dbg !46
-  %6 = load i64, i64* %i, align 8, !dbg !49
-  %sub = sub i64 %6, 1, !dbg !50
-  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %sub, !dbg !46
-  %7 = load i32, i32* %arrayidx, align 4, !dbg !46
-  %8 = load i32*, i32** %a.addr, align 8, !dbg !51
-  %9 = load i64, i64* %i, align 8, !dbg !52
-  %arrayidx3 = getelementptr inbounds i32, i32* %8, i64 %9, !dbg !51
-  %10 = load i32, i32* %arrayidx3, align 4, !dbg !51
-  %cmp4 = icmp sgt i32 %7, %10, !dbg !53
-  br i1 %cmp4, label %if.then5, label %if.end12, !dbg !54
-
-if.then5:                                         ; preds = %for.body
-  call void @llvm.dbg.declare(metadata i32* %t, metadata !55, metadata !DIExpression()), !dbg !57
-  %11 = load i32*, i32** %a.addr, align 8, !dbg !58
-  %12 = load i64, i64* %i, align 8, !dbg !59
-  %sub6 = sub i64 %12, 1, !dbg !60
-  %arrayidx7 = getelementptr inbounds i32, i32* %11, i64 %sub6, !dbg !58
-  %13 = load i32, i32* %arrayidx7, align 4, !dbg !58
-  store i32 %13, i32* %t, align 4, !dbg !57
-  %14 = load i32*, i32** %a.addr, align 8, !dbg !61
-  %15 = load i64, i64* %i, align 8, !dbg !62
-  %arrayidx8 = getelementptr inbounds i32, i32* %14, i64 %15, !dbg !61
-  %16 = load i32, i32* %arrayidx8, align 4, !dbg !61
-  %17 = load i32*, i32** %a.addr, align 8, !dbg !63
-  %18 = load i64, i64* %i, align 8, !dbg !64
-  %sub9 = sub i64 %18, 1, !dbg !65
-  %arrayidx10 = getelementptr inbounds i32, i32* %17, i64 %sub9, !dbg !63
-  store i32 %16, i32* %arrayidx10, align 4, !dbg !66
-  %19 = load i32, i32* %t, align 4, !dbg !67
-  %20 = load i32*, i32** %a.addr, align 8, !dbg !68
-  %21 = load i64, i64* %i, align 8, !dbg !69
-  %arrayidx11 = getelementptr inbounds i32, i32* %20, i64 %21, !dbg !68
-  store i32 %19, i32* %arrayidx11, align 4, !dbg !70
-  %22 = load i64, i64* %i, align 8, !dbg !71
-  store i64 %22, i64* %last_swapped, align 8, !dbg !72
-  br label %if.end12, !dbg !73
-
-if.end12:                                         ; preds = %if.then5, %for.body
-  br label %for.inc, !dbg !74
-
-for.inc:                                          ; preds = %if.end12
-  %23 = load i64, i64* %i, align 8, !dbg !75
-  %inc = add i64 %23, 1, !dbg !75
-  store i64 %inc, i64* %i, align 8, !dbg !75
-  br label %for.cond, !dbg !76, !llvm.loop !77
-
-for.end:                                          ; preds = %for.cond
-  %24 = load i64, i64* %last_swapped, align 8, !dbg !80
-  %cmp13 = icmp eq i64 %24, 0, !dbg !82
-  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !83
-
-if.then14:                                        ; preds = %for.end
-  br label %while.end, !dbg !84
-
-if.end15:                                         ; preds = %for.end
-  %25 = load i64, i64* %last_swapped, align 8, !dbg !85
-  store i64 %25, i64* %end, align 8, !dbg !86
-  br label %while.cond, !dbg !31, !llvm.loop !87
-
-while.end:                                        ; preds = %if.then14, %while.cond, %if.then
-  ret void, !dbg !89
+ret:                                              ; preds = %inner.exit, %outer.header, %entry
+  ret void
 }
-
-attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #1 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "../original/src/bubblesort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "f238373db38a29134f118a094ca6d8a0")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
-!3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "bubble_sort", scope: !1, file: !1, line: 4, type: !11, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !18)
-!11 = !DISubroutineType(types: !12)
-!12 = !{null, !13, !15}
-!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
-!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !16, line: 46, baseType: !17)
-!16 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
-!17 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
-!18 = !{}
-!19 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !1, line: 4, type: !13)
-!20 = !DILocation(line: 4, column: 30, scope: !10)
-!21 = !DILocalVariable(name: "n", arg: 2, scope: !10, file: !1, line: 4, type: !15)
-!22 = !DILocation(line: 4, column: 40, scope: !10)
-!23 = !DILocation(line: 5, column: 9, scope: !24)
-!24 = distinct !DILexicalBlock(scope: !10, file: !1, line: 5, column: 9)
-!25 = !DILocation(line: 5, column: 11, scope: !24)
-!26 = !DILocation(line: 5, column: 9, scope: !10)
-!27 = !DILocation(line: 5, column: 16, scope: !24)
-!28 = !DILocalVariable(name: "end", scope: !10, file: !1, line: 7, type: !15)
-!29 = !DILocation(line: 7, column: 12, scope: !10)
-!30 = !DILocation(line: 7, column: 18, scope: !10)
-!31 = !DILocation(line: 8, column: 5, scope: !10)
-!32 = !DILocation(line: 8, column: 12, scope: !10)
-!33 = !DILocation(line: 8, column: 16, scope: !10)
-!34 = !DILocalVariable(name: "last_swapped", scope: !35, file: !1, line: 9, type: !15)
-!35 = distinct !DILexicalBlock(scope: !10, file: !1, line: 8, column: 21)
-!36 = !DILocation(line: 9, column: 16, scope: !35)
-!37 = !DILocalVariable(name: "i", scope: !38, file: !1, line: 10, type: !15)
-!38 = distinct !DILexicalBlock(scope: !35, file: !1, line: 10, column: 9)
-!39 = !DILocation(line: 10, column: 21, scope: !38)
-!40 = !DILocation(line: 10, column: 14, scope: !38)
-!41 = !DILocation(line: 10, column: 28, scope: !42)
-!42 = distinct !DILexicalBlock(scope: !38, file: !1, line: 10, column: 9)
-!43 = !DILocation(line: 10, column: 32, scope: !42)
-!44 = !DILocation(line: 10, column: 30, scope: !42)
-!45 = !DILocation(line: 10, column: 9, scope: !38)
-!46 = !DILocation(line: 11, column: 17, scope: !47)
-!47 = distinct !DILexicalBlock(scope: !48, file: !1, line: 11, column: 17)
-!48 = distinct !DILexicalBlock(scope: !42, file: !1, line: 10, column: 42)
-!49 = !DILocation(line: 11, column: 19, scope: !47)
-!50 = !DILocation(line: 11, column: 21, scope: !47)
-!51 = !DILocation(line: 11, column: 28, scope: !47)
-!52 = !DILocation(line: 11, column: 30, scope: !47)
-!53 = !DILocation(line: 11, column: 26, scope: !47)
-!54 = !DILocation(line: 11, column: 17, scope: !48)
-!55 = !DILocalVariable(name: "t", scope: !56, file: !1, line: 12, type: !14)
-!56 = distinct !DILexicalBlock(scope: !47, file: !1, line: 11, column: 34)
-!57 = !DILocation(line: 12, column: 21, scope: !56)
-!58 = !DILocation(line: 12, column: 25, scope: !56)
-!59 = !DILocation(line: 12, column: 27, scope: !56)
-!60 = !DILocation(line: 12, column: 29, scope: !56)
-!61 = !DILocation(line: 13, column: 28, scope: !56)
-!62 = !DILocation(line: 13, column: 30, scope: !56)
-!63 = !DILocation(line: 13, column: 17, scope: !56)
-!64 = !DILocation(line: 13, column: 19, scope: !56)
-!65 = !DILocation(line: 13, column: 21, scope: !56)
-!66 = !DILocation(line: 13, column: 26, scope: !56)
-!67 = !DILocation(line: 14, column: 24, scope: !56)
-!68 = !DILocation(line: 14, column: 17, scope: !56)
-!69 = !DILocation(line: 14, column: 19, scope: !56)
-!70 = !DILocation(line: 14, column: 22, scope: !56)
-!71 = !DILocation(line: 15, column: 32, scope: !56)
-!72 = !DILocation(line: 15, column: 30, scope: !56)
-!73 = !DILocation(line: 16, column: 13, scope: !56)
-!74 = !DILocation(line: 17, column: 9, scope: !48)
-!75 = !DILocation(line: 10, column: 37, scope: !42)
-!76 = !DILocation(line: 10, column: 9, scope: !42)
-!77 = distinct !{!77, !45, !78, !79}
-!78 = !DILocation(line: 17, column: 9, scope: !38)
-!79 = !{!"llvm.loop.mustprogress"}
-!80 = !DILocation(line: 18, column: 13, scope: !81)
-!81 = distinct !DILexicalBlock(scope: !35, file: !1, line: 18, column: 13)
-!82 = !DILocation(line: 18, column: 26, scope: !81)
-!83 = !DILocation(line: 18, column: 13, scope: !35)
-!84 = !DILocation(line: 18, column: 32, scope: !81)
-!85 = !DILocation(line: 19, column: 15, scope: !35)
-!86 = !DILocation(line: 19, column: 13, scope: !35)
-!87 = distinct !{!87, !31, !88, !79}
-!88 = !DILocation(line: 20, column: 5, scope: !10)
-!89 = !DILocation(line: 21, column: 1, scope: !10)
