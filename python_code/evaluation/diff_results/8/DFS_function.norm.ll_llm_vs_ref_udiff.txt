--- ref.ll
+++ DFS_function.norm.ll_llm_vs_ref.ll
@@ -1,471 +1,81 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/DFS_function.ll'
-source_filename = "../original/src/DFS.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/8/DFS_function.ll'
+source_filename = "main.c"
 target triple = "x86_64-pc-linux-gnu"
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
+@.str.header = private unnamed_addr constant [24 x i8] c"DFS preorder from %zu: \00", align 1
+@.str.space = private unnamed_addr constant [2 x i8] c" \00", align 1
+@.str.empty = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
+@.str.item = private unnamed_addr constant [6 x i8] c"%zu%s\00", align 1
 
-; Function Attrs: noinline nounwind optnone uwtable
-define hidden void @dfs(i32* noundef %g, i64 noundef %n, i64 noundef %s, i64* noundef %order, i64* noundef %ord_len) #1 !dbg !17 {
+declare void @dfs(i32* noundef, i64 noundef, i64 noundef, i64* noundef, i64* noundef)
+
+declare i32 @printf(i8*, ...)
+
+declare i32 @putchar(i32)
+
+; Function Attrs: argmemonly nofree nounwind willreturn writeonly
+declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0
+
+define i32 @main() {
 entry:
-  %g.addr = alloca i32*, align 8
-  %n.addr = alloca i64, align 8
-  %s.addr = alloca i64, align 8
-  %order.addr = alloca i64*, align 8
-  %ord_len.addr = alloca i64*, align 8
-  %visited = alloca i32*, align 8
-  %idx = alloca i64*, align 8
-  %st = alloca i64*, align 8
-  %i = alloca i64, align 8
-  %top = alloca i64, align 8
-  %u = alloca i64, align 8
-  %v = alloca i64, align 8
-  store i32* %g, i32** %g.addr, align 8
-  call void @llvm.dbg.declare(metadata i32** %g.addr, metadata !23, metadata !DIExpression()), !dbg !24
-  store i64 %n, i64* %n.addr, align 8
-  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !25, metadata !DIExpression()), !dbg !26
-  store i64 %s, i64* %s.addr, align 8
-  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !27, metadata !DIExpression()), !dbg !28
-  store i64* %order, i64** %order.addr, align 8
-  call void @llvm.dbg.declare(metadata i64** %order.addr, metadata !29, metadata !DIExpression()), !dbg !30
-  store i64* %ord_len, i64** %ord_len.addr, align 8
-  call void @llvm.dbg.declare(metadata i64** %ord_len.addr, metadata !31, metadata !DIExpression()), !dbg !32
-  %0 = load i64, i64* %n.addr, align 8, !dbg !33
-  %cmp = icmp eq i64 %0, 0, !dbg !35
-  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !36
+  %graph = alloca [49 x i32], align 16
+  %out = alloca [49 x i64], align 16
+  %out_len = alloca i64, align 8
+  %graph.i8 = bitcast [49 x i32]* %graph to i8*
+  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(196) %graph.i8, i8 0, i64 196, i1 false)
+  %g0 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 1
+  store i32 1, i32* %g0, align 4
+  %g1 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 2
+  store i32 1, i32* %g1, align 8
+  %g2 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 7
+  store i32 1, i32* %g2, align 4
+  %g3 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 14
+  store i32 1, i32* %g3, align 8
+  %g4 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 10
+  store i32 1, i32* %g4, align 8
+  %g5 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 22
+  store i32 1, i32* %g5, align 8
+  %g6 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 11
+  store i32 1, i32* %g6, align 4
+  %g7 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 29
+  store i32 1, i32* %g7, align 4
+  %g8 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 19
+  store i32 1, i32* %g8, align 4
+  %g9 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 37
+  store i32 1, i32* %g9, align 4
+  %g10 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 33
+  store i32 1, i32* %g10, align 4
+  %g11 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 39
+  store i32 1, i32* %g11, align 4
+  %g12 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 41
+  store i32 1, i32* %g12, align 4
+  %g13 = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 47
+  store i32 1, i32* %g13, align 4
+  store i64 0, i64* %out_len, align 8
+  %graph.ptr = getelementptr inbounds [49 x i32], [49 x i32]* %graph, i64 0, i64 0
+  %out.ptr = getelementptr inbounds [49 x i64], [49 x i64]* %out, i64 0, i64 0
+  call void @dfs(i32* nonnull %graph.ptr, i64 7, i64 0, i64* nonnull %out.ptr, i64* nonnull %out_len)
+  %call.printf.header = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([24 x i8], [24 x i8]* @.str.header, i64 0, i64 0), i64 0)
+  br label %loop
 
-lor.lhs.false:                                    ; preds = %entry
-  %1 = load i64, i64* %s.addr, align 8, !dbg !37
-  %2 = load i64, i64* %n.addr, align 8, !dbg !38
-  %cmp1 = icmp uge i64 %1, %2, !dbg !39
-  br i1 %cmp1, label %if.then, label %if.end, !dbg !40
+loop:                                             ; preds = %loop.body, %entry
+  %i = phi i64 [ 0, %entry ], [ %ip1, %loop.body ]
+  %len = load i64, i64* %out_len, align 8
+  %cond = icmp ult i64 %i, %len
+  br i1 %cond, label %loop.body, label %after
 
-if.then:                                          ; preds = %lor.lhs.false, %entry
-  %3 = load i64*, i64** %ord_len.addr, align 8, !dbg !41
-  store i64 0, i64* %3, align 8, !dbg !43
-  br label %return, !dbg !44
+loop.body:                                        ; preds = %loop
+  %ip1 = add i64 %i, 1
+  %has_space = icmp ult i64 %ip1, %len
+  %delim.ptr = select i1 %has_space, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.space, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.empty, i64 0, i64 0)
+  %elem.ptr = getelementptr inbounds [49 x i64], [49 x i64]* %out, i64 0, i64 %i
+  %elem = load i64, i64* %elem.ptr, align 8
+  %call.printf.item = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.item, i64 0, i64 0), i64 %elem, i8* %delim.ptr)
+  br label %loop
 
-if.end:                                           ; preds = %lor.lhs.false
-  call void @llvm.dbg.declare(metadata i32** %visited, metadata !45, metadata !DIExpression()), !dbg !46
-  %4 = load i64, i64* %n.addr, align 8, !dbg !47
-  %mul = mul i64 %4, 4, !dbg !48
-  %call = call noalias i8* @malloc(i64 noundef %mul) #3, !dbg !49
-  %5 = bitcast i8* %call to i32*, !dbg !50
-  store i32* %5, i32** %visited, align 8, !dbg !46
-  call void @llvm.dbg.declare(metadata i64** %idx, metadata !51, metadata !DIExpression()), !dbg !52
-  %6 = load i64, i64* %n.addr, align 8, !dbg !53
-  %mul2 = mul i64 %6, 8, !dbg !54
-  %call3 = call noalias i8* @malloc(i64 noundef %mul2) #3, !dbg !55
-  %7 = bitcast i8* %call3 to i64*, !dbg !56
-  store i64* %7, i64** %idx, align 8, !dbg !52
-  call void @llvm.dbg.declare(metadata i64** %st, metadata !57, metadata !DIExpression()), !dbg !58
-  %8 = load i64, i64* %n.addr, align 8, !dbg !59
-  %mul4 = mul i64 %8, 8, !dbg !60
-  %call5 = call noalias i8* @malloc(i64 noundef %mul4) #3, !dbg !61
-  %9 = bitcast i8* %call5 to i64*, !dbg !62
-  store i64* %9, i64** %st, align 8, !dbg !58
-  %10 = load i32*, i32** %visited, align 8, !dbg !63
-  %tobool = icmp ne i32* %10, null, !dbg !63
-  br i1 %tobool, label %lor.lhs.false6, label %if.then10, !dbg !65
-
-lor.lhs.false6:                                   ; preds = %if.end
-  %11 = load i64*, i64** %idx, align 8, !dbg !66
-  %tobool7 = icmp ne i64* %11, null, !dbg !66
-  br i1 %tobool7, label %lor.lhs.false8, label %if.then10, !dbg !67
-
-lor.lhs.false8:                                   ; preds = %lor.lhs.false6
-  %12 = load i64*, i64** %st, align 8, !dbg !68
-  %tobool9 = icmp ne i64* %12, null, !dbg !68
-  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !69
-
-if.then10:                                        ; preds = %lor.lhs.false8, %lor.lhs.false6, %if.end
-  %13 = load i32*, i32** %visited, align 8, !dbg !70
-  %14 = bitcast i32* %13 to i8*, !dbg !70
-  call void @free(i8* noundef %14) #3, !dbg !72
-  %15 = load i64*, i64** %idx, align 8, !dbg !73
-  %16 = bitcast i64* %15 to i8*, !dbg !73
-  call void @free(i8* noundef %16) #3, !dbg !74
-  %17 = load i64*, i64** %st, align 8, !dbg !75
-  %18 = bitcast i64* %17 to i8*, !dbg !75
-  call void @free(i8* noundef %18) #3, !dbg !76
-  %19 = load i64*, i64** %ord_len.addr, align 8, !dbg !77
-  store i64 0, i64* %19, align 8, !dbg !78
-  br label %return, !dbg !79
-
-if.end11:                                         ; preds = %lor.lhs.false8
-  call void @llvm.dbg.declare(metadata i64* %i, metadata !80, metadata !DIExpression()), !dbg !82
-  store i64 0, i64* %i, align 8, !dbg !82
-  br label %for.cond, !dbg !83
-
-for.cond:                                         ; preds = %for.inc, %if.end11
-  %20 = load i64, i64* %i, align 8, !dbg !84
-  %21 = load i64, i64* %n.addr, align 8, !dbg !86
-  %cmp12 = icmp ult i64 %20, %21, !dbg !87
-  br i1 %cmp12, label %for.body, label %for.end, !dbg !88
-
-for.body:                                         ; preds = %for.cond
-  %22 = load i32*, i32** %visited, align 8, !dbg !89
-  %23 = load i64, i64* %i, align 8, !dbg !91
-  %arrayidx = getelementptr inbounds i32, i32* %22, i64 %23, !dbg !89
-  store i32 0, i32* %arrayidx, align 4, !dbg !92
-  %24 = load i64*, i64** %idx, align 8, !dbg !93
-  %25 = load i64, i64* %i, align 8, !dbg !94
-  %arrayidx13 = getelementptr inbounds i64, i64* %24, i64 %25, !dbg !93
-  store i64 0, i64* %arrayidx13, align 8, !dbg !95
-  br label %for.inc, !dbg !96
-
-for.inc:                                          ; preds = %for.body
-  %26 = load i64, i64* %i, align 8, !dbg !97
-  %inc = add i64 %26, 1, !dbg !97
-  store i64 %inc, i64* %i, align 8, !dbg !97
-  br label %for.cond, !dbg !98, !llvm.loop !99
-
-for.end:                                          ; preds = %for.cond
-  call void @llvm.dbg.declare(metadata i64* %top, metadata !102, metadata !DIExpression()), !dbg !103
-  store i64 0, i64* %top, align 8, !dbg !103
-  %27 = load i64*, i64** %ord_len.addr, align 8, !dbg !104
-  store i64 0, i64* %27, align 8, !dbg !105
-  %28 = load i64, i64* %s.addr, align 8, !dbg !106
-  %29 = load i64*, i64** %st, align 8, !dbg !107
-  %30 = load i64, i64* %top, align 8, !dbg !108
-  %inc14 = add i64 %30, 1, !dbg !108
-  store i64 %inc14, i64* %top, align 8, !dbg !108
-  %arrayidx15 = getelementptr inbounds i64, i64* %29, i64 %30, !dbg !107
-  store i64 %28, i64* %arrayidx15, align 8, !dbg !109
-  %31 = load i32*, i32** %visited, align 8, !dbg !110
-  %32 = load i64, i64* %s.addr, align 8, !dbg !111
-  %arrayidx16 = getelementptr inbounds i32, i32* %31, i64 %32, !dbg !110
-  store i32 1, i32* %arrayidx16, align 4, !dbg !112
-  %33 = load i64, i64* %s.addr, align 8, !dbg !113
-  %34 = load i64*, i64** %order.addr, align 8, !dbg !114
-  %35 = load i64*, i64** %ord_len.addr, align 8, !dbg !115
-  %36 = load i64, i64* %35, align 8, !dbg !116
-  %inc17 = add i64 %36, 1, !dbg !116
-  store i64 %inc17, i64* %35, align 8, !dbg !116
-  %arrayidx18 = getelementptr inbounds i64, i64* %34, i64 %36, !dbg !114
-  store i64 %33, i64* %arrayidx18, align 8, !dbg !117
-  br label %while.cond, !dbg !118
-
-while.cond:                                       ; preds = %if.end44, %for.end
-  %37 = load i64, i64* %top, align 8, !dbg !119
-  %cmp19 = icmp ugt i64 %37, 0, !dbg !120
-  br i1 %cmp19, label %while.body, label %while.end, !dbg !118
-
-while.body:                                       ; preds = %while.cond
-  call void @llvm.dbg.declare(metadata i64* %u, metadata !121, metadata !DIExpression()), !dbg !123
-  %38 = load i64*, i64** %st, align 8, !dbg !124
-  %39 = load i64, i64* %top, align 8, !dbg !125
-  %sub = sub i64 %39, 1, !dbg !126
-  %arrayidx20 = getelementptr inbounds i64, i64* %38, i64 %sub, !dbg !124
-  %40 = load i64, i64* %arrayidx20, align 8, !dbg !124
-  store i64 %40, i64* %u, align 8, !dbg !123
-  call void @llvm.dbg.declare(metadata i64* %v, metadata !127, metadata !DIExpression()), !dbg !128
-  %41 = load i64*, i64** %idx, align 8, !dbg !129
-  %42 = load i64, i64* %u, align 8, !dbg !131
-  %arrayidx21 = getelementptr inbounds i64, i64* %41, i64 %42, !dbg !129
-  %43 = load i64, i64* %arrayidx21, align 8, !dbg !129
-  store i64 %43, i64* %v, align 8, !dbg !132
-  br label %for.cond22, !dbg !133
-
-for.cond22:                                       ; preds = %for.inc39, %while.body
-  %44 = load i64, i64* %v, align 8, !dbg !134
-  %45 = load i64, i64* %n.addr, align 8, !dbg !136
-  %cmp23 = icmp ult i64 %44, %45, !dbg !137
-  br i1 %cmp23, label %for.body24, label %for.end41, !dbg !138
-
-for.body24:                                       ; preds = %for.cond22
-  %46 = load i32*, i32** %g.addr, align 8, !dbg !139
-  %47 = load i64, i64* %u, align 8, !dbg !142
-  %48 = load i64, i64* %n.addr, align 8, !dbg !143
-  %mul25 = mul i64 %47, %48, !dbg !144
-  %49 = load i64, i64* %v, align 8, !dbg !145
-  %add = add i64 %mul25, %49, !dbg !146
-  %arrayidx26 = getelementptr inbounds i32, i32* %46, i64 %add, !dbg !139
-  %50 = load i32, i32* %arrayidx26, align 4, !dbg !139
-  %tobool27 = icmp ne i32 %50, 0, !dbg !139
-  br i1 %tobool27, label %land.lhs.true, label %if.end38, !dbg !147
-
-land.lhs.true:                                    ; preds = %for.body24
-  %51 = load i32*, i32** %visited, align 8, !dbg !148
-  %52 = load i64, i64* %v, align 8, !dbg !149
-  %arrayidx28 = getelementptr inbounds i32, i32* %51, i64 %52, !dbg !148
-  %53 = load i32, i32* %arrayidx28, align 4, !dbg !148
-  %tobool29 = icmp ne i32 %53, 0, !dbg !148
-  br i1 %tobool29, label %if.end38, label %if.then30, !dbg !150
-
-if.then30:                                        ; preds = %land.lhs.true
-  %54 = load i64, i64* %v, align 8, !dbg !151
-  %add31 = add i64 %54, 1, !dbg !153
-  %55 = load i64*, i64** %idx, align 8, !dbg !154
-  %56 = load i64, i64* %u, align 8, !dbg !155
-  %arrayidx32 = getelementptr inbounds i64, i64* %55, i64 %56, !dbg !154
-  store i64 %add31, i64* %arrayidx32, align 8, !dbg !156
-  %57 = load i32*, i32** %visited, align 8, !dbg !157
-  %58 = load i64, i64* %v, align 8, !dbg !158
-  %arrayidx33 = getelementptr inbounds i32, i32* %57, i64 %58, !dbg !157
-  store i32 1, i32* %arrayidx33, align 4, !dbg !159
-  %59 = load i64, i64* %v, align 8, !dbg !160
-  %60 = load i64*, i64** %order.addr, align 8, !dbg !161
-  %61 = load i64*, i64** %ord_len.addr, align 8, !dbg !162
-  %62 = load i64, i64* %61, align 8, !dbg !163
-  %inc34 = add i64 %62, 1, !dbg !163
-  store i64 %inc34, i64* %61, align 8, !dbg !163
-  %arrayidx35 = getelementptr inbounds i64, i64* %60, i64 %62, !dbg !161
-  store i64 %59, i64* %arrayidx35, align 8, !dbg !164
-  %63 = load i64, i64* %v, align 8, !dbg !165
-  %64 = load i64*, i64** %st, align 8, !dbg !166
-  %65 = load i64, i64* %top, align 8, !dbg !167
-  %inc36 = add i64 %65, 1, !dbg !167
-  store i64 %inc36, i64* %top, align 8, !dbg !167
-  %arrayidx37 = getelementptr inbounds i64, i64* %64, i64 %65, !dbg !166
-  store i64 %63, i64* %arrayidx37, align 8, !dbg !168
-  br label %for.end41, !dbg !169
-
-if.end38:                                         ; preds = %land.lhs.true, %for.body24
-  br label %for.inc39, !dbg !170
-
-for.inc39:                                        ; preds = %if.end38
-  %66 = load i64, i64* %v, align 8, !dbg !171
-  %inc40 = add i64 %66, 1, !dbg !171
-  store i64 %inc40, i64* %v, align 8, !dbg !171
-  br label %for.cond22, !dbg !172, !llvm.loop !173
-
-for.end41:                                        ; preds = %if.then30, %for.cond22
-  %67 = load i64, i64* %v, align 8, !dbg !175
-  %68 = load i64, i64* %n.addr, align 8, !dbg !177
-  %cmp42 = icmp eq i64 %67, %68, !dbg !178
-  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !179
-
-if.then43:                                        ; preds = %for.end41
-  %69 = load i64, i64* %top, align 8, !dbg !180
-  %dec = add i64 %69, -1, !dbg !180
-  store i64 %dec, i64* %top, align 8, !dbg !180
-  br label %if.end44, !dbg !182
-
-if.end44:                                         ; preds = %if.then43, %for.end41
-  br label %while.cond, !dbg !118, !llvm.loop !183
-
-while.end:                                        ; preds = %while.cond
-  %70 = load i32*, i32** %visited, align 8, !dbg !185
-  %71 = bitcast i32* %70 to i8*, !dbg !185
-  call void @free(i8* noundef %71) #3, !dbg !186
-  %72 = load i64*, i64** %idx, align 8, !dbg !187
-  %73 = bitcast i64* %72 to i8*, !dbg !187
-  call void @free(i8* noundef %73) #3, !dbg !188
-  %74 = load i64*, i64** %st, align 8, !dbg !189
-  %75 = bitcast i64* %74 to i8*, !dbg !189
-  call void @free(i8* noundef %75) #3, !dbg !190
-  br label %return, !dbg !191
-
-return:                                           ; preds = %while.end, %if.then10, %if.then
-  ret void, !dbg !191
+after:                                            ; preds = %loop
+  %call.putchar = call i32 @putchar(i32 10)
+  ret i32 0
 }
 
-; Function Attrs: nounwind
-declare noalias i8* @malloc(i64 noundef) #2
-
-; Function Attrs: nounwind
-declare void @free(i8* noundef) #2
-
-attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #1 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #3 = { nounwind }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!9, !10, !11, !12, !13, !14, !15}
-!llvm.ident = !{!16}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "../original/src/DFS.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "0cff5236e125c0a127adcaed33b60657")
-!2 = !{!3, !5}
-!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
-!4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
-!6 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !7, line: 46, baseType: !8)
-!7 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
-!8 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
-!9 = !{i32 7, !"Dwarf Version", i32 5}
-!10 = !{i32 2, !"Debug Info Version", i32 3}
-!11 = !{i32 1, !"wchar_size", i32 4}
-!12 = !{i32 7, !"PIC Level", i32 2}
-!13 = !{i32 7, !"PIE Level", i32 2}
-!14 = !{i32 7, !"uwtable", i32 1}
-!15 = !{i32 7, !"frame-pointer", i32 2}
-!16 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!17 = distinct !DISubprogram(name: "dfs", scope: !1, file: !1, line: 5, type: !18, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !22)
-!18 = !DISubroutineType(types: !19)
-!19 = !{null, !20, !6, !6, !5, !5}
-!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
-!21 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
-!22 = !{}
-!23 = !DILocalVariable(name: "g", arg: 1, scope: !17, file: !1, line: 5, type: !20)
-!24 = !DILocation(line: 5, column: 28, scope: !17)
-!25 = !DILocalVariable(name: "n", arg: 2, scope: !17, file: !1, line: 5, type: !6)
-!26 = !DILocation(line: 5, column: 38, scope: !17)
-!27 = !DILocalVariable(name: "s", arg: 3, scope: !17, file: !1, line: 5, type: !6)
-!28 = !DILocation(line: 5, column: 48, scope: !17)
-!29 = !DILocalVariable(name: "order", arg: 4, scope: !17, file: !1, line: 5, type: !5)
-!30 = !DILocation(line: 5, column: 59, scope: !17)
-!31 = !DILocalVariable(name: "ord_len", arg: 5, scope: !17, file: !1, line: 5, type: !5)
-!32 = !DILocation(line: 5, column: 74, scope: !17)
-!33 = !DILocation(line: 6, column: 9, scope: !34)
-!34 = distinct !DILexicalBlock(scope: !17, file: !1, line: 6, column: 9)
-!35 = !DILocation(line: 6, column: 11, scope: !34)
-!36 = !DILocation(line: 6, column: 16, scope: !34)
-!37 = !DILocation(line: 6, column: 19, scope: !34)
-!38 = !DILocation(line: 6, column: 24, scope: !34)
-!39 = !DILocation(line: 6, column: 21, scope: !34)
-!40 = !DILocation(line: 6, column: 9, scope: !17)
-!41 = !DILocation(line: 6, column: 30, scope: !42)
-!42 = distinct !DILexicalBlock(scope: !34, file: !1, line: 6, column: 27)
-!43 = !DILocation(line: 6, column: 38, scope: !42)
-!44 = !DILocation(line: 6, column: 43, scope: !42)
-!45 = !DILocalVariable(name: "visited", scope: !17, file: !1, line: 8, type: !3)
-!46 = !DILocation(line: 8, column: 10, scope: !17)
-!47 = !DILocation(line: 8, column: 34, scope: !17)
-!48 = !DILocation(line: 8, column: 36, scope: !17)
-!49 = !DILocation(line: 8, column: 27, scope: !17)
-!50 = !DILocation(line: 8, column: 20, scope: !17)
-!51 = !DILocalVariable(name: "idx", scope: !17, file: !1, line: 9, type: !5)
-!52 = !DILocation(line: 9, column: 13, scope: !17)
-!53 = !DILocation(line: 9, column: 38, scope: !17)
-!54 = !DILocation(line: 9, column: 40, scope: !17)
-!55 = !DILocation(line: 9, column: 31, scope: !17)
-!56 = !DILocation(line: 9, column: 21, scope: !17)
-!57 = !DILocalVariable(name: "st", scope: !17, file: !1, line: 10, type: !5)
-!58 = !DILocation(line: 10, column: 13, scope: !17)
-!59 = !DILocation(line: 10, column: 38, scope: !17)
-!60 = !DILocation(line: 10, column: 40, scope: !17)
-!61 = !DILocation(line: 10, column: 31, scope: !17)
-!62 = !DILocation(line: 10, column: 21, scope: !17)
-!63 = !DILocation(line: 12, column: 10, scope: !64)
-!64 = distinct !DILexicalBlock(scope: !17, file: !1, line: 12, column: 9)
-!65 = !DILocation(line: 12, column: 18, scope: !64)
-!66 = !DILocation(line: 12, column: 22, scope: !64)
-!67 = !DILocation(line: 12, column: 26, scope: !64)
-!68 = !DILocation(line: 12, column: 30, scope: !64)
-!69 = !DILocation(line: 12, column: 9, scope: !17)
-!70 = !DILocation(line: 13, column: 14, scope: !71)
-!71 = distinct !DILexicalBlock(scope: !64, file: !1, line: 12, column: 34)
-!72 = !DILocation(line: 13, column: 9, scope: !71)
-!73 = !DILocation(line: 13, column: 29, scope: !71)
-!74 = !DILocation(line: 13, column: 24, scope: !71)
-!75 = !DILocation(line: 13, column: 40, scope: !71)
-!76 = !DILocation(line: 13, column: 35, scope: !71)
-!77 = !DILocation(line: 14, column: 10, scope: !71)
-!78 = !DILocation(line: 14, column: 18, scope: !71)
-!79 = !DILocation(line: 14, column: 23, scope: !71)
-!80 = !DILocalVariable(name: "i", scope: !81, file: !1, line: 17, type: !6)
-!81 = distinct !DILexicalBlock(scope: !17, file: !1, line: 17, column: 5)
-!82 = !DILocation(line: 17, column: 17, scope: !81)
-!83 = !DILocation(line: 17, column: 10, scope: !81)
-!84 = !DILocation(line: 17, column: 24, scope: !85)
-!85 = distinct !DILexicalBlock(scope: !81, file: !1, line: 17, column: 5)
-!86 = !DILocation(line: 17, column: 28, scope: !85)
-!87 = !DILocation(line: 17, column: 26, scope: !85)
-!88 = !DILocation(line: 17, column: 5, scope: !81)
-!89 = !DILocation(line: 17, column: 38, scope: !90)
-!90 = distinct !DILexicalBlock(scope: !85, file: !1, line: 17, column: 36)
-!91 = !DILocation(line: 17, column: 46, scope: !90)
-!92 = !DILocation(line: 17, column: 49, scope: !90)
-!93 = !DILocation(line: 17, column: 54, scope: !90)
-!94 = !DILocation(line: 17, column: 58, scope: !90)
-!95 = !DILocation(line: 17, column: 61, scope: !90)
-!96 = !DILocation(line: 17, column: 66, scope: !90)
-!97 = !DILocation(line: 17, column: 31, scope: !85)
-!98 = !DILocation(line: 17, column: 5, scope: !85)
-!99 = distinct !{!99, !88, !100, !101}
-!100 = !DILocation(line: 17, column: 66, scope: !81)
-!101 = !{!"llvm.loop.mustprogress"}
-!102 = !DILocalVariable(name: "top", scope: !17, file: !1, line: 19, type: !6)
-!103 = !DILocation(line: 19, column: 12, scope: !17)
-!104 = !DILocation(line: 20, column: 6, scope: !17)
-!105 = !DILocation(line: 20, column: 14, scope: !17)
-!106 = !DILocation(line: 22, column: 17, scope: !17)
-!107 = !DILocation(line: 22, column: 5, scope: !17)
-!108 = !DILocation(line: 22, column: 11, scope: !17)
-!109 = !DILocation(line: 22, column: 15, scope: !17)
-!110 = !DILocation(line: 23, column: 5, scope: !17)
-!111 = !DILocation(line: 23, column: 13, scope: !17)
-!112 = !DILocation(line: 23, column: 16, scope: !17)
-!113 = !DILocation(line: 24, column: 27, scope: !17)
-!114 = !DILocation(line: 24, column: 5, scope: !17)
-!115 = !DILocation(line: 24, column: 13, scope: !17)
-!116 = !DILocation(line: 24, column: 21, scope: !17)
-!117 = !DILocation(line: 24, column: 25, scope: !17)
-!118 = !DILocation(line: 26, column: 5, scope: !17)
-!119 = !DILocation(line: 26, column: 12, scope: !17)
-!120 = !DILocation(line: 26, column: 16, scope: !17)
-!121 = !DILocalVariable(name: "u", scope: !122, file: !1, line: 27, type: !6)
-!122 = distinct !DILexicalBlock(scope: !17, file: !1, line: 26, column: 21)
-!123 = !DILocation(line: 27, column: 16, scope: !122)
-!124 = !DILocation(line: 27, column: 20, scope: !122)
-!125 = !DILocation(line: 27, column: 23, scope: !122)
-!126 = !DILocation(line: 27, column: 27, scope: !122)
-!127 = !DILocalVariable(name: "v", scope: !122, file: !1, line: 28, type: !6)
-!128 = !DILocation(line: 28, column: 16, scope: !122)
-!129 = !DILocation(line: 30, column: 18, scope: !130)
-!130 = distinct !DILexicalBlock(scope: !122, file: !1, line: 30, column: 9)
-!131 = !DILocation(line: 30, column: 22, scope: !130)
-!132 = !DILocation(line: 30, column: 16, scope: !130)
-!133 = !DILocation(line: 30, column: 14, scope: !130)
-!134 = !DILocation(line: 30, column: 26, scope: !135)
-!135 = distinct !DILexicalBlock(scope: !130, file: !1, line: 30, column: 9)
-!136 = !DILocation(line: 30, column: 30, scope: !135)
-!137 = !DILocation(line: 30, column: 28, scope: !135)
-!138 = !DILocation(line: 30, column: 9, scope: !130)
-!139 = !DILocation(line: 31, column: 17, scope: !140)
-!140 = distinct !DILexicalBlock(scope: !141, file: !1, line: 31, column: 17)
-!141 = distinct !DILexicalBlock(scope: !135, file: !1, line: 30, column: 38)
-!142 = !DILocation(line: 31, column: 19, scope: !140)
-!143 = !DILocation(line: 31, column: 21, scope: !140)
-!144 = !DILocation(line: 31, column: 20, scope: !140)
-!145 = !DILocation(line: 31, column: 25, scope: !140)
-!146 = !DILocation(line: 31, column: 23, scope: !140)
-!147 = !DILocation(line: 31, column: 28, scope: !140)
-!148 = !DILocation(line: 31, column: 32, scope: !140)
-!149 = !DILocation(line: 31, column: 40, scope: !140)
-!150 = !DILocation(line: 31, column: 17, scope: !141)
-!151 = !DILocation(line: 32, column: 26, scope: !152)
-!152 = distinct !DILexicalBlock(scope: !140, file: !1, line: 31, column: 44)
-!153 = !DILocation(line: 32, column: 28, scope: !152)
-!154 = !DILocation(line: 32, column: 17, scope: !152)
-!155 = !DILocation(line: 32, column: 21, scope: !152)
-!156 = !DILocation(line: 32, column: 24, scope: !152)
-!157 = !DILocation(line: 33, column: 17, scope: !152)
-!158 = !DILocation(line: 33, column: 25, scope: !152)
-!159 = !DILocation(line: 33, column: 28, scope: !152)
-!160 = !DILocation(line: 34, column: 39, scope: !152)
-!161 = !DILocation(line: 34, column: 17, scope: !152)
-!162 = !DILocation(line: 34, column: 25, scope: !152)
-!163 = !DILocation(line: 34, column: 33, scope: !152)
-!164 = !DILocation(line: 34, column: 37, scope: !152)
-!165 = !DILocation(line: 35, column: 29, scope: !152)
-!166 = !DILocation(line: 35, column: 17, scope: !152)
-!167 = !DILocation(line: 35, column: 23, scope: !152)
-!168 = !DILocation(line: 35, column: 27, scope: !152)
-!169 = !DILocation(line: 36, column: 17, scope: !152)
-!170 = !DILocation(line: 38, column: 9, scope: !141)
-!171 = !DILocation(line: 30, column: 33, scope: !135)
-!172 = !DILocation(line: 30, column: 9, scope: !135)
-!173 = distinct !{!173, !138, !174, !101}
-!174 = !DILocation(line: 38, column: 9, scope: !130)
-!175 = !DILocation(line: 40, column: 13, scope: !176)
-!176 = distinct !DILexicalBlock(scope: !122, file: !1, line: 40, column: 13)
-!177 = !DILocation(line: 40, column: 18, scope: !176)
-!178 = !DILocation(line: 40, column: 15, scope: !176)
-!179 = !DILocation(line: 40, column: 13, scope: !122)
-!180 = !DILocation(line: 41, column: 16, scope: !181)
-!181 = distinct !DILexicalBlock(scope: !176, file: !1, line: 40, column: 21)
-!182 = !DILocation(line: 42, column: 9, scope: !181)
-!183 = distinct !{!183, !118, !184, !101}
-!184 = !DILocation(line: 43, column: 5, scope: !17)
-!185 = !DILocation(line: 45, column: 10, scope: !17)
-!186 = !DILocation(line: 45, column: 5, scope: !17)
-!187 = !DILocation(line: 46, column: 10, scope: !17)
-!188 = !DILocation(line: 46, column: 5, scope: !17)
-!189 = !DILocation(line: 47, column: 10, scope: !17)
-!190 = !DILocation(line: 47, column: 5, scope: !17)
-!191 = !DILocation(line: 48, column: 1, scope: !17)
+attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
