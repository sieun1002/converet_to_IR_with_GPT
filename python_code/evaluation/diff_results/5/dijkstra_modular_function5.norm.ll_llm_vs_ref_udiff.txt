--- ref.ll
+++ dijkstra_modular_function5.norm.ll_llm_vs_ref.ll
@@ -1,333 +1,102 @@
-; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/dijkstra_modular_function5.ll'
-source_filename = "dijkstra_modular.c"
-target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/5/dijkstra_modular_function5.ll'
+source_filename = "/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/5/dijkstra_modular_function5.ll"
 target triple = "x86_64-pc-linux-gnu"
 
-; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
-declare void @llvm.dbg.declare(metadata, metadata, metadata) #0
+declare i8* @memset(i8*, i32, i64)
 
-; Function Attrs: noinline nounwind optnone uwtable
-declare dso_local i32 @min_index(i32* noundef, i32* noundef, i32 noundef) #1
+declare i32 @min_index(i32*, i32*, i32)
 
-; Function Attrs: noinline nounwind optnone uwtable
-define dso_local void @dijkstra([100 x i32]* noundef %graph, i32 noundef %V, i32 noundef %src, i32* noundef %out_dist) #1 !dbg !10 {
+define void @dijkstra([100 x i32]* %graph, i32 %n, i32 %src, i32* %dist) {
 entry:
-  %graph.addr = alloca [100 x i32]*, align 8
-  %V.addr = alloca i32, align 4
-  %src.addr = alloca i32, align 4
-  %out_dist.addr = alloca i32*, align 8
-  %visited = alloca [100 x i32], align 16
-  %i = alloca i32, align 4
-  %iter = alloca i32, align 4
-  %u = alloca i32, align 4
-  %v = alloca i32, align 4
-  %nd = alloca i32, align 4
-  store [100 x i32]* %graph, [100 x i32]** %graph.addr, align 8
-  call void @llvm.dbg.declare(metadata [100 x i32]** %graph.addr, metadata !20, metadata !DIExpression()), !dbg !21
-  store i32 %V, i32* %V.addr, align 4
-  call void @llvm.dbg.declare(metadata i32* %V.addr, metadata !22, metadata !DIExpression()), !dbg !23
-  store i32 %src, i32* %src.addr, align 4
-  call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !24, metadata !DIExpression()), !dbg !25
-  store i32* %out_dist, i32** %out_dist.addr, align 8
-  call void @llvm.dbg.declare(metadata i32** %out_dist.addr, metadata !26, metadata !DIExpression()), !dbg !27
-  call void @llvm.dbg.declare(metadata [100 x i32]* %visited, metadata !28, metadata !DIExpression()), !dbg !29
-  %0 = bitcast [100 x i32]* %visited to i8*, !dbg !29
-  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 400, i1 false), !dbg !29
-  call void @llvm.dbg.declare(metadata i32* %i, metadata !30, metadata !DIExpression()), !dbg !32
-  store i32 0, i32* %i, align 4, !dbg !32
-  br label %for.cond, !dbg !33
+  %s = alloca [100 x i32], align 16
+  %s.i8 = bitcast [100 x i32]* %s to i8*
+  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(400) %s.i8, i8 0, i64 400, i1 false)
+  br label %init.loop
 
-for.cond:                                         ; preds = %for.inc, %entry
-  %1 = load i32, i32* %i, align 4, !dbg !34
-  %2 = load i32, i32* %V.addr, align 4, !dbg !36
-  %cmp = icmp slt i32 %1, %2, !dbg !37
-  br i1 %cmp, label %for.body, label %for.end, !dbg !38
+init.loop:                                        ; preds = %init.body, %entry
+  %i = phi i32 [ 0, %entry ], [ %i.next, %init.body ]
+  %i.cmp = icmp slt i32 %i, %n
+  br i1 %i.cmp, label %init.body, label %init.end
 
-for.body:                                         ; preds = %for.cond
-  %3 = load i32*, i32** %out_dist.addr, align 8, !dbg !39
-  %4 = load i32, i32* %i, align 4, !dbg !40
-  %idxprom = sext i32 %4 to i64, !dbg !39
-  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !39
-  store i32 2147483647, i32* %arrayidx, align 4, !dbg !41
-  br label %for.inc, !dbg !39
+init.body:                                        ; preds = %init.loop
+  %i.sext = sext i32 %i to i64
+  %dist.i.ptr = getelementptr inbounds i32, i32* %dist, i64 %i.sext
+  store i32 2147483647, i32* %dist.i.ptr, align 4
+  %i.next = add i32 %i, 1
+  br label %init.loop
 
-for.inc:                                          ; preds = %for.body
-  %5 = load i32, i32* %i, align 4, !dbg !42
-  %inc = add nsw i32 %5, 1, !dbg !42
-  store i32 %inc, i32* %i, align 4, !dbg !42
-  br label %for.cond, !dbg !43, !llvm.loop !44
+init.end:                                         ; preds = %init.loop
+  %src.sext = sext i32 %src to i64
+  %dist.src.ptr = getelementptr inbounds i32, i32* %dist, i64 %src.sext
+  store i32 0, i32* %dist.src.ptr, align 4
+  %n.minus1 = add i32 %n, -1
+  br label %outer.loop
 
-for.end:                                          ; preds = %for.cond
-  %6 = load i32*, i32** %out_dist.addr, align 8, !dbg !47
-  %7 = load i32, i32* %src.addr, align 4, !dbg !48
-  %idxprom1 = sext i32 %7 to i64, !dbg !47
-  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom1, !dbg !47
-  store i32 0, i32* %arrayidx2, align 4, !dbg !49
-  call void @llvm.dbg.declare(metadata i32* %iter, metadata !50, metadata !DIExpression()), !dbg !52
-  store i32 0, i32* %iter, align 4, !dbg !52
-  br label %for.cond3, !dbg !53
+outer.loop:                                       ; preds = %outer.inc, %init.end
+  %count = phi i32 [ 0, %init.end ], [ %count.next, %outer.inc ]
+  %outer.cmp = icmp slt i32 %count, %n.minus1
+  br i1 %outer.cmp, label %outer.body, label %exit
 
-for.cond3:                                        ; preds = %for.inc41, %for.end
-  %8 = load i32, i32* %iter, align 4, !dbg !54
-  %9 = load i32, i32* %V.addr, align 4, !dbg !56
-  %sub = sub nsw i32 %9, 1, !dbg !57
-  %cmp4 = icmp slt i32 %8, %sub, !dbg !58
-  br i1 %cmp4, label %for.body5, label %for.end43, !dbg !59
+outer.body:                                       ; preds = %outer.loop
+  %s.base = getelementptr inbounds [100 x i32], [100 x i32]* %s, i64 0, i64 0
+  %minidx = call i32 @min_index(i32* %dist, i32* nonnull %s.base, i32 %n)
+  %min.is.neg1 = icmp eq i32 %minidx, -1
+  br i1 %min.is.neg1, label %exit, label %got.min
 
-for.body5:                                        ; preds = %for.cond3
-  call void @llvm.dbg.declare(metadata i32* %u, metadata !60, metadata !DIExpression()), !dbg !62
-  %10 = load i32*, i32** %out_dist.addr, align 8, !dbg !63
-  %arraydecay = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 0, !dbg !64
-  %11 = load i32, i32* %V.addr, align 4, !dbg !65
-  %call = call i32 @min_index(i32* noundef %10, i32* noundef %arraydecay, i32 noundef %11), !dbg !66
-  store i32 %call, i32* %u, align 4, !dbg !62
-  %12 = load i32, i32* %u, align 4, !dbg !67
-  %cmp6 = icmp eq i32 %12, -1, !dbg !69
-  br i1 %cmp6, label %if.then, label %if.end, !dbg !70
+got.min:                                          ; preds = %outer.body
+  %minidx.sext = sext i32 %minidx to i64
+  %s.min.ptr = getelementptr inbounds [100 x i32], [100 x i32]* %s, i64 0, i64 %minidx.sext
+  store i32 1, i32* %s.min.ptr, align 4
+  br label %inner.loop
 
-if.then:                                          ; preds = %for.body5
-  br label %for.end43, !dbg !71
+inner.loop:                                       ; preds = %inner.inc, %got.min
+  %j = phi i32 [ 0, %got.min ], [ %j.next, %inner.inc ]
+  %inner.cmp = icmp slt i32 %j, %n
+  br i1 %inner.cmp, label %inner.body.checkEdge, label %outer.inc
 
-if.end:                                           ; preds = %for.body5
-  %13 = load i32, i32* %u, align 4, !dbg !72
-  %idxprom7 = sext i32 %13 to i64, !dbg !73
-  %arrayidx8 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom7, !dbg !73
-  store i32 1, i32* %arrayidx8, align 4, !dbg !74
-  call void @llvm.dbg.declare(metadata i32* %v, metadata !75, metadata !DIExpression()), !dbg !77
-  store i32 0, i32* %v, align 4, !dbg !77
-  br label %for.cond9, !dbg !78
+inner.body.checkEdge:                             ; preds = %inner.loop
+  %j.sext = sext i32 %j to i64
+  %edge.ptr = getelementptr inbounds [100 x i32], [100 x i32]* %graph, i64 %minidx.sext, i64 %j.sext
+  %edge.val = load i32, i32* %edge.ptr, align 4
+  %edge.is.zero = icmp eq i32 %edge.val, 0
+  br i1 %edge.is.zero, label %inner.inc, label %checkVisited
 
-for.cond9:                                        ; preds = %for.inc38, %if.end
-  %14 = load i32, i32* %v, align 4, !dbg !79
-  %15 = load i32, i32* %V.addr, align 4, !dbg !81
-  %cmp10 = icmp slt i32 %14, %15, !dbg !82
-  br i1 %cmp10, label %for.body11, label %for.end40, !dbg !83
+checkVisited:                                     ; preds = %inner.body.checkEdge
+  %s.j.ptr = getelementptr inbounds [100 x i32], [100 x i32]* %s, i64 0, i64 %j.sext
+  %s.j.val = load i32, i32* %s.j.ptr, align 4
+  %visited.not = icmp eq i32 %s.j.val, 0
+  br i1 %visited.not, label %checkInf, label %inner.inc
 
-for.body11:                                       ; preds = %for.cond9
-  %16 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !84
-  %17 = load i32, i32* %u, align 4, !dbg !87
-  %idxprom12 = sext i32 %17 to i64, !dbg !84
-  %arrayidx13 = getelementptr inbounds [100 x i32], [100 x i32]* %16, i64 %idxprom12, !dbg !84
-  %18 = load i32, i32* %v, align 4, !dbg !88
-  %idxprom14 = sext i32 %18 to i64, !dbg !84
-  %arrayidx15 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx13, i64 0, i64 %idxprom14, !dbg !84
-  %19 = load i32, i32* %arrayidx15, align 4, !dbg !84
-  %tobool = icmp ne i32 %19, 0, !dbg !84
-  br i1 %tobool, label %land.lhs.true, label %if.end37, !dbg !89
+checkInf:                                         ; preds = %checkVisited
+  %dist.min.ptr = getelementptr inbounds i32, i32* %dist, i64 %minidx.sext
+  %dist.min = load i32, i32* %dist.min.ptr, align 4
+  %is.inf = icmp eq i32 %dist.min, 2147483647
+  br i1 %is.inf, label %inner.inc, label %relax
 
-land.lhs.true:                                    ; preds = %for.body11
-  %20 = load i32, i32* %v, align 4, !dbg !90
-  %idxprom16 = sext i32 %20 to i64, !dbg !91
-  %arrayidx17 = getelementptr inbounds [100 x i32], [100 x i32]* %visited, i64 0, i64 %idxprom16, !dbg !91
-  %21 = load i32, i32* %arrayidx17, align 4, !dbg !91
-  %tobool18 = icmp ne i32 %21, 0, !dbg !91
-  br i1 %tobool18, label %if.end37, label %land.lhs.true19, !dbg !92
+relax:                                            ; preds = %checkInf
+  %cand = add i32 %dist.min, %edge.val
+  %dist.j.ptr = getelementptr inbounds i32, i32* %dist, i64 %j.sext
+  %dist.j = load i32, i32* %dist.j.ptr, align 4
+  %cand.lt = icmp slt i32 %cand, %dist.j
+  br i1 %cand.lt, label %storeNew, label %inner.inc
 
-land.lhs.true19:                                  ; preds = %land.lhs.true
-  %22 = load i32*, i32** %out_dist.addr, align 8, !dbg !93
-  %23 = load i32, i32* %u, align 4, !dbg !94
-  %idxprom20 = sext i32 %23 to i64, !dbg !93
-  %arrayidx21 = getelementptr inbounds i32, i32* %22, i64 %idxprom20, !dbg !93
-  %24 = load i32, i32* %arrayidx21, align 4, !dbg !93
-  %cmp22 = icmp ne i32 %24, 2147483647, !dbg !95
-  br i1 %cmp22, label %if.then23, label %if.end37, !dbg !96
+storeNew:                                         ; preds = %relax
+  store i32 %cand, i32* %dist.j.ptr, align 4
+  br label %inner.inc
 
-if.then23:                                        ; preds = %land.lhs.true19
-  call void @llvm.dbg.declare(metadata i32* %nd, metadata !97, metadata !DIExpression()), !dbg !99
-  %25 = load i32*, i32** %out_dist.addr, align 8, !dbg !100
-  %26 = load i32, i32* %u, align 4, !dbg !101
-  %idxprom24 = sext i32 %26 to i64, !dbg !100
-  %arrayidx25 = getelementptr inbounds i32, i32* %25, i64 %idxprom24, !dbg !100
-  %27 = load i32, i32* %arrayidx25, align 4, !dbg !100
-  %28 = load [100 x i32]*, [100 x i32]** %graph.addr, align 8, !dbg !102
-  %29 = load i32, i32* %u, align 4, !dbg !103
-  %idxprom26 = sext i32 %29 to i64, !dbg !102
-  %arrayidx27 = getelementptr inbounds [100 x i32], [100 x i32]* %28, i64 %idxprom26, !dbg !102
-  %30 = load i32, i32* %v, align 4, !dbg !104
-  %idxprom28 = sext i32 %30 to i64, !dbg !102
-  %arrayidx29 = getelementptr inbounds [100 x i32], [100 x i32]* %arrayidx27, i64 0, i64 %idxprom28, !dbg !102
-  %31 = load i32, i32* %arrayidx29, align 4, !dbg !102
-  %add = add nsw i32 %27, %31, !dbg !105
-  store i32 %add, i32* %nd, align 4, !dbg !99
-  %32 = load i32, i32* %nd, align 4, !dbg !106
-  %33 = load i32*, i32** %out_dist.addr, align 8, !dbg !108
-  %34 = load i32, i32* %v, align 4, !dbg !109
-  %idxprom30 = sext i32 %34 to i64, !dbg !108
-  %arrayidx31 = getelementptr inbounds i32, i32* %33, i64 %idxprom30, !dbg !108
-  %35 = load i32, i32* %arrayidx31, align 4, !dbg !108
-  %cmp32 = icmp slt i32 %32, %35, !dbg !110
-  br i1 %cmp32, label %if.then33, label %if.end36, !dbg !111
+inner.inc:                                        ; preds = %storeNew, %relax, %checkInf, %checkVisited, %inner.body.checkEdge
+  %j.next = add i32 %j, 1
+  br label %inner.loop
 
-if.then33:                                        ; preds = %if.then23
-  %36 = load i32, i32* %nd, align 4, !dbg !112
-  %37 = load i32*, i32** %out_dist.addr, align 8, !dbg !113
-  %38 = load i32, i32* %v, align 4, !dbg !114
-  %idxprom34 = sext i32 %38 to i64, !dbg !113
-  %arrayidx35 = getelementptr inbounds i32, i32* %37, i64 %idxprom34, !dbg !113
-  store i32 %36, i32* %arrayidx35, align 4, !dbg !115
-  br label %if.end36, !dbg !113
+outer.inc:                                        ; preds = %inner.loop
+  %count.next = add i32 %count, 1
+  br label %outer.loop
 
-if.end36:                                         ; preds = %if.then33, %if.then23
-  br label %if.end37, !dbg !116
-
-if.end37:                                         ; preds = %if.end36, %land.lhs.true19, %land.lhs.true, %for.body11
-  br label %for.inc38, !dbg !117
-
-for.inc38:                                        ; preds = %if.end37
-  %39 = load i32, i32* %v, align 4, !dbg !118
-  %inc39 = add nsw i32 %39, 1, !dbg !118
-  store i32 %inc39, i32* %v, align 4, !dbg !118
-  br label %for.cond9, !dbg !119, !llvm.loop !120
-
-for.end40:                                        ; preds = %for.cond9
-  br label %for.inc41, !dbg !122
-
-for.inc41:                                        ; preds = %for.end40
-  %40 = load i32, i32* %iter, align 4, !dbg !123
-  %inc42 = add nsw i32 %40, 1, !dbg !123
-  store i32 %inc42, i32* %iter, align 4, !dbg !123
-  br label %for.cond3, !dbg !124, !llvm.loop !125
-
-for.end43:                                        ; preds = %if.then, %for.cond3
-  ret void, !dbg !127
+exit:                                             ; preds = %outer.body, %outer.loop
+  ret void
 }
 
 ; Function Attrs: argmemonly nofree nounwind willreturn writeonly
-declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2
+declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0
 
-attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
-attributes #1 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
-attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
-
-!llvm.dbg.cu = !{!0}
-!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
-!llvm.ident = !{!9}
-
-!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
-!1 = !DIFile(filename: "dijkstra_modular.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/original/src", checksumkind: CSK_MD5, checksum: "47bf6ecccd84048d194510cb254a0651")
-!2 = !{i32 7, !"Dwarf Version", i32 5}
-!3 = !{i32 2, !"Debug Info Version", i32 3}
-!4 = !{i32 1, !"wchar_size", i32 4}
-!5 = !{i32 7, !"PIC Level", i32 2}
-!6 = !{i32 7, !"PIE Level", i32 2}
-!7 = !{i32 7, !"uwtable", i32 1}
-!8 = !{i32 7, !"frame-pointer", i32 2}
-!9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
-!10 = distinct !DISubprogram(name: "dijkstra", scope: !1, file: !1, line: 53, type: !11, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
-!11 = !DISubroutineType(types: !12)
-!12 = !{null, !13, !15, !15, !18}
-!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
-!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 3200, elements: !16)
-!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
-!16 = !{!17}
-!17 = !DISubrange(count: 100)
-!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
-!19 = !{}
-!20 = !DILocalVariable(name: "graph", arg: 1, scope: !10, file: !1, line: 53, type: !13)
-!21 = !DILocation(line: 53, column: 19, scope: !10)
-!22 = !DILocalVariable(name: "V", arg: 2, scope: !10, file: !1, line: 53, type: !15)
-!23 = !DILocation(line: 53, column: 40, scope: !10)
-!24 = !DILocalVariable(name: "src", arg: 3, scope: !10, file: !1, line: 53, type: !15)
-!25 = !DILocation(line: 53, column: 47, scope: !10)
-!26 = !DILocalVariable(name: "out_dist", arg: 4, scope: !10, file: !1, line: 53, type: !18)
-!27 = !DILocation(line: 53, column: 56, scope: !10)
-!28 = !DILocalVariable(name: "visited", scope: !10, file: !1, line: 54, type: !14)
-!29 = !DILocation(line: 54, column: 9, scope: !10)
-!30 = !DILocalVariable(name: "i", scope: !31, file: !1, line: 56, type: !15)
-!31 = distinct !DILexicalBlock(scope: !10, file: !1, line: 56, column: 5)
-!32 = !DILocation(line: 56, column: 14, scope: !31)
-!33 = !DILocation(line: 56, column: 10, scope: !31)
-!34 = !DILocation(line: 56, column: 21, scope: !35)
-!35 = distinct !DILexicalBlock(scope: !31, file: !1, line: 56, column: 5)
-!36 = !DILocation(line: 56, column: 25, scope: !35)
-!37 = !DILocation(line: 56, column: 23, scope: !35)
-!38 = !DILocation(line: 56, column: 5, scope: !31)
-!39 = !DILocation(line: 56, column: 33, scope: !35)
-!40 = !DILocation(line: 56, column: 42, scope: !35)
-!41 = !DILocation(line: 56, column: 45, scope: !35)
-!42 = !DILocation(line: 56, column: 28, scope: !35)
-!43 = !DILocation(line: 56, column: 5, scope: !35)
-!44 = distinct !{!44, !38, !45, !46}
-!45 = !DILocation(line: 56, column: 47, scope: !31)
-!46 = !{!"llvm.loop.mustprogress"}
-!47 = !DILocation(line: 57, column: 5, scope: !10)
-!48 = !DILocation(line: 57, column: 14, scope: !10)
-!49 = !DILocation(line: 57, column: 19, scope: !10)
-!50 = !DILocalVariable(name: "iter", scope: !51, file: !1, line: 59, type: !15)
-!51 = distinct !DILexicalBlock(scope: !10, file: !1, line: 59, column: 5)
-!52 = !DILocation(line: 59, column: 14, scope: !51)
-!53 = !DILocation(line: 59, column: 10, scope: !51)
-!54 = !DILocation(line: 59, column: 24, scope: !55)
-!55 = distinct !DILexicalBlock(scope: !51, file: !1, line: 59, column: 5)
-!56 = !DILocation(line: 59, column: 31, scope: !55)
-!57 = !DILocation(line: 59, column: 33, scope: !55)
-!58 = !DILocation(line: 59, column: 29, scope: !55)
-!59 = !DILocation(line: 59, column: 5, scope: !51)
-!60 = !DILocalVariable(name: "u", scope: !61, file: !1, line: 60, type: !15)
-!61 = distinct !DILexicalBlock(scope: !55, file: !1, line: 59, column: 46)
-!62 = !DILocation(line: 60, column: 13, scope: !61)
-!63 = !DILocation(line: 60, column: 27, scope: !61)
-!64 = !DILocation(line: 60, column: 37, scope: !61)
-!65 = !DILocation(line: 60, column: 46, scope: !61)
-!66 = !DILocation(line: 60, column: 17, scope: !61)
-!67 = !DILocation(line: 61, column: 13, scope: !68)
-!68 = distinct !DILexicalBlock(scope: !61, file: !1, line: 61, column: 13)
-!69 = !DILocation(line: 61, column: 15, scope: !68)
-!70 = !DILocation(line: 61, column: 13, scope: !61)
-!71 = !DILocation(line: 61, column: 22, scope: !68)
-!72 = !DILocation(line: 62, column: 17, scope: !61)
-!73 = !DILocation(line: 62, column: 9, scope: !61)
-!74 = !DILocation(line: 62, column: 20, scope: !61)
-!75 = !DILocalVariable(name: "v", scope: !76, file: !1, line: 64, type: !15)
-!76 = distinct !DILexicalBlock(scope: !61, file: !1, line: 64, column: 9)
-!77 = !DILocation(line: 64, column: 18, scope: !76)
-!78 = !DILocation(line: 64, column: 14, scope: !76)
-!79 = !DILocation(line: 64, column: 25, scope: !80)
-!80 = distinct !DILexicalBlock(scope: !76, file: !1, line: 64, column: 9)
-!81 = !DILocation(line: 64, column: 29, scope: !80)
-!82 = !DILocation(line: 64, column: 27, scope: !80)
-!83 = !DILocation(line: 64, column: 9, scope: !76)
-!84 = !DILocation(line: 65, column: 17, scope: !85)
-!85 = distinct !DILexicalBlock(scope: !86, file: !1, line: 65, column: 17)
-!86 = distinct !DILexicalBlock(scope: !80, file: !1, line: 64, column: 37)
-!87 = !DILocation(line: 65, column: 23, scope: !85)
-!88 = !DILocation(line: 65, column: 26, scope: !85)
-!89 = !DILocation(line: 65, column: 29, scope: !85)
-!90 = !DILocation(line: 65, column: 41, scope: !85)
-!91 = !DILocation(line: 65, column: 33, scope: !85)
-!92 = !DILocation(line: 65, column: 44, scope: !85)
-!93 = !DILocation(line: 65, column: 47, scope: !85)
-!94 = !DILocation(line: 65, column: 56, scope: !85)
-!95 = !DILocation(line: 65, column: 59, scope: !85)
-!96 = !DILocation(line: 65, column: 17, scope: !86)
-!97 = !DILocalVariable(name: "nd", scope: !98, file: !1, line: 66, type: !15)
-!98 = distinct !DILexicalBlock(scope: !85, file: !1, line: 65, column: 71)
-!99 = !DILocation(line: 66, column: 21, scope: !98)
-!100 = !DILocation(line: 66, column: 26, scope: !98)
-!101 = !DILocation(line: 66, column: 35, scope: !98)
-!102 = !DILocation(line: 66, column: 40, scope: !98)
-!103 = !DILocation(line: 66, column: 46, scope: !98)
-!104 = !DILocation(line: 66, column: 49, scope: !98)
-!105 = !DILocation(line: 66, column: 38, scope: !98)
-!106 = !DILocation(line: 67, column: 21, scope: !107)
-!107 = distinct !DILexicalBlock(scope: !98, file: !1, line: 67, column: 21)
-!108 = !DILocation(line: 67, column: 26, scope: !107)
-!109 = !DILocation(line: 67, column: 35, scope: !107)
-!110 = !DILocation(line: 67, column: 24, scope: !107)
-!111 = !DILocation(line: 67, column: 21, scope: !98)
-!112 = !DILocation(line: 67, column: 53, scope: !107)
-!113 = !DILocation(line: 67, column: 39, scope: !107)
-!114 = !DILocation(line: 67, column: 48, scope: !107)
-!115 = !DILocation(line: 67, column: 51, scope: !107)
-!116 = !DILocation(line: 68, column: 13, scope: !98)
-!117 = !DILocation(line: 69, column: 9, scope: !86)
-!118 = !DILocation(line: 64, column: 32, scope: !80)
-!119 = !DILocation(line: 64, column: 9, scope: !80)
-!120 = distinct !{!120, !83, !121, !46}
-!121 = !DILocation(line: 69, column: 9, scope: !76)
-!122 = !DILocation(line: 70, column: 5, scope: !61)
-!123 = !DILocation(line: 59, column: 38, scope: !55)
-!124 = !DILocation(line: 59, column: 5, scope: !55)
-!125 = distinct !{!125, !59, !126, !46}
-!126 = !DILocation(line: 70, column: 5, scope: !51)
-!127 = !DILocation(line: 71, column: 1, scope: !10)
+attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
