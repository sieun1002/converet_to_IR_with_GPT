- ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/original/ll/linearsearch_main.ll'
?                                                                  ^^^    ^^
+ ; ModuleID = '/home/nata20034/workspace/convert_to_IR_with_LLM/llm_to_IR/gpt_api_error_analysis/7/linearsearch_main.ll'
?                                                                +++++++++++++++++++++  ^^   ++++ ^
- source_filename = "../original/src/linearsearch.c"
+ source_filename = "main.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
+ @.str_found = private unnamed_addr constant [27 x i8] c"Element found at index %d\0A\00", align 1
+ @.str_not = private unnamed_addr constant [18 x i8] c"Element not found\00", align 1
- @__const.main.arr = external hidden unnamed_addr constant [5 x i32], align 16
- @.str = external hidden unnamed_addr constant [27 x i8], align 1
- @.str.1 = external hidden unnamed_addr constant [19 x i8], align 1
  
- ; Function Attrs: noinline nounwind optnone uwtable
- declare dso_local i32 @linear_search(i32* noundef, i32 noundef, i32 noundef) #0
?         ----------                                                          ---
+ declare i32 @linear_search(i32* noundef, i32 noundef, i32 noundef)
  
+ declare i32 @printf(i8* noundef, ...)
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !10 {
+ declare i32 @puts(i8* noundef)
+ 
+ define i32 @main() {
  entry:
-   %retval = alloca i32, align 4
    %arr = alloca [5 x i32], align 16
-   %n = alloca i32, align 4
-   %target = alloca i32, align 4
-   %result = alloca i32, align 4
-   store i32 0, i32* %retval, align 4
-   call void @llvm.dbg.declare(metadata [5 x i32]* %arr, metadata !15, metadata !DIExpression()), !dbg !19
-   %0 = bitcast [5 x i32]* %arr to i8*, !dbg !19
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.arr to i8*), i64 20, i1 false), !dbg !19
-   call void @llvm.dbg.declare(metadata i32* %n, metadata !20, metadata !DIExpression()), !dbg !21
-   store i32 5, i32* %n, align 4, !dbg !21
-   call void @llvm.dbg.declare(metadata i32* %target, metadata !22, metadata !DIExpression()), !dbg !23
-   store i32 4, i32* %target, align 4, !dbg !23
-   call void @llvm.dbg.declare(metadata i32* %result, metadata !24, metadata !DIExpression()), !dbg !25
-   %arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 0, !dbg !26
?       ^^^^^^^                                                                  ----------
+   %arr.ptr = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 0
?       ^^^^
-   %1 = load i32, i32* %n, align 4, !dbg !27
-   %2 = load i32, i32* %target, align 4, !dbg !28
+   store i32 5, i32* %arr.ptr, align 16
+   %idx1 = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 1
+   store i32 3, i32* %idx1, align 4
+   %idx2 = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 2
+   store i32 8, i32* %idx2, align 8
+   %idx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 3
+   store i32 4, i32* %idx3, align 4
+   %idx4 = getelementptr inbounds [5 x i32], [5 x i32]* %arr, i64 0, i64 4
+   store i32 2, i32* %idx4, align 16
-   %call = call i32 @linear_search(i32* noundef %arraydecay, i32 noundef %1, i32 noundef %2), !dbg !29
?                                                    ^^^^^^^              ^^              ^^ ----------
+   %call = call i32 @linear_search(i32* noundef nonnull %arr.ptr, i32 noundef 5, i32 noundef 4)
?                                                ++++++++    ^^^^              ^              ^
-   store i32 %call, i32* %result, align 4, !dbg !25
-   %3 = load i32, i32* %result, align 4, !dbg !30
-   %cmp = icmp ne i32 %3, -1, !dbg !32
?               -       ^    ----------
+   %cmp = icmp eq i32 %call, -1
?                +      ^^^^
-   br i1 %cmp, label %if.then, label %if.else, !dbg !33
+   br i1 %cmp, label %notfound, label %found
  
- if.then:                                          ; preds = %entry
? - ^^^^
+ found:                                            ; preds = %entry
?  ^^ +                                           ++
-   %4 = load i32, i32* %result, align 4, !dbg !34
-   %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 noundef %4), !dbg !35
?        ^                                                                                                                            ^ ----------
+   %callprintf = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([27 x i8], [27 x i8]* @.str_found, i64 0, i64 0), i32 noundef %call)
?        ^^^^^^                                          +++++++++++++++++++++++++++                                                    ++++++                              ^^^^
-   br label %if.end, !dbg !35
+   br label %exit
  
- if.else:                                          ; preds = %entry
? ^ ^^^^^                                          -
+ notfound:                                         ; preds = %entry
? ^^^ ^^^^
-   %call2 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)), !dbg !36
+   %callputs = call i32 @puts(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([18 x i8], [18 x i8]* @.str_not, i64 0, i64 0))
-   br label %if.end
?              ^^^^^
+   br label %exit
?             ++ ^
  
- if.end:                                           ; preds = %if.else, %if.then
?  ^^^^^                                                       ^ ^^^^^   - ^^^^
+ exit:                                             ; preds = %notfound, %found
? ++ ^                                            ++           ^^^ ^^^^    ^^ +
-   ret i32 0, !dbg !37
+   ret i32 0
  }
- 
- ; Function Attrs: argmemonly nofree nounwind willreturn
- declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
- 
- declare i32 @printf(i8* noundef, ...) #3
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { argmemonly nofree nounwind willreturn }
- attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/linearsearch.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "b82228440e1fc68a5f0ccb5f1cd642bd")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 11, type: !11, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !14)
- !11 = !DISubroutineType(types: !12)
- !12 = !{!13}
- !13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !14 = !{}
- !15 = !DILocalVariable(name: "arr", scope: !10, file: !1, line: 12, type: !16)
- !16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 160, elements: !17)
- !17 = !{!18}
- !18 = !DISubrange(count: 5)
- !19 = !DILocation(line: 12, column: 9, scope: !10)
- !20 = !DILocalVariable(name: "n", scope: !10, file: !1, line: 13, type: !13)
- !21 = !DILocation(line: 13, column: 9, scope: !10)
- !22 = !DILocalVariable(name: "target", scope: !10, file: !1, line: 14, type: !13)
- !23 = !DILocation(line: 14, column: 9, scope: !10)
- !24 = !DILocalVariable(name: "result", scope: !10, file: !1, line: 16, type: !13)
- !25 = !DILocation(line: 16, column: 9, scope: !10)
- !26 = !DILocation(line: 16, column: 32, scope: !10)
- !27 = !DILocation(line: 16, column: 37, scope: !10)
- !28 = !DILocation(line: 16, column: 40, scope: !10)
- !29 = !DILocation(line: 16, column: 18, scope: !10)
- !30 = !DILocation(line: 18, column: 9, scope: !31)
- !31 = distinct !DILexicalBlock(scope: !10, file: !1, line: 18, column: 9)
- !32 = !DILocation(line: 18, column: 16, scope: !31)
- !33 = !DILocation(line: 18, column: 9, scope: !10)
- !34 = !DILocation(line: 19, column: 47, scope: !31)
- !35 = !DILocation(line: 19, column: 9, scope: !31)
- !36 = !DILocation(line: 21, column: 9, scope: !31)
- !37 = !DILocation(line: 23, column: 5, scope: !10)
