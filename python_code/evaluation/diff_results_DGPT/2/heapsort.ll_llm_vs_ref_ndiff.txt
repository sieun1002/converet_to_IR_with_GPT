- ; ModuleID = '../original/src/heapsort.c'
?               ----------------
+ ; ModuleID = 'heapsort.bc'
?                        +
- source_filename = "../original/src/heapsort.c"
+ source_filename = "llvm-link"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- @__const.main.arr = private unnamed_addr constant [9 x i32] [i32 7, i32 3, i32 9, i32 1, i32 4, i32 8, i32 2, i32 6, i32 5], align 16
- @.str = private unnamed_addr constant [9 x i8] c"\EC\9B\90\EB\B3\B8: \00", align 1
+ @.fmt_before = private unnamed_addr constant [8 x i8] c"Before:\00"
+ @.fmt_after = private unnamed_addr constant [7 x i8] c"After:\00"
- @.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
?   ^ ^^^                                                   ---------
+ @.fmt_d = private unnamed_addr constant [4 x i8] c"%d \00"
?   ^^ ^^
- @.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
- @.str.3 = private unnamed_addr constant [13 x i8] c"\EC\A0\95\EB\A0\AC \ED\9B\84: \00", align 1
  
+ define dso_local i32 @main() {
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @heap_sort(i32* noundef %a, i64 noundef %n) #0 !dbg !10 {
  entry:
-   %a.addr = alloca i32*, align 8
-   %n.addr = alloca i64, align 8
-   %i = alloca i64, align 8
-   %root = alloca i64, align 8
-   %left = alloca i64, align 8
-   %right = alloca i64, align 8
-   %swap_idx = alloca i64, align 8
-   %t = alloca i32, align 4
?    ^                     ^
+   %arr = alloca [9 x i32], align 16
?    ^^^          +++++   +        ^^
-   %end = alloca i64, align 8
-   %t23 = alloca i32, align 4
-   %root28 = alloca i64, align 8
-   %left30 = alloca i64, align 8
-   %right36 = alloca i64, align 8
-   %swap_idx38 = alloca i64, align 8
-   %tt = alloca i32, align 4
-   store i32* %a, i32** %a.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !19, metadata !DIExpression()), !dbg !20
-   store i64 %n, i64* %n.addr, align 8
-   call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !21, metadata !DIExpression()), !dbg !22
-   %0 = load i64, i64* %n.addr, align 8, !dbg !23
-   %cmp = icmp ult i64 %0, 2, !dbg !25
-   br i1 %cmp, label %if.then, label %if.end, !dbg !26
+   %p0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
+   store i32 7, i32* %p0, align 4
+   %p1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 1
+   store i32 3, i32* %p1, align 4
+   %p2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 2
+   store i32 9, i32* %p2, align 4
+   %p3 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 3
+   store i32 1, i32* %p3, align 4
+   %p4 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 4
+   store i32 4, i32* %p4, align 4
+   %p5 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 5
+   store i32 8, i32* %p5, align 4
+   %p6 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 6
+   store i32 2, i32* %p6, align 4
+   %p7 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 7
+   store i32 6, i32* %p7, align 4
+   %p8 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 8
+   store i32 5, i32* %p8, align 4
+   %fmt_before_ptr = getelementptr inbounds [8 x i8], [8 x i8]* @.fmt_before, i64 0, i64 0
+   %call_banner1 = call i32 (i8*, ...) @printf(i8* noundef %fmt_before_ptr)
+   br label %loop1.cond
  
- if.then:                                          ; preds = %entry
-   br label %for.end59, !dbg !27
- 
- if.end:                                           ; preds = %entry
? ^^ ^                                          ----
+ loop1.cond:                                       ; preds = %loop1.latch, %entry
? ^^^^^ ^^                                                   ++++++++++++++
+   %i = phi i64 [ 0, %entry ], [ %i.next, %loop1.latch ]
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !28, metadata !DIExpression()), !dbg !30
-   %1 = load i64, i64* %n.addr, align 8, !dbg !31
-   %div = udiv i64 %1, 2, !dbg !32
-   store i64 %div, i64* %i, align 8, !dbg !30
-   br label %for.cond, !dbg !33
- 
- for.cond:                                         ; preds = %for.end, %if.end
-   %2 = load i64, i64* %i, align 8, !dbg !34
-   %dec = add i64 %2, -1, !dbg !34
-   store i64 %dec, i64* %i, align 8, !dbg !34
-   %cmp1 = icmp ugt i64 %2, 0, !dbg !36
?                 ^       ^  ^^^^^^^^^^^
+   %cmp1 = icmp ult i64 %i, 9
?                 ^       ^  ^
-   br i1 %cmp1, label %for.body, label %for.end19, !dbg !37
?                       ^ ^              ^ ^    ------------
+   br i1 %cmp1, label %loop1.body, label %loop1.end
?                       ^ ^^^              ^ ^^^
  
- for.body:                                         ; preds = %for.cond
? ^ ^                                             --           ^ ^
+ loop1.body:                                       ; preds = %loop1.cond
? ^ ^^^                                                        ^ ^^^
-   call void @llvm.dbg.declare(metadata i64* %root, metadata !38, metadata !DIExpression()), !dbg !40
-   %3 = load i64, i64* %i, align 8, !dbg !41
-   store i64 %3, i64* %root, align 8, !dbg !40
-   br label %for.cond2, !dbg !42
+   %elem.ptr1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %i
+   %elem1 = load i32, i32* %elem.ptr1, align 4
+   %fmt_d_ptr1 = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
+   %call_print1 = call i32 (i8*, ...) @printf(i8* noundef %fmt_d_ptr1, i32 noundef %elem1)
+   br label %loop1.latch
  
- for.cond2:                                        ; preds = %if.end14, %for.body
-   call void @llvm.dbg.declare(metadata i64* %left, metadata !43, metadata !DIExpression()), !dbg !47
-   %4 = load i64, i64* %root, align 8, !dbg !48
-   %mul = mul i64 %4, 2, !dbg !49
-   %add = add i64 %mul, 1, !dbg !50
-   store i64 %add, i64* %left, align 8, !dbg !47
-   %5 = load i64, i64* %left, align 8, !dbg !51
-   %6 = load i64, i64* %n.addr, align 8, !dbg !53
-   %cmp3 = icmp uge i64 %5, %6, !dbg !54
-   br i1 %cmp3, label %if.then4, label %if.end5, !dbg !55
- 
- if.then4:                                         ; preds = %for.cond2
? ^^   ---                                       ---           ^ ^ ^ - ^
+ loop1.latch:                                      ; preds = %loop1.body
? ^^^^^ ++ +                                                   ^ ^^^ ^  ^
-   br label %for.end, !dbg !56
+   %i.next = add i64 %i, 1
+   br label %loop1.cond
  
- if.end5:                                          ; preds = %for.cond2
-   call void @llvm.dbg.declare(metadata i64* %right, metadata !57, metadata !DIExpression()), !dbg !58
-   %7 = load i64, i64* %left, align 8, !dbg !59
-   %add6 = add i64 %7, 1, !dbg !60
-   store i64 %add6, i64* %right, align 8, !dbg !58
-   call void @llvm.dbg.declare(metadata i64* %swap_idx, metadata !61, metadata !DIExpression()), !dbg !62
-   %8 = load i64, i64* %right, align 8, !dbg !63
-   %9 = load i64, i64* %n.addr, align 8, !dbg !64
-   %cmp7 = icmp ult i64 %8, %9, !dbg !65
-   br i1 %cmp7, label %land.lhs.true, label %cond.false, !dbg !66
- 
- land.lhs.true:                                    ; preds = %if.end5
-   %10 = load i32*, i32** %a.addr, align 8, !dbg !67
-   %11 = load i64, i64* %right, align 8, !dbg !68
-   %arrayidx = getelementptr inbounds i32, i32* %10, i64 %11, !dbg !67
-   %12 = load i32, i32* %arrayidx, align 4, !dbg !67
-   %13 = load i32*, i32** %a.addr, align 8, !dbg !69
-   %14 = load i64, i64* %left, align 8, !dbg !70
-   %arrayidx8 = getelementptr inbounds i32, i32* %13, i64 %14, !dbg !69
-   %15 = load i32, i32* %arrayidx8, align 4, !dbg !69
-   %cmp9 = icmp sgt i32 %12, %15, !dbg !71
-   br i1 %cmp9, label %cond.true, label %cond.false, !dbg !72
- 
- cond.true:                                        ; preds = %land.lhs.true
-   %16 = load i64, i64* %right, align 8, !dbg !73
-   br label %cond.end, !dbg !72
- 
- cond.false:                                       ; preds = %land.lhs.true, %if.end5
-   %17 = load i64, i64* %left, align 8, !dbg !74
-   br label %cond.end, !dbg !72
- 
- cond.end:                                         ; preds = %cond.false, %cond.true
-   %cond = phi i64 [ %16, %cond.true ], [ %17, %cond.false ], !dbg !72
-   store i64 %cond, i64* %swap_idx, align 8, !dbg !62
-   %18 = load i32*, i32** %a.addr, align 8, !dbg !75
-   %19 = load i64, i64* %root, align 8, !dbg !77
-   %arrayidx10 = getelementptr inbounds i32, i32* %18, i64 %19, !dbg !75
-   %20 = load i32, i32* %arrayidx10, align 4, !dbg !75
-   %21 = load i32*, i32** %a.addr, align 8, !dbg !78
-   %22 = load i64, i64* %swap_idx, align 8, !dbg !79
-   %arrayidx11 = getelementptr inbounds i32, i32* %21, i64 %22, !dbg !78
-   %23 = load i32, i32* %arrayidx11, align 4, !dbg !78
-   %cmp12 = icmp sge i32 %20, %23, !dbg !80
-   br i1 %cmp12, label %if.then13, label %if.end14, !dbg !81
- 
- if.then13:                                        ; preds = %cond.end
-   br label %for.end, !dbg !82
- 
- if.end14:                                         ; preds = %cond.end
-   call void @llvm.dbg.declare(metadata i32* %t, metadata !83, metadata !DIExpression()), !dbg !84
-   %24 = load i32*, i32** %a.addr, align 8, !dbg !85
-   %25 = load i64, i64* %root, align 8, !dbg !86
-   %arrayidx15 = getelementptr inbounds i32, i32* %24, i64 %25, !dbg !85
-   %26 = load i32, i32* %arrayidx15, align 4, !dbg !85
-   store i32 %26, i32* %t, align 4, !dbg !84
-   %27 = load i32*, i32** %a.addr, align 8, !dbg !87
-   %28 = load i64, i64* %swap_idx, align 8, !dbg !88
-   %arrayidx16 = getelementptr inbounds i32, i32* %27, i64 %28, !dbg !87
-   %29 = load i32, i32* %arrayidx16, align 4, !dbg !87
-   %30 = load i32*, i32** %a.addr, align 8, !dbg !89
-   %31 = load i64, i64* %root, align 8, !dbg !90
-   %arrayidx17 = getelementptr inbounds i32, i32* %30, i64 %31, !dbg !89
-   store i32 %29, i32* %arrayidx17, align 4, !dbg !91
-   %32 = load i32, i32* %t, align 4, !dbg !92
-   %33 = load i32*, i32** %a.addr, align 8, !dbg !93
-   %34 = load i64, i64* %swap_idx, align 8, !dbg !94
-   %arrayidx18 = getelementptr inbounds i32, i32* %33, i64 %34, !dbg !93
-   store i32 %32, i32* %arrayidx18, align 4, !dbg !95
-   %35 = load i64, i64* %swap_idx, align 8, !dbg !96
-   store i64 %35, i64* %root, align 8, !dbg !97
-   br label %for.cond2, !dbg !98, !llvm.loop !99
- 
- for.end:                                          ; preds = %if.then13, %if.then4
-   br label %for.cond, !dbg !102, !llvm.loop !103
- 
- for.end19:                                        ; preds = %for.cond
? ^ ^    --                                                    ^ ^
+ loop1.end:                                        ; preds = %loop1.cond
? ^ ^^^                                                        ^ ^^^
-   call void @llvm.dbg.declare(metadata i64* %end, metadata !106, metadata !DIExpression()), !dbg !108
-   %36 = load i64, i64* %n.addr, align 8, !dbg !109
-   %sub = sub i64 %36, 1, !dbg !110
-   store i64 %sub, i64* %end, align 8, !dbg !108
-   br label %for.cond20, !dbg !111
+   %nl1 = call i32 @putchar(i32 noundef 10)
+   %arr.base = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
+   call void @heap_sort(i32* noundef %arr.base, i64 noundef 9)
+   %fmt_after_ptr = getelementptr inbounds [7 x i8], [7 x i8]* @.fmt_after, i64 0, i64 0
+   %call_banner2 = call i32 (i8*, ...) @printf(i8* noundef %fmt_after_ptr)
+   br label %loop2.cond
  
- for.cond20:                                       ; preds = %for.inc, %for.end19
? ^ ^     --                                                   ^ ^ ^^    ^ ^    --
+ loop2.cond:                                       ; preds = %loop2.latch, %loop1.end
? ^ ^^^                                                        ^ ^^^ ^^^ +   ^ ^^^
-   %37 = load i64, i64* %end, align 8, !dbg !112
-   %cmp21 = icmp ugt i64 %37, 0, !dbg !114
+   %j = phi i64 [ 0, %loop1.end ], [ %j.next, %loop2.latch ]
+   %cmp2 = icmp ult i64 %j, 9
-   br i1 %cmp21, label %for.body22, label %for.end59, !dbg !115
?              -         ^ ^     --         ^ ^    -------------
+   br i1 %cmp2, label %loop2.body, label %loop2.end
?                       ^ ^^^              ^ ^^^
  
- for.body22:                                       ; preds = %for.cond20
? ^ ^     --                                                   ^ ^     --
+ loop2.body:                                       ; preds = %loop2.cond
? ^ ^^^                                                        ^ ^^^
+   %elem.ptr2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %j
+   %elem2 = load i32, i32* %elem.ptr2, align 4
+   %fmt_d_ptr2 = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
+   %call_print2 = call i32 (i8*, ...) @printf(i8* noundef %fmt_d_ptr2, i32 noundef %elem2)
+   br label %loop2.latch
-   call void @llvm.dbg.declare(metadata i32* %t23, metadata !116, metadata !DIExpression()), !dbg !118
-   %38 = load i32*, i32** %a.addr, align 8, !dbg !119
-   %arrayidx24 = getelementptr inbounds i32, i32* %38, i64 0, !dbg !119
-   %39 = load i32, i32* %arrayidx24, align 4, !dbg !119
-   store i32 %39, i32* %t23, align 4, !dbg !118
-   %40 = load i32*, i32** %a.addr, align 8, !dbg !120
-   %41 = load i64, i64* %end, align 8, !dbg !121
-   %arrayidx25 = getelementptr inbounds i32, i32* %40, i64 %41, !dbg !120
-   %42 = load i32, i32* %arrayidx25, align 4, !dbg !120
-   %43 = load i32*, i32** %a.addr, align 8, !dbg !122
-   %arrayidx26 = getelementptr inbounds i32, i32* %43, i64 0, !dbg !122
-   store i32 %42, i32* %arrayidx26, align 4, !dbg !123
-   %44 = load i32, i32* %t23, align 4, !dbg !124
-   %45 = load i32*, i32** %a.addr, align 8, !dbg !125
-   %46 = load i64, i64* %end, align 8, !dbg !126
-   %arrayidx27 = getelementptr inbounds i32, i32* %45, i64 %46, !dbg !125
-   store i32 %44, i32* %arrayidx27, align 4, !dbg !127
-   call void @llvm.dbg.declare(metadata i64* %root28, metadata !128, metadata !DIExpression()), !dbg !129
-   store i64 0, i64* %root28, align 8, !dbg !129
-   br label %for.cond29, !dbg !130
  
- for.cond29:                                       ; preds = %if.end52, %for.body22
-   call void @llvm.dbg.declare(metadata i64* %left30, metadata !131, metadata !DIExpression()), !dbg !135
-   %47 = load i64, i64* %root28, align 8, !dbg !136
-   %mul31 = mul i64 %47, 2, !dbg !137
-   %add32 = add i64 %mul31, 1, !dbg !138
-   store i64 %add32, i64* %left30, align 8, !dbg !135
-   %48 = load i64, i64* %left30, align 8, !dbg !139
-   %49 = load i64, i64* %end, align 8, !dbg !141
-   %cmp33 = icmp uge i64 %48, %49, !dbg !142
-   br i1 %cmp33, label %if.then34, label %if.end35, !dbg !143
- 
- if.then34:                                        ; preds = %for.cond29
? ^^   ----                                       --           ^ ^ ^ - ^^
+ loop2.latch:                                      ; preds = %loop2.body
? ^^^^^ ++ +                                                   ^ ^^^ ^  ^
-   br label %for.end57, !dbg !144
+   %j.next = add i64 %j, 1
+   br label %loop2.cond
  
- if.end35:                                         ; preds = %for.cond29
? ^^    --                                         -           ^ ^     --
+ loop2.end:                                        ; preds = %loop2.cond
? ^^^^^                                                        ^ ^^^
+   %nl2 = call i32 @putchar(i32 noundef 10)
+   ret i32 0
-   call void @llvm.dbg.declare(metadata i64* %right36, metadata !145, metadata !DIExpression()), !dbg !146
-   %50 = load i64, i64* %left30, align 8, !dbg !147
-   %add37 = add i64 %50, 1, !dbg !148
-   store i64 %add37, i64* %right36, align 8, !dbg !146
-   call void @llvm.dbg.declare(metadata i64* %swap_idx38, metadata !149, metadata !DIExpression()), !dbg !150
-   %51 = load i64, i64* %right36, align 8, !dbg !151
-   %52 = load i64, i64* %end, align 8, !dbg !152
-   %cmp39 = icmp ult i64 %51, %52, !dbg !153
-   br i1 %cmp39, label %land.lhs.true40, label %cond.false45, !dbg !154
- 
- land.lhs.true40:                                  ; preds = %if.end35
-   %53 = load i32*, i32** %a.addr, align 8, !dbg !155
-   %54 = load i64, i64* %right36, align 8, !dbg !156
-   %arrayidx41 = getelementptr inbounds i32, i32* %53, i64 %54, !dbg !155
-   %55 = load i32, i32* %arrayidx41, align 4, !dbg !155
-   %56 = load i32*, i32** %a.addr, align 8, !dbg !157
-   %57 = load i64, i64* %left30, align 8, !dbg !158
-   %arrayidx42 = getelementptr inbounds i32, i32* %56, i64 %57, !dbg !157
-   %58 = load i32, i32* %arrayidx42, align 4, !dbg !157
-   %cmp43 = icmp sgt i32 %55, %58, !dbg !159
-   br i1 %cmp43, label %cond.true44, label %cond.false45, !dbg !160
- 
- cond.true44:                                      ; preds = %land.lhs.true40
-   %59 = load i64, i64* %right36, align 8, !dbg !161
-   br label %cond.end46, !dbg !160
- 
- cond.false45:                                     ; preds = %land.lhs.true40, %if.end35
-   %60 = load i64, i64* %left30, align 8, !dbg !162
-   br label %cond.end46, !dbg !160
- 
- cond.end46:                                       ; preds = %cond.false45, %cond.true44
-   %cond47 = phi i64 [ %59, %cond.true44 ], [ %60, %cond.false45 ], !dbg !160
-   store i64 %cond47, i64* %swap_idx38, align 8, !dbg !150
-   %61 = load i32*, i32** %a.addr, align 8, !dbg !163
-   %62 = load i64, i64* %root28, align 8, !dbg !165
-   %arrayidx48 = getelementptr inbounds i32, i32* %61, i64 %62, !dbg !163
-   %63 = load i32, i32* %arrayidx48, align 4, !dbg !163
-   %64 = load i32*, i32** %a.addr, align 8, !dbg !166
-   %65 = load i64, i64* %swap_idx38, align 8, !dbg !167
-   %arrayidx49 = getelementptr inbounds i32, i32* %64, i64 %65, !dbg !166
-   %66 = load i32, i32* %arrayidx49, align 4, !dbg !166
-   %cmp50 = icmp sge i32 %63, %66, !dbg !168
-   br i1 %cmp50, label %if.then51, label %if.end52, !dbg !169
- 
- if.then51:                                        ; preds = %cond.end46
-   br label %for.end57, !dbg !170
- 
- if.end52:                                         ; preds = %cond.end46
-   call void @llvm.dbg.declare(metadata i32* %tt, metadata !171, metadata !DIExpression()), !dbg !172
-   %67 = load i32*, i32** %a.addr, align 8, !dbg !173
-   %68 = load i64, i64* %root28, align 8, !dbg !174
-   %arrayidx53 = getelementptr inbounds i32, i32* %67, i64 %68, !dbg !173
-   %69 = load i32, i32* %arrayidx53, align 4, !dbg !173
-   store i32 %69, i32* %tt, align 4, !dbg !172
-   %70 = load i32*, i32** %a.addr, align 8, !dbg !175
-   %71 = load i64, i64* %swap_idx38, align 8, !dbg !176
-   %arrayidx54 = getelementptr inbounds i32, i32* %70, i64 %71, !dbg !175
-   %72 = load i32, i32* %arrayidx54, align 4, !dbg !175
-   %73 = load i32*, i32** %a.addr, align 8, !dbg !177
-   %74 = load i64, i64* %root28, align 8, !dbg !178
-   %arrayidx55 = getelementptr inbounds i32, i32* %73, i64 %74, !dbg !177
-   store i32 %72, i32* %arrayidx55, align 4, !dbg !179
-   %75 = load i32, i32* %tt, align 4, !dbg !180
-   %76 = load i32*, i32** %a.addr, align 8, !dbg !181
-   %77 = load i64, i64* %swap_idx38, align 8, !dbg !182
-   %arrayidx56 = getelementptr inbounds i32, i32* %76, i64 %77, !dbg !181
-   store i32 %75, i32* %arrayidx56, align 4, !dbg !183
-   %78 = load i64, i64* %swap_idx38, align 8, !dbg !184
-   store i64 %78, i64* %root28, align 8, !dbg !185
-   br label %for.cond29, !dbg !186, !llvm.loop !187
- 
- for.end57:                                        ; preds = %if.then51, %if.then34
-   br label %for.inc, !dbg !190
- 
- for.inc:                                          ; preds = %for.end57
-   %79 = load i64, i64* %end, align 8, !dbg !191
-   %dec58 = add i64 %79, -1, !dbg !191
-   store i64 %dec58, i64* %end, align 8, !dbg !191
-   br label %for.cond20, !dbg !192, !llvm.loop !193
- 
- for.end59:                                        ; preds = %if.then, %for.cond20
-   ret void, !dbg !195
  }
  
+ declare i32 @printf(i8*, ...)
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main() #0 !dbg !196 {
+ declare i32 @putchar(i32)
+ 
+ define dso_local void @heap_sort(i32* noundef %arr, i64 noundef %n) {
  entry:
+   %cmp0 = icmp ule i64 %n, 1
+   br i1 %cmp0, label %exit, label %build.init
-   %retval = alloca i32, align 4
-   %arr = alloca [9 x i32], align 16
-   %n = alloca i64, align 8
-   %i = alloca i64, align 8
-   %i4 = alloca i64, align 8
-   store i32 0, i32* %retval, align 4
-   call void @llvm.dbg.declare(metadata [9 x i32]* %arr, metadata !199, metadata !DIExpression()), !dbg !203
-   %0 = bitcast [9 x i32]* %arr to i8*, !dbg !203
-   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([9 x i32]* @__const.main.arr to i8*), i64 36, i1 false), !dbg !203
-   call void @llvm.dbg.declare(metadata i64* %n, metadata !204, metadata !DIExpression()), !dbg !205
-   store i64 9, i64* %n, align 8, !dbg !205
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0)), !dbg !206
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !207, metadata !DIExpression()), !dbg !209
-   store i64 0, i64* %i, align 8, !dbg !209
-   br label %for.cond, !dbg !210
  
- for.cond:                                         ; preds = %for.inc, %entry
? ^^^ ^^ ^                                        --         ----------
+ build.init:                                       ; preds = %entry
? ^^^^^ ^ ^^
+   %half0 = lshr i64 %n, 1
+   br label %build.top
-   %1 = load i64, i64* %i, align 8, !dbg !211
-   %2 = load i64, i64* %n, align 8, !dbg !213
-   %cmp = icmp ult i64 %1, %2, !dbg !214
-   br i1 %cmp, label %for.body, label %for.end, !dbg !215
  
+ build.top:                                        ; preds = %build.end, %build.init
+   %i_old1 = phi i64 [ %half0, %build.init ], [ %i_dec_next6, %build.end ]
+   %cond2 = icmp ne i64 %i_old1, 0
+   br i1 %cond2, label %build.body, label %sort.init
+ 
+ build.body:                                       ; preds = %build.top
+   %i_dec3 = add i64 %i_old1, -1
+   br label %sift1.head
+ 
+ sift1.head:                                       ; preds = %sift1.swap, %build.body
+   %k4 = phi i64 [ %i_dec3, %build.body ], [ %k_next18, %sift1.swap ]
+   %k2mul5 = add i64 %k4, %k4
+   %left6 = add i64 %k2mul5, 1
+   %left_ge_n7 = icmp uge i64 %left6, %n
+   br i1 %left_ge_n7, label %sift1.break, label %sift1.hasleft
+ 
+ sift1.hasleft:                                    ; preds = %sift1.head
+   %right8 = add i64 %left6, 1
+   %right_in_range9 = icmp ult i64 %right8, %n
+   %left_ptr10 = getelementptr inbounds i32, i32* %arr, i64 %left6
+   %left_val11 = load i32, i32* %left_ptr10, align 4
+   br i1 %right_in_range9, label %s1.cmp.right, label %s1.choose.left
+ 
+ s1.cmp.right:                                     ; preds = %sift1.hasleft
+   %right_ptr12 = getelementptr inbounds i32, i32* %arr, i64 %right8
+   %right_val13 = load i32, i32* %right_ptr12, align 4
+   %gt14 = icmp sgt i32 %right_val13, %left_val11
+   br i1 %gt14, label %s1.choose.right, label %s1.choose.left
+ 
+ s1.choose.right:                                  ; preds = %s1.cmp.right
+   br label %s1.m.chosen
+ 
+ s1.choose.left:                                   ; preds = %s1.cmp.right, %sift1.hasleft
+   br label %s1.m.chosen
+ 
+ s1.m.chosen:                                      ; preds = %s1.choose.left, %s1.choose.right
+   %m_idx15 = phi i64 [ %right8, %s1.choose.right ], [ %left6, %s1.choose.left ]
+   %k_ptr16 = getelementptr inbounds i32, i32* %arr, i64 %k4
+   %k_val17 = load i32, i32* %k_ptr16, align 4
+   %m_ptr18 = getelementptr inbounds i32, i32* %arr, i64 %m_idx15
+   %m_val19 = load i32, i32* %m_ptr18, align 4
+   %ge20 = icmp sge i32 %k_val17, %m_val19
+   br i1 %ge20, label %sift1.break, label %sift1.swap
+ 
+ sift1.swap:                                       ; preds = %s1.m.chosen
+   store i32 %m_val19, i32* %k_ptr16, align 4
+   store i32 %k_val17, i32* %m_ptr18, align 4
+   %k_next18 = add i64 %m_idx15, 0
+   br label %sift1.head
+ 
+ sift1.break:                                      ; preds = %s1.m.chosen, %sift1.head
+   br label %build.end
+ 
+ build.end:                                        ; preds = %sift1.break
+   %i_dec_next6 = add i64 %i_dec3, 0
+   br label %build.top
+ 
+ sort.init:                                        ; preds = %build.top
+   %end_init21 = add i64 %n, -1
+   br label %sort.loop.cond
+ 
+ sort.loop.cond:                                   ; preds = %after_sift2, %sort.init
+   %end_cur22 = phi i64 [ %end_init21, %sort.init ], [ %end_next37, %after_sift2 ]
+   %nz23 = icmp ne i64 %end_cur22, 0
+   br i1 %nz23, label %sort.body, label %exit
+ 
- for.body:                                         ; preds = %for.cond
? ^                                                -           ^
+ sort.body:                                        ; preds = %sort.loop.cond
? ^  +                                                         ^  ++++++
-   %3 = load i64, i64* %i, align 8, !dbg !216
-   %arrayidx = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %3, !dbg !217
-   %4 = load i32, i32* %arrayidx, align 4, !dbg !217
-   %call1 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %4), !dbg !218
-   br label %for.inc, !dbg !218
+   %root_ptr24 = getelementptr inbounds i32, i32* %arr, i64 0
+   %root_val25 = load i32, i32* %root_ptr24, align 4
+   %end_ptr26 = getelementptr inbounds i32, i32* %arr, i64 %end_cur22
+   %end_val27 = load i32, i32* %end_ptr26, align 4
+   store i32 %end_val27, i32* %root_ptr24, align 4
+   store i32 %root_val25, i32* %end_ptr26, align 4
+   br label %sift2.head
  
- for.inc:                                          ; preds = %for.body
?  ^^ ^^^                                        ---
+ sift2.head:                                       ; preds = %sift2.swap, %sort.body
? ++ ^^ ^^^^                                                   ++ +++++++++++  +
-   %5 = load i64, i64* %i, align 8, !dbg !219
-   %inc = add i64 %5, 1, !dbg !219
-   store i64 %inc, i64* %i, align 8, !dbg !219
-   br label %for.cond, !dbg !220, !llvm.loop !221
+   %k2_28 = phi i64 [ 0, %sort.body ], [ %k2_next36, %sift2.swap ]
+   %twok29 = add i64 %k2_28, %k2_28
+   %left2_30 = add i64 %twok29, 1
+   %left_ge_end31 = icmp uge i64 %left2_30, %end_cur22
+   br i1 %left_ge_end31, label %after_sift2, label %sift2.hasleft
  
+ sift2.hasleft:                                    ; preds = %sift2.head
+   %right2_32 = add i64 %left2_30, 1
+   %right_in_range2_33 = icmp ult i64 %right2_32, %end_cur22
+   %left_ptr2_34 = getelementptr inbounds i32, i32* %arr, i64 %left2_30
+   %left_val2_35 = load i32, i32* %left_ptr2_34, align 4
+   br i1 %right_in_range2_33, label %s2.cmp.right, label %s2.choose.left
+ 
+ s2.cmp.right:                                     ; preds = %sift2.hasleft
+   %right_ptr2_36 = getelementptr inbounds i32, i32* %arr, i64 %right2_32
+   %right_val2_37 = load i32, i32* %right_ptr2_36, align 4
+   %gt2_38 = icmp sgt i32 %right_val2_37, %left_val2_35
+   br i1 %gt2_38, label %s2.choose.right, label %s2.choose.left
+ 
+ s2.choose.right:                                  ; preds = %s2.cmp.right
+   br label %s2.m.chosen
+ 
+ s2.choose.left:                                   ; preds = %s2.cmp.right, %sift2.hasleft
+   br label %s2.m.chosen
+ 
+ s2.m.chosen:                                      ; preds = %s2.choose.left, %s2.choose.right
+   %m2_idx39 = phi i64 [ %right2_32, %s2.choose.right ], [ %left2_30, %s2.choose.left ]
+   %k2_ptr40 = getelementptr inbounds i32, i32* %arr, i64 %k2_28
+   %k2_val41 = load i32, i32* %k2_ptr40, align 4
+   %m2_ptr42 = getelementptr inbounds i32, i32* %arr, i64 %m2_idx39
+   %m2_val43 = load i32, i32* %m2_ptr42, align 4
+   %ge2_44 = icmp sge i32 %k2_val41, %m2_val43
+   br i1 %ge2_44, label %after_sift2, label %sift2.swap
+ 
+ sift2.swap:                                       ; preds = %s2.m.chosen
+   store i32 %m2_val43, i32* %k2_ptr40, align 4
+   store i32 %k2_val41, i32* %m2_ptr42, align 4
+   %k2_next36 = add i64 %m2_idx39, 0
+   br label %sift2.head
+ 
+ after_sift2:                                      ; preds = %s2.m.chosen, %sift2.head
+   %end_next37 = add i64 %end_cur22, -1
+   br label %sort.loop.cond
+ 
- for.end:                                          ; preds = %for.cond
? ---- ^^                                                      ^
+ exit:                                             ; preds = %sort.loop.cond, %entry
?  ^^^                                           +++           ^  ++++++     ++++++++
+   ret void
-   %call2 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !223
-   %arraydecay = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0, !dbg !224
-   %6 = load i64, i64* %n, align 8, !dbg !225
-   call void @heap_sort(i32* noundef %arraydecay, i64 noundef %6), !dbg !226
-   %call3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0)), !dbg !227
-   call void @llvm.dbg.declare(metadata i64* %i4, metadata !228, metadata !DIExpression()), !dbg !230
-   store i64 0, i64* %i4, align 8, !dbg !230
-   br label %for.cond5, !dbg !231
- 
- for.cond5:                                        ; preds = %for.inc10, %for.end
-   %7 = load i64, i64* %i4, align 8, !dbg !232
-   %8 = load i64, i64* %n, align 8, !dbg !234
-   %cmp6 = icmp ult i64 %7, %8, !dbg !235
-   br i1 %cmp6, label %for.body7, label %for.end12, !dbg !236
- 
- for.body7:                                        ; preds = %for.cond5
-   %9 = load i64, i64* %i4, align 8, !dbg !237
-   %arrayidx8 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %9, !dbg !238
-   %10 = load i32, i32* %arrayidx8, align 4, !dbg !238
-   %call9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %10), !dbg !239
-   br label %for.inc10, !dbg !239
- 
- for.inc10:                                        ; preds = %for.body7
-   %11 = load i64, i64* %i4, align 8, !dbg !240
-   %inc11 = add i64 %11, 1, !dbg !240
-   store i64 %inc11, i64* %i4, align 8, !dbg !240
-   br label %for.cond5, !dbg !241, !llvm.loop !242
- 
- for.end12:                                        ; preds = %for.cond5
-   %call13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !244
-   ret i32 0, !dbg !245
  }
- 
- ; Function Attrs: argmemonly nofree nounwind willreturn
- declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2
- 
- declare i32 @printf(i8* noundef, ...) #3
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { argmemonly nofree nounwind willreturn }
- attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.0-1ubuntu1.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "../original/src/heapsort.c", directory: "/home/nata20034/workspace/convert_to_IR_with_LLM/IR_Test", checksumkind: CSK_MD5, checksum: "46ea0de099a65ce5a3d77aedcde86428")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
- !10 = distinct !DISubprogram(name: "heap_sort", scope: !1, file: !1, line: 4, type: !11, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !11 = !DISubroutineType(types: !12)
- !12 = !{null, !13, !15}
- !13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
- !14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !15 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !16, line: 46, baseType: !17)
- !16 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !17 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !18 = !{}
- !19 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !1, line: 4, type: !13)
- !20 = !DILocation(line: 4, column: 21, scope: !10)
- !21 = !DILocalVariable(name: "n", arg: 2, scope: !10, file: !1, line: 4, type: !15)
- !22 = !DILocation(line: 4, column: 31, scope: !10)
- !23 = !DILocation(line: 5, column: 9, scope: !24)
- !24 = distinct !DILexicalBlock(scope: !10, file: !1, line: 5, column: 9)
- !25 = !DILocation(line: 5, column: 11, scope: !24)
- !26 = !DILocation(line: 5, column: 9, scope: !10)
- !27 = !DILocation(line: 5, column: 16, scope: !24)
- !28 = !DILocalVariable(name: "i", scope: !29, file: !1, line: 7, type: !15)
- !29 = distinct !DILexicalBlock(scope: !10, file: !1, line: 7, column: 5)
- !30 = !DILocation(line: 7, column: 17, scope: !29)
- !31 = !DILocation(line: 7, column: 21, scope: !29)
- !32 = !DILocation(line: 7, column: 23, scope: !29)
- !33 = !DILocation(line: 7, column: 10, scope: !29)
- !34 = !DILocation(line: 7, column: 29, scope: !35)
- !35 = distinct !DILexicalBlock(scope: !29, file: !1, line: 7, column: 5)
- !36 = !DILocation(line: 7, column: 32, scope: !35)
- !37 = !DILocation(line: 7, column: 5, scope: !29)
- !38 = !DILocalVariable(name: "root", scope: !39, file: !1, line: 8, type: !15)
- !39 = distinct !DILexicalBlock(scope: !35, file: !1, line: 7, column: 39)
- !40 = !DILocation(line: 8, column: 16, scope: !39)
- !41 = !DILocation(line: 8, column: 23, scope: !39)
- !42 = !DILocation(line: 9, column: 9, scope: !39)
- !43 = !DILocalVariable(name: "left", scope: !44, file: !1, line: 10, type: !15)
- !44 = distinct !DILexicalBlock(scope: !45, file: !1, line: 9, column: 18)
- !45 = distinct !DILexicalBlock(scope: !46, file: !1, line: 9, column: 9)
- !46 = distinct !DILexicalBlock(scope: !39, file: !1, line: 9, column: 9)
- !47 = !DILocation(line: 10, column: 20, scope: !44)
- !48 = !DILocation(line: 10, column: 27, scope: !44)
- !49 = !DILocation(line: 10, column: 32, scope: !44)
- !50 = !DILocation(line: 10, column: 36, scope: !44)
- !51 = !DILocation(line: 11, column: 17, scope: !52)
- !52 = distinct !DILexicalBlock(scope: !44, file: !1, line: 11, column: 17)
- !53 = !DILocation(line: 11, column: 25, scope: !52)
- !54 = !DILocation(line: 11, column: 22, scope: !52)
- !55 = !DILocation(line: 11, column: 17, scope: !44)
- !56 = !DILocation(line: 11, column: 28, scope: !52)
- !57 = !DILocalVariable(name: "right", scope: !44, file: !1, line: 12, type: !15)
- !58 = !DILocation(line: 12, column: 20, scope: !44)
- !59 = !DILocation(line: 12, column: 28, scope: !44)
- !60 = !DILocation(line: 12, column: 33, scope: !44)
- !61 = !DILocalVariable(name: "swap_idx", scope: !44, file: !1, line: 13, type: !15)
- !62 = !DILocation(line: 13, column: 20, scope: !44)
- !63 = !DILocation(line: 13, column: 32, scope: !44)
- !64 = !DILocation(line: 13, column: 40, scope: !44)
- !65 = !DILocation(line: 13, column: 38, scope: !44)
- !66 = !DILocation(line: 13, column: 42, scope: !44)
- !67 = !DILocation(line: 13, column: 45, scope: !44)
- !68 = !DILocation(line: 13, column: 47, scope: !44)
- !69 = !DILocation(line: 13, column: 56, scope: !44)
- !70 = !DILocation(line: 13, column: 58, scope: !44)
- !71 = !DILocation(line: 13, column: 54, scope: !44)
- !72 = !DILocation(line: 13, column: 31, scope: !44)
- !73 = !DILocation(line: 13, column: 67, scope: !44)
- !74 = !DILocation(line: 13, column: 75, scope: !44)
- !75 = !DILocation(line: 14, column: 17, scope: !76)
- !76 = distinct !DILexicalBlock(scope: !44, file: !1, line: 14, column: 17)
- !77 = !DILocation(line: 14, column: 19, scope: !76)
- !78 = !DILocation(line: 14, column: 28, scope: !76)
- !79 = !DILocation(line: 14, column: 30, scope: !76)
- !80 = !DILocation(line: 14, column: 25, scope: !76)
- !81 = !DILocation(line: 14, column: 17, scope: !44)
- !82 = !DILocation(line: 14, column: 41, scope: !76)
- !83 = !DILocalVariable(name: "t", scope: !44, file: !1, line: 15, type: !14)
- !84 = !DILocation(line: 15, column: 17, scope: !44)
- !85 = !DILocation(line: 15, column: 21, scope: !44)
- !86 = !DILocation(line: 15, column: 23, scope: !44)
- !87 = !DILocation(line: 15, column: 40, scope: !44)
- !88 = !DILocation(line: 15, column: 42, scope: !44)
- !89 = !DILocation(line: 15, column: 30, scope: !44)
- !90 = !DILocation(line: 15, column: 32, scope: !44)
- !91 = !DILocation(line: 15, column: 38, scope: !44)
- !92 = !DILocation(line: 15, column: 67, scope: !44)
- !93 = !DILocation(line: 15, column: 53, scope: !44)
- !94 = !DILocation(line: 15, column: 55, scope: !44)
- !95 = !DILocation(line: 15, column: 65, scope: !44)
- !96 = !DILocation(line: 16, column: 20, scope: !44)
- !97 = !DILocation(line: 16, column: 18, scope: !44)
- !98 = !DILocation(line: 9, column: 9, scope: !45)
- !99 = distinct !{!99, !100, !101}
- !100 = !DILocation(line: 9, column: 9, scope: !46)
- !101 = !DILocation(line: 17, column: 9, scope: !46)
- !102 = !DILocation(line: 7, column: 5, scope: !35)
- !103 = distinct !{!103, !37, !104, !105}
- !104 = !DILocation(line: 18, column: 5, scope: !29)
- !105 = !{!"llvm.loop.mustprogress"}
- !106 = !DILocalVariable(name: "end", scope: !107, file: !1, line: 20, type: !15)
- !107 = distinct !DILexicalBlock(scope: !10, file: !1, line: 20, column: 5)
- !108 = !DILocation(line: 20, column: 17, scope: !107)
- !109 = !DILocation(line: 20, column: 23, scope: !107)
- !110 = !DILocation(line: 20, column: 25, scope: !107)
- !111 = !DILocation(line: 20, column: 10, scope: !107)
- !112 = !DILocation(line: 20, column: 30, scope: !113)
- !113 = distinct !DILexicalBlock(scope: !107, file: !1, line: 20, column: 5)
- !114 = !DILocation(line: 20, column: 34, scope: !113)
- !115 = !DILocation(line: 20, column: 5, scope: !107)
- !116 = !DILocalVariable(name: "t", scope: !117, file: !1, line: 21, type: !14)
- !117 = distinct !DILexicalBlock(scope: !113, file: !1, line: 20, column: 46)
- !118 = !DILocation(line: 21, column: 13, scope: !117)
- !119 = !DILocation(line: 21, column: 17, scope: !117)
- !120 = !DILocation(line: 21, column: 30, scope: !117)
- !121 = !DILocation(line: 21, column: 32, scope: !117)
- !122 = !DILocation(line: 21, column: 23, scope: !117)
- !123 = !DILocation(line: 21, column: 28, scope: !117)
- !124 = !DILocation(line: 21, column: 47, scope: !117)
- !125 = !DILocation(line: 21, column: 38, scope: !117)
- !126 = !DILocation(line: 21, column: 40, scope: !117)
- !127 = !DILocation(line: 21, column: 45, scope: !117)
- !128 = !DILocalVariable(name: "root", scope: !117, file: !1, line: 22, type: !15)
- !129 = !DILocation(line: 22, column: 16, scope: !117)
- !130 = !DILocation(line: 23, column: 9, scope: !117)
- !131 = !DILocalVariable(name: "left", scope: !132, file: !1, line: 24, type: !15)
- !132 = distinct !DILexicalBlock(scope: !133, file: !1, line: 23, column: 18)
- !133 = distinct !DILexicalBlock(scope: !134, file: !1, line: 23, column: 9)
- !134 = distinct !DILexicalBlock(scope: !117, file: !1, line: 23, column: 9)
- !135 = !DILocation(line: 24, column: 20, scope: !132)
- !136 = !DILocation(line: 24, column: 27, scope: !132)
- !137 = !DILocation(line: 24, column: 32, scope: !132)
- !138 = !DILocation(line: 24, column: 36, scope: !132)
- !139 = !DILocation(line: 25, column: 17, scope: !140)
- !140 = distinct !DILexicalBlock(scope: !132, file: !1, line: 25, column: 17)
- !141 = !DILocation(line: 25, column: 25, scope: !140)
- !142 = !DILocation(line: 25, column: 22, scope: !140)
- !143 = !DILocation(line: 25, column: 17, scope: !132)
- !144 = !DILocation(line: 25, column: 30, scope: !140)
- !145 = !DILocalVariable(name: "right", scope: !132, file: !1, line: 26, type: !15)
- !146 = !DILocation(line: 26, column: 20, scope: !132)
- !147 = !DILocation(line: 26, column: 28, scope: !132)
- !148 = !DILocation(line: 26, column: 33, scope: !132)
- !149 = !DILocalVariable(name: "swap_idx", scope: !132, file: !1, line: 27, type: !15)
- !150 = !DILocation(line: 27, column: 20, scope: !132)
- !151 = !DILocation(line: 27, column: 32, scope: !132)
- !152 = !DILocation(line: 27, column: 40, scope: !132)
- !153 = !DILocation(line: 27, column: 38, scope: !132)
- !154 = !DILocation(line: 27, column: 44, scope: !132)
- !155 = !DILocation(line: 27, column: 47, scope: !132)
- !156 = !DILocation(line: 27, column: 49, scope: !132)
- !157 = !DILocation(line: 27, column: 58, scope: !132)
- !158 = !DILocation(line: 27, column: 60, scope: !132)
- !159 = !DILocation(line: 27, column: 56, scope: !132)
- !160 = !DILocation(line: 27, column: 31, scope: !132)
- !161 = !DILocation(line: 27, column: 69, scope: !132)
- !162 = !DILocation(line: 27, column: 77, scope: !132)
- !163 = !DILocation(line: 28, column: 17, scope: !164)
- !164 = distinct !DILexicalBlock(scope: !132, file: !1, line: 28, column: 17)
- !165 = !DILocation(line: 28, column: 19, scope: !164)
- !166 = !DILocation(line: 28, column: 28, scope: !164)
- !167 = !DILocation(line: 28, column: 30, scope: !164)
- !168 = !DILocation(line: 28, column: 25, scope: !164)
- !169 = !DILocation(line: 28, column: 17, scope: !132)
- !170 = !DILocation(line: 28, column: 41, scope: !164)
- !171 = !DILocalVariable(name: "tt", scope: !132, file: !1, line: 29, type: !14)
- !172 = !DILocation(line: 29, column: 17, scope: !132)
- !173 = !DILocation(line: 29, column: 22, scope: !132)
- !174 = !DILocation(line: 29, column: 24, scope: !132)
- !175 = !DILocation(line: 29, column: 41, scope: !132)
- !176 = !DILocation(line: 29, column: 43, scope: !132)
- !177 = !DILocation(line: 29, column: 31, scope: !132)
- !178 = !DILocation(line: 29, column: 33, scope: !132)
- !179 = !DILocation(line: 29, column: 39, scope: !132)
- !180 = !DILocation(line: 29, column: 68, scope: !132)
- !181 = !DILocation(line: 29, column: 54, scope: !132)
- !182 = !DILocation(line: 29, column: 56, scope: !132)
- !183 = !DILocation(line: 29, column: 66, scope: !132)
- !184 = !DILocation(line: 30, column: 20, scope: !132)
- !185 = !DILocation(line: 30, column: 18, scope: !132)
- !186 = !DILocation(line: 23, column: 9, scope: !133)
- !187 = distinct !{!187, !188, !189}
- !188 = !DILocation(line: 23, column: 9, scope: !134)
- !189 = !DILocation(line: 31, column: 9, scope: !134)
- !190 = !DILocation(line: 32, column: 5, scope: !117)
- !191 = !DILocation(line: 20, column: 39, scope: !113)
- !192 = !DILocation(line: 20, column: 5, scope: !113)
- !193 = distinct !{!193, !115, !194, !105}
- !194 = !DILocation(line: 32, column: 5, scope: !107)
- !195 = !DILocation(line: 33, column: 1, scope: !10)
- !196 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 35, type: !197, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !197 = !DISubroutineType(types: !198)
- !198 = !{!14}
- !199 = !DILocalVariable(name: "arr", scope: !196, file: !1, line: 36, type: !200)
- !200 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 288, elements: !201)
- !201 = !{!202}
- !202 = !DISubrange(count: 9)
- !203 = !DILocation(line: 36, column: 9, scope: !196)
- !204 = !DILocalVariable(name: "n", scope: !196, file: !1, line: 37, type: !15)
- !205 = !DILocation(line: 37, column: 12, scope: !196)
- !206 = !DILocation(line: 39, column: 5, scope: !196)
- !207 = !DILocalVariable(name: "i", scope: !208, file: !1, line: 40, type: !15)
- !208 = distinct !DILexicalBlock(scope: !196, file: !1, line: 40, column: 5)
- !209 = !DILocation(line: 40, column: 17, scope: !208)
- !210 = !DILocation(line: 40, column: 10, scope: !208)
- !211 = !DILocation(line: 40, column: 24, scope: !212)
- !212 = distinct !DILexicalBlock(scope: !208, file: !1, line: 40, column: 5)
- !213 = !DILocation(line: 40, column: 28, scope: !212)
- !214 = !DILocation(line: 40, column: 26, scope: !212)
- !215 = !DILocation(line: 40, column: 5, scope: !208)
- !216 = !DILocation(line: 40, column: 54, scope: !212)
- !217 = !DILocation(line: 40, column: 50, scope: !212)
- !218 = !DILocation(line: 40, column: 36, scope: !212)
- !219 = !DILocation(line: 40, column: 32, scope: !212)
- !220 = !DILocation(line: 40, column: 5, scope: !212)
- !221 = distinct !{!221, !215, !222, !105}
- !222 = !DILocation(line: 40, column: 56, scope: !208)
- !223 = !DILocation(line: 41, column: 5, scope: !196)
- !224 = !DILocation(line: 43, column: 15, scope: !196)
- !225 = !DILocation(line: 43, column: 20, scope: !196)
- !226 = !DILocation(line: 43, column: 5, scope: !196)
- !227 = !DILocation(line: 45, column: 5, scope: !196)
- !228 = !DILocalVariable(name: "i", scope: !229, file: !1, line: 46, type: !15)
- !229 = distinct !DILexicalBlock(scope: !196, file: !1, line: 46, column: 5)
- !230 = !DILocation(line: 46, column: 17, scope: !229)
- !231 = !DILocation(line: 46, column: 10, scope: !229)
- !232 = !DILocation(line: 46, column: 24, scope: !233)
- !233 = distinct !DILexicalBlock(scope: !229, file: !1, line: 46, column: 5)
- !234 = !DILocation(line: 46, column: 28, scope: !233)
- !235 = !DILocation(line: 46, column: 26, scope: !233)
- !236 = !DILocation(line: 46, column: 5, scope: !229)
- !237 = !DILocation(line: 46, column: 54, scope: !233)
- !238 = !DILocation(line: 46, column: 50, scope: !233)
- !239 = !DILocation(line: 46, column: 36, scope: !233)
- !240 = !DILocation(line: 46, column: 32, scope: !233)
- !241 = !DILocation(line: 46, column: 5, scope: !233)
- !242 = distinct !{!242, !236, !243, !105}
- !243 = !DILocation(line: 46, column: 56, scope: !229)
- !244 = !DILocation(line: 47, column: 5, scope: !196)
- !245 = !DILocation(line: 49, column: 5, scope: !196)
