- ; ModuleID = 'heapsort_ida.bc'
?                       ----
+ ; ModuleID = 'heapsort.bc'
- source_filename = "heapsort_ida.c"
+ source_filename = "llvm-link"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- @.str = private unnamed_addr constant [20 x i8] c"&format, argv, envp\00", align 1
+ @.fmt_before = private unnamed_addr constant [8 x i8] c"Before:\00"
+ @.fmt_after = private unnamed_addr constant [7 x i8] c"After:\00"
- @.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
?   ^ ^^^                                                   ---------
+ @.fmt_d = private unnamed_addr constant [4 x i8] c"%d \00"
?   ^^ ^^
- @.str.2 = private unnamed_addr constant [12 x i8] c"byte_2011: \00", align 1
  
+ define dso_local i32 @main() {
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local void @heap_sort(i32* noundef %a1, i64 noundef %a2) #0 !dbg !10 {
  entry:
-   %a1.addr = alloca i32*, align 8
-   %a2.addr = alloca i64, align 8
-   %v2 = alloca i64, align 8
-   %v4 = alloca i64, align 8
-   %v5 = alloca i32, align 4
?    ^^                     ^
+   %arr = alloca [9 x i32], align 16
?    ^^^          +++++   +        ^^
+   %p0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
+   store i32 7, i32* %p0, align 4
+   %p1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 1
+   store i32 3, i32* %p1, align 4
+   %p2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 2
+   store i32 9, i32* %p2, align 4
+   %p3 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 3
+   store i32 1, i32* %p3, align 4
+   %p4 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 4
+   store i32 4, i32* %p4, align 4
+   %p5 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 5
+   store i32 8, i32* %p5, align 4
+   %p6 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 6
+   store i32 2, i32* %p6, align 4
+   %p7 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 7
+   store i32 6, i32* %p7, align 4
+   %p8 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 8
+   store i32 5, i32* %p8, align 4
+   %fmt_before_ptr = getelementptr inbounds [8 x i8], [8 x i8]* @.fmt_before, i64 0, i64 0
+   %call_banner1 = call i32 (i8*, ...) @printf(i8* noundef %fmt_before_ptr)
+   br label %loop1.cond
-   %v6 = alloca i32, align 4
-   %v7 = alloca i32, align 4
-   %v8 = alloca i64, align 8
-   %i = alloca i64, align 8
-   %j = alloca i64, align 8
-   %k = alloca i64, align 8
-   store i32* %a1, i32** %a1.addr, align 8
-   call void @llvm.dbg.declare(metadata i32** %a1.addr, metadata !19, metadata !DIExpression()), !dbg !20
-   store i64 %a2, i64* %a2.addr, align 8
-   call void @llvm.dbg.declare(metadata i64* %a2.addr, metadata !21, metadata !DIExpression()), !dbg !22
-   call void @llvm.dbg.declare(metadata i64* %v2, metadata !23, metadata !DIExpression()), !dbg !24
-   call void @llvm.dbg.declare(metadata i64* %v4, metadata !25, metadata !DIExpression()), !dbg !26
-   call void @llvm.dbg.declare(metadata i32* %v5, metadata !27, metadata !DIExpression()), !dbg !28
-   call void @llvm.dbg.declare(metadata i32* %v6, metadata !29, metadata !DIExpression()), !dbg !30
-   call void @llvm.dbg.declare(metadata i32* %v7, metadata !31, metadata !DIExpression()), !dbg !32
-   call void @llvm.dbg.declare(metadata i64* %v8, metadata !33, metadata !DIExpression()), !dbg !34
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !35, metadata !DIExpression()), !dbg !36
-   call void @llvm.dbg.declare(metadata i64* %j, metadata !37, metadata !DIExpression()), !dbg !38
-   call void @llvm.dbg.declare(metadata i64* %k, metadata !39, metadata !DIExpression()), !dbg !40
-   %0 = load i64, i64* %a2.addr, align 8, !dbg !41
-   %cmp = icmp ugt i64 %0, 1, !dbg !43
-   br i1 %cmp, label %if.then, label %if.end66, !dbg !44
  
- if.then:                                          ; preds = %entry
? ^^ ^^^                                         ---
+ loop1.cond:                                       ; preds = %loop1.latch, %entry
? ^^^^^ ^^ +                                                 ++++++++++++++
+   %i = phi i64 [ 0, %entry ], [ %i.next, %loop1.latch ]
-   %1 = load i64, i64* %a2.addr, align 8, !dbg !45
-   %shr = lshr i64 %1, 1, !dbg !47
-   store i64 %shr, i64* %v8, align 8, !dbg !48
-   br label %while.cond, !dbg !49
- 
- while.cond:                                       ; preds = %for.end, %if.then
-   %2 = load i64, i64* %v8, align 8, !dbg !50
-   %dec = add i64 %2, -1, !dbg !50
-   store i64 %dec, i64* %v8, align 8, !dbg !50
-   %tobool = icmp ne i64 %2, 0, !dbg !49
-   br i1 %tobool, label %while.body, label %while.end, !dbg !49
- 
- while.body:                                       ; preds = %while.cond
-   %3 = load i64, i64* %v8, align 8, !dbg !51
-   store i64 %3, i64* %i, align 8, !dbg !54
-   br label %for.cond, !dbg !55
- 
- for.cond:                                         ; preds = %for.inc, %while.body
-   %4 = load i64, i64* %i, align 8, !dbg !56
-   %mul = mul i64 2, %4, !dbg !58
-   %add = add i64 %mul, 1, !dbg !59
-   %5 = load i64, i64* %a2.addr, align 8, !dbg !60
-   %cmp1 = icmp ult i64 %add, %5, !dbg !61
?                         ^^^  ^^^^^^^^^^^^
+   %cmp1 = icmp ult i64 %i, 9
?                         ^  ^
-   br i1 %cmp1, label %for.body, label %for.end, !dbg !62
?                       ^ ^              ^ ^    ----------
+   br i1 %cmp1, label %loop1.body, label %loop1.end
?                       ^ ^^^              ^ ^^^
  
- for.body:                                         ; preds = %for.cond
? ^ ^                                             --           ^ ^
+ loop1.body:                                       ; preds = %loop1.cond
? ^ ^^^                                                        ^ ^^^
+   %elem.ptr1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %i
+   %elem1 = load i32, i32* %elem.ptr1, align 4
+   %fmt_d_ptr1 = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
+   %call_print1 = call i32 (i8*, ...) @printf(i8* noundef %fmt_d_ptr1, i32 noundef %elem1)
+   br label %loop1.latch
-   %6 = load i64, i64* %i, align 8, !dbg !63
-   %mul2 = mul i64 2, %6, !dbg !65
-   %add3 = add i64 %mul2, 2, !dbg !66
-   %7 = load i64, i64* %a2.addr, align 8, !dbg !67
-   %cmp4 = icmp uge i64 %add3, %7, !dbg !68
-   br i1 %cmp4, label %cond.true, label %lor.lhs.false, !dbg !69
  
- lor.lhs.false:                                    ; preds = %for.body
?   ^   -------                                                ^ ^
+ loop1.latch:                                      ; preds = %loop1.body
?   ^^^  +++                                      ++           ^ ^^^
+   %i.next = add i64 %i, 1
+   br label %loop1.cond
-   %8 = load i32*, i32** %a1.addr, align 8, !dbg !70
-   %9 = load i64, i64* %i, align 8, !dbg !71
-   %mul5 = mul i64 2, %9, !dbg !72
-   %add6 = add i64 %mul5, 2, !dbg !73
-   %arrayidx = getelementptr inbounds i32, i32* %8, i64 %add6, !dbg !70
-   %10 = load i32, i32* %arrayidx, align 4, !dbg !70
-   %11 = load i32*, i32** %a1.addr, align 8, !dbg !74
-   %12 = load i64, i64* %i, align 8, !dbg !75
-   %mul7 = mul i64 2, %12, !dbg !76
-   %add8 = add i64 %mul7, 1, !dbg !77
-   %arrayidx9 = getelementptr inbounds i32, i32* %11, i64 %add8, !dbg !74
-   %13 = load i32, i32* %arrayidx9, align 4, !dbg !74
-   %cmp10 = icmp sle i32 %10, %13, !dbg !78
-   br i1 %cmp10, label %cond.true, label %cond.false, !dbg !79
  
- cond.true:                                        ; preds = %lor.lhs.false, %for.body
-   %14 = load i64, i64* %i, align 8, !dbg !80
-   %mul11 = mul i64 2, %14, !dbg !81
-   %add12 = add i64 %mul11, 1, !dbg !82
-   br label %cond.end, !dbg !79
- 
- cond.false:                                       ; preds = %lor.lhs.false
-   %15 = load i64, i64* %i, align 8, !dbg !83
-   %mul13 = mul i64 2, %15, !dbg !84
-   %add14 = add i64 %mul13, 2, !dbg !85
-   br label %cond.end, !dbg !79
- 
- cond.end:                                         ; preds = %cond.false, %cond.true
-   %cond = phi i64 [ %add12, %cond.true ], [ %add14, %cond.false ], !dbg !79
-   store i64 %cond, i64* %v2, align 8, !dbg !86
-   %16 = load i32*, i32** %a1.addr, align 8, !dbg !87
-   %17 = load i64, i64* %i, align 8, !dbg !89
-   %arrayidx15 = getelementptr inbounds i32, i32* %16, i64 %17, !dbg !87
-   %18 = load i32, i32* %arrayidx15, align 4, !dbg !87
-   %19 = load i32*, i32** %a1.addr, align 8, !dbg !90
-   %20 = load i64, i64* %v2, align 8, !dbg !91
-   %arrayidx16 = getelementptr inbounds i32, i32* %19, i64 %20, !dbg !90
-   %21 = load i32, i32* %arrayidx16, align 4, !dbg !90
-   %cmp17 = icmp sge i32 %18, %21, !dbg !92
-   br i1 %cmp17, label %if.then18, label %if.end, !dbg !93
- 
- if.then18:                                        ; preds = %cond.end
-   br label %for.end, !dbg !94
- 
- if.end:                                           ; preds = %cond.end
-   %22 = load i32*, i32** %a1.addr, align 8, !dbg !95
-   %23 = load i64, i64* %i, align 8, !dbg !96
-   %arrayidx19 = getelementptr inbounds i32, i32* %22, i64 %23, !dbg !95
-   %24 = load i32, i32* %arrayidx19, align 4, !dbg !95
-   store i32 %24, i32* %v7, align 4, !dbg !97
-   %25 = load i32*, i32** %a1.addr, align 8, !dbg !98
-   %26 = load i64, i64* %v2, align 8, !dbg !99
-   %arrayidx20 = getelementptr inbounds i32, i32* %25, i64 %26, !dbg !98
-   %27 = load i32, i32* %arrayidx20, align 4, !dbg !98
-   %28 = load i32*, i32** %a1.addr, align 8, !dbg !100
-   %29 = load i64, i64* %i, align 8, !dbg !101
-   %arrayidx21 = getelementptr inbounds i32, i32* %28, i64 %29, !dbg !100
-   store i32 %27, i32* %arrayidx21, align 4, !dbg !102
-   %30 = load i32, i32* %v7, align 4, !dbg !103
-   %31 = load i32*, i32** %a1.addr, align 8, !dbg !104
-   %32 = load i64, i64* %v2, align 8, !dbg !105
-   %arrayidx22 = getelementptr inbounds i32, i32* %31, i64 %32, !dbg !104
-   store i32 %30, i32* %arrayidx22, align 4, !dbg !106
-   br label %for.inc, !dbg !107
- 
- for.inc:                                          ; preds = %if.end
-   %33 = load i64, i64* %v2, align 8, !dbg !108
-   store i64 %33, i64* %i, align 8, !dbg !109
-   br label %for.cond, !dbg !110, !llvm.loop !111
- 
- for.end:                                          ; preds = %if.then18, %for.cond
-   br label %while.cond, !dbg !49, !llvm.loop !114
- 
- while.end:                                        ; preds = %while.cond
? --- ^                                                        --- ^
+ loop1.end:                                        ; preds = %loop1.cond
?  ^^^^                                                         ^^^^
-   %34 = load i64, i64* %a2.addr, align 8, !dbg !116
-   %sub = sub i64 %34, 1, !dbg !118
-   store i64 %sub, i64* %j, align 8, !dbg !119
-   br label %for.cond23, !dbg !120
+   %nl1 = call i32 @putchar(i32 noundef 10)
+   %arr.base = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
+   call void @heap_sort(i32* noundef %arr.base, i64 noundef 9)
+   %fmt_after_ptr = getelementptr inbounds [7 x i8], [7 x i8]* @.fmt_after, i64 0, i64 0
+   %call_banner2 = call i32 (i8*, ...) @printf(i8* noundef %fmt_after_ptr)
+   br label %loop2.cond
  
- for.cond23:                                       ; preds = %for.inc63, %while.end
? ^ ^     --                                                   ^ ^ ^^ ^^   --- ^
+ loop2.cond:                                       ; preds = %loop2.latch, %loop1.end
? ^ ^^^                                                        ^ ^^^ ^^^ ^    ^^^^
-   %35 = load i64, i64* %j, align 8, !dbg !121
-   %tobool24 = icmp ne i64 %35, 0, !dbg !123
-   br i1 %tobool24, label %for.body25, label %for.end65, !dbg !123
+   %j = phi i64 [ 0, %loop1.end ], [ %j.next, %loop2.latch ]
+   %cmp2 = icmp ult i64 %j, 9
+   br i1 %cmp2, label %loop2.body, label %loop2.end
  
- for.body25:                                       ; preds = %for.cond23
? ^ ^     --                                                   ^ ^     --
+ loop2.body:                                       ; preds = %loop2.cond
? ^ ^^^                                                        ^ ^^^
+   %elem.ptr2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %j
+   %elem2 = load i32, i32* %elem.ptr2, align 4
+   %fmt_d_ptr2 = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
+   %call_print2 = call i32 (i8*, ...) @printf(i8* noundef %fmt_d_ptr2, i32 noundef %elem2)
+   br label %loop2.latch
-   %36 = load i32*, i32** %a1.addr, align 8, !dbg !124
-   %37 = load i32, i32* %36, align 4, !dbg !126
-   store i32 %37, i32* %v5, align 4, !dbg !127
-   %38 = load i32*, i32** %a1.addr, align 8, !dbg !128
-   %39 = load i64, i64* %j, align 8, !dbg !129
-   %arrayidx26 = getelementptr inbounds i32, i32* %38, i64 %39, !dbg !128
-   %40 = load i32, i32* %arrayidx26, align 4, !dbg !128
-   %41 = load i32*, i32** %a1.addr, align 8, !dbg !130
-   store i32 %40, i32* %41, align 4, !dbg !131
-   %42 = load i32, i32* %v5, align 4, !dbg !132
-   %43 = load i32*, i32** %a1.addr, align 8, !dbg !133
-   %44 = load i64, i64* %j, align 8, !dbg !134
-   %arrayidx27 = getelementptr inbounds i32, i32* %43, i64 %44, !dbg !133
-   store i32 %42, i32* %arrayidx27, align 4, !dbg !135
-   store i64 0, i64* %k, align 8, !dbg !136
-   br label %for.cond28, !dbg !138
  
- for.cond28:                                       ; preds = %for.inc61, %for.body25
-   %45 = load i64, i64* %k, align 8, !dbg !139
-   %mul29 = mul i64 2, %45, !dbg !141
-   %add30 = add i64 %mul29, 1, !dbg !142
-   %46 = load i64, i64* %j, align 8, !dbg !143
-   %cmp31 = icmp ult i64 %add30, %46, !dbg !144
-   br i1 %cmp31, label %for.body32, label %for.end62, !dbg !145
- 
- for.body32:                                       ; preds = %for.cond28
-   %47 = load i64, i64* %k, align 8, !dbg !146
-   %mul33 = mul i64 2, %47, !dbg !148
-   %add34 = add i64 %mul33, 2, !dbg !149
-   %48 = load i64, i64* %j, align 8, !dbg !150
-   %cmp35 = icmp uge i64 %add34, %48, !dbg !151
-   br i1 %cmp35, label %cond.true44, label %lor.lhs.false36, !dbg !152
- 
- lor.lhs.false36:                                  ; preds = %for.body32
?   ^   ---------                                              ^ ^     --
+ loop2.latch:                                      ; preds = %loop2.body
?   ^^^  +++                                    ++++           ^ ^^^
+   %j.next = add i64 %j, 1
+   br label %loop2.cond
-   %49 = load i32*, i32** %a1.addr, align 8, !dbg !153
-   %50 = load i64, i64* %k, align 8, !dbg !154
-   %mul37 = mul i64 2, %50, !dbg !155
-   %add38 = add i64 %mul37, 2, !dbg !156
-   %arrayidx39 = getelementptr inbounds i32, i32* %49, i64 %add38, !dbg !153
-   %51 = load i32, i32* %arrayidx39, align 4, !dbg !153
-   %52 = load i32*, i32** %a1.addr, align 8, !dbg !157
-   %53 = load i64, i64* %k, align 8, !dbg !158
-   %mul40 = mul i64 2, %53, !dbg !159
-   %add41 = add i64 %mul40, 1, !dbg !160
-   %arrayidx42 = getelementptr inbounds i32, i32* %52, i64 %add41, !dbg !157
-   %54 = load i32, i32* %arrayidx42, align 4, !dbg !157
-   %cmp43 = icmp sle i32 %51, %54, !dbg !161
-   br i1 %cmp43, label %cond.true44, label %cond.false47, !dbg !162
  
- cond.true44:                                      ; preds = %lor.lhs.false36, %for.body32
-   %55 = load i64, i64* %k, align 8, !dbg !163
-   %mul45 = mul i64 2, %55, !dbg !164
-   %add46 = add i64 %mul45, 1, !dbg !165
-   br label %cond.end50, !dbg !162
- 
- cond.false47:                                     ; preds = %lor.lhs.false36
-   %56 = load i64, i64* %k, align 8, !dbg !166
-   %mul48 = mul i64 2, %56, !dbg !167
-   %add49 = add i64 %mul48, 2, !dbg !168
-   br label %cond.end50, !dbg !162
- 
- cond.end50:                                       ; preds = %cond.false47, %cond.true44
-   %cond51 = phi i64 [ %add46, %cond.true44 ], [ %add49, %cond.false47 ], !dbg !162
-   store i64 %cond51, i64* %v4, align 8, !dbg !169
-   %57 = load i32*, i32** %a1.addr, align 8, !dbg !170
-   %58 = load i64, i64* %k, align 8, !dbg !172
-   %arrayidx52 = getelementptr inbounds i32, i32* %57, i64 %58, !dbg !170
-   %59 = load i32, i32* %arrayidx52, align 4, !dbg !170
-   %60 = load i32*, i32** %a1.addr, align 8, !dbg !173
-   %61 = load i64, i64* %v4, align 8, !dbg !174
-   %arrayidx53 = getelementptr inbounds i32, i32* %60, i64 %61, !dbg !173
-   %62 = load i32, i32* %arrayidx53, align 4, !dbg !173
-   %cmp54 = icmp sge i32 %59, %62, !dbg !175
-   br i1 %cmp54, label %if.then55, label %if.end56, !dbg !176
- 
- if.then55:                                        ; preds = %cond.end50
-   br label %for.end62, !dbg !177
- 
- if.end56:                                         ; preds = %cond.end50
-   %63 = load i32*, i32** %a1.addr, align 8, !dbg !178
-   %64 = load i64, i64* %k, align 8, !dbg !179
-   %arrayidx57 = getelementptr inbounds i32, i32* %63, i64 %64, !dbg !178
-   %65 = load i32, i32* %arrayidx57, align 4, !dbg !178
-   store i32 %65, i32* %v6, align 4, !dbg !180
-   %66 = load i32*, i32** %a1.addr, align 8, !dbg !181
-   %67 = load i64, i64* %v4, align 8, !dbg !182
-   %arrayidx58 = getelementptr inbounds i32, i32* %66, i64 %67, !dbg !181
-   %68 = load i32, i32* %arrayidx58, align 4, !dbg !181
-   %69 = load i32*, i32** %a1.addr, align 8, !dbg !183
-   %70 = load i64, i64* %k, align 8, !dbg !184
-   %arrayidx59 = getelementptr inbounds i32, i32* %69, i64 %70, !dbg !183
-   store i32 %68, i32* %arrayidx59, align 4, !dbg !185
-   %71 = load i32, i32* %v6, align 4, !dbg !186
-   %72 = load i32*, i32** %a1.addr, align 8, !dbg !187
-   %73 = load i64, i64* %v4, align 8, !dbg !188
-   %arrayidx60 = getelementptr inbounds i32, i32* %72, i64 %73, !dbg !187
-   store i32 %71, i32* %arrayidx60, align 4, !dbg !189
-   br label %for.inc61, !dbg !190
- 
- for.inc61:                                        ; preds = %if.end56
-   %74 = load i64, i64* %v4, align 8, !dbg !191
-   store i64 %74, i64* %k, align 8, !dbg !192
-   br label %for.cond28, !dbg !193, !llvm.loop !194
- 
- for.end62:                                        ; preds = %if.then55, %for.cond28
-   br label %for.inc63, !dbg !196
- 
- for.inc63:                                        ; preds = %for.end62
-   %75 = load i64, i64* %j, align 8, !dbg !197
-   %dec64 = add i64 %75, -1, !dbg !197
-   store i64 %dec64, i64* %j, align 8, !dbg !197
-   br label %for.cond23, !dbg !198, !llvm.loop !199
- 
- for.end65:                                        ; preds = %for.cond23
? ^ ^    --                                                    ^ ^     --
+ loop2.end:                                        ; preds = %loop2.cond
? ^ ^^^                                                        ^ ^^^
+   %nl2 = call i32 @putchar(i32 noundef 10)
+   ret i32 0
-   br label %if.end66, !dbg !201
- 
- if.end66:                                         ; preds = %for.end65, %entry
-   ret void, !dbg !202
  }
  
+ declare i32 @printf(i8*, ...)
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
  
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main(i32 noundef %argc, i8** noundef %argv, i8** noundef %envp) #0 !dbg !203 {
+ declare i32 @putchar(i32)
+ 
+ define dso_local void @heap_sort(i32* noundef %arr, i64 noundef %n) {
  entry:
+   %cmp0 = icmp ule i64 %n, 1
+   br i1 %cmp0, label %exit, label %build.init
-   %retval = alloca i32, align 4
-   %argc.addr = alloca i32, align 4
-   %argv.addr = alloca i8**, align 8
-   %envp.addr = alloca i8**, align 8
-   %i = alloca i64, align 8
-   %j = alloca i64, align 8
-   %v6 = alloca [10 x i32], align 16
-   %v7 = alloca i64, align 8
-   store i32 0, i32* %retval, align 4
-   store i32 %argc, i32* %argc.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !210, metadata !DIExpression()), !dbg !211
-   store i8** %argv, i8*** %argv.addr, align 8
-   call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !212, metadata !DIExpression()), !dbg !213
-   store i8** %envp, i8*** %envp.addr, align 8
-   call void @llvm.dbg.declare(metadata i8*** %envp.addr, metadata !214, metadata !DIExpression()), !dbg !215
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !216, metadata !DIExpression()), !dbg !217
-   call void @llvm.dbg.declare(metadata i64* %j, metadata !218, metadata !DIExpression()), !dbg !219
-   call void @llvm.dbg.declare(metadata [10 x i32]* %v6, metadata !220, metadata !DIExpression()), !dbg !224
-   call void @llvm.dbg.declare(metadata i64* %v7, metadata !225, metadata !DIExpression()), !dbg !226
-   %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 0, !dbg !227
-   store i32 7, i32* %arrayidx, align 16, !dbg !228
-   %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 1, !dbg !229
-   store i32 3, i32* %arrayidx1, align 4, !dbg !230
-   %arrayidx2 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 2, !dbg !231
-   store i32 9, i32* %arrayidx2, align 8, !dbg !232
-   %arrayidx3 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 3, !dbg !233
-   store i32 1, i32* %arrayidx3, align 4, !dbg !234
-   %arrayidx4 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 4, !dbg !235
-   store i32 4, i32* %arrayidx4, align 16, !dbg !236
-   %arrayidx5 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 5, !dbg !237
-   store i32 8, i32* %arrayidx5, align 4, !dbg !238
-   %arrayidx6 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 6, !dbg !239
-   store i32 2, i32* %arrayidx6, align 8, !dbg !240
-   %arrayidx7 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 7, !dbg !241
-   store i32 6, i32* %arrayidx7, align 4, !dbg !242
-   %arrayidx8 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 8, !dbg !243
-   store i32 5, i32* %arrayidx8, align 16, !dbg !244
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)), !dbg !245
-   store i64 0, i64* %i, align 8, !dbg !246
-   br label %for.cond, !dbg !248
  
- for.cond:                                         ; preds = %for.inc, %entry
? ^^^ ^^ ^                                        --         ----------
+ build.init:                                       ; preds = %entry
? ^^^^^ ^ ^^
+   %half0 = lshr i64 %n, 1
+   br label %build.top
-   %0 = load i64, i64* %i, align 8, !dbg !249
-   %cmp = icmp ult i64 %0, 9, !dbg !251
-   br i1 %cmp, label %for.body, label %for.end, !dbg !252
  
+ build.top:                                        ; preds = %build.end, %build.init
+   %i_old1 = phi i64 [ %half0, %build.init ], [ %i_dec_next6, %build.end ]
+   %cond2 = icmp ne i64 %i_old1, 0
+   br i1 %cond2, label %build.body, label %sort.init
+ 
+ build.body:                                       ; preds = %build.top
+   %i_dec3 = add i64 %i_old1, -1
+   br label %sift1.head
+ 
+ sift1.head:                                       ; preds = %sift1.swap, %build.body
+   %k4 = phi i64 [ %i_dec3, %build.body ], [ %k_next18, %sift1.swap ]
+   %k2mul5 = add i64 %k4, %k4
+   %left6 = add i64 %k2mul5, 1
+   %left_ge_n7 = icmp uge i64 %left6, %n
+   br i1 %left_ge_n7, label %sift1.break, label %sift1.hasleft
+ 
+ sift1.hasleft:                                    ; preds = %sift1.head
+   %right8 = add i64 %left6, 1
+   %right_in_range9 = icmp ult i64 %right8, %n
+   %left_ptr10 = getelementptr inbounds i32, i32* %arr, i64 %left6
+   %left_val11 = load i32, i32* %left_ptr10, align 4
+   br i1 %right_in_range9, label %s1.cmp.right, label %s1.choose.left
+ 
+ s1.cmp.right:                                     ; preds = %sift1.hasleft
+   %right_ptr12 = getelementptr inbounds i32, i32* %arr, i64 %right8
+   %right_val13 = load i32, i32* %right_ptr12, align 4
+   %gt14 = icmp sgt i32 %right_val13, %left_val11
+   br i1 %gt14, label %s1.choose.right, label %s1.choose.left
+ 
+ s1.choose.right:                                  ; preds = %s1.cmp.right
+   br label %s1.m.chosen
+ 
+ s1.choose.left:                                   ; preds = %s1.cmp.right, %sift1.hasleft
+   br label %s1.m.chosen
+ 
+ s1.m.chosen:                                      ; preds = %s1.choose.left, %s1.choose.right
+   %m_idx15 = phi i64 [ %right8, %s1.choose.right ], [ %left6, %s1.choose.left ]
+   %k_ptr16 = getelementptr inbounds i32, i32* %arr, i64 %k4
+   %k_val17 = load i32, i32* %k_ptr16, align 4
+   %m_ptr18 = getelementptr inbounds i32, i32* %arr, i64 %m_idx15
+   %m_val19 = load i32, i32* %m_ptr18, align 4
+   %ge20 = icmp sge i32 %k_val17, %m_val19
+   br i1 %ge20, label %sift1.break, label %sift1.swap
+ 
+ sift1.swap:                                       ; preds = %s1.m.chosen
+   store i32 %m_val19, i32* %k_ptr16, align 4
+   store i32 %k_val17, i32* %m_ptr18, align 4
+   %k_next18 = add i64 %m_idx15, 0
+   br label %sift1.head
+ 
+ sift1.break:                                      ; preds = %s1.m.chosen, %sift1.head
+   br label %build.end
+ 
+ build.end:                                        ; preds = %sift1.break
+   %i_dec_next6 = add i64 %i_dec3, 0
+   br label %build.top
+ 
+ sort.init:                                        ; preds = %build.top
+   %end_init21 = add i64 %n, -1
+   br label %sort.loop.cond
+ 
+ sort.loop.cond:                                   ; preds = %after_sift2, %sort.init
+   %end_cur22 = phi i64 [ %end_init21, %sort.init ], [ %end_next37, %after_sift2 ]
+   %nz23 = icmp ne i64 %end_cur22, 0
+   br i1 %nz23, label %sort.body, label %exit
+ 
- for.body:                                         ; preds = %for.cond
? ^                                                -           ^
+ sort.body:                                        ; preds = %sort.loop.cond
? ^  +                                                         ^  ++++++
-   %1 = load i64, i64* %i, align 8, !dbg !253
-   %arrayidx9 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 %1, !dbg !254
-   %2 = load i32, i32* %arrayidx9, align 4, !dbg !254
-   %call10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %2), !dbg !255
-   br label %for.inc, !dbg !255
+   %root_ptr24 = getelementptr inbounds i32, i32* %arr, i64 0
+   %root_val25 = load i32, i32* %root_ptr24, align 4
+   %end_ptr26 = getelementptr inbounds i32, i32* %arr, i64 %end_cur22
+   %end_val27 = load i32, i32* %end_ptr26, align 4
+   store i32 %end_val27, i32* %root_ptr24, align 4
+   store i32 %root_val25, i32* %end_ptr26, align 4
+   br label %sift2.head
  
- for.inc:                                          ; preds = %for.body
?  ^^ ^^^                                        ---
+ sift2.head:                                       ; preds = %sift2.swap, %sort.body
? ++ ^^ ^^^^                                                   ++ +++++++++++  +
-   %3 = load i64, i64* %i, align 8, !dbg !256
-   %inc = add i64 %3, 1, !dbg !256
-   store i64 %inc, i64* %i, align 8, !dbg !256
-   br label %for.cond, !dbg !257, !llvm.loop !258
+   %k2_28 = phi i64 [ 0, %sort.body ], [ %k2_next36, %sift2.swap ]
+   %twok29 = add i64 %k2_28, %k2_28
+   %left2_30 = add i64 %twok29, 1
+   %left_ge_end31 = icmp uge i64 %left2_30, %end_cur22
+   br i1 %left_ge_end31, label %after_sift2, label %sift2.hasleft
  
+ sift2.hasleft:                                    ; preds = %sift2.head
+   %right2_32 = add i64 %left2_30, 1
+   %right_in_range2_33 = icmp ult i64 %right2_32, %end_cur22
+   %left_ptr2_34 = getelementptr inbounds i32, i32* %arr, i64 %left2_30
+   %left_val2_35 = load i32, i32* %left_ptr2_34, align 4
+   br i1 %right_in_range2_33, label %s2.cmp.right, label %s2.choose.left
+ 
+ s2.cmp.right:                                     ; preds = %sift2.hasleft
+   %right_ptr2_36 = getelementptr inbounds i32, i32* %arr, i64 %right2_32
+   %right_val2_37 = load i32, i32* %right_ptr2_36, align 4
+   %gt2_38 = icmp sgt i32 %right_val2_37, %left_val2_35
+   br i1 %gt2_38, label %s2.choose.right, label %s2.choose.left
+ 
+ s2.choose.right:                                  ; preds = %s2.cmp.right
+   br label %s2.m.chosen
+ 
+ s2.choose.left:                                   ; preds = %s2.cmp.right, %sift2.hasleft
+   br label %s2.m.chosen
+ 
+ s2.m.chosen:                                      ; preds = %s2.choose.left, %s2.choose.right
+   %m2_idx39 = phi i64 [ %right2_32, %s2.choose.right ], [ %left2_30, %s2.choose.left ]
+   %k2_ptr40 = getelementptr inbounds i32, i32* %arr, i64 %k2_28
+   %k2_val41 = load i32, i32* %k2_ptr40, align 4
+   %m2_ptr42 = getelementptr inbounds i32, i32* %arr, i64 %m2_idx39
+   %m2_val43 = load i32, i32* %m2_ptr42, align 4
+   %ge2_44 = icmp sge i32 %k2_val41, %m2_val43
+   br i1 %ge2_44, label %after_sift2, label %sift2.swap
+ 
+ sift2.swap:                                       ; preds = %s2.m.chosen
+   store i32 %m2_val43, i32* %k2_ptr40, align 4
+   store i32 %k2_val41, i32* %m2_ptr42, align 4
+   %k2_next36 = add i64 %m2_idx39, 0
+   br label %sift2.head
+ 
+ after_sift2:                                      ; preds = %s2.m.chosen, %sift2.head
+   %end_next37 = add i64 %end_cur22, -1
+   br label %sort.loop.cond
+ 
- for.end:                                          ; preds = %for.cond
? ---- ^^                                                      ^
+ exit:                                             ; preds = %sort.loop.cond, %entry
?  ^^^                                           +++           ^  ++++++     ++++++++
+   ret void
-   %call11 = call i32 @putchar(i32 noundef 10), !dbg !260
-   %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 0, !dbg !261
-   call void @heap_sort(i32* noundef %arraydecay, i64 noundef 9), !dbg !262
-   %call12 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)), !dbg !263
-   store i64 0, i64* %j, align 8, !dbg !264
-   br label %for.cond13, !dbg !266
- 
- for.cond13:                                       ; preds = %for.inc18, %for.end
-   %4 = load i64, i64* %j, align 8, !dbg !267
-   %cmp14 = icmp ult i64 %4, 9, !dbg !269
-   br i1 %cmp14, label %for.body15, label %for.end20, !dbg !270
- 
- for.body15:                                       ; preds = %for.cond13
-   %5 = load i64, i64* %j, align 8, !dbg !271
-   %arrayidx16 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 %5, !dbg !272
-   %6 = load i32, i32* %arrayidx16, align 4, !dbg !272
-   %call17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6), !dbg !273
-   br label %for.inc18, !dbg !273
- 
- for.inc18:                                        ; preds = %for.body15
-   %7 = load i64, i64* %j, align 8, !dbg !274
-   %inc19 = add i64 %7, 1, !dbg !274
-   store i64 %inc19, i64* %j, align 8, !dbg !274
-   br label %for.cond13, !dbg !275, !llvm.loop !276
- 
- for.end20:                                        ; preds = %for.cond13
-   %call21 = call i32 @putchar(i32 noundef 10), !dbg !278
-   ret i32 0, !dbg !279
  }
- 
- declare i32 @printf(i8* noundef, ...) #2
- 
- declare i32 @putchar(i32 noundef) #2
- 
- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "heapsort_ida.c", directory: "/mnt/c/Users/EMSEC/DeGPT/testcase", checksumkind: CSK_MD5, checksum: "9eea4e24d9cfa66aab537653195747e2")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.6"}
- !10 = distinct !DISubprogram(name: "heap_sort", scope: !1, file: !1, line: 4, type: !11, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !11 = !DISubroutineType(types: !12)
- !12 = !{null, !13, !15}
- !13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
- !14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !15 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !16, line: 46, baseType: !17)
- !16 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.6/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !17 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !18 = !{}
- !19 = !DILocalVariable(name: "a1", arg: 1, scope: !10, file: !1, line: 4, type: !13)
- !20 = !DILocation(line: 4, column: 21, scope: !10)
- !21 = !DILocalVariable(name: "a2", arg: 2, scope: !10, file: !1, line: 4, type: !15)
- !22 = !DILocation(line: 4, column: 33, scope: !10)
- !23 = !DILocalVariable(name: "v2", scope: !10, file: !1, line: 6, type: !15)
- !24 = !DILocation(line: 6, column: 11, scope: !10)
- !25 = !DILocalVariable(name: "v4", scope: !10, file: !1, line: 7, type: !15)
- !26 = !DILocation(line: 7, column: 11, scope: !10)
- !27 = !DILocalVariable(name: "v5", scope: !10, file: !1, line: 8, type: !14)
- !28 = !DILocation(line: 8, column: 7, scope: !10)
- !29 = !DILocalVariable(name: "v6", scope: !10, file: !1, line: 9, type: !14)
- !30 = !DILocation(line: 9, column: 7, scope: !10)
- !31 = !DILocalVariable(name: "v7", scope: !10, file: !1, line: 10, type: !14)
- !32 = !DILocation(line: 10, column: 7, scope: !10)
- !33 = !DILocalVariable(name: "v8", scope: !10, file: !1, line: 11, type: !15)
- !34 = !DILocation(line: 11, column: 11, scope: !10)
- !35 = !DILocalVariable(name: "i", scope: !10, file: !1, line: 12, type: !15)
- !36 = !DILocation(line: 12, column: 11, scope: !10)
- !37 = !DILocalVariable(name: "j", scope: !10, file: !1, line: 13, type: !15)
- !38 = !DILocation(line: 13, column: 11, scope: !10)
- !39 = !DILocalVariable(name: "k", scope: !10, file: !1, line: 14, type: !15)
- !40 = !DILocation(line: 14, column: 11, scope: !10)
- !41 = !DILocation(line: 16, column: 8, scope: !42)
- !42 = distinct !DILexicalBlock(scope: !10, file: !1, line: 16, column: 8)
- !43 = !DILocation(line: 16, column: 11, scope: !42)
- !44 = !DILocation(line: 16, column: 8, scope: !10)
- !45 = !DILocation(line: 18, column: 10, scope: !46)
- !46 = distinct !DILexicalBlock(scope: !42, file: !1, line: 17, column: 3)
- !47 = !DILocation(line: 18, column: 13, scope: !46)
- !48 = !DILocation(line: 18, column: 8, scope: !46)
- !49 = !DILocation(line: 19, column: 5, scope: !46)
- !50 = !DILocation(line: 19, column: 15, scope: !46)
- !51 = !DILocation(line: 21, column: 17, scope: !52)
- !52 = distinct !DILexicalBlock(scope: !53, file: !1, line: 21, column: 7)
- !53 = distinct !DILexicalBlock(scope: !46, file: !1, line: 20, column: 5)
- !54 = !DILocation(line: 21, column: 15, scope: !52)
- !55 = !DILocation(line: 21, column: 13, scope: !52)
- !56 = !DILocation(line: 21, column: 25, scope: !57)
- !57 = distinct !DILexicalBlock(scope: !52, file: !1, line: 21, column: 7)
- !58 = !DILocation(line: 21, column: 23, scope: !57)
- !59 = !DILocation(line: 21, column: 27, scope: !57)
- !60 = !DILocation(line: 21, column: 33, scope: !57)
- !61 = !DILocation(line: 21, column: 31, scope: !57)
- !62 = !DILocation(line: 21, column: 7, scope: !52)
- !63 = !DILocation(line: 23, column: 18, scope: !64)
- !64 = distinct !DILexicalBlock(scope: !57, file: !1, line: 22, column: 7)
- !65 = !DILocation(line: 23, column: 16, scope: !64)
- !66 = !DILocation(line: 23, column: 20, scope: !64)
- !67 = !DILocation(line: 23, column: 27, scope: !64)
- !68 = !DILocation(line: 23, column: 24, scope: !64)
- !69 = !DILocation(line: 23, column: 30, scope: !64)
- !70 = !DILocation(line: 23, column: 33, scope: !64)
- !71 = !DILocation(line: 23, column: 40, scope: !64)
- !72 = !DILocation(line: 23, column: 38, scope: !64)
- !73 = !DILocation(line: 23, column: 42, scope: !64)
- !74 = !DILocation(line: 23, column: 50, scope: !64)
- !75 = !DILocation(line: 23, column: 57, scope: !64)
- !76 = !DILocation(line: 23, column: 55, scope: !64)
- !77 = !DILocation(line: 23, column: 59, scope: !64)
- !78 = !DILocation(line: 23, column: 47, scope: !64)
- !79 = !DILocation(line: 23, column: 14, scope: !64)
- !80 = !DILocation(line: 23, column: 70, scope: !64)
- !81 = !DILocation(line: 23, column: 68, scope: !64)
- !82 = !DILocation(line: 23, column: 72, scope: !64)
- !83 = !DILocation(line: 23, column: 82, scope: !64)
- !84 = !DILocation(line: 23, column: 80, scope: !64)
- !85 = !DILocation(line: 23, column: 84, scope: !64)
- !86 = !DILocation(line: 23, column: 12, scope: !64)
- !87 = !DILocation(line: 24, column: 14, scope: !88)
- !88 = distinct !DILexicalBlock(scope: !64, file: !1, line: 24, column: 14)
- !89 = !DILocation(line: 24, column: 17, scope: !88)
- !90 = !DILocation(line: 24, column: 23, scope: !88)
- !91 = !DILocation(line: 24, column: 26, scope: !88)
- !92 = !DILocation(line: 24, column: 20, scope: !88)
- !93 = !DILocation(line: 24, column: 14, scope: !64)
- !94 = !DILocation(line: 25, column: 11, scope: !88)
- !95 = !DILocation(line: 26, column: 14, scope: !64)
- !96 = !DILocation(line: 26, column: 17, scope: !64)
- !97 = !DILocation(line: 26, column: 12, scope: !64)
- !98 = !DILocation(line: 27, column: 17, scope: !64)
- !99 = !DILocation(line: 27, column: 20, scope: !64)
- !100 = !DILocation(line: 27, column: 9, scope: !64)
- !101 = !DILocation(line: 27, column: 12, scope: !64)
- !102 = !DILocation(line: 27, column: 15, scope: !64)
- !103 = !DILocation(line: 28, column: 18, scope: !64)
- !104 = !DILocation(line: 28, column: 9, scope: !64)
- !105 = !DILocation(line: 28, column: 12, scope: !64)
- !106 = !DILocation(line: 28, column: 16, scope: !64)
- !107 = !DILocation(line: 29, column: 7, scope: !64)
- !108 = !DILocation(line: 21, column: 41, scope: !57)
- !109 = !DILocation(line: 21, column: 39, scope: !57)
- !110 = !DILocation(line: 21, column: 7, scope: !57)
- !111 = distinct !{!111, !62, !112, !113}
- !112 = !DILocation(line: 29, column: 7, scope: !52)
- !113 = !{!"llvm.loop.mustprogress"}
- !114 = distinct !{!114, !49, !115, !113}
- !115 = !DILocation(line: 30, column: 5, scope: !46)
- !116 = !DILocation(line: 31, column: 15, scope: !117)
- !117 = distinct !DILexicalBlock(scope: !46, file: !1, line: 31, column: 5)
- !118 = !DILocation(line: 31, column: 18, scope: !117)
- !119 = !DILocation(line: 31, column: 13, scope: !117)
- !120 = !DILocation(line: 31, column: 11, scope: !117)
- !121 = !DILocation(line: 31, column: 23, scope: !122)
- !122 = distinct !DILexicalBlock(scope: !117, file: !1, line: 31, column: 5)
- !123 = !DILocation(line: 31, column: 5, scope: !117)
- !124 = !DILocation(line: 33, column: 13, scope: !125)
- !125 = distinct !DILexicalBlock(scope: !122, file: !1, line: 32, column: 5)
- !126 = !DILocation(line: 33, column: 12, scope: !125)
- !127 = !DILocation(line: 33, column: 10, scope: !125)
- !128 = !DILocation(line: 34, column: 13, scope: !125)
- !129 = !DILocation(line: 34, column: 16, scope: !125)
- !130 = !DILocation(line: 34, column: 8, scope: !125)
- !131 = !DILocation(line: 34, column: 11, scope: !125)
- !132 = !DILocation(line: 35, column: 15, scope: !125)
- !133 = !DILocation(line: 35, column: 7, scope: !125)
- !134 = !DILocation(line: 35, column: 10, scope: !125)
- !135 = !DILocation(line: 35, column: 13, scope: !125)
- !136 = !DILocation(line: 36, column: 15, scope: !137)
- !137 = distinct !DILexicalBlock(scope: !125, file: !1, line: 36, column: 7)
- !138 = !DILocation(line: 36, column: 13, scope: !137)
- !139 = !DILocation(line: 36, column: 24, scope: !140)
- !140 = distinct !DILexicalBlock(scope: !137, file: !1, line: 36, column: 7)
- !141 = !DILocation(line: 36, column: 22, scope: !140)
- !142 = !DILocation(line: 36, column: 26, scope: !140)
- !143 = !DILocation(line: 36, column: 32, scope: !140)
- !144 = !DILocation(line: 36, column: 30, scope: !140)
- !145 = !DILocation(line: 36, column: 7, scope: !137)
- !146 = !DILocation(line: 38, column: 18, scope: !147)
- !147 = distinct !DILexicalBlock(scope: !140, file: !1, line: 37, column: 7)
- !148 = !DILocation(line: 38, column: 16, scope: !147)
- !149 = !DILocation(line: 38, column: 20, scope: !147)
- !150 = !DILocation(line: 38, column: 27, scope: !147)
- !151 = !DILocation(line: 38, column: 24, scope: !147)
- !152 = !DILocation(line: 38, column: 29, scope: !147)
- !153 = !DILocation(line: 38, column: 32, scope: !147)
- !154 = !DILocation(line: 38, column: 39, scope: !147)
- !155 = !DILocation(line: 38, column: 37, scope: !147)
- !156 = !DILocation(line: 38, column: 41, scope: !147)
- !157 = !DILocation(line: 38, column: 49, scope: !147)
- !158 = !DILocation(line: 38, column: 56, scope: !147)
- !159 = !DILocation(line: 38, column: 54, scope: !147)
- !160 = !DILocation(line: 38, column: 58, scope: !147)
- !161 = !DILocation(line: 38, column: 46, scope: !147)
- !162 = !DILocation(line: 38, column: 14, scope: !147)
- !163 = !DILocation(line: 38, column: 69, scope: !147)
- !164 = !DILocation(line: 38, column: 67, scope: !147)
- !165 = !DILocation(line: 38, column: 71, scope: !147)
- !166 = !DILocation(line: 38, column: 81, scope: !147)
- !167 = !DILocation(line: 38, column: 79, scope: !147)
- !168 = !DILocation(line: 38, column: 83, scope: !147)
- !169 = !DILocation(line: 38, column: 12, scope: !147)
- !170 = !DILocation(line: 39, column: 14, scope: !171)
- !171 = distinct !DILexicalBlock(scope: !147, file: !1, line: 39, column: 14)
- !172 = !DILocation(line: 39, column: 17, scope: !171)
- !173 = !DILocation(line: 39, column: 23, scope: !171)
- !174 = !DILocation(line: 39, column: 26, scope: !171)
- !175 = !DILocation(line: 39, column: 20, scope: !171)
- !176 = !DILocation(line: 39, column: 14, scope: !147)
- !177 = !DILocation(line: 40, column: 11, scope: !171)
- !178 = !DILocation(line: 41, column: 14, scope: !147)
- !179 = !DILocation(line: 41, column: 17, scope: !147)
- !180 = !DILocation(line: 41, column: 12, scope: !147)
- !181 = !DILocation(line: 42, column: 17, scope: !147)
- !182 = !DILocation(line: 42, column: 20, scope: !147)
- !183 = !DILocation(line: 42, column: 9, scope: !147)
- !184 = !DILocation(line: 42, column: 12, scope: !147)
- !185 = !DILocation(line: 42, column: 15, scope: !147)
- !186 = !DILocation(line: 43, column: 18, scope: !147)
- !187 = !DILocation(line: 43, column: 9, scope: !147)
- !188 = !DILocation(line: 43, column: 12, scope: !147)
- !189 = !DILocation(line: 43, column: 16, scope: !147)
- !190 = !DILocation(line: 44, column: 7, scope: !147)
- !191 = !DILocation(line: 36, column: 39, scope: !140)
- !192 = !DILocation(line: 36, column: 37, scope: !140)
- !193 = !DILocation(line: 36, column: 7, scope: !140)
- !194 = distinct !{!194, !145, !195, !113}
- !195 = !DILocation(line: 44, column: 7, scope: !137)
- !196 = !DILocation(line: 45, column: 5, scope: !125)
- !197 = !DILocation(line: 31, column: 26, scope: !122)
- !198 = !DILocation(line: 31, column: 5, scope: !122)
- !199 = distinct !{!199, !123, !200, !113}
- !200 = !DILocation(line: 45, column: 5, scope: !117)
- !201 = !DILocation(line: 46, column: 3, scope: !46)
- !202 = !DILocation(line: 47, column: 1, scope: !10)
- !203 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 49, type: !204, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !204 = !DISubroutineType(types: !205)
- !205 = !{!14, !14, !206, !206}
- !206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !207, size: 64)
- !207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !208, size: 64)
- !208 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !209)
- !209 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
- !210 = !DILocalVariable(name: "argc", arg: 1, scope: !203, file: !1, line: 49, type: !14)
- !211 = !DILocation(line: 49, column: 14, scope: !203)
- !212 = !DILocalVariable(name: "argv", arg: 2, scope: !203, file: !1, line: 49, type: !206)
- !213 = !DILocation(line: 49, column: 33, scope: !203)
- !214 = !DILocalVariable(name: "envp", arg: 3, scope: !203, file: !1, line: 49, type: !206)
- !215 = !DILocation(line: 49, column: 52, scope: !203)
- !216 = !DILocalVariable(name: "i", scope: !203, file: !1, line: 51, type: !15)
- !217 = !DILocation(line: 51, column: 11, scope: !203)
- !218 = !DILocalVariable(name: "j", scope: !203, file: !1, line: 52, type: !15)
- !219 = !DILocation(line: 52, column: 11, scope: !203)
- !220 = !DILocalVariable(name: "v6", scope: !203, file: !1, line: 53, type: !221)
- !221 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 320, elements: !222)
- !222 = !{!223}
- !223 = !DISubrange(count: 10)
- !224 = !DILocation(line: 53, column: 7, scope: !203)
- !225 = !DILocalVariable(name: "v7", scope: !203, file: !1, line: 54, type: !15)
- !226 = !DILocation(line: 54, column: 11, scope: !203)
- !227 = !DILocation(line: 57, column: 3, scope: !203)
- !228 = !DILocation(line: 57, column: 9, scope: !203)
- !229 = !DILocation(line: 58, column: 3, scope: !203)
- !230 = !DILocation(line: 58, column: 9, scope: !203)
- !231 = !DILocation(line: 59, column: 3, scope: !203)
- !232 = !DILocation(line: 59, column: 9, scope: !203)
- !233 = !DILocation(line: 60, column: 3, scope: !203)
- !234 = !DILocation(line: 60, column: 9, scope: !203)
- !235 = !DILocation(line: 61, column: 3, scope: !203)
- !236 = !DILocation(line: 61, column: 9, scope: !203)
- !237 = !DILocation(line: 62, column: 3, scope: !203)
- !238 = !DILocation(line: 62, column: 9, scope: !203)
- !239 = !DILocation(line: 63, column: 3, scope: !203)
- !240 = !DILocation(line: 63, column: 9, scope: !203)
- !241 = !DILocation(line: 64, column: 3, scope: !203)
- !242 = !DILocation(line: 64, column: 9, scope: !203)
- !243 = !DILocation(line: 65, column: 3, scope: !203)
- !244 = !DILocation(line: 65, column: 9, scope: !203)
- !245 = !DILocation(line: 66, column: 3, scope: !203)
- !246 = !DILocation(line: 67, column: 11, scope: !247)
- !247 = distinct !DILexicalBlock(scope: !203, file: !1, line: 67, column: 3)
- !248 = !DILocation(line: 67, column: 9, scope: !247)
- !249 = !DILocation(line: 67, column: 16, scope: !250)
- !250 = distinct !DILexicalBlock(scope: !247, file: !1, line: 67, column: 3)
- !251 = !DILocation(line: 67, column: 18, scope: !250)
- !252 = !DILocation(line: 67, column: 3, scope: !247)
- !253 = !DILocation(line: 68, column: 22, scope: !250)
- !254 = !DILocation(line: 68, column: 19, scope: !250)
- !255 = !DILocation(line: 68, column: 5, scope: !250)
- !256 = !DILocation(line: 67, column: 23, scope: !250)
- !257 = !DILocation(line: 67, column: 3, scope: !250)
- !258 = distinct !{!258, !252, !259, !113}
- !259 = !DILocation(line: 68, column: 24, scope: !247)
- !260 = !DILocation(line: 69, column: 3, scope: !203)
- !261 = !DILocation(line: 70, column: 13, scope: !203)
- !262 = !DILocation(line: 70, column: 3, scope: !203)
- !263 = !DILocation(line: 71, column: 3, scope: !203)
- !264 = !DILocation(line: 72, column: 11, scope: !265)
- !265 = distinct !DILexicalBlock(scope: !203, file: !1, line: 72, column: 3)
- !266 = !DILocation(line: 72, column: 9, scope: !265)
- !267 = !DILocation(line: 72, column: 16, scope: !268)
- !268 = distinct !DILexicalBlock(scope: !265, file: !1, line: 72, column: 3)
- !269 = !DILocation(line: 72, column: 18, scope: !268)
- !270 = !DILocation(line: 72, column: 3, scope: !265)
- !271 = !DILocation(line: 73, column: 22, scope: !268)
- !272 = !DILocation(line: 73, column: 19, scope: !268)
- !273 = !DILocation(line: 73, column: 5, scope: !268)
- !274 = !DILocation(line: 72, column: 23, scope: !268)
- !275 = !DILocation(line: 72, column: 3, scope: !268)
- !276 = distinct !{!276, !270, !277, !113}
- !277 = !DILocation(line: 73, column: 24, scope: !265)
- !278 = !DILocation(line: 74, column: 3, scope: !203)
- !279 = !DILocation(line: 75, column: 3, scope: !203)
