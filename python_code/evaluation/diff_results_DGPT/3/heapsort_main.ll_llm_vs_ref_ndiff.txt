+ ; ModuleID = 'main_module'
- ; ModuleID = 'heapsort.ll'
- source_filename = "heapsort_ida.c"
- target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
?                           ---------------------------------
+ target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
- @.str = external hidden unnamed_addr constant [20 x i8], align 1
- @.str.1 = external hidden unnamed_addr constant [4 x i8], align 1
- @.str.2 = external hidden unnamed_addr constant [12 x i8], align 1
+ @.fmt_before = private unnamed_addr constant [8 x i8] c"Before:\00"
+ @.fmt_after  = private unnamed_addr constant [7 x i8] c"After:\00"
+ @.fmt_d      = private unnamed_addr constant [4 x i8] c"%d \00"
  
- ; Function Attrs: noinline nounwind optnone uwtable
+ declare i32 @printf(i8*, ...)
+ declare i32 @putchar(i32)
- declare dso_local void @heap_sort(i32* noundef, i64 noundef) #0
?         ----------                                          ---
+ declare void @heap_sort(i32* noundef, i64 noundef)
  
- ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
- declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
+ define dso_local i32 @main() {
+ entry:
+   %arr = alloca [9 x i32], align 16
  
+   %p0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
- ; Function Attrs: noinline nounwind optnone uwtable
- define dso_local i32 @main(i32 noundef %argc, i8** noundef %argv, i8** noundef %envp) #0 !dbg !10 {
- entry:
-   %retval = alloca i32, align 4
-   %argc.addr = alloca i32, align 4
-   %argv.addr = alloca i8**, align 8
-   %envp.addr = alloca i8**, align 8
-   %i = alloca i64, align 8
-   %j = alloca i64, align 8
-   %v6 = alloca [10 x i32], align 16
-   %v7 = alloca i64, align 8
-   store i32 0, i32* %retval, align 4
?             ^        ^^^^^^
+   store i32 7, i32* %p0, align 4
?             ^        ^^
-   store i32 %argc, i32* %argc.addr, align 4
-   call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !19, metadata !DIExpression()), !dbg !20
-   store i8** %argv, i8*** %argv.addr, align 8
-   call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !21, metadata !DIExpression()), !dbg !22
-   store i8** %envp, i8*** %envp.addr, align 8
-   call void @llvm.dbg.declare(metadata i8*** %envp.addr, metadata !23, metadata !DIExpression()), !dbg !24
-   call void @llvm.dbg.declare(metadata i64* %i, metadata !25, metadata !DIExpression()), !dbg !29
-   call void @llvm.dbg.declare(metadata i64* %j, metadata !30, metadata !DIExpression()), !dbg !31
-   call void @llvm.dbg.declare(metadata [10 x i32]* %v6, metadata !32, metadata !DIExpression()), !dbg !36
-   call void @llvm.dbg.declare(metadata i64* %v7, metadata !37, metadata !DIExpression()), !dbg !38
-   %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 0, !dbg !39
-   store i32 7, i32* %arrayidx, align 16, !dbg !40
-   %arrayidx1 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 1, !dbg !41
?    ^^^^^^^^                            ^^          ^^          ^^             ----------
+   %p1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 1
?    ^                            ^          ^          ^^^
-   store i32 3, i32* %arrayidx1, align 4, !dbg !42
?                      ^^^^^^^^          ----------
+   store i32 3, i32* %p1, align 4
?                      ^
-   %arrayidx2 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 2, !dbg !43
?    ^^^^^^^^                            ^^          ^^          ^^              ----------
+   %p2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 2
?    ^                            ^          ^          ^^^
-   store i32 9, i32* %arrayidx2, align 8, !dbg !44
?                      ^^^^^^^^         ----------
+   store i32 9, i32* %p2, align 4
?                      ^
-   %arrayidx3 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 3, !dbg !45
?    ^^^^^^^^                            ^^          ^^          ^^              ----------
+   %p3 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 3
?    ^                            ^          ^          ^^^
-   store i32 1, i32* %arrayidx3, align 4, !dbg !46
?                      ^^^^^^^^          ----------
+   store i32 1, i32* %p3, align 4
?                      ^
-   %arrayidx4 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 4, !dbg !47
?    ^^^^^^^^                            ^^          ^^          ^^              ----------
+   %p4 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 4
?    ^                            ^          ^          ^^^
-   store i32 4, i32* %arrayidx4, align 16, !dbg !48
?                      ^^^^^^^^         ---------- -
+   store i32 4, i32* %p4, align 4
?                      ^
-   %arrayidx5 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 5, !dbg !49
?    ^^^^^^^^                            ^^          ^^          ^^              ----------
+   %p5 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 5
?    ^                            ^          ^          ^^^
-   store i32 8, i32* %arrayidx5, align 4, !dbg !50
?                      ^^^^^^^^          ----------
+   store i32 8, i32* %p5, align 4
?                      ^
-   %arrayidx6 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 6, !dbg !51
?    ^^^^^^^^                            ^^          ^^          ^^              ----------
+   %p6 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 6
?    ^                            ^          ^          ^^^
-   store i32 2, i32* %arrayidx6, align 8, !dbg !52
+   store i32 2, i32* %p6, align 4
-   %arrayidx7 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 7, !dbg !53
?    ^^^^^^^^                            ^^          ^^          ^^              ----------
+   %p7 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 7
?    ^                            ^          ^          ^^^
-   store i32 6, i32* %arrayidx7, align 4, !dbg !54
?                      ^^^^^^^^         ----------
+   store i32 6, i32* %p7, align 4
?                      ^
-   %arrayidx8 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 8, !dbg !55
?    ^^^^^^^^                            ^^          ^^          ^^              ----------
+   %p8 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 8
?    ^                            ^          ^          ^^^
+   store i32 5, i32* %p8, align 4
-   store i32 5, i32* %arrayidx8, align 16, !dbg !56
-   %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)), !dbg !57
-   store i64 0, i64* %i, align 8, !dbg !58
-   br label %for.cond, !dbg !60
  
+   %fmt_before_ptr = getelementptr inbounds [8 x i8], [8 x i8]* @.fmt_before, i64 0, i64 0
+   %call_banner1 = call i32 (i8*, ...) @printf(i8* noundef %fmt_before_ptr)
+   br label %loop1.cond
- for.cond:                                         ; preds = %for.inc, %entry
-   %0 = load i64, i64* %i, align 8, !dbg !61
-   %cmp = icmp ult i64 %0, 9, !dbg !63
-   br i1 %cmp, label %for.body, label %for.end, !dbg !64
  
+ loop1.cond:
+   %i = phi i64 [ 0, %entry ], [ %i.next, %loop1.latch ]
+   %cmp1 = icmp ult i64 %i, 9
+   br i1 %cmp1, label %loop1.body, label %loop1.end
- for.body:                                         ; preds = %for.cond
-   %1 = load i64, i64* %i, align 8, !dbg !65
-   %arrayidx9 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 %1, !dbg !66
-   %2 = load i32, i32* %arrayidx9, align 4, !dbg !66
-   %call10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %2), !dbg !67
-   br label %for.inc, !dbg !67
  
- for.inc:                                          ; preds = %for.body
-   %3 = load i64, i64* %i, align 8, !dbg !68
-   %inc = add i64 %3, 1, !dbg !68
-   store i64 %inc, i64* %i, align 8, !dbg !68
-   br label %for.cond, !dbg !69, !llvm.loop !70
+ loop1.body:
+   %elem.ptr1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %i
+   %elem1 = load i32, i32* %elem.ptr1, align 4
+   %fmt_d_ptr1 = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
+   %call_print1 = call i32 (i8*, ...) @printf(i8* noundef %fmt_d_ptr1, i32 noundef %elem1)
+   br label %loop1.latch
  
+ loop1.latch:
+   %i.next = add i64 %i, 1
+   br label %loop1.cond
- for.end:                                          ; preds = %for.cond
-   %call11 = call i32 @putchar(i32 noundef 10), !dbg !73
-   %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 0, !dbg !74
-   call void @heap_sort(i32* noundef %arraydecay, i64 noundef 9), !dbg !75
-   %call12 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)), !dbg !76
-   store i64 0, i64* %j, align 8, !dbg !77
-   br label %for.cond13, !dbg !79
  
+ loop1.end:
+   %nl1 = call i32 @putchar(i32 noundef 10)
- for.cond13:                                       ; preds = %for.inc18, %for.end
-   %4 = load i64, i64* %j, align 8, !dbg !80
-   %cmp14 = icmp ult i64 %4, 9, !dbg !82
-   br i1 %cmp14, label %for.body15, label %for.end20, !dbg !83
  
- for.body15:                                       ; preds = %for.cond13
-   %5 = load i64, i64* %j, align 8, !dbg !84
-   %arrayidx16 = getelementptr inbounds [10 x i32], [10 x i32]* %v6, i64 0, i64 %5, !dbg !85
?        ^^^^^^                           ^^          ^^          ^^             ^^^^^^^^^^^^
+   %arr.base = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
?       ++ ^^                           ^          ^          ^^^             ^
+   call void @heap_sort(i32* noundef %arr.base, i64 noundef 9)
-   %6 = load i32, i32* %arrayidx16, align 4, !dbg !85
-   %call17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %6), !dbg !86
-   br label %for.inc18, !dbg !86
  
+   %fmt_after_ptr = getelementptr inbounds [7 x i8], [7 x i8]* @.fmt_after, i64 0, i64 0
+   %call_banner2 = call i32 (i8*, ...) @printf(i8* noundef %fmt_after_ptr)
+   br label %loop2.cond
- for.inc18:                                        ; preds = %for.body15
-   %7 = load i64, i64* %j, align 8, !dbg !87
-   %inc19 = add i64 %7, 1, !dbg !87
-   store i64 %inc19, i64* %j, align 8, !dbg !87
-   br label %for.cond13, !dbg !88, !llvm.loop !89
  
- for.end20:                                        ; preds = %for.cond13
-   %call21 = call i32 @putchar(i32 noundef 10), !dbg !91
-   ret i32 0, !dbg !92
- }
+ loop2.cond:
+   %j = phi i64 [ 0, %loop1.end ], [ %j.next, %loop2.latch ]
+   %cmp2 = icmp ult i64 %j, 9
+   br i1 %cmp2, label %loop2.body, label %loop2.end
  
- declare i32 @printf(i8* noundef, ...) #2
+ loop2.body:
+   %elem.ptr2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %j
+   %elem2 = load i32, i32* %elem.ptr2, align 4
+   %fmt_d_ptr2 = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
+   %call_print2 = call i32 (i8*, ...) @printf(i8* noundef %fmt_d_ptr2, i32 noundef %elem2)
+   br label %loop2.latch
  
- declare i32 @putchar(i32 noundef) #2
+ loop2.latch:
+   %j.next = add i64 %j, 1
+   br label %loop2.cond
  
+ loop2.end:
+   %nl2 = call i32 @putchar(i32 noundef 10)
+   ret i32 0
+ }- attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
- attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
- 
- !llvm.dbg.cu = !{!0}
- !llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}
- !llvm.ident = !{!9}
- 
- !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
- !1 = !DIFile(filename: "heapsort_ida.c", directory: "/mnt/c/Users/EMSEC/DeGPT/testcase", checksumkind: CSK_MD5, checksum: "9eea4e24d9cfa66aab537653195747e2")
- !2 = !{i32 7, !"Dwarf Version", i32 5}
- !3 = !{i32 2, !"Debug Info Version", i32 3}
- !4 = !{i32 1, !"wchar_size", i32 4}
- !5 = !{i32 7, !"PIC Level", i32 2}
- !6 = !{i32 7, !"PIE Level", i32 2}
- !7 = !{i32 7, !"uwtable", i32 1}
- !8 = !{i32 7, !"frame-pointer", i32 2}
- !9 = !{!"Ubuntu clang version 14.0.6"}
- !10 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 49, type: !11, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
- !11 = !DISubroutineType(types: !12)
- !12 = !{!13, !13, !14, !14}
- !13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
- !14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
- !15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
- !16 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)
- !17 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
- !18 = !{}
- !19 = !DILocalVariable(name: "argc", arg: 1, scope: !10, file: !1, line: 49, type: !13)
- !20 = !DILocation(line: 49, column: 14, scope: !10)
- !21 = !DILocalVariable(name: "argv", arg: 2, scope: !10, file: !1, line: 49, type: !14)
- !22 = !DILocation(line: 49, column: 33, scope: !10)
- !23 = !DILocalVariable(name: "envp", arg: 3, scope: !10, file: !1, line: 49, type: !14)
- !24 = !DILocation(line: 49, column: 52, scope: !10)
- !25 = !DILocalVariable(name: "i", scope: !10, file: !1, line: 51, type: !26)
- !26 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !27, line: 46, baseType: !28)
- !27 = !DIFile(filename: "/usr/lib/llvm-14/lib/clang/14.0.6/include/stddef.h", directory: "", checksumkind: CSK_MD5, checksum: "2499dd2361b915724b073282bea3a7bc")
- !28 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
- !29 = !DILocation(line: 51, column: 11, scope: !10)
- !30 = !DILocalVariable(name: "j", scope: !10, file: !1, line: 52, type: !26)
- !31 = !DILocation(line: 52, column: 11, scope: !10)
- !32 = !DILocalVariable(name: "v6", scope: !10, file: !1, line: 53, type: !33)
- !33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 320, elements: !34)
- !34 = !{!35}
- !35 = !DISubrange(count: 10)
- !36 = !DILocation(line: 53, column: 7, scope: !10)
- !37 = !DILocalVariable(name: "v7", scope: !10, file: !1, line: 54, type: !26)
- !38 = !DILocation(line: 54, column: 11, scope: !10)
- !39 = !DILocation(line: 57, column: 3, scope: !10)
- !40 = !DILocation(line: 57, column: 9, scope: !10)
- !41 = !DILocation(line: 58, column: 3, scope: !10)
- !42 = !DILocation(line: 58, column: 9, scope: !10)
- !43 = !DILocation(line: 59, column: 3, scope: !10)
- !44 = !DILocation(line: 59, column: 9, scope: !10)
- !45 = !DILocation(line: 60, column: 3, scope: !10)
- !46 = !DILocation(line: 60, column: 9, scope: !10)
- !47 = !DILocation(line: 61, column: 3, scope: !10)
- !48 = !DILocation(line: 61, column: 9, scope: !10)
- !49 = !DILocation(line: 62, column: 3, scope: !10)
- !50 = !DILocation(line: 62, column: 9, scope: !10)
- !51 = !DILocation(line: 63, column: 3, scope: !10)
- !52 = !DILocation(line: 63, column: 9, scope: !10)
- !53 = !DILocation(line: 64, column: 3, scope: !10)
- !54 = !DILocation(line: 64, column: 9, scope: !10)
- !55 = !DILocation(line: 65, column: 3, scope: !10)
- !56 = !DILocation(line: 65, column: 9, scope: !10)
- !57 = !DILocation(line: 66, column: 3, scope: !10)
- !58 = !DILocation(line: 67, column: 11, scope: !59)
- !59 = distinct !DILexicalBlock(scope: !10, file: !1, line: 67, column: 3)
- !60 = !DILocation(line: 67, column: 9, scope: !59)
- !61 = !DILocation(line: 67, column: 16, scope: !62)
- !62 = distinct !DILexicalBlock(scope: !59, file: !1, line: 67, column: 3)
- !63 = !DILocation(line: 67, column: 18, scope: !62)
- !64 = !DILocation(line: 67, column: 3, scope: !59)
- !65 = !DILocation(line: 68, column: 22, scope: !62)
- !66 = !DILocation(line: 68, column: 19, scope: !62)
- !67 = !DILocation(line: 68, column: 5, scope: !62)
- !68 = !DILocation(line: 67, column: 23, scope: !62)
- !69 = !DILocation(line: 67, column: 3, scope: !62)
- !70 = distinct !{!70, !64, !71, !72}
- !71 = !DILocation(line: 68, column: 24, scope: !59)
- !72 = !{!"llvm.loop.mustprogress"}
- !73 = !DILocation(line: 69, column: 3, scope: !10)
- !74 = !DILocation(line: 70, column: 13, scope: !10)
- !75 = !DILocation(line: 70, column: 3, scope: !10)
- !76 = !DILocation(line: 71, column: 3, scope: !10)
- !77 = !DILocation(line: 72, column: 11, scope: !78)
- !78 = distinct !DILexicalBlock(scope: !10, file: !1, line: 72, column: 3)
- !79 = !DILocation(line: 72, column: 9, scope: !78)
- !80 = !DILocation(line: 72, column: 16, scope: !81)
- !81 = distinct !DILexicalBlock(scope: !78, file: !1, line: 72, column: 3)
- !82 = !DILocation(line: 72, column: 18, scope: !81)
- !83 = !DILocation(line: 72, column: 3, scope: !78)
- !84 = !DILocation(line: 73, column: 22, scope: !81)
- !85 = !DILocation(line: 73, column: 19, scope: !81)
- !86 = !DILocation(line: 73, column: 5, scope: !81)
- !87 = !DILocation(line: 72, column: 23, scope: !81)
- !88 = !DILocation(line: 72, column: 3, scope: !81)
- !89 = distinct !{!89, !83, !90, !72}
- !90 = !DILocation(line: 73, column: 24, scope: !78)
- !91 = !DILocation(line: 74, column: 3, scope: !10)
- !92 = !DILocation(line: 75, column: 3, scope: !10)
