LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 5F5F559E7022EA7AF8D696FEE0302993C6305445FE852995EDC1B4D7CE08F7EA
LOAD:0000000000000000 ; Input MD5    : 52C38B8B911AAD511CF17AC02EB941D1
LOAD:0000000000000000 ; Input CRC32  : 12B17B18
LOAD:0000000000000000 ; Compiler     : GNU C++
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\enc_linux_binary\dijkstra_enc
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'Scrt1.o'
LOAD:0000000000000000 ; Source File : 'dijkstra_enc.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure data
LOAD:0000000000000000 ; Segment permissions: Read
LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset _start        ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 37D0h                ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 318h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 318h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 4                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 730h                 ; Size in file image
LOAD:00000000000000D8                 dq 730h                 ; Size in memory image
LOAD:00000000000000E0                 dq 1000h                ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 5                    ; Flags
LOAD:00000000000000F0                 dq 1000h                ; File offset
LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
LOAD:0000000000000100                 dq 1000h                ; Physical address
LOAD:0000000000000108                 dq 619h                 ; Size in file image
LOAD:0000000000000110                 dq 619h                 ; Size in memory image
LOAD:0000000000000118                 dq 1000h                ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 1                    ; Type: LOAD
LOAD:0000000000000124                 dd 4                    ; Flags
LOAD:0000000000000128                 dq 2000h                ; File offset
LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
LOAD:0000000000000138                 dq 2000h                ; Physical address
LOAD:0000000000000140                 dq 174h                 ; Size in file image
LOAD:0000000000000148                 dq 174h                 ; Size in memory image
LOAD:0000000000000150                 dq 1000h                ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 1                    ; Type: LOAD
LOAD:000000000000015C                 dd 6                    ; Flags
LOAD:0000000000000160                 dq 2D98h                ; File offset
LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000170                 dq 3D98h                ; Physical address
LOAD:0000000000000178                 dq 278h                 ; Size in file image
LOAD:0000000000000180                 dq 298h                 ; Size in memory image
LOAD:0000000000000188                 dq 1000h                ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000194                 dd 6                    ; Flags
LOAD:0000000000000198                 dq 2DA8h                ; File offset
LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
LOAD:00000000000001A8                 dq 3DA8h                ; Physical address
LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
LOAD:00000000000001C0                 dq 8                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
LOAD:00000000000001CC                 dd 4                    ; Flags
LOAD:00000000000001D0                 dq 338h                 ; File offset
LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
LOAD:00000000000001E0                 dq 338h                 ; Physical address
LOAD:00000000000001E8                 dq 30h                  ; Size in file image
LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
LOAD:00000000000001F8                 dq 8                    ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 4                    ; Type: NOTE
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 368h                 ; File offset
LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
LOAD:0000000000000218                 dq 368h                 ; Physical address
LOAD:0000000000000220                 dq 44h                  ; Size in file image
LOAD:0000000000000228                 dq 44h                  ; Size in memory image
LOAD:0000000000000230                 dq 4                    ; Alignment
LOAD:0000000000000238 ; PHT Entry 9
LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
LOAD:000000000000023C                 dd 4                    ; Flags
LOAD:0000000000000240                 dq 338h                 ; File offset
LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
LOAD:0000000000000250                 dq 338h                 ; Physical address
LOAD:0000000000000258                 dq 30h                  ; Size in file image
LOAD:0000000000000260                 dq 30h                  ; Size in memory image
LOAD:0000000000000268                 dq 8                    ; Alignment
LOAD:0000000000000270 ; PHT Entry 10
LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000274                 dd 4                    ; Flags
LOAD:0000000000000278                 dq 2068h                ; File offset
LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:0000000000000288                 dq 2068h                ; Physical address
LOAD:0000000000000290                 dq 34h                  ; Size in file image
LOAD:0000000000000298                 dq 34h                  ; Size in memory image
LOAD:00000000000002A0                 dq 4                    ; Alignment
LOAD:00000000000002A8 ; PHT Entry 11
LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000002AC                 dd 6                    ; Flags
LOAD:00000000000002B0                 dq 0                    ; File offset
LOAD:00000000000002B8                 dq 0                    ; Virtual address
LOAD:00000000000002C0                 dq 0                    ; Physical address
LOAD:00000000000002C8                 dq 0                    ; Size in file image
LOAD:00000000000002D0                 dq 0                    ; Size in memory image
LOAD:00000000000002D8                 dq 10h                  ; Alignment
LOAD:00000000000002E0 ; PHT Entry 12
LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
LOAD:00000000000002E4                 dd 4                    ; Flags
LOAD:00000000000002E8                 dq 2D98h                ; File offset
LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:00000000000002F8                 dq 3D98h                ; Physical address
LOAD:0000000000000300                 dq 268h                 ; Size in file image
LOAD:0000000000000308                 dq 268h                 ; Size in memory image
LOAD:0000000000000310                 dq 1                    ; Alignment
LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000334                 align 8
LOAD:0000000000000338 ; ELF Note Entry
LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
LOAD:0000000000000338                                         ; Name Size
LOAD:000000000000033C                 dd 20h                  ; Desc Size
LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
LOAD:0000000000000368 ; ELF Note Entry
LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
LOAD:0000000000000368                                         ; Name Size
LOAD:000000000000036C                 dd 14h                  ; Desc Size
LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000378                 db 53h, 0A0h, 0C9h, 0ACh, 0F7h, 0D9h, 0Bh, 0BAh, 0DCh ; Desc
LOAD:0000000000000381                 db 0AFh, 0B5h, 11h, 0FEh, 0Ah, 0D8h, 0E7h, 0D7h, 82h, 85h
LOAD:000000000000038B                 db 0Dh
LOAD:000000000000038C ; ELF Note Entry
LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
LOAD:0000000000000390                 dd 10h                  ; Desc Size
LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:00000000000003AC                 align 10h
LOAD:00000000000003B0 ; ELF GNU Hash Table
LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
LOAD:00000000000003B4 elf_gnu_hash_symbias dd 0Ah
LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000003BC elf_gnu_hash_shift dd 6
LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
LOAD:00000000000003C8 elf_gnu_hash_bucket dd 0Ah, 0
LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
LOAD:00000000000003D8 ; ELF Symbol Table
LOAD:00000000000003D8                 Elf64_Sym <0>
LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4E0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000003F0                            0>
LOAD:0000000000000408                 Elf64_Sym <offset aPutchar - offset unk_4E0, 12h, 0, 0, \ ; "putchar"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aLibcStartMain - offset unk_4E0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000420                            offset dword_0, 0>
LOAD:0000000000000438                 Elf64_Sym <offset aItmDeregistert - offset unk_4E0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aStackChkFail - offset unk_4E0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000450                            offset dword_0, 0>
LOAD:0000000000000468                 Elf64_Sym <offset aPrintf - offset unk_4E0, 12h, 0, 0, offset dword_0,\ ; "printf"
LOAD:0000000000000468                            0>
LOAD:0000000000000480                 Elf64_Sym <offset aGmonStart - offset unk_4E0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000480                            offset dword_0, 0>
LOAD:0000000000000498                 Elf64_Sym <offset aMalloc - offset unk_4E0, 12h, 0, 0, offset dword_0,\ ; "malloc"
LOAD:0000000000000498                            0>
LOAD:00000000000004B0                 Elf64_Sym <offset aItmRegistertmc - offset unk_4E0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000004B0                            offset dword_0, 0>
LOAD:00000000000004C8                 Elf64_Sym <offset aCxaFinalize - offset unk_4E0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000004C8                            offset dword_0, 0>
LOAD:00000000000004E0 ; ELF String Table
LOAD:00000000000004E0 unk_4E0         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:00000000000004E0                                         ; LOAD:0000000000000408↑o ...
LOAD:00000000000004E1 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004C8↑o
LOAD:00000000000004F0 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000498↑o
LOAD:00000000000004F7 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000004F7                                         ; DATA XREF: LOAD:0000000000000420↑o
LOAD:0000000000000509 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:000000000000050E aPutchar        db 'putchar',0          ; DATA XREF: LOAD:0000000000000408↑o
LOAD:0000000000000516 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000450↑o
LOAD:0000000000000527 aPrintf         db 'printf',0           ; DATA XREF: LOAD:0000000000000468↑o
LOAD:000000000000052E aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005B8↓o
LOAD:0000000000000538 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000005C8↓o
LOAD:0000000000000542 aGlibc234       db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005D8↓o
LOAD:000000000000054D aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000005E8↓o
LOAD:0000000000000559 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000559                                         ; DATA XREF: LOAD:0000000000000438↑o
LOAD:0000000000000575 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000480↑o
LOAD:0000000000000584 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000584                                         ; DATA XREF: LOAD:00000000000004B0↑o
LOAD:000000000000059E ; ELF GNU Symbol Version Table
LOAD:000000000000059E                 dw 0
LOAD:00000000000005A0                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:00000000000005A2                 dw 2                    ; putchar@@GLIBC_2.2.5
LOAD:00000000000005A4                 dw 3                    ; __libc_start_main@@GLIBC_2.34
LOAD:00000000000005A6                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:00000000000005A8                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:00000000000005AA                 dw 2                    ; printf@@GLIBC_2.2.5
LOAD:00000000000005AC                 dw 1                    ; global symbol: __gmon_start__
LOAD:00000000000005AE                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:00000000000005B0                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:00000000000005B2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000005B4                 dw 0
LOAD:00000000000005B6                 dw 0
LOAD:00000000000005B8 ; ELF GNU Symbol Version Requirements
LOAD:00000000000005B8                 Elf64_Verneed <1, 3, offset aLibcSo6 - offset unk_4E0, 10h, 0> ; "libc.so.6"
LOAD:00000000000005C8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4E0, 10h> ; "GLIBC_2.4"
LOAD:00000000000005D8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234 - offset unk_4E0, 10h> ; "GLIBC_2.34"
LOAD:00000000000005E8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4E0, 0> ; "GLIBC_2.2.5"
LOAD:00000000000005F8 ; ELF RELA Relocation Table
LOAD:00000000000005F8                 Elf64_Rela <3D98h, 8, 1600h> ; R_X86_64_RELATIVE +1600h
LOAD:0000000000000610                 Elf64_Rela <3DA0h, 8, 15C0h> ; R_X86_64_RELATIVE +15C0h
LOAD:0000000000000628                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
LOAD:0000000000000640                 Elf64_Rela <3FD8h, 300000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000658                 Elf64_Rela <3FE0h, 400000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000670                 Elf64_Rela <3FE8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000688                 Elf64_Rela <3FF0h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000006A0                 Elf64_Rela <3FF8h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000006B8 ; ELF JMPREL Relocation Table
LOAD:00000000000006B8                 Elf64_Rela <3FB0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000006D0                 Elf64_Rela <3FB8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT putchar
LOAD:00000000000006E8                 Elf64_Rela <3FC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000700                 Elf64_Rela <3FC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT printf
LOAD:0000000000000718                 Elf64_Rela <3FD0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000000718 LOAD            ends
LOAD:0000000000000718
.init:0000000000001000 ; ===========================================================================
.init:0000000000001000
.init:0000000000001000 ; Segment type: Pure code
.init:0000000000001000 ; Segment permissions: Read/Execute
.init:0000000000001000 _init           segment dword public 'CODE' use64
.init:0000000000001000                 assume cs:_init
.init:0000000000001000                 ;org 1000h
.init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001000
.init:0000000000001000 ; =============== S U B R O U T I N E =======================================
.init:0000000000001000
.init:0000000000001000
.init:0000000000001000                 public _init_proc
.init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
.init:0000000000001000                 endbr64                 ; _init
.init:0000000000001004                 sub     rsp, 8
.init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
.init:000000000000100F                 test    rax, rax
.init:0000000000001012                 jz      short loc_1016
.init:0000000000001014                 call    rax ; __gmon_start__
.init:0000000000001016
.init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
.init:0000000000001016                 add     rsp, 8
.init:000000000000101A                 retn
.init:000000000000101A _init_proc      endp
.init:000000000000101A
.init:000000000000101A _init           ends
.init:000000000000101A
LOAD:000000000000101B ; ===========================================================================
LOAD:000000000000101B
LOAD:000000000000101B ; Segment type: Pure code
LOAD:000000000000101B ; Segment permissions: Read/Execute
LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
LOAD:000000000000101B                 assume cs:LOAD
LOAD:000000000000101B                 ;org 101Bh
LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000101B                 align 20h
LOAD:000000000000101B LOAD            ends
LOAD:000000000000101B
.plt:0000000000001020 ; ===========================================================================
.plt:0000000000001020
.plt:0000000000001020 ; Segment type: Pure code
.plt:0000000000001020 ; Segment permissions: Read/Execute
.plt:0000000000001020 _plt            segment para public 'CODE' use64
.plt:0000000000001020                 assume cs:_plt
.plt:0000000000001020                 ;org 1020h
.plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001020
.plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001020
.plt:0000000000001020
.plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
.plt:0000000000001020                                         ; sub_1040+9↓j ...
.plt:0000000000001020 ; __unwind {
.plt:0000000000001020                 push    cs:qword_3FA0
.plt:0000000000001026                 bnd jmp cs:qword_3FA8
.plt:0000000000001026 sub_1020        endp
.plt:0000000000001026
.plt:0000000000001026 ; ---------------------------------------------------------------------------
.plt:000000000000102D                 align 10h
.plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
.plt:000000000000103F                 align 20h
.plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
.plt:000000000000104F                 align 10h
.plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
.plt:000000000000105F                 align 20h
.plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
.plt:000000000000106F                 align 10h
.plt:0000000000001070 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1070]
.plt:000000000000107F                 align 20h
.plt:000000000000107F ; } // starts at 1020
.plt:000000000000107F _plt            ends
.plt:000000000000107F
.plt.got:0000000000001080 ; ===========================================================================
.plt.got:0000000000001080
.plt.got:0000000000001080 ; Segment type: Pure code
.plt.got:0000000000001080 ; Segment permissions: Read/Execute
.plt.got:0000000000001080 _plt_got        segment para public 'CODE' use64
.plt.got:0000000000001080                 assume cs:_plt_got
.plt.got:0000000000001080                 ;org 1080h
.plt.got:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001080 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
.plt.got:000000000000108B                 align 10h
.plt.got:000000000000108B ; } // starts at 1080
.plt.got:000000000000108B _plt_got        ends
.plt.got:000000000000108B
.plt.sec:0000000000001090 ; ===========================================================================
.plt.sec:0000000000001090
.plt.sec:0000000000001090 ; Segment type: Pure code
.plt.sec:0000000000001090 ; Segment permissions: Read/Execute
.plt.sec:0000000000001090 _plt_sec        segment para public 'CODE' use64
.plt.sec:0000000000001090                 assume cs:_plt_sec
.plt.sec:0000000000001090                 ;org 1090h
.plt.sec:0000000000001090                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.sec:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
.plt.sec:000000000000109B                 align 20h
.plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _putchar]
.plt.sec:00000000000010AB                 align 10h
.plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
.plt.sec:00000000000010BB                 align 20h
.plt.sec:00000000000010C0 ; [0000000B BYTES: COLLAPSED FUNCTION _printf]
.plt.sec:00000000000010CB                 align 10h
.plt.sec:00000000000010D0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
.plt.sec:00000000000010DB                 align 20h
.plt.sec:00000000000010DB ; } // starts at 1090
.plt.sec:00000000000010DB _plt_sec        ends
.plt.sec:00000000000010DB
.text:00000000000010E0 ; ===========================================================================
.text:00000000000010E0
.text:00000000000010E0 ; Segment type: Pure code
.text:00000000000010E0 ; Segment permissions: Read/Execute
.text:00000000000010E0 _text           segment para public 'CODE' use64
.text:00000000000010E0                 assume cs:_text
.text:00000000000010E0                 ;org 10E0h
.text:00000000000010E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000010E0
.text:00000000000010E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000010E0
.text:00000000000010E0
.text:00000000000010E0 ; int __fastcall main(int argc, const char **argv, const char **envp)
.text:00000000000010E0                 public main
.text:00000000000010E0 main            proc near               ; DATA XREF: _start+18↓o
.text:00000000000010E0
.text:00000000000010E0 var_138         = dword ptr -138h
.text:00000000000010E0 var_124         = dword ptr -124h
.text:00000000000010E0 var_118         = dword ptr -118h
.text:00000000000010E0 var_100         = byte ptr -100h
.text:00000000000010E0 var_F8          = byte ptr -0F8h
.text:00000000000010E0 var_C8          = qword ptr -0C8h
.text:00000000000010E0 var_C0          = qword ptr -0C0h
.text:00000000000010E0 var_B8          = xmmword ptr -0B8h
.text:00000000000010E0 var_A8          = xmmword ptr -0A8h
.text:00000000000010E0 var_98          = xmmword ptr -98h
.text:00000000000010E0 var_88          = xmmword ptr -88h
.text:00000000000010E0 var_78          = xmmword ptr -78h
.text:00000000000010E0 var_68          = xmmword ptr -68h
.text:00000000000010E0 var_58          = xmmword ptr -58h
.text:00000000000010E0 var_48          = qword ptr -48h
.text:00000000000010E0 var_40          = qword ptr -40h
.text:00000000000010E0 var_30          = qword ptr -30h
.text:00000000000010E0
.text:00000000000010E0 ; __unwind {
.text:00000000000010E0                 endbr64
.text:00000000000010E4                 push    r14
.text:00000000000010E6                 push    r13
.text:00000000000010E8                 push    r12
.text:00000000000010EA                 push    rbp
.text:00000000000010EB                 push    rbx
.text:00000000000010EC                 sub     rsp, 110h
.text:00000000000010F3                 mov     rax, fs:28h
.text:00000000000010FC                 mov     [rsp+138h+var_30], rax
.text:0000000000001104                 xor     eax, eax
.text:0000000000001106                 mov     rax, 700000000h
.text:0000000000001110                 pcmpeqd xmm0, xmm0
.text:0000000000001114                 mov     cs:_TIG_IZ_0AtH_argc, edi
.text:000000000000111A                 mov     edi, 18h        ; size
.text:000000000000111F                 mov     [rsp+138h+var_C8], rax
.text:0000000000001124                 mov     rax, 0A00000009h
.text:000000000000112E                 mov     [rsp+138h+var_C0], rax
.text:0000000000001133                 mov     rax, 0B00000000h
.text:000000000000113D                 movaps  [rsp+138h+var_98], xmm0
.text:0000000000001145                 mov     qword ptr [rsp+138h+var_98+8], rax
.text:000000000000114D                 mov     rax, 0F0000000Ah
.text:0000000000001157                 movaps  [rsp+138h+var_88], xmm0
.text:000000000000115F                 mov     qword ptr [rsp+138h+var_88+8], rax
.text:0000000000001167                 mov     rax, 900000000h
.text:0000000000001171                 movaps  [rsp+138h+var_78], xmm0
.text:0000000000001179                 movaps  [rsp+138h+var_B8], xmm0
.text:0000000000001181                 movaps  [rsp+138h+var_A8], xmm0
.text:0000000000001189                 movaps  [rsp+138h+var_68], xmm0
.text:0000000000001191                 movaps  [rsp+138h+var_58], xmm0
.text:0000000000001199                 mov     cs:_TIG_IZ_0AtH_argv, rsi
.text:00000000000011A0                 mov     cs:_TIG_IZ_0AtH_envp, rdx
.text:00000000000011A7                 mov     [rsp+138h+var_48], 0FFFFFFFFFFFFFFFFh
.text:00000000000011B3                 mov     qword ptr [rsp+138h+var_B8+8], 7
.text:00000000000011BF                 mov     dword ptr [rsp+138h+var_98], 9
.text:00000000000011CA                 mov     dword ptr [rsp+138h+var_A8+4], 0Fh
.text:00000000000011D5                 mov     qword ptr [rsp+138h+var_78], 0Bh
.text:00000000000011E1                 mov     dword ptr [rsp+138h+var_78+8], 6
.text:00000000000011EC                 mov     dword ptr [rsp+138h+var_68+0Ch], 6
.text:00000000000011F7                 mov     qword ptr [rsp+138h+var_58], rax
.text:00000000000011FF                 mov     [rsp+138h+var_40], 9
.text:000000000000120B                 call    _malloc
.text:0000000000001210                 test    rax, rax
.text:0000000000001213                 jz      loc_1509
.text:0000000000001219                 mov     rdi, rax        ; ptr
.text:000000000000121C                 xor     eax, eax
.text:000000000000121E                 xchg    ax, ax
.text:0000000000001220
.text:0000000000001220 loc_1220:                               ; CODE XREF: main+17C↓j
.text:0000000000001220                 lea     rdx, ds:0[rax*4]
.text:0000000000001228                 mov     dword ptr [rdi+rax*4], 0
.text:000000000000122F                 mov     [rsp+rdx+138h+var_138], 3F3F3F3Fh
.text:0000000000001236                 mov     [rsp+rdx+138h+var_118], 0FFFFFFFFh
.text:000000000000123E                 mov     rdx, rax
.text:0000000000001241                 xor     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000001245                 or      rdx, 1
.text:0000000000001249                 lea     rax, [rax+rdx*2+1]
.text:000000000000124E                 mov     rcx, rax
.text:0000000000001251                 lea     rdx, [rax-6]
.text:0000000000001255                 xor     rcx, 0FFFFFFFFFFFFFFF9h
.text:0000000000001259                 test    rcx, rdx
.text:000000000000125C                 js      short loc_1220
.text:000000000000125E                 mov     [rsp+138h+var_138], 0
.text:0000000000001265                 xor     r8d, r8d
.text:0000000000001268                 mov     rbx, rsp
.text:000000000000126B                 nop     dword ptr [rax+rax+00h]
.text:0000000000001270
.text:0000000000001270 loc_1270:                               ; CODE XREF: main+2E7↓j
.text:0000000000001270                 xor     eax, eax
.text:0000000000001272                 mov     esi, 6
.text:0000000000001277                 mov     ecx, 3F3F3F3Fh
.text:000000000000127C                 jmp     short loc_1283
.text:000000000000127C ; ---------------------------------------------------------------------------
.text:000000000000127E                 align 20h
.text:0000000000001280
.text:0000000000001280 loc_1280:                               ; CODE XREF: main+1E6↓j
.text:0000000000001280                 mov     rax, rdx
.text:0000000000001283
.text:0000000000001283 loc_1283:                               ; CODE XREF: main+19C↑j
.text:0000000000001283                 mov     r9d, [rdi+rax*4]
.text:0000000000001287                 test    r9d, r9d
.text:000000000000128A                 jnz     short loc_12B4
.text:000000000000128C                 mov     r9d, [rbx+rax*4]
.text:0000000000001290                 mov     edx, r9d
.text:0000000000001293                 mov     r10d, r9d
.text:0000000000001296                 xor     edx, ecx
.text:0000000000001298                 sub     r10d, ecx
.text:000000000000129B                 not     edx
.text:000000000000129D                 and     edx, r10d
.text:00000000000012A0                 mov     r10d, ecx
.text:00000000000012A3                 not     r10d
.text:00000000000012A6                 and     r10d, r9d
.text:00000000000012A9                 or      edx, r10d
.text:00000000000012AC                 cmovs   ecx, r9d
.text:00000000000012B0                 cmovs   rsi, rax
.text:00000000000012B4
.text:00000000000012B4 loc_12B4:                               ; CODE XREF: main+1AA↑j
.text:00000000000012B4                 lea     rdx, [rax+1]
.text:00000000000012B8                 sub     rax, 5
.text:00000000000012BC                 mov     r9, rdx
.text:00000000000012BF                 xor     r9, 0FFFFFFFFFFFFFFF9h
.text:00000000000012C3                 test    rax, r9
.text:00000000000012C6                 js      short loc_1280
.text:00000000000012C8                 lea     rdx, [rsi-6]
.text:00000000000012CC                 lea     rax, [rsi-7]
.text:00000000000012D0                 lea     rcx, [rdx+rdx]
.text:00000000000012D4                 sar     rdx, 3Fh
.text:00000000000012D8                 and     rdx, rcx
.text:00000000000012DB                 sub     rax, rdx
.text:00000000000012DE                 shr     rax, 3Fh
.text:00000000000012E2                 jnz     loc_13D0
.text:00000000000012E8                 lea     r9, [rsi+rsi*2]
.text:00000000000012EC                 mov     dword ptr [rdi+rsi*4], 1
.text:00000000000012F3                 lea     r10, ds:0[rsi*4]
.text:00000000000012FB                 add     r9, r9
.text:00000000000012FE                 jmp     short loc_132B
.text:0000000000001300 ; ---------------------------------------------------------------------------
.text:0000000000001300
.text:0000000000001300 loc_1300:                               ; CODE XREF: main+255↓j
.text:0000000000001300                                         ; main+264↓j ...
.text:0000000000001300                 mov     rdx, rax
.text:0000000000001303                 xor     rax, 1
.text:0000000000001307                 or      rdx, 1
.text:000000000000130B                 mov     rcx, rax
.text:000000000000130E                 add     rdx, rdx
.text:0000000000001311                 mov     rax, rdx
.text:0000000000001314                 sub     rax, rcx
.text:0000000000001317                 mov     rdx, rax
.text:000000000000131A                 lea     rcx, [rax-6]
.text:000000000000131E                 xor     rdx, 0FFFFFFFFFFFFFFF9h
.text:0000000000001322                 test    rcx, rdx
.text:0000000000001325                 jns     loc_13B0
.text:000000000000132B
.text:000000000000132B loc_132B:                               ; CODE XREF: main+21E↑j
.text:000000000000132B                 lea     rdx, [r9+rax]
.text:000000000000132F                 mov     edx, dword ptr [rsp+rdx*4+138h+var_C8]
.text:0000000000001333                 test    edx, edx
.text:0000000000001335                 js      short loc_1300
.text:0000000000001337                 mov     ecx, [rdi+rax*4]
.text:000000000000133A                 lea     r11, ds:0[rax*4]
.text:0000000000001342                 test    ecx, ecx
.text:0000000000001344                 jnz     short loc_1300
.text:0000000000001346                 mov     ebp, [rsp+r10+138h+var_138]
.text:000000000000134A                 lea     ecx, [rbp-3F3F3F3Fh]
.text:0000000000001350                 mov     r12d, ecx
.text:0000000000001353                 sar     r12d, 1Fh
.text:0000000000001357                 xor     ecx, r12d
.text:000000000000135A                 cmp     r12d, ecx
.text:000000000000135D                 jge     short loc_1300
.text:000000000000135F                 lea     r12, [rbx+r11]
.text:0000000000001363                 lea     r14d, [rdx+rbp]
.text:0000000000001367                 xor     ecx, ecx
.text:0000000000001369                 mov     r13d, [r12]
.text:000000000000136D                 cmp     r13d, r14d
.text:0000000000001370                 setnl   cl
.text:0000000000001373                 sub     r13d, r14d
.text:0000000000001376                 neg     ecx
.text:0000000000001378                 and     ecx, r13d
.text:000000000000137B                 mov     r14d, ecx
.text:000000000000137E                 lea     r13d, [rcx+rcx]
.text:0000000000001382                 sar     r14d, 1Fh
.text:0000000000001386                 and     r13d, r14d
.text:0000000000001389                 cmp     r13d, ecx
.text:000000000000138C                 jge     loc_1300
.text:0000000000001392                 mov     ecx, edx
.text:0000000000001394                 or      edx, ebp
.text:0000000000001396                 mov     [rsp+r11+138h+var_118], esi
.text:000000000000139B                 xor     ecx, ebp
.text:000000000000139D                 not     ecx
.text:000000000000139F                 lea     edx, [rcx+rdx*2+1]
.text:00000000000013A3                 mov     [r12], edx
.text:00000000000013A7                 jmp     loc_1300
.text:00000000000013A7 ; ---------------------------------------------------------------------------
.text:00000000000013AC                 align 10h
.text:00000000000013B0
.text:00000000000013B0 loc_13B0:                               ; CODE XREF: main+245↑j
.text:00000000000013B0                 lea     rax, [r8+1]
.text:00000000000013B4                 sub     r8, 5
.text:00000000000013B8                 mov     rdx, rax
.text:00000000000013BB                 xor     rdx, 0FFFFFFFFFFFFFFF9h
.text:00000000000013BF                 test    rdx, r8
.text:00000000000013C2                 jns     short loc_13D0
.text:00000000000013C4                 mov     r8, rax
.text:00000000000013C7                 jmp     loc_1270
.text:00000000000013C7 ; ---------------------------------------------------------------------------
.text:00000000000013CC                 align 10h
.text:00000000000013D0
.text:00000000000013D0 loc_13D0:                               ; CODE XREF: main+202↑j
.text:00000000000013D0                                         ; main+2E2↑j
.text:00000000000013D0                 call    _free
.text:00000000000013D5
.text:00000000000013D5 loc_13D5:                               ; CODE XREF: main+42C↓j
.text:00000000000013D5                 xor     ebp, ebp
.text:00000000000013D7                 lea     r13, aDistZuZuD ; "dist(%zu -> %zu) = %d\n"
.text:00000000000013DE                 lea     r12, format     ; "dist(%zu -> %zu) = INF\n"
.text:00000000000013E5                 jmp     short loc_1404
.text:00000000000013E5 ; ---------------------------------------------------------------------------
.text:00000000000013E7                 align 10h
.text:00000000000013F0
.text:00000000000013F0 loc_13F0:                               ; CODE XREF: main+332↓j
.text:00000000000013F0                 mov     rdi, r12        ; format
.text:00000000000013F3                 xor     eax, eax
.text:00000000000013F5                 add     rbp, 1
.text:00000000000013F9                 call    _printf
.text:00000000000013FE                 cmp     rbp, 6
.text:0000000000001402                 jz      short loc_1428
.text:0000000000001404
.text:0000000000001404 loc_1404:                               ; CODE XREF: main+305↑j
.text:0000000000001404                                         ; main+346↓j
.text:0000000000001404                 mov     ecx, [rbx+rbp*4]
.text:0000000000001407                 mov     rdx, rbp
.text:000000000000140A                 xor     esi, esi
.text:000000000000140C                 cmp     ecx, 3F3F3F3Eh
.text:0000000000001412                 jg      short loc_13F0
.text:0000000000001414                 mov     rdi, r13        ; format
.text:0000000000001417                 xor     eax, eax
.text:0000000000001419                 add     rbp, 1
.text:000000000000141D                 call    _printf
.text:0000000000001422                 cmp     rbp, 6
.text:0000000000001426                 jnz     short loc_1404
.text:0000000000001428
.text:0000000000001428 loc_1428:                               ; CODE XREF: main+322↑j
.text:0000000000001428                 cmp     [rsp+138h+var_124], 3F3F3F3Eh
.text:0000000000001430                 jg      loc_14F2
.text:0000000000001436                 mov     edx, 5
.text:000000000000143B                 xor     eax, eax
.text:000000000000143D                 lea     rbx, [rsp+138h+var_F8]
.text:0000000000001442                 nop     word ptr [rax+rax+00h]
.text:0000000000001448
.text:0000000000001448 loc_1448:                               ; CODE XREF: main+37E↓j
.text:0000000000001448                 movsxd  rbp, edx
.text:000000000000144B                 mov     r12, rax
.text:000000000000144E                 add     rax, 1
.text:0000000000001452                 mov     edx, [rsp+rbp*4+138h+var_118]
.text:0000000000001456                 mov     [rbx+rax*8-8], rbp
.text:000000000000145B                 cmp     edx, 0FFFFFFFFh
.text:000000000000145E                 jnz     short loc_1448
.text:0000000000001460                 mov     edx, 5
.text:0000000000001465                 xor     esi, esi
.text:0000000000001467                 lea     rdi, aPathZuZu  ; "path %zu -> %zu:"
.text:000000000000146E                 xor     eax, eax
.text:0000000000001470                 lea     rbx, [rbx+r12*8-8]
.text:0000000000001475                 lea     r12, [rsp+138h+var_100]
.text:000000000000147A                 call    _printf
.text:000000000000147F                 lea     r13, aZuS       ; " %zu%s"
.text:0000000000001486                 lea     r14, asc_2064   ; " ->"
.text:000000000000148D                 cmp     r12, rbx
.text:0000000000001490                 jz      short loc_14AF
.text:0000000000001492
.text:0000000000001492 loc_1492:                               ; CODE XREF: main+3CD↓j
.text:0000000000001492                 mov     rsi, rbp
.text:0000000000001495                 mov     rdx, r14
.text:0000000000001498                 mov     rdi, r13        ; format
.text:000000000000149B                 xor     eax, eax
.text:000000000000149D                 call    _printf
.text:00000000000014A2                 sub     rbx, 8
.text:00000000000014A6                 mov     rbp, [rbx+8]
.text:00000000000014AA                 cmp     r12, rbx
.text:00000000000014AD                 jnz     short loc_1492
.text:00000000000014AF
.text:00000000000014AF loc_14AF:                               ; CODE XREF: main+3B0↑j
.text:00000000000014AF                 mov     rdi, r13        ; format
.text:00000000000014B2                 lea     rdx, format+17h ; ""
.text:00000000000014B9                 mov     rsi, rbp
.text:00000000000014BC                 xor     eax, eax
.text:00000000000014BE                 call    _printf
.text:00000000000014C3                 mov     edi, 0Ah        ; c
.text:00000000000014C8                 call    _putchar
.text:00000000000014CD
.text:00000000000014CD loc_14CD:                               ; CODE XREF: main+427↓j
.text:00000000000014CD                 mov     rax, [rsp+138h+var_30]
.text:00000000000014D5                 sub     rax, fs:28h
.text:00000000000014DE                 jnz     short loc_1511
.text:00000000000014E0                 add     rsp, 110h
.text:00000000000014E7                 xor     eax, eax
.text:00000000000014E9                 pop     rbx
.text:00000000000014EA                 pop     rbp
.text:00000000000014EB                 pop     r12
.text:00000000000014ED                 pop     r13
.text:00000000000014EF                 pop     r14
.text:00000000000014F1                 retn
.text:00000000000014F2 ; ---------------------------------------------------------------------------
.text:00000000000014F2
.text:00000000000014F2 loc_14F2:                               ; CODE XREF: main+350↑j
.text:00000000000014F2                 mov     edx, 5
.text:00000000000014F7                 xor     esi, esi
.text:00000000000014F9                 lea     rdi, aNoPathFromZuTo ; "no path from %zu to %zu\n"
.text:0000000000001500                 xor     eax, eax
.text:0000000000001502                 call    _printf
.text:0000000000001507                 jmp     short loc_14CD
.text:0000000000001509 ; ---------------------------------------------------------------------------
.text:0000000000001509
.text:0000000000001509 loc_1509:                               ; CODE XREF: main+133↑j
.text:0000000000001509                 mov     rbx, rsp
.text:000000000000150C                 jmp     loc_13D5
.text:0000000000001511 ; ---------------------------------------------------------------------------
.text:0000000000001511
.text:0000000000001511 loc_1511:                               ; CODE XREF: main+3FE↑j
.text:0000000000001511                 call    ___stack_chk_fail
.text:0000000000001511 ; } // starts at 10E0
.text:0000000000001511 main            endp
.text:0000000000001511
.text:0000000000001511 ; ---------------------------------------------------------------------------
.text:0000000000001516                 align 20h
.text:0000000000001520
.text:0000000000001520 ; =============== S U B R O U T I N E =======================================
.text:0000000000001520
.text:0000000000001520 ; Attributes: noreturn fuzzy-sp
.text:0000000000001520
.text:0000000000001520                 public _start
.text:0000000000001520 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001520 ; __unwind {
.text:0000000000001520                 endbr64
.text:0000000000001524                 xor     ebp, ebp
.text:0000000000001526                 mov     r9, rdx         ; rtld_fini
.text:0000000000001529                 pop     rsi             ; argc
.text:000000000000152A                 mov     rdx, rsp        ; ubp_av
.text:000000000000152D                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001531                 push    rax
.text:0000000000001532                 push    rsp             ; stack_end
.text:0000000000001533                 xor     r8d, r8d        ; fini
.text:0000000000001536                 xor     ecx, ecx        ; init
.text:0000000000001538                 lea     rdi, main       ; main
.text:000000000000153F                 call    cs:__libc_start_main_ptr
.text:0000000000001545                 hlt
.text:0000000000001545 ; } // starts at 1520
.text:0000000000001545 _start          endp
.text:0000000000001545
.text:0000000000001545 ; ---------------------------------------------------------------------------
.text:0000000000001546                 align 10h
.text:0000000000001550
.text:0000000000001550 ; =============== S U B R O U T I N E =======================================
.text:0000000000001550
.text:0000000000001550
.text:0000000000001550 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_15E7↓p
.text:0000000000001550                 lea     rdi, __bss_start
.text:0000000000001557                 lea     rax, __bss_start
.text:000000000000155E                 cmp     rax, rdi
.text:0000000000001561                 jz      short locret_1578
.text:0000000000001563                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000156A                 test    rax, rax
.text:000000000000156D                 jz      short locret_1578
.text:000000000000156F                 jmp     rax
.text:000000000000156F ; ---------------------------------------------------------------------------
.text:0000000000001571                 align 8
.text:0000000000001578
.text:0000000000001578 locret_1578:                            ; CODE XREF: deregister_tm_clones+11↑j
.text:0000000000001578                                         ; deregister_tm_clones+1D↑j
.text:0000000000001578                 retn
.text:0000000000001578 deregister_tm_clones endp
.text:0000000000001578
.text:0000000000001578 ; ---------------------------------------------------------------------------
.text:0000000000001579                 align 20h
.text:0000000000001580
.text:0000000000001580 ; =============== S U B R O U T I N E =======================================
.text:0000000000001580
.text:0000000000001580
.text:0000000000001580 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
.text:0000000000001580                 lea     rdi, __bss_start
.text:0000000000001587                 lea     rsi, __bss_start
.text:000000000000158E                 sub     rsi, rdi
.text:0000000000001591                 mov     rax, rsi
.text:0000000000001594                 shr     rsi, 3Fh
.text:0000000000001598                 sar     rax, 3
.text:000000000000159C                 add     rsi, rax
.text:000000000000159F                 sar     rsi, 1
.text:00000000000015A2                 jz      short locret_15B8
.text:00000000000015A4                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000015AB                 test    rax, rax
.text:00000000000015AE                 jz      short locret_15B8
.text:00000000000015B0                 jmp     rax
.text:00000000000015B0 ; ---------------------------------------------------------------------------
.text:00000000000015B2                 align 8
.text:00000000000015B8
.text:00000000000015B8 locret_15B8:                            ; CODE XREF: register_tm_clones+22↑j
.text:00000000000015B8                                         ; register_tm_clones+2E↑j
.text:00000000000015B8                 retn
.text:00000000000015B8 register_tm_clones endp
.text:00000000000015B8
.text:00000000000015B8 ; ---------------------------------------------------------------------------
.text:00000000000015B9                 align 20h
.text:00000000000015C0
.text:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000015C0
.text:00000000000015C0
.text:00000000000015C0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000015C0                 endbr64
.text:00000000000015C4                 cmp     cs:__bss_start, 0
.text:00000000000015CB                 jnz     short locret_15F8
.text:00000000000015CD                 push    rbp
.text:00000000000015CE                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000015D6                 mov     rbp, rsp
.text:00000000000015D9                 jz      short loc_15E7
.text:00000000000015DB                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000015E2                 call    __cxa_finalize
.text:00000000000015E7
.text:00000000000015E7 loc_15E7:                               ; CODE XREF: __do_global_dtors_aux+19↑j
.text:00000000000015E7                 call    deregister_tm_clones
.text:00000000000015EC                 mov     cs:__bss_start, 1
.text:00000000000015F3                 pop     rbp
.text:00000000000015F4                 retn
.text:00000000000015F4 ; ---------------------------------------------------------------------------
.text:00000000000015F5                 align 8
.text:00000000000015F8
.text:00000000000015F8 locret_15F8:                            ; CODE XREF: __do_global_dtors_aux+B↑j
.text:00000000000015F8                 retn
.text:00000000000015F8 __do_global_dtors_aux endp
.text:00000000000015F8
.text:00000000000015F8 ; ---------------------------------------------------------------------------
.text:00000000000015F9                 align 20h
.text:0000000000001600
.text:0000000000001600 ; =============== S U B R O U T I N E =======================================
.text:0000000000001600
.text:0000000000001600
.text:0000000000001600 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001600                 endbr64
.text:0000000000001604                 jmp     register_tm_clones
.text:0000000000001604 frame_dummy     endp
.text:0000000000001604
.text:0000000000001604 _text           ends
.text:0000000000001604
LOAD:0000000000001609 ; ===========================================================================
LOAD:0000000000001609
LOAD:0000000000001609 ; Segment type: Pure code
LOAD:0000000000001609 ; Segment permissions: Read/Execute
LOAD:0000000000001609 LOAD            segment mempage public 'CODE' use64
LOAD:0000000000001609                 assume cs:LOAD
LOAD:0000000000001609                 ;org 1609h
LOAD:0000000000001609                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001609                 align 4
LOAD:0000000000001609 LOAD            ends
LOAD:0000000000001609
.fini:000000000000160C ; ===========================================================================
.fini:000000000000160C
.fini:000000000000160C ; Segment type: Pure code
.fini:000000000000160C ; Segment permissions: Read/Execute
.fini:000000000000160C _fini           segment dword public 'CODE' use64
.fini:000000000000160C                 assume cs:_fini
.fini:000000000000160C                 ;org 160Ch
.fini:000000000000160C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000160C
.fini:000000000000160C ; =============== S U B R O U T I N E =======================================
.fini:000000000000160C
.fini:000000000000160C
.fini:000000000000160C                 public _term_proc
.fini:000000000000160C _term_proc      proc near
.fini:000000000000160C                 endbr64                 ; _fini
.fini:0000000000001610                 sub     rsp, 8
.fini:0000000000001614                 add     rsp, 8
.fini:0000000000001618                 retn
.fini:0000000000001618 _term_proc      endp
.fini:0000000000001618
.fini:0000000000001618 _fini           ends
.fini:0000000000001618
.rodata:0000000000002000 ; ===========================================================================
.rodata:0000000000002000
.rodata:0000000000002000 ; Segment type: Pure data
.rodata:0000000000002000 ; Segment permissions: Read
.rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
.rodata:0000000000002000                 assume cs:_rodata
.rodata:0000000000002000                 ;org 2000h
.rodata:0000000000002000                 public _IO_stdin_used
.rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
.rodata:0000000000002001                 db    0
.rodata:0000000000002002                 db    2
.rodata:0000000000002003                 db    0
.rodata:0000000000002004 ; const char format[]
.rodata:0000000000002004 format          db 'dist(%zu -> %zu) = INF',0Ah,0
.rodata:0000000000002004                                         ; DATA XREF: main+2FE↑o
.rodata:000000000000201C ; const char aDistZuZuD[]
.rodata:000000000000201C aDistZuZuD      db 'dist(%zu -> %zu) = %d',0Ah,0
.rodata:000000000000201C                                         ; DATA XREF: main+2F7↑o
.rodata:0000000000002033 ; const char aNoPathFromZuTo[]
.rodata:0000000000002033 aNoPathFromZuTo db 'no path from %zu to %zu',0Ah,0
.rodata:0000000000002033                                         ; DATA XREF: main+419↑o
.rodata:000000000000204C ; const char aPathZuZu[]
.rodata:000000000000204C aPathZuZu       db 'path %zu -> %zu:',0 ; DATA XREF: main+387↑o
.rodata:000000000000205D ; const char aZuS[]
.rodata:000000000000205D aZuS            db ' %zu%s',0           ; DATA XREF: main+39F↑o
.rodata:0000000000002064 asc_2064        db ' ->',0              ; DATA XREF: main+3A6↑o
.rodata:0000000000002064 _rodata         ends
.rodata:0000000000002064
.eh_frame_hdr:0000000000002068 ; ===========================================================================
.eh_frame_hdr:0000000000002068
.eh_frame_hdr:0000000000002068 ; Segment type: Pure data
.eh_frame_hdr:0000000000002068 ; Segment permissions: Read
.eh_frame_hdr:0000000000002068 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000002068                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000002068                 ;org 2068h
.eh_frame_hdr:0000000000002068 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
.eh_frame_hdr:0000000000002069                 db  1Bh
.eh_frame_hdr:000000000000206A                 db    3
.eh_frame_hdr:000000000000206B                 db  3Bh ; ;
.eh_frame_hdr:000000000000206C                 db  34h ; 4
.eh_frame_hdr:000000000000206D                 db    0
.eh_frame_hdr:000000000000206E                 db    0
.eh_frame_hdr:000000000000206F                 db    0
.eh_frame_hdr:0000000000002070                 db    5
.eh_frame_hdr:0000000000002071                 db    0
.eh_frame_hdr:0000000000002072                 db    0
.eh_frame_hdr:0000000000002073                 db    0
.eh_frame_hdr:0000000000002074                 db 0B8h
.eh_frame_hdr:0000000000002075                 db 0EFh
.eh_frame_hdr:0000000000002076                 db 0FFh
.eh_frame_hdr:0000000000002077                 db 0FFh
.eh_frame_hdr:0000000000002078                 db  68h ; h
.eh_frame_hdr:0000000000002079                 db    0
.eh_frame_hdr:000000000000207A                 db    0
.eh_frame_hdr:000000000000207B                 db    0
.eh_frame_hdr:000000000000207C                 db  18h
.eh_frame_hdr:000000000000207D                 db 0F0h
.eh_frame_hdr:000000000000207E                 db 0FFh
.eh_frame_hdr:000000000000207F                 db 0FFh
.eh_frame_hdr:0000000000002080                 db  90h
.eh_frame_hdr:0000000000002081                 db    0
.eh_frame_hdr:0000000000002082                 db    0
.eh_frame_hdr:0000000000002083                 db    0
.eh_frame_hdr:0000000000002084                 db  28h ; (
.eh_frame_hdr:0000000000002085                 db 0F0h
.eh_frame_hdr:0000000000002086                 db 0FFh
.eh_frame_hdr:0000000000002087                 db 0FFh
.eh_frame_hdr:0000000000002088                 db 0A8h
.eh_frame_hdr:0000000000002089                 db    0
.eh_frame_hdr:000000000000208A                 db    0
.eh_frame_hdr:000000000000208B                 db    0
.eh_frame_hdr:000000000000208C                 db  78h ; x
.eh_frame_hdr:000000000000208D                 db 0F0h
.eh_frame_hdr:000000000000208E                 db 0FFh
.eh_frame_hdr:000000000000208F                 db 0FFh
.eh_frame_hdr:0000000000002090                 db 0C0h
.eh_frame_hdr:0000000000002091                 db    0
.eh_frame_hdr:0000000000002092                 db    0
.eh_frame_hdr:0000000000002093                 db    0
.eh_frame_hdr:0000000000002094                 db 0B8h
.eh_frame_hdr:0000000000002095                 db 0F4h
.eh_frame_hdr:0000000000002096                 db 0FFh
.eh_frame_hdr:0000000000002097                 db 0FFh
.eh_frame_hdr:0000000000002098                 db  50h ; P
.eh_frame_hdr:0000000000002099                 db    0
.eh_frame_hdr:000000000000209A                 db    0
.eh_frame_hdr:000000000000209B                 db    0
.eh_frame_hdr:000000000000209B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000209B
LOAD:000000000000209C ; ===========================================================================
LOAD:000000000000209C
LOAD:000000000000209C ; Segment type: Pure data
LOAD:000000000000209C ; Segment permissions: Read
LOAD:000000000000209C LOAD            segment mempage public 'DATA' use64
LOAD:000000000000209C                 assume cs:LOAD
LOAD:000000000000209C                 ;org 209Ch
LOAD:000000000000209C                 align 20h
LOAD:000000000000209C LOAD            ends
LOAD:000000000000209C
.eh_frame:00000000000020A0 ; ===========================================================================
.eh_frame:00000000000020A0
.eh_frame:00000000000020A0 ; Segment type: Pure data
.eh_frame:00000000000020A0 ; Segment permissions: Read
.eh_frame:00000000000020A0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000020A0                 assume cs:_eh_frame
.eh_frame:00000000000020A0                 ;org 20A0h
.eh_frame:00000000000020A0                 db  14h
.eh_frame:00000000000020A1                 db    0
.eh_frame:00000000000020A2                 db    0
.eh_frame:00000000000020A3                 db    0
.eh_frame:00000000000020A4                 db    0
.eh_frame:00000000000020A5                 db    0
.eh_frame:00000000000020A6                 db    0
.eh_frame:00000000000020A7                 db    0
.eh_frame:00000000000020A8                 db    1
.eh_frame:00000000000020A9                 db  7Ah ; z
.eh_frame:00000000000020AA                 db  52h ; R
.eh_frame:00000000000020AB                 db    0
.eh_frame:00000000000020AC                 db    1
.eh_frame:00000000000020AD                 db  78h ; x
.eh_frame:00000000000020AE                 db  10h
.eh_frame:00000000000020AF                 db    1
.eh_frame:00000000000020B0                 db  1Bh
.eh_frame:00000000000020B1                 db  0Ch
.eh_frame:00000000000020B2                 db    7
.eh_frame:00000000000020B3                 db    8
.eh_frame:00000000000020B4                 db  90h
.eh_frame:00000000000020B5                 db    1
.eh_frame:00000000000020B6                 db    0
.eh_frame:00000000000020B7                 db    0
.eh_frame:00000000000020B8                 db  14h
.eh_frame:00000000000020B9                 db    0
.eh_frame:00000000000020BA                 db    0
.eh_frame:00000000000020BB                 db    0
.eh_frame:00000000000020BC                 db  1Ch
.eh_frame:00000000000020BD                 db    0
.eh_frame:00000000000020BE                 db    0
.eh_frame:00000000000020BF                 db    0
.eh_frame:00000000000020C0                 db  60h ; `
.eh_frame:00000000000020C1                 db 0F4h
.eh_frame:00000000000020C2                 db 0FFh
.eh_frame:00000000000020C3                 db 0FFh
.eh_frame:00000000000020C4                 db  26h ; &
.eh_frame:00000000000020C5                 db    0
.eh_frame:00000000000020C6                 db    0
.eh_frame:00000000000020C7                 db    0
.eh_frame:00000000000020C8                 db    0
.eh_frame:00000000000020C9                 db  44h ; D
.eh_frame:00000000000020CA                 db    7
.eh_frame:00000000000020CB                 db  10h
.eh_frame:00000000000020CC                 db    0
.eh_frame:00000000000020CD                 db    0
.eh_frame:00000000000020CE                 db    0
.eh_frame:00000000000020CF                 db    0
.eh_frame:00000000000020D0                 db  24h ; $
.eh_frame:00000000000020D1                 db    0
.eh_frame:00000000000020D2                 db    0
.eh_frame:00000000000020D3                 db    0
.eh_frame:00000000000020D4                 db  34h ; 4
.eh_frame:00000000000020D5                 db    0
.eh_frame:00000000000020D6                 db    0
.eh_frame:00000000000020D7                 db    0
.eh_frame:00000000000020D8                 db  48h ; H
.eh_frame:00000000000020D9                 db 0EFh
.eh_frame:00000000000020DA                 db 0FFh
.eh_frame:00000000000020DB                 db 0FFh
.eh_frame:00000000000020DC                 db  60h ; `
.eh_frame:00000000000020DD                 db    0
.eh_frame:00000000000020DE                 db    0
.eh_frame:00000000000020DF                 db    0
.eh_frame:00000000000020E0                 db    0
.eh_frame:00000000000020E1                 db  0Eh
.eh_frame:00000000000020E2                 db  10h
.eh_frame:00000000000020E3                 db  46h ; F
.eh_frame:00000000000020E4                 db  0Eh
.eh_frame:00000000000020E5                 db  18h
.eh_frame:00000000000020E6                 db  4Ah ; J
.eh_frame:00000000000020E7                 db  0Fh
.eh_frame:00000000000020E8                 db  0Bh
.eh_frame:00000000000020E9                 db  77h ; w
.eh_frame:00000000000020EA                 db    8
.eh_frame:00000000000020EB                 db  80h
.eh_frame:00000000000020EC                 db    0
.eh_frame:00000000000020ED                 db  3Fh ; ?
.eh_frame:00000000000020EE                 db  1Ah
.eh_frame:00000000000020EF                 db  3Ah ; :
.eh_frame:00000000000020F0                 db  2Ah ; *
.eh_frame:00000000000020F1                 db  33h ; 3
.eh_frame:00000000000020F2                 db  24h ; $
.eh_frame:00000000000020F3                 db  22h ; "
.eh_frame:00000000000020F4                 db    0
.eh_frame:00000000000020F5                 db    0
.eh_frame:00000000000020F6                 db    0
.eh_frame:00000000000020F7                 db    0
.eh_frame:00000000000020F8                 db  14h
.eh_frame:00000000000020F9                 db    0
.eh_frame:00000000000020FA                 db    0
.eh_frame:00000000000020FB                 db    0
.eh_frame:00000000000020FC                 db  5Ch ; \
.eh_frame:00000000000020FD                 db    0
.eh_frame:00000000000020FE                 db    0
.eh_frame:00000000000020FF                 db    0
.eh_frame:0000000000002100                 db  80h
.eh_frame:0000000000002101                 db 0EFh
.eh_frame:0000000000002102                 db 0FFh
.eh_frame:0000000000002103                 db 0FFh
.eh_frame:0000000000002104                 db  10h
.eh_frame:0000000000002105                 db    0
.eh_frame:0000000000002106                 db    0
.eh_frame:0000000000002107                 db    0
.eh_frame:0000000000002108                 db    0
.eh_frame:0000000000002109                 db    0
.eh_frame:000000000000210A                 db    0
.eh_frame:000000000000210B                 db    0
.eh_frame:000000000000210C                 db    0
.eh_frame:000000000000210D                 db    0
.eh_frame:000000000000210E                 db    0
.eh_frame:000000000000210F                 db    0
.eh_frame:0000000000002110                 db  14h
.eh_frame:0000000000002111                 db    0
.eh_frame:0000000000002112                 db    0
.eh_frame:0000000000002113                 db    0
.eh_frame:0000000000002114                 db  74h ; t
.eh_frame:0000000000002115                 db    0
.eh_frame:0000000000002116                 db    0
.eh_frame:0000000000002117                 db    0
.eh_frame:0000000000002118                 db  78h ; x
.eh_frame:0000000000002119                 db 0EFh
.eh_frame:000000000000211A                 db 0FFh
.eh_frame:000000000000211B                 db 0FFh
.eh_frame:000000000000211C                 db  50h ; P
.eh_frame:000000000000211D                 db    0
.eh_frame:000000000000211E                 db    0
.eh_frame:000000000000211F                 db    0
.eh_frame:0000000000002120                 db    0
.eh_frame:0000000000002121                 db    0
.eh_frame:0000000000002122                 db    0
.eh_frame:0000000000002123                 db    0
.eh_frame:0000000000002124                 db    0
.eh_frame:0000000000002125                 db    0
.eh_frame:0000000000002126                 db    0
.eh_frame:0000000000002127                 db    0
.eh_frame:0000000000002128                 db  44h ; D
.eh_frame:0000000000002129                 db    0
.eh_frame:000000000000212A                 db    0
.eh_frame:000000000000212B                 db    0
.eh_frame:000000000000212C                 db  8Ch
.eh_frame:000000000000212D                 db    0
.eh_frame:000000000000212E                 db    0
.eh_frame:000000000000212F                 db    0
.eh_frame:0000000000002130                 db 0B0h
.eh_frame:0000000000002131                 db 0EFh
.eh_frame:0000000000002132                 db 0FFh
.eh_frame:0000000000002133                 db 0FFh
.eh_frame:0000000000002134                 db  36h ; 6
.eh_frame:0000000000002135                 db    4
.eh_frame:0000000000002136                 db    0
.eh_frame:0000000000002137                 db    0
.eh_frame:0000000000002138                 db    0
.eh_frame:0000000000002139                 db  46h ; F
.eh_frame:000000000000213A                 db  0Eh
.eh_frame:000000000000213B                 db  10h
.eh_frame:000000000000213C                 db  8Eh
.eh_frame:000000000000213D                 db    2
.eh_frame:000000000000213E                 db  42h ; B
.eh_frame:000000000000213F                 db  0Eh
.eh_frame:0000000000002140                 db  18h
.eh_frame:0000000000002141                 db  8Dh
.eh_frame:0000000000002142                 db    3
.eh_frame:0000000000002143                 db  42h ; B
.eh_frame:0000000000002144                 db  0Eh
.eh_frame:0000000000002145                 db  20h
.eh_frame:0000000000002146                 db  8Ch
.eh_frame:0000000000002147                 db    4
.eh_frame:0000000000002148                 db  41h ; A
.eh_frame:0000000000002149                 db  0Eh
.eh_frame:000000000000214A                 db  28h ; (
.eh_frame:000000000000214B                 db  86h
.eh_frame:000000000000214C                 db    5
.eh_frame:000000000000214D                 db  41h ; A
.eh_frame:000000000000214E                 db  0Eh
.eh_frame:000000000000214F                 db  30h ; 0
.eh_frame:0000000000002150                 db  83h
.eh_frame:0000000000002151                 db    6
.eh_frame:0000000000002152                 db  47h ; G
.eh_frame:0000000000002153                 db  0Eh
.eh_frame:0000000000002154                 db 0C0h
.eh_frame:0000000000002155                 db    2
.eh_frame:0000000000002156                 db    3
.eh_frame:0000000000002157                 db 0F4h
.eh_frame:0000000000002158                 db    3
.eh_frame:0000000000002159                 db  0Ah
.eh_frame:000000000000215A                 db  0Eh
.eh_frame:000000000000215B                 db  30h ; 0
.eh_frame:000000000000215C                 db  43h ; C
.eh_frame:000000000000215D                 db  0Eh
.eh_frame:000000000000215E                 db  28h ; (
.eh_frame:000000000000215F                 db  41h ; A
.eh_frame:0000000000002160                 db  0Eh
.eh_frame:0000000000002161                 db  20h
.eh_frame:0000000000002162                 db  42h ; B
.eh_frame:0000000000002163                 db  0Eh
.eh_frame:0000000000002164                 db  18h
.eh_frame:0000000000002165                 db  42h ; B
.eh_frame:0000000000002166                 db  0Eh
.eh_frame:0000000000002167                 db  10h
.eh_frame:0000000000002168                 db  42h ; B
.eh_frame:0000000000002169                 db  0Eh
.eh_frame:000000000000216A                 db    8
.eh_frame:000000000000216B                 db  41h ; A
.eh_frame:000000000000216C                 db  0Bh
.eh_frame:000000000000216D                 db    0
.eh_frame:000000000000216E                 db    0
.eh_frame:000000000000216F                 db    0
.eh_frame:0000000000002170 __FRAME_END__   db    0
.eh_frame:0000000000002171                 db    0
.eh_frame:0000000000002172                 db    0
.eh_frame:0000000000002173                 db    0
.eh_frame:0000000000002173 _eh_frame       ends
.eh_frame:0000000000002173
.init_array:0000000000003D98 ; ELF Initialization Function Table
.init_array:0000000000003D98 ; ===========================================================================
.init_array:0000000000003D98
.init_array:0000000000003D98 ; Segment type: Pure data
.init_array:0000000000003D98 ; Segment permissions: Read/Write
.init_array:0000000000003D98 _init_array     segment qword public 'DATA' use64
.init_array:0000000000003D98                 assume cs:_init_array
.init_array:0000000000003D98                 ;org 3D98h
.init_array:0000000000003D98 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000003D98                                         ; DATA XREF: LOAD:0000000000000168↑o
.init_array:0000000000003D98                                         ; LOAD:00000000000002F0↑o
.init_array:0000000000003D98 _init_array     ends
.init_array:0000000000003D98
.fini_array:0000000000003DA0 ; ELF Termination Function Table
.fini_array:0000000000003DA0 ; ===========================================================================
.fini_array:0000000000003DA0
.fini_array:0000000000003DA0 ; Segment type: Pure data
.fini_array:0000000000003DA0 ; Segment permissions: Read/Write
.fini_array:0000000000003DA0 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000003DA0                 assume cs:_fini_array
.fini_array:0000000000003DA0                 ;org 3DA0h
.fini_array:0000000000003DA0 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000003DA0 _fini_array     ends
.fini_array:0000000000003DA0
LOAD:0000000000003DA8 ; ELF Dynamic Information
LOAD:0000000000003DA8 ; ===========================================================================
LOAD:0000000000003DA8
LOAD:0000000000003DA8 ; Segment type: Pure data
LOAD:0000000000003DA8 ; Segment permissions: Read/Write
LOAD:0000000000003DA8 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000003DA8                 assume cs:LOAD
LOAD:0000000000003DA8                 ;org 3DA8h
LOAD:0000000000003DA8 _DYNAMIC        Elf64_Dyn <1, 4Eh>      ; DATA XREF: LOAD:00000000000001A0↑o
LOAD:0000000000003DA8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000003DA8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000003DB8                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
LOAD:0000000000003DC8                 Elf64_Dyn <0Dh, 160Ch>  ; DT_FINI
LOAD:0000000000003DD8                 Elf64_Dyn <19h, 3D98h>  ; DT_INIT_ARRAY
LOAD:0000000000003DE8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000003DF8                 Elf64_Dyn <1Ah, 3DA0h>  ; DT_FINI_ARRAY
LOAD:0000000000003E08                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000003E18                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
LOAD:0000000000003E28                 Elf64_Dyn <5, 4E0h>     ; DT_STRTAB
LOAD:0000000000003E38                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
LOAD:0000000000003E48                 Elf64_Dyn <0Ah, 0BEh>   ; DT_STRSZ
LOAD:0000000000003E58                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000003E68                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000003E78                 Elf64_Dyn <3, 3F98h>    ; DT_PLTGOT
LOAD:0000000000003E88                 Elf64_Dyn <2, 78h>      ; DT_PLTRELSZ
LOAD:0000000000003E98                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000003EA8                 Elf64_Dyn <17h, 6B8h>   ; DT_JMPREL
LOAD:0000000000003EB8                 Elf64_Dyn <7, 5F8h>     ; DT_RELA
LOAD:0000000000003EC8                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
LOAD:0000000000003ED8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000003EE8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000003EF8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000003F08                 Elf64_Dyn <6FFFFFFEh, 5B8h> ; DT_VERNEED
LOAD:0000000000003F18                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000003F28                 Elf64_Dyn <6FFFFFF0h, 59Eh> ; DT_VERSYM
LOAD:0000000000003F38                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
LOAD:0000000000003F48                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000003F58                 db    0
LOAD:0000000000003F59                 db    0
LOAD:0000000000003F5A                 db    0
LOAD:0000000000003F5B                 db    0
LOAD:0000000000003F5C                 db    0
LOAD:0000000000003F5D                 db    0
LOAD:0000000000003F5E                 db    0
LOAD:0000000000003F5F                 db    0
LOAD:0000000000003F60                 db    0
LOAD:0000000000003F61                 db    0
LOAD:0000000000003F62                 db    0
LOAD:0000000000003F63                 db    0
LOAD:0000000000003F64                 db    0
LOAD:0000000000003F65                 db    0
LOAD:0000000000003F66                 db    0
LOAD:0000000000003F67                 db    0
LOAD:0000000000003F68                 db    0
LOAD:0000000000003F69                 db    0
LOAD:0000000000003F6A                 db    0
LOAD:0000000000003F6B                 db    0
LOAD:0000000000003F6C                 db    0
LOAD:0000000000003F6D                 db    0
LOAD:0000000000003F6E                 db    0
LOAD:0000000000003F6F                 db    0
LOAD:0000000000003F70                 db    0
LOAD:0000000000003F71                 db    0
LOAD:0000000000003F72                 db    0
LOAD:0000000000003F73                 db    0
LOAD:0000000000003F74                 db    0
LOAD:0000000000003F75                 db    0
LOAD:0000000000003F76                 db    0
LOAD:0000000000003F77                 db    0
LOAD:0000000000003F78                 db    0
LOAD:0000000000003F79                 db    0
LOAD:0000000000003F7A                 db    0
LOAD:0000000000003F7B                 db    0
LOAD:0000000000003F7C                 db    0
LOAD:0000000000003F7D                 db    0
LOAD:0000000000003F7E                 db    0
LOAD:0000000000003F7F                 db    0
LOAD:0000000000003F80                 db    0
LOAD:0000000000003F81                 db    0
LOAD:0000000000003F82                 db    0
LOAD:0000000000003F83                 db    0
LOAD:0000000000003F84                 db    0
LOAD:0000000000003F85                 db    0
LOAD:0000000000003F86                 db    0
LOAD:0000000000003F87                 db    0
LOAD:0000000000003F88                 db    0
LOAD:0000000000003F89                 db    0
LOAD:0000000000003F8A                 db    0
LOAD:0000000000003F8B                 db    0
LOAD:0000000000003F8C                 db    0
LOAD:0000000000003F8D                 db    0
LOAD:0000000000003F8E                 db    0
LOAD:0000000000003F8F                 db    0
LOAD:0000000000003F90                 db    0
LOAD:0000000000003F91                 db    0
LOAD:0000000000003F92                 db    0
LOAD:0000000000003F93                 db    0
LOAD:0000000000003F94                 db    0
LOAD:0000000000003F95                 db    0
LOAD:0000000000003F96                 db    0
LOAD:0000000000003F97                 db    0
LOAD:0000000000003F97 LOAD            ends
LOAD:0000000000003F97
.got:0000000000003F98 ; ===========================================================================
.got:0000000000003F98
.got:0000000000003F98 ; Segment type: Pure data
.got:0000000000003F98 ; Segment permissions: Read/Write
.got:0000000000003F98 _got            segment qword public 'DATA' use64
.got:0000000000003F98                 assume cs:_got
.got:0000000000003F98                 ;org 3F98h
.got:0000000000003F98 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000003FA0 qword_3FA0      dq 0                    ; DATA XREF: sub_1020↑r
.got:0000000000003FA8 qword_3FA8      dq 0                    ; DATA XREF: sub_1020+6↑r
.got:0000000000003FB0 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
.got:0000000000003FB8 putchar_ptr     dq offset putchar       ; DATA XREF: _putchar+4↑r
.got:0000000000003FC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000003FC0                                         ; DATA XREF: ___stack_chk_fail+4↑r
.got:0000000000003FC8 printf_ptr      dq offset printf        ; DATA XREF: _printf+4↑r
.got:0000000000003FD0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
.got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
.got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
.got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
.got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
.got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
.got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
.got:0000000000003FF8 _got            ends
.got:0000000000003FF8
.data:0000000000004000 ; ===========================================================================
.data:0000000000004000
.data:0000000000004000 ; Segment type: Pure data
.data:0000000000004000 ; Segment permissions: Read/Write
.data:0000000000004000 _data           segment qword public 'DATA' use64
.data:0000000000004000                 assume cs:_data
.data:0000000000004000                 ;org 4000h
.data:0000000000004000                 public __data_start ; weak
.data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000004000                                         ; data_start
.data:0000000000004001                 db    0
.data:0000000000004002                 db    0
.data:0000000000004003                 db    0
.data:0000000000004004                 db    0
.data:0000000000004005                 db    0
.data:0000000000004006                 db    0
.data:0000000000004007                 db    0
.data:0000000000004008                 public __dso_handle
.data:0000000000004008 ; void *_dso_handle
.data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
.data:0000000000004008                                         ; .data:__dso_handle↓o
.data:0000000000004008 _data           ends
.data:0000000000004008
.bss:0000000000004010 ; ===========================================================================
.bss:0000000000004010
.bss:0000000000004010 ; Segment type: Uninitialized
.bss:0000000000004010 ; Segment permissions: Read/Write
.bss:0000000000004010 _bss            segment qword public 'BSS' use64
.bss:0000000000004010                 assume cs:_bss
.bss:0000000000004010                 ;org 4010h
.bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000004010                 public __bss_start
.bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
.bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
.bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
.bss:0000000000004010                                         ; completed.0
.bss:0000000000004010                                         ; _edata
.bss:0000000000004011                 align 8
.bss:0000000000004018                 public _TIG_IZ_0AtH_argv
.bss:0000000000004018 _TIG_IZ_0AtH_argv dq ?                  ; DATA XREF: main+B9↑w
.bss:0000000000004020                 public _TIG_IZ_0AtH_envp
.bss:0000000000004020 _TIG_IZ_0AtH_envp dq ?                  ; DATA XREF: main+C0↑w
.bss:0000000000004028                 public _TIG_IZ_0AtH_argc
.bss:0000000000004028 _TIG_IZ_0AtH_argc dd ?                  ; DATA XREF: main+34↑w
.bss:000000000000402C                 align 10h
.bss:000000000000402C _bss            ends
.bss:000000000000402C
.prgend:0000000000004030 ; ===========================================================================
.prgend:0000000000004030
.prgend:0000000000004030 ; Segment type: Zero-length
.prgend:0000000000004030 _prgend         segment byte public '' use64
.prgend:0000000000004030 _end            label byte
.prgend:0000000000004030 _prgend         ends
.prgend:0000000000004030
extern:0000000000004038 ; ===========================================================================
extern:0000000000004038
extern:0000000000004038 ; Segment type: Externs
extern:0000000000004038 ; extern
extern:0000000000004038 ; void free(void *ptr)
extern:0000000000004038                 extrn free:near         ; CODE XREF: _free+4↑j
extern:0000000000004038                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000004040 ; int putchar(int c)
extern:0000000000004040                 extrn putchar:near      ; CODE XREF: _putchar+4↑j
extern:0000000000004040                                         ; DATA XREF: .got:putchar_ptr↑o
extern:0000000000004048 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000004048                 extrn __libc_start_main:near
extern:0000000000004048                                         ; CODE XREF: _start+1F↑p
extern:0000000000004048                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000004050                 extrn __stack_chk_fail:near
extern:0000000000004050                                         ; CODE XREF: ___stack_chk_fail+4↑j
extern:0000000000004050                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000004058 ; int printf(const char *format, ...)
extern:0000000000004058                 extrn printf:near       ; CODE XREF: _printf+4↑j
extern:0000000000004058                                         ; DATA XREF: .got:printf_ptr↑o
extern:0000000000004060 ; void *malloc(size_t size)
extern:0000000000004060                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
extern:0000000000004060                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000004068 ; int __cxa_finalize(void *)
extern:0000000000004068                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000004068                                         ; CODE XREF: __cxa_finalize+4↑j
extern:0000000000004068                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000004070                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000004070                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000004078                 extrn __gmon_start__:near ; weak
extern:0000000000004078                                         ; CODE XREF: _init_proc+14↑p
extern:0000000000004078                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000004080                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000004080                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000004080
extern:0000000000004080
extern:0000000000004080                 end _start