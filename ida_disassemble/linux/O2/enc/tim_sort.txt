LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 54B73CE8C1A362A9E93A24D07220F5060C67035D7226870C5831D61C0F0021D8
LOAD:0000000000000000 ; Input MD5    : 496CAE2932A9A9C465C26C0AB3DB89D0
LOAD:0000000000000000 ; Input CRC32  : 8E646BD6
LOAD:0000000000000000 ; Compiler     : GNU C++
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\enc_linux_binary\timsort_enc
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'Scrt1.o'
LOAD:0000000000000000 ; Source File : 'timsort_enc.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure data
LOAD:0000000000000000 ; Segment permissions: Read
LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset _start        ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 47F8h                ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 318h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 318h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 4                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 748h                 ; Size in file image
LOAD:00000000000000D8                 dq 748h                 ; Size in memory image
LOAD:00000000000000E0                 dq 1000h                ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 5                    ; Flags
LOAD:00000000000000F0                 dq 1000h                ; File offset
LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
LOAD:0000000000000100                 dq 1000h                ; Physical address
LOAD:0000000000000108                 dq 13B9h                ; Size in file image
LOAD:0000000000000110                 dq 13B9h                ; Size in memory image
LOAD:0000000000000118                 dq 1000h                ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 1                    ; Type: LOAD
LOAD:0000000000000124                 dd 4                    ; Flags
LOAD:0000000000000128                 dq 3000h                ; File offset
LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
LOAD:0000000000000138                 dq 3000h                ; Physical address
LOAD:0000000000000140                 dq 180h                 ; Size in file image
LOAD:0000000000000148                 dq 180h                 ; Size in memory image
LOAD:0000000000000150                 dq 1000h                ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 1                    ; Type: LOAD
LOAD:000000000000015C                 dd 6                    ; Flags
LOAD:0000000000000160                 dq 3D98h                ; File offset
LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000170                 dq 4D98h                ; Physical address
LOAD:0000000000000178                 dq 278h                 ; Size in file image
LOAD:0000000000000180                 dq 298h                 ; Size in memory image
LOAD:0000000000000188                 dq 1000h                ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000194                 dd 6                    ; Flags
LOAD:0000000000000198                 dq 3DA8h                ; File offset
LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
LOAD:00000000000001A8                 dq 4DA8h                ; Physical address
LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
LOAD:00000000000001C0                 dq 8                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
LOAD:00000000000001CC                 dd 4                    ; Flags
LOAD:00000000000001D0                 dq 338h                 ; File offset
LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
LOAD:00000000000001E0                 dq 338h                 ; Physical address
LOAD:00000000000001E8                 dq 30h                  ; Size in file image
LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
LOAD:00000000000001F8                 dq 8                    ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 4                    ; Type: NOTE
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 368h                 ; File offset
LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
LOAD:0000000000000218                 dq 368h                 ; Physical address
LOAD:0000000000000220                 dq 44h                  ; Size in file image
LOAD:0000000000000228                 dq 44h                  ; Size in memory image
LOAD:0000000000000230                 dq 4                    ; Alignment
LOAD:0000000000000238 ; PHT Entry 9
LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
LOAD:000000000000023C                 dd 4                    ; Flags
LOAD:0000000000000240                 dq 338h                 ; File offset
LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
LOAD:0000000000000250                 dq 338h                 ; Physical address
LOAD:0000000000000258                 dq 30h                  ; Size in file image
LOAD:0000000000000260                 dq 30h                  ; Size in memory image
LOAD:0000000000000268                 dq 8                    ; Alignment
LOAD:0000000000000270 ; PHT Entry 10
LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000274                 dd 4                    ; Flags
LOAD:0000000000000278                 dq 3010h                ; File offset
LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:0000000000000288                 dq 3010h                ; Physical address
LOAD:0000000000000290                 dq 3Ch                  ; Size in file image
LOAD:0000000000000298                 dq 3Ch                  ; Size in memory image
LOAD:00000000000002A0                 dq 4                    ; Alignment
LOAD:00000000000002A8 ; PHT Entry 11
LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000002AC                 dd 6                    ; Flags
LOAD:00000000000002B0                 dq 0                    ; File offset
LOAD:00000000000002B8                 dq 0                    ; Virtual address
LOAD:00000000000002C0                 dq 0                    ; Physical address
LOAD:00000000000002C8                 dq 0                    ; Size in file image
LOAD:00000000000002D0                 dq 0                    ; Size in memory image
LOAD:00000000000002D8                 dq 10h                  ; Alignment
LOAD:00000000000002E0 ; PHT Entry 12
LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
LOAD:00000000000002E4                 dd 4                    ; Flags
LOAD:00000000000002E8                 dq 3D98h                ; File offset
LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:00000000000002F8                 dq 4D98h                ; Physical address
LOAD:0000000000000300                 dq 268h                 ; Size in file image
LOAD:0000000000000308                 dq 268h                 ; Size in memory image
LOAD:0000000000000310                 dq 1                    ; Alignment
LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000334                 align 8
LOAD:0000000000000338 ; ELF Note Entry
LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
LOAD:0000000000000338                                         ; Name Size
LOAD:000000000000033C                 dd 20h                  ; Desc Size
LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
LOAD:0000000000000368 ; ELF Note Entry
LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
LOAD:0000000000000368                                         ; Name Size
LOAD:000000000000036C                 dd 14h                  ; Desc Size
LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000378                 db 9Ch, 0ABh, 79h, 0, 0DCh, 0E7h, 4Ah, 39h, 0CFh, 73h ; Desc
LOAD:0000000000000382                 db 0Ah, 1Bh, 0D1h, 92h, 5Ch, 0Ch, 72h, 48h, 23h, 35h
LOAD:000000000000038C ; ELF Note Entry
LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
LOAD:0000000000000390                 dd 10h                  ; Desc Size
LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:00000000000003AC                 align 10h
LOAD:00000000000003B0 ; ELF GNU Hash Table
LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
LOAD:00000000000003B4 elf_gnu_hash_symbias dd 0Ah
LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000003BC elf_gnu_hash_shift dd 6
LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
LOAD:00000000000003C8 elf_gnu_hash_bucket dd 0Ah, 0
LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
LOAD:00000000000003D8 ; ELF Symbol Table
LOAD:00000000000003D8                 Elf64_Sym <0>
LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4E0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000003F0                            0>
LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4E0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4E0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000420                            offset dword_0, 0>
LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4E0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aPrintf - offset unk_4E0, 12h, 0, 0, offset dword_0,\ ; "printf"
LOAD:0000000000000450                            0>
LOAD:0000000000000468                 Elf64_Sym <offset aGmonStart - offset unk_4E0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000468                            offset dword_0, 0>
LOAD:0000000000000480                 Elf64_Sym <offset aMemcpy - offset unk_4E0, 12h, 0, 0, offset dword_0,\ ; "memcpy"
LOAD:0000000000000480                            0>
LOAD:0000000000000498                 Elf64_Sym <offset aMalloc - offset unk_4E0, 12h, 0, 0, offset dword_0,\ ; "malloc"
LOAD:0000000000000498                            0>
LOAD:00000000000004B0                 Elf64_Sym <offset aItmRegistertmc - offset unk_4E0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000004B0                            offset dword_0, 0>
LOAD:00000000000004C8                 Elf64_Sym <offset aCxaFinalize - offset unk_4E0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000004C8                            offset dword_0, 0>
LOAD:00000000000004E0 ; ELF String Table
LOAD:00000000000004E0 unk_4E0         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:00000000000004E0                                         ; LOAD:0000000000000408↑o ...
LOAD:00000000000004E1 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004C8↑o
LOAD:00000000000004F0 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000498↑o
LOAD:00000000000004F7 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000004F7                                         ; DATA XREF: LOAD:0000000000000408↑o
LOAD:0000000000000509 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:000000000000050E aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000480↑o
LOAD:0000000000000515 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
LOAD:0000000000000526 aPrintf         db 'printf',0           ; DATA XREF: LOAD:0000000000000450↑o
LOAD:000000000000052D aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005C0↓o
LOAD:0000000000000537 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:00000000000005D0↓o
LOAD:0000000000000542 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000005E0↓o
LOAD:000000000000054C aGlibc234       db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005F0↓o
LOAD:0000000000000557 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000600↓o
LOAD:0000000000000563 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000563                                         ; DATA XREF: LOAD:0000000000000420↑o
LOAD:000000000000057F aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000468↑o
LOAD:000000000000058E aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:000000000000058E                                         ; DATA XREF: LOAD:00000000000004B0↑o
LOAD:00000000000005A8 ; ELF GNU Symbol Version Table
LOAD:00000000000005A8                 dw 0
LOAD:00000000000005AA                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:00000000000005AC                 dw 3                    ; __libc_start_main@@GLIBC_2.34
LOAD:00000000000005AE                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:00000000000005B0                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:00000000000005B2                 dw 2                    ; printf@@GLIBC_2.2.5
LOAD:00000000000005B4                 dw 1                    ; global symbol: __gmon_start__
LOAD:00000000000005B6                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:00000000000005B8                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:00000000000005BA                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:00000000000005BC                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000005BE                 dw 0
LOAD:00000000000005C0 ; ELF GNU Symbol Version Requirements
LOAD:00000000000005C0                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_4E0, 10h, 0> ; "libc.so.6"
LOAD:00000000000005D0                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset unk_4E0, 10h> ; "GLIBC_2.14"
LOAD:00000000000005E0                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4E0, 10h> ; "GLIBC_2.4"
LOAD:00000000000005F0                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234 - offset unk_4E0, 10h> ; "GLIBC_2.34"
LOAD:0000000000000600                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4E0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000610 ; ELF RELA Relocation Table
LOAD:0000000000000610                 Elf64_Rela <4D98h, 8, 12D0h> ; R_X86_64_RELATIVE +12D0h
LOAD:0000000000000628                 Elf64_Rela <4DA0h, 8, 1290h> ; R_X86_64_RELATIVE +1290h
LOAD:0000000000000640                 Elf64_Rela <5008h, 8, 5008h> ; R_X86_64_RELATIVE +5008h
LOAD:0000000000000658                 Elf64_Rela <4FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000670                 Elf64_Rela <4FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000688                 Elf64_Rela <4FE8h, 600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000006A0                 Elf64_Rela <4FF0h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000006B8                 Elf64_Rela <4FF8h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000006D0 ; ELF JMPREL Relocation Table
LOAD:00000000000006D0                 Elf64_Rela <4FB0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000006E8                 Elf64_Rela <4FB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000700                 Elf64_Rela <4FC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT printf
LOAD:0000000000000718                 Elf64_Rela <4FC8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000000730                 Elf64_Rela <4FD0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000000730 LOAD            ends
LOAD:0000000000000730
.init:0000000000001000 ; ===========================================================================
.init:0000000000001000
.init:0000000000001000 ; Segment type: Pure code
.init:0000000000001000 ; Segment permissions: Read/Execute
.init:0000000000001000 _init           segment dword public 'CODE' use64
.init:0000000000001000                 assume cs:_init
.init:0000000000001000                 ;org 1000h
.init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001000
.init:0000000000001000 ; =============== S U B R O U T I N E =======================================
.init:0000000000001000
.init:0000000000001000
.init:0000000000001000                 public _init_proc
.init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
.init:0000000000001000                 endbr64                 ; _init
.init:0000000000001004                 sub     rsp, 8
.init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
.init:000000000000100F                 test    rax, rax
.init:0000000000001012                 jz      short loc_1016
.init:0000000000001014                 call    rax ; __gmon_start__
.init:0000000000001016
.init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
.init:0000000000001016                 add     rsp, 8
.init:000000000000101A                 retn
.init:000000000000101A _init_proc      endp
.init:000000000000101A
.init:000000000000101A _init           ends
.init:000000000000101A
LOAD:000000000000101B ; ===========================================================================
LOAD:000000000000101B
LOAD:000000000000101B ; Segment type: Pure code
LOAD:000000000000101B ; Segment permissions: Read/Execute
LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
LOAD:000000000000101B                 assume cs:LOAD
LOAD:000000000000101B                 ;org 101Bh
LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000101B                 align 20h
LOAD:000000000000101B LOAD            ends
LOAD:000000000000101B
.plt:0000000000001020 ; ===========================================================================
.plt:0000000000001020
.plt:0000000000001020 ; Segment type: Pure code
.plt:0000000000001020 ; Segment permissions: Read/Execute
.plt:0000000000001020 _plt            segment para public 'CODE' use64
.plt:0000000000001020                 assume cs:_plt
.plt:0000000000001020                 ;org 1020h
.plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001020
.plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001020
.plt:0000000000001020
.plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
.plt:0000000000001020                                         ; sub_1040+9↓j ...
.plt:0000000000001020 ; __unwind {
.plt:0000000000001020                 push    cs:qword_4FA0
.plt:0000000000001026                 bnd jmp cs:qword_4FA8
.plt:0000000000001026 sub_1020        endp
.plt:0000000000001026
.plt:0000000000001026 ; ---------------------------------------------------------------------------
.plt:000000000000102D                 align 10h
.plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
.plt:000000000000103F                 align 20h
.plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
.plt:000000000000104F                 align 10h
.plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
.plt:000000000000105F                 align 20h
.plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
.plt:000000000000106F                 align 10h
.plt:0000000000001070 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1070]
.plt:000000000000107F                 align 20h
.plt:000000000000107F ; } // starts at 1020
.plt:000000000000107F _plt            ends
.plt:000000000000107F
.plt.got:0000000000001080 ; ===========================================================================
.plt.got:0000000000001080
.plt.got:0000000000001080 ; Segment type: Pure code
.plt.got:0000000000001080 ; Segment permissions: Read/Execute
.plt.got:0000000000001080 _plt_got        segment para public 'CODE' use64
.plt.got:0000000000001080                 assume cs:_plt_got
.plt.got:0000000000001080                 ;org 1080h
.plt.got:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001080 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
.plt.got:000000000000108B                 align 10h
.plt.got:000000000000108B ; } // starts at 1080
.plt.got:000000000000108B _plt_got        ends
.plt.got:000000000000108B
.plt.sec:0000000000001090 ; ===========================================================================
.plt.sec:0000000000001090
.plt.sec:0000000000001090 ; Segment type: Pure code
.plt.sec:0000000000001090 ; Segment permissions: Read/Execute
.plt.sec:0000000000001090 _plt_sec        segment para public 'CODE' use64
.plt.sec:0000000000001090                 assume cs:_plt_sec
.plt.sec:0000000000001090                 ;org 1090h
.plt.sec:0000000000001090                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.sec:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
.plt.sec:000000000000109B                 align 20h
.plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
.plt.sec:00000000000010AB                 align 10h
.plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION _printf]
.plt.sec:00000000000010BB                 align 20h
.plt.sec:00000000000010C0 ; [0000000B BYTES: COLLAPSED FUNCTION _memcpy]
.plt.sec:00000000000010CB                 align 10h
.plt.sec:00000000000010D0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
.plt.sec:00000000000010DB                 align 20h
.plt.sec:00000000000010DB ; } // starts at 1090
.plt.sec:00000000000010DB _plt_sec        ends
.plt.sec:00000000000010DB
.text:00000000000010E0 ; ===========================================================================
.text:00000000000010E0
.text:00000000000010E0 ; Segment type: Pure code
.text:00000000000010E0 ; Segment permissions: Read/Execute
.text:00000000000010E0 _text           segment para public 'CODE' use64
.text:00000000000010E0                 assume cs:_text
.text:00000000000010E0                 ;org 10E0h
.text:00000000000010E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000010E0
.text:00000000000010E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000010E0
.text:00000000000010E0
.text:00000000000010E0 ; int __fastcall main(int argc, const char **argv, const char **envp)
.text:00000000000010E0                 public main
.text:00000000000010E0 main            proc near               ; DATA XREF: _start+18↓o
.text:00000000000010E0
.text:00000000000010E0 var_78          = qword ptr -78h
.text:00000000000010E0 var_70          = qword ptr -70h
.text:00000000000010E0 var_68          = qword ptr -68h
.text:00000000000010E0 var_60          = qword ptr -60h
.text:00000000000010E0 var_58          = qword ptr -58h
.text:00000000000010E0 var_50          = qword ptr -50h
.text:00000000000010E0 var_48          = qword ptr -48h
.text:00000000000010E0 var_40          = dword ptr -40h
.text:00000000000010E0 var_30          = qword ptr -30h
.text:00000000000010E0
.text:00000000000010E0 ; __unwind {
.text:00000000000010E0                 endbr64
.text:00000000000010E4                 push    r13
.text:00000000000010E6                 push    r12
.text:00000000000010E8                 push    rbp
.text:00000000000010E9                 push    rbx
.text:00000000000010EA                 sub     rsp, 58h
.text:00000000000010EE                 mov     rax, fs:28h
.text:00000000000010F7                 mov     [rsp+78h+var_30], rax
.text:00000000000010FC                 xor     eax, eax
.text:00000000000010FE                 mov     rbx, rsp
.text:0000000000001101                 mov     cs:_TIG_IZ_FShb_argc, edi
.text:0000000000001107                 mov     rax, 300000005h
.text:0000000000001111                 lea     r13, [rsp+78h+var_40]
.text:0000000000001116                 mov     [rsp+78h+var_78], rax
.text:000000000000111A                 mov     rdi, rbx
.text:000000000000111D                 mov     rax, 200000001h
.text:0000000000001127                 lea     r12, unk_3004
.text:000000000000112E                 mov     [rsp+78h+var_70], rax
.text:0000000000001133                 lea     rbp, format     ; "%d%s"
.text:000000000000113A                 mov     rax, 500000009h
.text:0000000000001144                 mov     [rsp+78h+var_68], rax
.text:0000000000001149                 mov     rax, 600000005h
.text:0000000000001153                 mov     [rsp+78h+var_60], rax
.text:0000000000001158                 mov     rax, 800000007h
.text:0000000000001162                 mov     [rsp+78h+var_58], rax
.text:0000000000001167                 mov     rax, 400000000h
.text:0000000000001171                 mov     [rsp+78h+var_50], rax
.text:0000000000001176                 mov     rax, 0A00000004h
.text:0000000000001180                 mov     cs:_TIG_IZ_FShb_argv, rsi
.text:0000000000001187                 mov     cs:_TIG_IZ_FShb_envp, rdx
.text:000000000000118E                 mov     [rsp+78h+var_48], rax
.text:0000000000001193                 mov     [rsp+78h+var_40], 0FFFFFFFFh
.text:000000000000119B                 call    timsort_constprop_0
.text:00000000000011A0
.text:00000000000011A0 loc_11A0:                               ; CODE XREF: main+D6↓j
.text:00000000000011A0                 mov     esi, [rbx]
.text:00000000000011A2                 mov     rdx, r12
.text:00000000000011A5                 mov     rdi, rbp        ; format
.text:00000000000011A8                 xor     eax, eax
.text:00000000000011AA                 add     rbx, 4
.text:00000000000011AE                 call    _printf
.text:00000000000011B3                 cmp     r13, rbx
.text:00000000000011B6                 jnz     short loc_11A0
.text:00000000000011B8                 mov     esi, [rsp+78h+var_40]
.text:00000000000011BC                 xor     eax, eax
.text:00000000000011BE                 lea     rdx, asc_300B   ; "\n"
.text:00000000000011C5                 mov     rdi, rbp        ; format
.text:00000000000011C8                 call    _printf
.text:00000000000011CD                 mov     rax, [rsp+78h+var_30]
.text:00000000000011D2                 sub     rax, fs:28h
.text:00000000000011DB                 jnz     short loc_11EA
.text:00000000000011DD                 add     rsp, 58h
.text:00000000000011E1                 xor     eax, eax
.text:00000000000011E3                 pop     rbx
.text:00000000000011E4                 pop     rbp
.text:00000000000011E5                 pop     r12
.text:00000000000011E7                 pop     r13
.text:00000000000011E9                 retn
.text:00000000000011EA ; ---------------------------------------------------------------------------
.text:00000000000011EA
.text:00000000000011EA loc_11EA:                               ; CODE XREF: main+FB↑j
.text:00000000000011EA                 call    ___stack_chk_fail
.text:00000000000011EA ; } // starts at 10E0
.text:00000000000011EA main            endp
.text:00000000000011EA
.text:00000000000011EA ; ---------------------------------------------------------------------------
.text:00000000000011EF                 align 10h
.text:00000000000011F0
.text:00000000000011F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000011F0
.text:00000000000011F0 ; Attributes: noreturn fuzzy-sp
.text:00000000000011F0
.text:00000000000011F0                 public _start
.text:00000000000011F0 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000011F0 ; __unwind {
.text:00000000000011F0                 endbr64
.text:00000000000011F4                 xor     ebp, ebp
.text:00000000000011F6                 mov     r9, rdx         ; rtld_fini
.text:00000000000011F9                 pop     rsi             ; argc
.text:00000000000011FA                 mov     rdx, rsp        ; ubp_av
.text:00000000000011FD                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001201                 push    rax
.text:0000000000001202                 push    rsp             ; stack_end
.text:0000000000001203                 xor     r8d, r8d        ; fini
.text:0000000000001206                 xor     ecx, ecx        ; init
.text:0000000000001208                 lea     rdi, main       ; main
.text:000000000000120F                 call    cs:__libc_start_main_ptr
.text:0000000000001215                 hlt
.text:0000000000001215 ; } // starts at 11F0
.text:0000000000001215 _start          endp
.text:0000000000001215
.text:0000000000001215 ; ---------------------------------------------------------------------------
.text:0000000000001216                 align 20h
.text:0000000000001220
.text:0000000000001220 ; =============== S U B R O U T I N E =======================================
.text:0000000000001220
.text:0000000000001220
.text:0000000000001220 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_12B7↓p
.text:0000000000001220                 lea     rdi, __bss_start
.text:0000000000001227                 lea     rax, __bss_start
.text:000000000000122E                 cmp     rax, rdi
.text:0000000000001231                 jz      short locret_1248
.text:0000000000001233                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000123A                 test    rax, rax
.text:000000000000123D                 jz      short locret_1248
.text:000000000000123F                 jmp     rax
.text:000000000000123F ; ---------------------------------------------------------------------------
.text:0000000000001241                 align 8
.text:0000000000001248
.text:0000000000001248 locret_1248:                            ; CODE XREF: deregister_tm_clones+11↑j
.text:0000000000001248                                         ; deregister_tm_clones+1D↑j
.text:0000000000001248                 retn
.text:0000000000001248 deregister_tm_clones endp
.text:0000000000001248
.text:0000000000001248 ; ---------------------------------------------------------------------------
.text:0000000000001249                 align 10h
.text:0000000000001250
.text:0000000000001250 ; =============== S U B R O U T I N E =======================================
.text:0000000000001250
.text:0000000000001250
.text:0000000000001250 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
.text:0000000000001250                 lea     rdi, __bss_start
.text:0000000000001257                 lea     rsi, __bss_start
.text:000000000000125E                 sub     rsi, rdi
.text:0000000000001261                 mov     rax, rsi
.text:0000000000001264                 shr     rsi, 3Fh
.text:0000000000001268                 sar     rax, 3
.text:000000000000126C                 add     rsi, rax
.text:000000000000126F                 sar     rsi, 1
.text:0000000000001272                 jz      short locret_1288
.text:0000000000001274                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000127B                 test    rax, rax
.text:000000000000127E                 jz      short locret_1288
.text:0000000000001280                 jmp     rax
.text:0000000000001280 ; ---------------------------------------------------------------------------
.text:0000000000001282                 align 8
.text:0000000000001288
.text:0000000000001288 locret_1288:                            ; CODE XREF: register_tm_clones+22↑j
.text:0000000000001288                                         ; register_tm_clones+2E↑j
.text:0000000000001288                 retn
.text:0000000000001288 register_tm_clones endp
.text:0000000000001288
.text:0000000000001288 ; ---------------------------------------------------------------------------
.text:0000000000001289                 align 10h
.text:0000000000001290
.text:0000000000001290 ; =============== S U B R O U T I N E =======================================
.text:0000000000001290
.text:0000000000001290
.text:0000000000001290 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001290                 endbr64
.text:0000000000001294                 cmp     cs:__bss_start, 0
.text:000000000000129B                 jnz     short locret_12C8
.text:000000000000129D                 push    rbp
.text:000000000000129E                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000012A6                 mov     rbp, rsp
.text:00000000000012A9                 jz      short loc_12B7
.text:00000000000012AB                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000012B2                 call    __cxa_finalize
.text:00000000000012B7
.text:00000000000012B7 loc_12B7:                               ; CODE XREF: __do_global_dtors_aux+19↑j
.text:00000000000012B7                 call    deregister_tm_clones
.text:00000000000012BC                 mov     cs:__bss_start, 1
.text:00000000000012C3                 pop     rbp
.text:00000000000012C4                 retn
.text:00000000000012C4 ; ---------------------------------------------------------------------------
.text:00000000000012C5                 align 8
.text:00000000000012C8
.text:00000000000012C8 locret_12C8:                            ; CODE XREF: __do_global_dtors_aux+B↑j
.text:00000000000012C8                 retn
.text:00000000000012C8 __do_global_dtors_aux endp
.text:00000000000012C8
.text:00000000000012C8 ; ---------------------------------------------------------------------------
.text:00000000000012C9                 align 10h
.text:00000000000012D0
.text:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000012D0
.text:00000000000012D0
.text:00000000000012D0 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000012D0                 endbr64
.text:00000000000012D4                 jmp     register_tm_clones
.text:00000000000012D4 frame_dummy     endp
.text:00000000000012D4
.text:00000000000012D4 ; ---------------------------------------------------------------------------
.text:00000000000012D9                 align 20h
.text:00000000000012E0
.text:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000012E0
.text:00000000000012E0
.text:00000000000012E0 timsort_constprop_0 proc near           ; CODE XREF: main+BB↑p
.text:00000000000012E0
.text:00000000000012E0 var_898         = qword ptr -898h
.text:00000000000012E0 var_890         = qword ptr -890h
.text:00000000000012E0 var_888         = qword ptr -888h
.text:00000000000012E0 var_880         = qword ptr -880h
.text:00000000000012E0 var_878         = qword ptr -878h
.text:00000000000012E0 var_870         = qword ptr -870h
.text:00000000000012E0 dest            = qword ptr -868h
.text:00000000000012E0 var_860         = qword ptr -860h
.text:00000000000012E0 var_858         = qword ptr -858h
.text:00000000000012E0 var_850         = qword ptr -850h
.text:00000000000012E0 var_848         = qword ptr -848h
.text:00000000000012E0 var_840         = qword ptr -840h
.text:00000000000012E0 var_448         = qword ptr -448h
.text:00000000000012E0 var_440         = qword ptr -440h
.text:00000000000012E0 var_40          = qword ptr -40h
.text:00000000000012E0
.text:00000000000012E0 ; __unwind {
.text:00000000000012E0                 push    r15
.text:00000000000012E2                 mov     r15, rdi
.text:00000000000012E5                 mov     edi, 3Ch ; '<'  ; size
.text:00000000000012EA                 push    r14
.text:00000000000012EC                 push    r13
.text:00000000000012EE                 push    r12
.text:00000000000012F0                 push    rbp
.text:00000000000012F1                 push    rbx
.text:00000000000012F2                 sub     rsp, 868h
.text:00000000000012F9                 mov     rax, fs:28h
.text:0000000000001302                 mov     [rsp+898h+var_40], rax
.text:000000000000130A                 xor     eax, eax
.text:000000000000130C                 call    _malloc
.text:0000000000001311                 test    rax, rax
.text:0000000000001314                 jz      loc_21B3
.text:000000000000131A                 mov     [rsp+898h+dest], rax
.text:000000000000131F                 mov     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000001326                 xor     esi, esi
.text:0000000000001328                 mov     [rsp+898h+var_898], 0
.text:0000000000001330                 mov     rbp, r14
.text:0000000000001333                 nop     dword ptr [rax+rax+00h]
.text:0000000000001338
.text:0000000000001338 loc_1338:                               ; CODE XREF: timsort_constprop_0+2B6↓j
.text:0000000000001338                 mov     rax, 7FFFFFFFFFFFFFF2h
.text:0000000000001342                 add     rax, rsi
.text:0000000000001345                 cqo
.text:0000000000001347                 xor     rax, rdx
.text:000000000000134A                 cmp     rax, rdx
.text:000000000000134D                 jns     loc_178F
.text:0000000000001353                 mov     rax, rsi
.text:0000000000001356                 mov     rdx, rsi
.text:0000000000001359                 or      rax, 1
.text:000000000000135D                 xor     rdx, 1
.text:0000000000001361                 add     rax, rax
.text:0000000000001364                 sub     rax, rdx
.text:0000000000001367                 mov     r14, rax
.text:000000000000136A                 lea     rax, [rax-0Fh]
.text:000000000000136E                 mov     [rsp+898h+var_888], rax
.text:0000000000001373                 mov     rax, r14
.text:0000000000001376                 not     rax
.text:0000000000001379                 mov     [rsp+898h+var_890], rax
.text:000000000000137E
.text:000000000000137E loc_137E:                               ; CODE XREF: timsort_constprop_0+555↓j
.text:000000000000137E                                         ; timsort_constprop_0+9BE↓j ...
.text:000000000000137E                 mov     rdx, [rsp+898h+var_890]
.text:0000000000001383                 mov     rax, r14
.text:0000000000001386                 mov     r8d, 20h ; ' '
.text:000000000000138C                 mov     edi, 0Fh
.text:0000000000001391                 xor     rax, rsi
.text:0000000000001394                 and     rdx, rsi
.text:0000000000001397                 add     rdx, rdx
.text:000000000000139A                 sub     rax, rdx
.text:000000000000139D                 mov     rcx, rax
.text:00000000000013A0                 lea     rdx, [rax-20h]
.text:00000000000013A4                 not     rcx
.text:00000000000013A7                 test    rcx, rdx
.text:00000000000013AA                 cmovns  r8, rax
.text:00000000000013AE                 lea     rdx, [r8+rsi]
.text:00000000000013B2                 mov     rcx, rdx
.text:00000000000013B5                 sub     rdi, rdx
.text:00000000000013B8                 or      rcx, 0FFFFFFFFFFFFFFF0h
.text:00000000000013BC                 and     rcx, rdi
.text:00000000000013BF                 or      rdx, rcx
.text:00000000000013C2                 js      loc_183A
.text:00000000000013C8                 mov     r10, r8
.text:00000000000013CB                 xor     r8, rsi
.text:00000000000013CE                 or      r10, rsi
.text:00000000000013D1                 add     r10, r10
.text:00000000000013D4                 sub     r10, r8
.text:00000000000013D7                 mov     rbx, r10
.text:00000000000013DA                 not     rbx
.text:00000000000013DD
.text:00000000000013DD loc_13DD:                               ; CODE XREF: timsort_constprop_0+567↓j
.text:00000000000013DD                 add     rax, rsi
.text:00000000000013E0                 mov     rdx, rax
.text:00000000000013E3                 mov     rcx, rax
.text:00000000000013E6                 xor     rdx, r10
.text:00000000000013E9                 sub     rcx, r10
.text:00000000000013EC                 not     rdx
.text:00000000000013EF                 and     rdx, rcx
.text:00000000000013F2                 mov     rcx, rax
.text:00000000000013F5                 not     rcx
.text:00000000000013F8                 and     rcx, r10
.text:00000000000013FB                 or      rdx, rcx
.text:00000000000013FE                 jns     loc_14A0
.text:0000000000001404                 lea     r8, [rax+1]
.text:0000000000001408                 lea     r9, [r15+rax*4]
.text:000000000000140C                 mov     r11, r8
.text:000000000000140F                 sub     r11, r10
.text:0000000000001412                 nop     word ptr [rax+rax+00h]
.text:0000000000001418
.text:0000000000001418 loc_1418:                               ; CODE XREF: timsort_constprop_0+1A4↓j
.text:0000000000001418                 mov     ecx, [r9]
.text:000000000000141B                 mov     rdx, r9
.text:000000000000141E                 cmp     rsi, rax
.text:0000000000001421                 jb      short loc_1445
.text:0000000000001423                 jmp     short loc_1459
.text:0000000000001423 ; ---------------------------------------------------------------------------
.text:0000000000001425                 align 8
.text:0000000000001428
.text:0000000000001428 loc_1428:                               ; CODE XREF: timsort_constprop_0+177↓j
.text:0000000000001428                 mov     [rdx], edi
.text:000000000000142A                 mov     rdi, rax
.text:000000000000142D                 not     rax
.text:0000000000001430                 mov     rdx, rax
.text:0000000000001433                 and     rdi, 0FFFFFFFFFFFFFFFEh
.text:0000000000001437                 and     edx, 1
.text:000000000000143A                 mov     rax, rdi
.text:000000000000143D                 sub     rax, rdx
.text:0000000000001440                 cmp     rax, rsi
.text:0000000000001443                 jbe     short loc_1490
.text:0000000000001445
.text:0000000000001445 loc_1445:                               ; CODE XREF: timsort_constprop_0+141↑j
.text:0000000000001445                 lea     rdx, ds:0[rax*4]
.text:000000000000144D                 mov     edi, [r15+rdx-4]
.text:0000000000001452                 add     rdx, r15
.text:0000000000001455                 cmp     ecx, edi
.text:0000000000001457                 jl      short loc_1428
.text:0000000000001459
.text:0000000000001459 loc_1459:                               ; CODE XREF: timsort_constprop_0+143↑j
.text:0000000000001459                                         ; timsort_constprop_0+1B4↓j
.text:0000000000001459                 mov     [rdx], ecx
.text:000000000000145B                 mov     rdx, r8
.text:000000000000145E                 mov     rcx, r8
.text:0000000000001461                 add     r9, 4
.text:0000000000001465                 xor     rdx, r10
.text:0000000000001468                 not     rcx
.text:000000000000146B                 mov     rax, r8
.text:000000000000146E                 not     rdx
.text:0000000000001471                 and     rcx, r10
.text:0000000000001474                 and     rdx, r11
.text:0000000000001477                 add     r11, 1
.text:000000000000147B                 or      rdx, rcx
.text:000000000000147E                 jns     short loc_14A0
.text:0000000000001480                 add     r8, 1
.text:0000000000001484                 jmp     short loc_1418
.text:0000000000001484 ; ---------------------------------------------------------------------------
.text:0000000000001486                 align 10h
.text:0000000000001490
.text:0000000000001490 loc_1490:                               ; CODE XREF: timsort_constprop_0+163↑j
.text:0000000000001490                 lea     rdx, [r15+rax*4]
.text:0000000000001494                 jmp     short loc_1459
.text:0000000000001494 ; ---------------------------------------------------------------------------
.text:0000000000001496                 align 20h
.text:00000000000014A0
.text:00000000000014A0 loc_14A0:                               ; CODE XREF: timsort_constprop_0+11E↑j
.text:00000000000014A0                                         ; timsort_constprop_0+19E↑j
.text:00000000000014A0                 mov     rax, [rsp+898h+var_898]
.text:00000000000014A4                 and     r10, rbp
.text:00000000000014A7                 and     rbx, rsi
.text:00000000000014AA                 sub     r10, rbx
.text:00000000000014AD                 mov     rdx, rax
.text:00000000000014B0                 mov     [rsp+rax*8+898h+var_848], rsi
.text:00000000000014B5                 mov     [rsp+rax*8+898h+var_448], r10
.text:00000000000014BD                 add     rax, rax
.text:00000000000014C0                 xor     rdx, 1
.text:00000000000014C4                 and     eax, 2
.text:00000000000014C7                 add     rax, rdx
.text:00000000000014CA                 mov     [rsp+898h+var_898], rax
.text:00000000000014CE                 cmp     rax, 1
.text:00000000000014D2                 jbe     loc_157E
.text:00000000000014D8                 cmp     [rsp+898h+var_898], 2
.text:00000000000014DD                 jz      loc_1A08
.text:00000000000014E3                 mov     rcx, [rsp+898h+dest]
.text:00000000000014E8                 mov     r11, [rsp+898h+var_898]
.text:00000000000014EC                 mov     [rsp+898h+var_880], r14
.text:00000000000014F1
.text:00000000000014F1 loc_14F1:                               ; CODE XREF: timsort_constprop_0+71D↓j
.text:00000000000014F1                 lea     rax, [r11-1]
.text:00000000000014F5                 lea     r9, [r11-2]
.text:00000000000014F9                 mov     r14, [rsp+rax*8+898h+var_448]
.text:0000000000001501                 mov     rbp, [rsp+r9*8+898h+var_448]
.text:0000000000001509                 mov     [rsp+898h+var_898], rax
.text:000000000000150D                 lea     r8, [r11-3]
.text:0000000000001511                 mov     rsi, [rsp+r8*8+898h+var_448]
.text:0000000000001519                 mov     rax, r14
.text:000000000000151C                 mov     rdi, rbp
.text:000000000000151F                 lea     rdx, [rbp+r14+0]
.text:0000000000001524                 mov     r10, rbp
.text:0000000000001527                 neg     rax
.text:000000000000152A                 xor     rdi, r14
.text:000000000000152D                 not     r10
.text:0000000000001530                 mov     rbx, rsi
.text:0000000000001533                 mov     [rsp+898h+var_870], rax
.text:0000000000001538                 lea     rax, [rbp-1]
.text:000000000000153C                 lea     r12, [rsi-1]
.text:0000000000001540                 not     rbx
.text:0000000000001543                 sub     rax, r14
.text:0000000000001546                 mov     [rsp+898h+var_878], rdi
.text:000000000000154B                 sub     r12, rdx
.text:000000000000154E                 or      rax, rdi
.text:0000000000001551                 mov     rdi, r14
.text:0000000000001554                 or      rdi, r10
.text:0000000000001557                 and     rax, rdi
.text:000000000000155A                 mov     rdi, rsi
.text:000000000000155D                 xor     rdi, rdx
.text:0000000000001560                 or      rdx, rbx
.text:0000000000001563                 or      rdi, r12
.text:0000000000001566                 and     rdx, rdi
.text:0000000000001569                 mov     rdi, rax
.text:000000000000156C                 shr     rdi, 3Fh
.text:0000000000001570                 or      rdx, rax
.text:0000000000001573                 js      short loc_159B
.text:0000000000001575
.text:0000000000001575 loc_1575:                               ; CODE XREF: timsort_constprop_0+C58↓j
.text:0000000000001575                 mov     [rsp+898h+var_898], r11
.text:0000000000001579                 mov     r14, [rsp+898h+var_880]
.text:000000000000157E
.text:000000000000157E loc_157E:                               ; CODE XREF: timsort_constprop_0+1F2↑j
.text:000000000000157E                                         ; timsort_constprop_0+109B↓j
.text:000000000000157E                 mov     rbx, [rsp+898h+var_888]
.text:0000000000001583                 test    [rsp+898h+var_890], rbx
.text:0000000000001588                 jns     loc_1A62
.text:000000000000158E
.text:000000000000158E loc_158E:                               ; CODE XREF: timsort_constprop_0+77C↓j
.text:000000000000158E                 mov     rbp, [rsp+898h+var_890]
.text:0000000000001593                 mov     rsi, r14
.text:0000000000001596                 jmp     loc_1338
.text:000000000000159B ; ---------------------------------------------------------------------------
.text:000000000000159B
.text:000000000000159B loc_159B:                               ; CODE XREF: timsort_constprop_0+293↑j
.text:000000000000159B                 mov     rdx, r14
.text:000000000000159E                 mov     rax, rsi
.text:00000000000015A1                 mov     r13, [rsp+r9*8+898h+var_848]
.text:00000000000015A6                 or      rdx, rbx
.text:00000000000015A9                 sub     rax, r14
.text:00000000000015AC                 and     rbx, r14
.text:00000000000015AF                 and     rax, rdx
.text:00000000000015B2                 mov     r12, rbx
.text:00000000000015B5                 or      r12, rax
.text:00000000000015B8                 shr     r12, 3Fh
.text:00000000000015BC                 jz      loc_184C
.text:00000000000015C2                 mov     rax, [rsp+r8*8+898h+var_848]
.text:00000000000015C7                 mov     rdx, r11
.text:00000000000015CA                 mov     [rsp+r9*8+898h+var_448], rsi
.text:00000000000015D2                 xor     rdx, 1
.text:00000000000015D6                 mov     [rsp+r8*8+898h+var_448], rbp
.text:00000000000015DE                 mov     [rsp+r9*8+898h+var_848], rax
.text:00000000000015E3                 mov     rax, r11
.text:00000000000015E6                 not     rax
.text:00000000000015E9                 mov     [rsp+r8*8+898h+var_848], r13
.text:00000000000015EE                 add     rax, rax
.text:00000000000015F1                 and     eax, 2
.text:00000000000015F4                 sub     rdx, rax
.text:00000000000015F7                 lea     rax, [rdx-2]
.text:00000000000015FB                 lea     r11, [rdx-1]
.text:00000000000015FF                 mov     r13, [rsp+r11*8+898h+var_448]
.text:0000000000001607                 mov     rbx, [rsp+rax*8+898h+var_848]
.text:000000000000160C                 mov     [rsp+898h+var_898], rax
.text:0000000000001610                 mov     rbp, [rsp+rax*8+898h+var_448]
.text:0000000000001618                 mov     r12, [rsp+r11*8+898h+var_848]
.text:000000000000161D                 mov     [rsp+898h+var_870], r11
.text:0000000000001622                 mov     rsi, r13
.text:0000000000001625                 mov     rdx, r13
.text:0000000000001628                 mov     r14, rbp
.text:000000000000162B                 lea     rax, [rbp-1]
.text:000000000000162F                 xor     rsi, rbp
.text:0000000000001632                 not     r14
.text:0000000000001635                 sub     rax, r13
.text:0000000000001638                 mov     [rsp+898h+var_878], rsi
.text:000000000000163D                 or      rax, rsi
.text:0000000000001640                 or      rdx, r14
.text:0000000000001643                 test    rax, rdx
.text:0000000000001646                 jns     loc_1E4B
.text:000000000000164C                 mov     rdx, rbp
.text:000000000000164F                 mov     rax, rbp
.text:0000000000001652                 mov     rsi, r14
.text:0000000000001655                 mov     rdi, rcx        ; dest
.text:0000000000001658                 or      rax, 4
.text:000000000000165C                 and     edx, 4
.text:000000000000165F                 and     esi, 4
.text:0000000000001662                 imul    rdx, rax
.text:0000000000001666                 mov     rax, rbp
.text:0000000000001669                 and     rax, 0FFFFFFFFFFFFFFFBh
.text:000000000000166D                 imul    rax, rsi
.text:0000000000001671                 lea     rsi, [r15+rbx*4] ; src
.text:0000000000001675                 add     rdx, rax        ; n
.text:0000000000001678                 call    _memcpy
.text:000000000000167D                 mov     rdx, r12
.text:0000000000001680                 mov     r11, [rsp+898h+var_870]
.text:0000000000001685                 mov     rcx, rax
.text:0000000000001688                 mov     rax, r12
.text:000000000000168B                 and     rdx, r13
.text:000000000000168E                 xor     rax, r13
.text:0000000000001691                 lea     r9, [rax+rdx*2]
.text:0000000000001695                 mov     rax, rbp
.text:0000000000001698                 neg     rax
.text:000000000000169B                 or      rax, rbp
.text:000000000000169E                 shr     rax, 3Fh
.text:00000000000016A2                 jz      loc_1F5F
.text:00000000000016A8                 mov     rdx, r12
.text:00000000000016AB                 mov     rax, r9
.text:00000000000016AE                 mov     rsi, r12
.text:00000000000016B1                 not     rdx
.text:00000000000016B4                 sub     rsi, r9
.text:00000000000016B7                 or      rax, rdx
.text:00000000000016BA                 and     rdx, r9
.text:00000000000016BD                 and     rax, rsi
.text:00000000000016C0                 or      rax, rdx
.text:00000000000016C3                 shr     rax, 3Fh
.text:00000000000016C7                 jz      loc_1F5F
.text:00000000000016CD                 xor     eax, eax
.text:00000000000016CF                 jmp     short loc_173C
.text:00000000000016CF ; ---------------------------------------------------------------------------
.text:00000000000016D1                 align 8
.text:00000000000016D8
.text:00000000000016D8 loc_16D8:                               ; CODE XREF: timsort_constprop_0+47A↓j
.text:00000000000016D8                 lea     rdx, [r12+r12]
.text:00000000000016DC                 mov     rsi, r12
.text:00000000000016DF                 add     rbx, 1
.text:00000000000016E3                 or      rdx, 2
.text:00000000000016E7                 xor     rsi, 1
.text:00000000000016EB                 sub     rdx, rsi
.text:00000000000016EE                 mov     r12, rdx
.text:00000000000016F1
.text:00000000000016F1 loc_16F1:                               ; CODE XREF: timsort_constprop_0+4AA↓j
.text:00000000000016F1                 mov     rdx, rbp
.text:00000000000016F4                 mov     [r10], edi
.text:00000000000016F7                 mov     rsi, rax
.text:00000000000016FA                 mov     rdi, rax
.text:00000000000016FD                 xor     rdx, rax
.text:0000000000001700                 sub     rsi, rbp
.text:0000000000001703                 not     rdi
.text:0000000000001706                 not     rdx
.text:0000000000001709                 and     rdx, rsi
.text:000000000000170C                 mov     rsi, rdi
.text:000000000000170F                 and     rsi, rbp
.text:0000000000001712                 or      rdx, rsi
.text:0000000000001715                 jns     loc_1F63
.text:000000000000171B                 mov     rdx, r12
.text:000000000000171E                 mov     rsi, r9
.text:0000000000001721                 mov     r8, r12
.text:0000000000001724                 not     rdx
.text:0000000000001727                 sub     r8, r9
.text:000000000000172A                 or      rsi, rdx
.text:000000000000172D                 and     rdx, r9
.text:0000000000001730                 and     rsi, r8
.text:0000000000001733                 or      rsi, rdx
.text:0000000000001736                 jns     loc_1F63
.text:000000000000173C
.text:000000000000173C loc_173C:                               ; CODE XREF: timsort_constprop_0+3EF↑j
.text:000000000000173C                 mov     r8d, [rcx+rax*4]
.text:0000000000001740                 mov     edi, [r15+r12*4]
.text:0000000000001744                 lea     r10, [r15+rbx*4]
.text:0000000000001748                 mov     edx, r8d
.text:000000000000174B                 mov     esi, edi
.text:000000000000174D                 xor     edx, edi
.text:000000000000174F                 not     esi
.text:0000000000001751                 not     edx
.text:0000000000001753                 and     esi, r8d
.text:0000000000001756                 sar     edx, 1
.text:0000000000001758                 add     esi, edx
.text:000000000000175A                 jns     loc_16D8
.text:0000000000001760                 mov     rdx, rbx
.text:0000000000001763                 xor     rbx, 1
.text:0000000000001767                 mov     edi, r8d
.text:000000000000176A                 or      rdx, 1
.text:000000000000176E                 mov     rsi, rbx
.text:0000000000001771                 add     rdx, rdx
.text:0000000000001774                 mov     rbx, rdx
.text:0000000000001777                 mov     rdx, rax
.text:000000000000177A                 add     rax, rax
.text:000000000000177D                 xor     rdx, 1
.text:0000000000001781                 and     eax, 2
.text:0000000000001784                 sub     rbx, rsi
.text:0000000000001787                 add     rax, rdx
.text:000000000000178A                 jmp     loc_16F1
.text:000000000000178F ; ---------------------------------------------------------------------------
.text:000000000000178F
.text:000000000000178F loc_178F:                               ; CODE XREF: timsort_constprop_0+6D↑j
.text:000000000000178F                 lea     rax, [rsi+1]
.text:0000000000001793                 lea     rbx, [rsi-0Eh]
.text:0000000000001797                 mov     ecx, [r15+rax*4]
.text:000000000000179B                 mov     edx, [r15+rax*4-4]
.text:00000000000017A0                 mov     rdi, rax
.text:00000000000017A3                 mov     [rsp+898h+var_888], rbx
.text:00000000000017A8                 not     rdi
.text:00000000000017AB                 mov     r8d, ecx
.text:00000000000017AE                 mov     r9d, ecx
.text:00000000000017B1                 mov     [rsp+898h+var_890], rdi
.text:00000000000017B6                 xor     r8d, edx
.text:00000000000017B9                 sub     r9d, edx
.text:00000000000017BC                 not     r8d
.text:00000000000017BF                 and     r8d, r9d
.text:00000000000017C2                 mov     r9d, edx
.text:00000000000017C5                 not     r9d
.text:00000000000017C8                 and     r9d, ecx
.text:00000000000017CB                 or      r8d, r9d
.text:00000000000017CE                 js      loc_1C18
.text:00000000000017D4                 mov     rdi, rax
.text:00000000000017D7                 xor     rdi, 0FFFFFFFFFFFFFFF0h
.text:00000000000017DB                 test    [rsp+898h+var_888], rdi
.text:00000000000017E0                 js      short loc_181A
.text:00000000000017E2                 jmp     loc_238F
.text:00000000000017E2 ; ---------------------------------------------------------------------------
.text:00000000000017E7                 align 10h
.text:00000000000017F0
.text:00000000000017F0 loc_17F0:                               ; CODE XREF: timsort_constprop_0+53C↓j
.text:00000000000017F0                 lea     r14, [rax+1]
.text:00000000000017F4                 sub     rax, 0Eh
.text:00000000000017F8                 mov     rdx, r14
.text:00000000000017FB                 mov     rcx, r14
.text:00000000000017FE                 xor     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000001802                 not     rcx
.text:0000000000001805                 test    rdx, rax
.text:0000000000001808                 jns     loc_1FD0
.text:000000000000180E                 mov     edx, [r15+r14*4-4]
.text:0000000000001813                 mov     ecx, [r15+r14*4]
.text:0000000000001817                 mov     rax, r14
.text:000000000000181A
.text:000000000000181A loc_181A:                               ; CODE XREF: timsort_constprop_0+500↑j
.text:000000000000181A                 cmp     edx, ecx
.text:000000000000181C                 jle     short loc_17F0
.text:000000000000181E                 lea     rbx, [rax-0Fh]
.text:0000000000001822                 mov     r14, rax
.text:0000000000001825                 mov     [rsp+898h+var_888], rbx
.text:000000000000182A                 mov     rbx, rax
.text:000000000000182D                 not     rbx
.text:0000000000001830                 mov     [rsp+898h+var_890], rbx
.text:0000000000001835                 jmp     loc_137E
.text:000000000000183A ; ---------------------------------------------------------------------------
.text:000000000000183A
.text:000000000000183A loc_183A:                               ; CODE XREF: timsort_constprop_0+E2↑j
.text:000000000000183A                 mov     rbx, 0FFFFFFFFFFFFFFF0h
.text:0000000000001841                 mov     r10d, 0Fh
.text:0000000000001847                 jmp     loc_13DD
.text:000000000000184C ; ---------------------------------------------------------------------------
.text:000000000000184C
.text:000000000000184C loc_184C:                               ; CODE XREF: timsort_constprop_0+2DC↑j
.text:000000000000184C                 mov     rax, [rsp+898h+var_898]
.text:0000000000001850                 mov     r8, [rsp+rax*8+898h+var_848]
.text:0000000000001855                 lea     rbx, [r14+r8]
.text:0000000000001859                 test    rdi, rdi
.text:000000000000185C                 jz      loc_1CFF
.text:0000000000001862                 mov     rdx, rbp
.text:0000000000001865                 mov     rax, rbp
.text:0000000000001868                 mov     rsi, r10
.text:000000000000186B                 mov     rdi, rcx        ; dest
.text:000000000000186E                 or      rax, 4
.text:0000000000001872                 and     edx, 4
.text:0000000000001875                 and     esi, 4
.text:0000000000001878                 mov     [rsp+898h+var_850], r8
.text:000000000000187D                 imul    rdx, rax
.text:0000000000001881                 mov     rax, rbp
.text:0000000000001884                 mov     [rsp+898h+var_858], r9
.text:0000000000001889                 and     rax, 0FFFFFFFFFFFFFFFBh
.text:000000000000188D                 mov     [rsp+898h+var_860], r10
.text:0000000000001892                 imul    rax, rsi
.text:0000000000001896                 lea     rsi, [r15+r13*4] ; src
.text:000000000000189A                 add     rdx, rax        ; n
.text:000000000000189D                 call    _memcpy
.text:00000000000018A2                 mov     r10, [rsp+898h+var_860]
.text:00000000000018A7                 mov     r9, [rsp+898h+var_858]
.text:00000000000018AC                 mov     rcx, rax
.text:00000000000018AF                 mov     rax, rbp
.text:00000000000018B2                 mov     r8, [rsp+898h+var_850]
.text:00000000000018B7                 neg     rax
.text:00000000000018BA                 or      rax, rbp
.text:00000000000018BD                 jns     loc_1979
.text:00000000000018C3                 mov     rax, r8
.text:00000000000018C6                 mov     rdx, r8
.text:00000000000018C9                 xor     rax, rbx
.text:00000000000018CC                 not     rdx
.text:00000000000018CF                 not     rax
.text:00000000000018D2                 and     rdx, rbx
.text:00000000000018D5                 and     rax, [rsp+898h+var_870]
.text:00000000000018DA                 or      rax, rdx
.text:00000000000018DD                 js      short loc_1942
.text:00000000000018DF                 jmp     loc_1979
.text:00000000000018DF ; ---------------------------------------------------------------------------
.text:00000000000018E4                 align 8
.text:00000000000018E8
.text:00000000000018E8 loc_18E8:                               ; CODE XREF: timsort_constprop_0+67E↓j
.text:00000000000018E8                 mov     rax, r13
.text:00000000000018EB                 xor     r13, 0FFFFFFFFFFFFFFFEh
.text:00000000000018EF                 add     r8, 1
.text:00000000000018F3                 or      rax, 1
.text:00000000000018F7                 lea     r13, [r13+rax*2+1]
.text:00000000000018FC
.text:00000000000018FC loc_18FC:                               ; CODE XREF: timsort_constprop_0+697↓j
.text:00000000000018FC                 mov     rax, rbp
.text:00000000000018FF                 mov     rdx, r12
.text:0000000000001902                 mov     [r11], esi
.text:0000000000001905                 xor     rax, r12
.text:0000000000001908                 sub     rdx, rbp
.text:000000000000190B                 not     rax
.text:000000000000190E                 and     rax, rdx
.text:0000000000001911                 mov     rdx, r12
.text:0000000000001914                 not     rdx
.text:0000000000001917                 mov     rsi, rdx
.text:000000000000191A                 and     rsi, rbp
.text:000000000000191D                 or      rax, rsi
.text:0000000000001920                 jns     short loc_197D
.text:0000000000001922                 mov     rax, r8
.text:0000000000001925                 mov     rsi, r8
.text:0000000000001928                 xor     rax, rbx
.text:000000000000192B                 sub     rsi, rbx
.text:000000000000192E                 not     rax
.text:0000000000001931                 and     rax, rsi
.text:0000000000001934                 mov     rsi, r8
.text:0000000000001937                 not     rsi
.text:000000000000193A                 and     rsi, rbx
.text:000000000000193D                 or      rax, rsi
.text:0000000000001940                 jns     short loc_197D
.text:0000000000001942
.text:0000000000001942 loc_1942:                               ; CODE XREF: timsort_constprop_0+5FD↑j
.text:0000000000001942                 mov     edi, [rcx+r12*4]
.text:0000000000001946                 mov     esi, [r15+r8*4]
.text:000000000000194A                 lea     r11, [r15+r13*4]
.text:000000000000194E                 mov     eax, edi
.text:0000000000001950                 mov     edx, esi
.text:0000000000001952                 xor     eax, esi
.text:0000000000001954                 not     edx
.text:0000000000001956                 not     eax
.text:0000000000001958                 and     edx, edi
.text:000000000000195A                 sar     eax, 1
.text:000000000000195C                 add     edx, eax
.text:000000000000195E                 jns     short loc_18E8
.text:0000000000001960                 lea     rax, [r12+r12]
.text:0000000000001964                 xor     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000001968                 add     r13, 1
.text:000000000000196C                 mov     esi, edi
.text:000000000000196E                 or      rax, 2
.text:0000000000001972                 lea     r12, [rax+r12+1]
.text:0000000000001977                 jmp     short loc_18FC
.text:0000000000001979 ; ---------------------------------------------------------------------------
.text:0000000000001979
.text:0000000000001979 loc_1979:                               ; CODE XREF: timsort_constprop_0+5DD↑j
.text:0000000000001979                                         ; timsort_constprop_0+5FF↑j
.text:0000000000001979                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000197D
.text:000000000000197D loc_197D:                               ; CODE XREF: timsort_constprop_0+640↑j
.text:000000000000197D                                         ; timsort_constprop_0+660↑j
.text:000000000000197D                 mov     rax, rbp
.text:0000000000001980                 mov     rsi, r12
.text:0000000000001983                 or      rax, rdx
.text:0000000000001986                 sub     rsi, rbp
.text:0000000000001989                 and     rdx, rbp
.text:000000000000198C                 and     rax, rsi
.text:000000000000198F                 or      rax, rdx
.text:0000000000001992                 jns     short loc_19E0
.text:0000000000001994                 mov     eax, 1
.text:0000000000001999                 lea     rdi, [rcx+rbp*4]
.text:000000000000199D                 sub     rax, rbp
.text:00000000000019A0                 add     rax, r12
.text:00000000000019A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000019A8
.text:00000000000019A8 loc_19A8:                               ; CODE XREF: timsort_constprop_0+6FE↓j
.text:00000000000019A8                 mov     rsi, r13
.text:00000000000019AB                 mov     r8, r13
.text:00000000000019AE                 mov     rdx, r13
.text:00000000000019B1                 xor     rsi, 1
.text:00000000000019B5                 and     r8d, 1
.text:00000000000019B9                 lea     r13, [rsi+r8*2]
.text:00000000000019BD                 mov     esi, [rdi+rax*4-4]
.text:00000000000019C1                 mov     [r15+rdx*4], esi
.text:00000000000019C5                 mov     rdx, r10
.text:00000000000019C8                 mov     rsi, rbp
.text:00000000000019CB                 sub     rdx, rax
.text:00000000000019CE                 or      rsi, rdx
.text:00000000000019D1                 and     rdx, rbp
.text:00000000000019D4                 and     rsi, rax
.text:00000000000019D7                 add     rax, 1
.text:00000000000019DB                 or      rsi, rdx
.text:00000000000019DE                 js      short loc_19A8
.text:00000000000019E0
.text:00000000000019E0 loc_19E0:                               ; CODE XREF: timsort_constprop_0+6B2↑j
.text:00000000000019E0                                         ; timsort_constprop_0+A7E↓j ...
.text:00000000000019E0                 or      rbp, r14
.text:00000000000019E3                 mov     r11, [rsp+898h+var_898]
.text:00000000000019E7                 lea     rax, [rbp+rbp+0]
.text:00000000000019EC                 sub     rax, [rsp+898h+var_878]
.text:00000000000019F1                 mov     [rsp+r9*8+898h+var_448], rax
.text:00000000000019F9
.text:00000000000019F9 loc_19F9:                               ; CODE XREF: timsort_constprop_0+C52↓j
.text:00000000000019F9                 cmp     r11, 2
.text:00000000000019FD                 jnz     loc_14F1
.text:0000000000001A03                 mov     r14, [rsp+898h+var_880]
.text:0000000000001A08
.text:0000000000001A08 loc_1A08:                               ; CODE XREF: timsort_constprop_0+1FD↑j
.text:0000000000001A08                 mov     rbx, [rsp+898h+var_448]
.text:0000000000001A10                 mov     r12, [rsp+898h+var_440]
.text:0000000000001A18                 mov     rdx, rbx
.text:0000000000001A1B                 mov     rsi, rbx
.text:0000000000001A1E                 lea     rax, [rbx-1]
.text:0000000000001A22                 mov     rcx, r12
.text:0000000000001A25                 xor     rsi, r12
.text:0000000000001A28                 sub     rax, r12
.text:0000000000001A2B                 not     rdx
.text:0000000000001A2E                 or      rax, rsi
.text:0000000000001A31                 or      rcx, rdx
.text:0000000000001A34                 mov     [rsp+898h+var_880], rsi
.text:0000000000001A39                 and     rax, rcx
.text:0000000000001A3C                 shr     rax, 3Fh
.text:0000000000001A40                 mov     [rsp+898h+var_898], rax
.text:0000000000001A44                 jnz     loc_21DC
.text:0000000000001A4A                 mov     [rsp+898h+var_898], 2
.text:0000000000001A52                 mov     rbx, [rsp+898h+var_888]
.text:0000000000001A57                 test    [rsp+898h+var_890], rbx
.text:0000000000001A5C                 js      loc_158E
.text:0000000000001A62
.text:0000000000001A62 loc_1A62:                               ; CODE XREF: timsort_constprop_0+2A8↑j
.text:0000000000001A62                 cmp     [rsp+898h+var_898], 1
.text:0000000000001A67                 mov     r9, [rsp+898h+dest]
.text:0000000000001A6C                 jbe     loc_2079
.text:0000000000001A72                 nop     word ptr [rax+rax+00h]
.text:0000000000001A78
.text:0000000000001A78 loc_1A78:                               ; CODE XREF: timsort_constprop_0+D93↓j
.text:0000000000001A78                 mov     rsi, [rsp+898h+var_898]
.text:0000000000001A7C                 lea     rax, [rsi-1]
.text:0000000000001A80                 mov     r13, [rsp+rax*8+898h+var_448]
.text:0000000000001A88                 mov     rbx, [rsp+rax*8+898h+var_848]
.text:0000000000001A8D                 lea     rax, [rsi-2]
.text:0000000000001A91                 mov     r12, [rsp+rax*8+898h+var_448]
.text:0000000000001A99                 mov     rbp, [rsp+rax*8+898h+var_848]
.text:0000000000001A9E                 mov     [rsp+898h+var_890], rax
.text:0000000000001AA3                 mov     rsi, r13
.text:0000000000001AA6                 mov     rdx, r13
.text:0000000000001AA9                 mov     r14, r12
.text:0000000000001AAC                 lea     rax, [r12-1]
.text:0000000000001AB1                 xor     rsi, r12
.text:0000000000001AB4                 not     r14
.text:0000000000001AB7                 sub     rax, r13
.text:0000000000001ABA                 mov     [rsp+898h+var_888], rsi
.text:0000000000001ABF                 or      rax, rsi
.text:0000000000001AC2                 or      rdx, r14
.text:0000000000001AC5                 test    rax, rdx
.text:0000000000001AC8                 jns     loc_20A9
.text:0000000000001ACE                 mov     rdx, r12
.text:0000000000001AD1                 mov     rax, r12
.text:0000000000001AD4                 mov     rcx, r14
.text:0000000000001AD7                 mov     rdi, r9         ; dest
.text:0000000000001ADA                 or      rax, 4
.text:0000000000001ADE                 and     edx, 4
.text:0000000000001AE1                 lea     rsi, [r15+rbp*4] ; src
.text:0000000000001AE5                 and     ecx, 4
.text:0000000000001AE8                 imul    rdx, rax
.text:0000000000001AEC                 mov     rax, r12
.text:0000000000001AEF                 and     rax, 0FFFFFFFFFFFFFFFBh
.text:0000000000001AF3                 imul    rax, rcx
.text:0000000000001AF7                 add     rdx, rax        ; n
.text:0000000000001AFA                 call    _memcpy
.text:0000000000001AFF                 mov     rdx, rbx
.text:0000000000001B02                 mov     rcx, r12
.text:0000000000001B05                 mov     r9, rax
.text:0000000000001B08                 mov     rax, rbx
.text:0000000000001B0B                 xor     rdx, r13
.text:0000000000001B0E                 neg     rcx
.text:0000000000001B11                 or      rax, r13
.text:0000000000001B14                 add     rax, rax
.text:0000000000001B17                 mov     r8, rax
.text:0000000000001B1A                 sub     r8, rdx
.text:0000000000001B1D                 or      rcx, r12
.text:0000000000001B20                 jns     loc_203D
.text:0000000000001B26                 mov     r11, rdx
.text:0000000000001B29                 mov     rdx, rbx
.text:0000000000001B2C                 not     rdx
.text:0000000000001B2F                 sub     r11, rax
.text:0000000000001B32                 mov     rax, rdx
.text:0000000000001B35                 lea     rcx, [r11+rbx]
.text:0000000000001B39                 and     rdx, r8
.text:0000000000001B3C                 or      rax, r8
.text:0000000000001B3F                 and     rax, rcx
.text:0000000000001B42                 or      rax, rdx
.text:0000000000001B45                 shr     rax, 3Fh
.text:0000000000001B49                 jz      loc_1FEF
.text:0000000000001B4F                 mov     [rsp+898h+var_880], r13
.text:0000000000001B54                 xor     eax, eax
.text:0000000000001B56                 jmp     short loc_1BD0
.text:0000000000001B56 ; ---------------------------------------------------------------------------
.text:0000000000001B58                 align 20h
.text:0000000000001B60
.text:0000000000001B60 loc_1B60:                               ; CODE XREF: timsort_constprop_0+910↓j
.text:0000000000001B60                 mov     rdx, rbp
.text:0000000000001B63                 mov     rsi, rbp
.text:0000000000001B66                 or      rdx, 1
.text:0000000000001B6A                 xor     rsi, 1
.text:0000000000001B6E                 add     rdx, rdx
.text:0000000000001B71                 sub     rdx, rsi
.text:0000000000001B74                 mov     rbp, rdx
.text:0000000000001B77                 mov     rdx, rbx
.text:0000000000001B7A                 add     rbx, rbx
.text:0000000000001B7D                 xor     rdx, 1
.text:0000000000001B81                 and     ebx, 2
.text:0000000000001B84                 add     rbx, rdx
.text:0000000000001B87
.text:0000000000001B87 loc_1B87:                               ; CODE XREF: timsort_constprop_0+933↓j
.text:0000000000001B87                 mov     rdx, rax
.text:0000000000001B8A                 mov     [r10], ecx
.text:0000000000001B8D                 mov     rsi, rax
.text:0000000000001B90                 mov     r10, rax
.text:0000000000001B93                 xor     rdx, r12
.text:0000000000001B96                 sub     r10, r12
.text:0000000000001B99                 not     rsi
.text:0000000000001B9C                 mov     rdi, r12
.text:0000000000001B9F                 not     rdx
.text:0000000000001BA2                 and     rdi, rsi
.text:0000000000001BA5                 and     rdx, r10
.text:0000000000001BA8                 or      rdx, rdi
.text:0000000000001BAB                 jns     loc_1FDF
.text:0000000000001BB1                 mov     rdx, rbx
.text:0000000000001BB4                 mov     r13, r8
.text:0000000000001BB7                 lea     rcx, [r11+rbx]
.text:0000000000001BBB                 not     rdx
.text:0000000000001BBE                 or      r13, rdx
.text:0000000000001BC1                 and     rdx, r8
.text:0000000000001BC4                 and     rcx, r13
.text:0000000000001BC7                 or      rdx, rcx
.text:0000000000001BCA                 jns     loc_1FDF
.text:0000000000001BD0
.text:0000000000001BD0 loc_1BD0:                               ; CODE XREF: timsort_constprop_0+876↑j
.text:0000000000001BD0                 mov     ecx, [r15+rbx*4]
.text:0000000000001BD4                 mov     esi, [r9+rax*4]
.text:0000000000001BD8                 lea     r10, [r15+rbp*4]
.text:0000000000001BDC                 mov     edx, ecx
.text:0000000000001BDE                 mov     r13d, esi
.text:0000000000001BE1                 not     edx
.text:0000000000001BE3                 xor     r13d, ecx
.text:0000000000001BE6                 lea     edi, [rsi+rdx]
.text:0000000000001BE9                 or      edx, esi
.text:0000000000001BEB                 or      edi, r13d
.text:0000000000001BEE                 test    edi, edx
.text:0000000000001BF0                 jns     loc_1B60
.text:0000000000001BF6                 mov     rdx, rax
.text:0000000000001BF9                 xor     rax, 1
.text:0000000000001BFD                 add     rbp, 1
.text:0000000000001C01                 or      rdx, 1
.text:0000000000001C05                 mov     rcx, rax
.text:0000000000001C08                 add     rdx, rdx
.text:0000000000001C0B                 mov     rax, rdx
.text:0000000000001C0E                 sub     rax, rcx
.text:0000000000001C11                 mov     ecx, esi
.text:0000000000001C13                 jmp     loc_1B87
.text:0000000000001C18 ; ---------------------------------------------------------------------------
.text:0000000000001C18
.text:0000000000001C18 loc_1C18:                               ; CODE XREF: timsort_constprop_0+4EE↑j
.text:0000000000001C18                 test    rbx, rdi
.text:0000000000001C1B                 jns     short loc_1C58
.text:0000000000001C1D                 nop     dword ptr [rax]
.text:0000000000001C20
.text:0000000000001C20 loc_1C20:                               ; CODE XREF: timsort_constprop_0+976↓j
.text:0000000000001C20                 mov     rdx, rax
.text:0000000000001C23                 add     rax, 1
.text:0000000000001C27                 mov     rdi, rax
.text:0000000000001C2A                 sub     rdx, 0Eh
.text:0000000000001C2E                 not     rdi
.text:0000000000001C31                 test    rdi, rdx
.text:0000000000001C34                 jns     short loc_1C58
.text:0000000000001C36                 mov     r8d, [r15+rax*4]
.text:0000000000001C3A                 mov     edx, [r15+rax*4-4]
.text:0000000000001C3F                 mov     ecx, r8d
.text:0000000000001C42                 mov     r9d, r8d
.text:0000000000001C45                 xor     ecx, edx
.text:0000000000001C47                 sub     r9d, edx
.text:0000000000001C4A                 not     edx
.text:0000000000001C4C                 not     ecx
.text:0000000000001C4E                 and     edx, r8d
.text:0000000000001C51                 and     ecx, r9d
.text:0000000000001C54                 or      ecx, edx
.text:0000000000001C56                 js      short loc_1C20
.text:0000000000001C58
.text:0000000000001C58 loc_1C58:                               ; CODE XREF: timsort_constprop_0+93B↑j
.text:0000000000001C58                                         ; timsort_constprop_0+954↑j
.text:0000000000001C58                 mov     r8, rax
.text:0000000000001C5B                 lea     rcx, [rdi+rdi]
.text:0000000000001C5F                 mov     r14, rax
.text:0000000000001C62                 sub     rax, 0Fh
.text:0000000000001C66                 xor     r8, 1
.text:0000000000001C6A                 and     ecx, 2
.text:0000000000001C6D                 mov     [rsp+898h+var_890], rdi
.text:0000000000001C72                 mov     rdi, rsi
.text:0000000000001C75                 mov     rdx, r8
.text:0000000000001C78                 mov     [rsp+898h+var_888], rax
.text:0000000000001C7D                 sub     rdi, r8
.text:0000000000001C80                 sub     rdx, rcx
.text:0000000000001C83                 add     rcx, rdi
.text:0000000000001C86                 mov     rax, rdx
.text:0000000000001C89                 xor     rax, rsi
.text:0000000000001C8C                 not     rax
.text:0000000000001C8F                 and     rax, rcx
.text:0000000000001C92                 mov     rcx, rsi
.text:0000000000001C95                 not     rcx
.text:0000000000001C98                 and     rcx, rdx
.text:0000000000001C9B                 or      rax, rcx
.text:0000000000001C9E                 jns     loc_137E
.text:0000000000001CA4                 mov     rax, rsi
.text:0000000000001CA7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001CB0
.text:0000000000001CB0 loc_1CB0:                               ; CODE XREF: timsort_constprop_0+A18↓j
.text:0000000000001CB0                 mov     r8d, [r15+rdx*4]
.text:0000000000001CB4                 lea     rcx, [r15+rax*4]
.text:0000000000001CB8                 mov     edi, [rcx]
.text:0000000000001CBA                 mov     [rcx], r8d
.text:0000000000001CBD                 lea     rcx, [rax+rax]
.text:0000000000001CC1                 xor     rax, 1
.text:0000000000001CC5                 or      rcx, 2
.text:0000000000001CC9                 mov     [r15+rdx*4], edi
.text:0000000000001CCD                 mov     rdi, rax
.text:0000000000001CD0                 sub     rdx, 1
.text:0000000000001CD4                 mov     rax, rcx
.text:0000000000001CD7                 sub     rax, rdi
.text:0000000000001CDA                 mov     rcx, rax
.text:0000000000001CDD                 mov     rdi, rax
.text:0000000000001CE0                 xor     rcx, rdx
.text:0000000000001CE3                 sub     rdi, rdx
.text:0000000000001CE6                 not     rcx
.text:0000000000001CE9                 and     rcx, rdi
.text:0000000000001CEC                 mov     rdi, rax
.text:0000000000001CEF                 not     rdi
.text:0000000000001CF2                 and     rdi, rdx
.text:0000000000001CF5                 or      rcx, rdi
.text:0000000000001CF8                 js      short loc_1CB0
.text:0000000000001CFA                 jmp     loc_137E
.text:0000000000001CFF ; ---------------------------------------------------------------------------
.text:0000000000001CFF
.text:0000000000001CFF loc_1CFF:                               ; CODE XREF: timsort_constprop_0+57C↑j
.text:0000000000001CFF                 mov     rdx, r14
.text:0000000000001D02                 mov     rax, r14
.text:0000000000001D05                 mov     rsi, r14
.text:0000000000001D08                 mov     rdi, rcx        ; dest
.text:0000000000001D0B                 not     rdx
.text:0000000000001D0E                 and     rax, 0FFFFFFFFFFFFFFFBh
.text:0000000000001D12                 or      rsi, 4
.text:0000000000001D16                 mov     [rsp+898h+var_870], r9
.text:0000000000001D1B                 and     edx, 4
.text:0000000000001D1E                 imul    rdx, rax
.text:0000000000001D22                 mov     rax, r14
.text:0000000000001D25                 and     eax, 4
.text:0000000000001D28                 imul    rax, rsi
.text:0000000000001D2C                 lea     rsi, [r15+r8*4] ; src
.text:0000000000001D30                 add     rdx, rax        ; n
.text:0000000000001D33                 call    _memcpy
.text:0000000000001D38                 mov     rdx, rbp
.text:0000000000001D3B                 mov     r9, [rsp+898h+var_870]
.text:0000000000001D40                 or      rdx, r13
.text:0000000000001D43                 mov     rcx, rax
.text:0000000000001D46                 mov     rax, rbp
.text:0000000000001D49                 add     rdx, rdx
.text:0000000000001D4C                 xor     rax, r13
.text:0000000000001D4F                 sub     rdx, rax
.text:0000000000001D52                 cmp     rdx, r13
.text:0000000000001D55                 jbe     loc_239F
.text:0000000000001D5B                 test    r14, r14
.text:0000000000001D5E                 jz      loc_19E0
.text:0000000000001D64                 mov     edi, [rcx+r14*4-4]
.text:0000000000001D69                 mov     rax, r14
.text:0000000000001D6C                 nop     dword ptr [rax+00h]
.text:0000000000001D70
.text:0000000000001D70 loc_1D70:                               ; CODE XREF: timsort_constprop_0+AD3↓j
.text:0000000000001D70                                         ; timsort_constprop_0+B66↓j
.text:0000000000001D70                 cmp     edi, [r15+rdx*4-4]
.text:0000000000001D75                 jge     loc_1DFA
.text:0000000000001D7B                 mov     r8, rbx
.text:0000000000001D7E                 not     rbx
.text:0000000000001D81                 mov     rsi, rbx
.text:0000000000001D84                 xor     r8, 1
.text:0000000000001D88                 add     rsi, rsi
.text:0000000000001D8B                 mov     rbx, r8
.text:0000000000001D8E                 and     esi, 2
.text:0000000000001D91                 sub     rbx, rsi
.text:0000000000001D94                 mov     rsi, rdx
.text:0000000000001D97                 xor     rdx, 1
.text:0000000000001D9B                 and     rsi, 0FFFFFFFFFFFFFFFEh
.text:0000000000001D9F                 add     rsi, rsi
.text:0000000000001DA2                 sub     rsi, rdx
.text:0000000000001DA5                 mov     rdx, rsi
.text:0000000000001DA8                 mov     esi, [r15+rsi*4]
.text:0000000000001DAC                 mov     [r15+rbx*4], esi
.text:0000000000001DB0                 cmp     rdx, r13
.text:0000000000001DB3                 ja      short loc_1D70
.text:0000000000001DB5
.text:0000000000001DB5 loc_1DB5:                               ; CODE XREF: timsort_constprop_0+B53↓j
.text:0000000000001DB5                                         ; timsort_constprop_0+10C2↓j
.text:0000000000001DB5                 test    rax, rax
.text:0000000000001DB8                 jz      loc_19E0
.text:0000000000001DBE                 xchg    ax, ax
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: timsort_constprop_0+B13↓j
.text:0000000000001DC0                 mov     rsi, rbx
.text:0000000000001DC3                 not     rbx
.text:0000000000001DC6                 and     rsi, 0FFFFFFFFFFFFFFFEh
.text:0000000000001DCA                 and     ebx, 1
.text:0000000000001DCD                 mov     rdx, rbx
.text:0000000000001DD0                 mov     rbx, rsi
.text:0000000000001DD3                 mov     rsi, rax
.text:0000000000001DD6                 not     rax
.text:0000000000001DD9                 and     eax, 1
.text:0000000000001DDC                 and     rsi, 0FFFFFFFFFFFFFFFEh
.text:0000000000001DE0                 sub     rbx, rdx
.text:0000000000001DE3                 mov     rdx, rax
.text:0000000000001DE6                 mov     rax, rsi
.text:0000000000001DE9                 sub     rax, rdx
.text:0000000000001DEC                 mov     edx, [rcx+rax*4]
.text:0000000000001DEF                 mov     [r15+rbx*4], edx
.text:0000000000001DF3                 jnz     short loc_1DC0
.text:0000000000001DF5                 jmp     loc_19E0
.text:0000000000001DFA ; ---------------------------------------------------------------------------
.text:0000000000001DFA
.text:0000000000001DFA loc_1DFA:                               ; CODE XREF: timsort_constprop_0+A95↑j
.text:0000000000001DFA                 mov     rdi, rbx
.text:0000000000001DFD                 not     rbx
.text:0000000000001E00                 and     rdi, 0FFFFFFFFFFFFFFFEh
.text:0000000000001E04                 mov     rsi, rbx
.text:0000000000001E07                 and     esi, 1
.text:0000000000001E0A                 mov     rbx, rdi
.text:0000000000001E0D                 mov     rdi, rax
.text:0000000000001E10                 not     rax
.text:0000000000001E13                 sub     rbx, rsi
.text:0000000000001E16                 mov     rsi, rax
.text:0000000000001E19                 xor     rdi, 1
.text:0000000000001E1D                 add     rsi, rsi
.text:0000000000001E20                 mov     rax, rdi
.text:0000000000001E23                 and     esi, 2
.text:0000000000001E26                 sub     rax, rsi
.text:0000000000001E29                 mov     esi, [rcx+rax*4]
.text:0000000000001E2C                 mov     [r15+rbx*4], esi
.text:0000000000001E30                 cmp     rdx, r13
.text:0000000000001E33                 jbe     loc_1DB5
.text:0000000000001E39                 test    rax, rax
.text:0000000000001E3C                 jz      loc_19E0
.text:0000000000001E42                 mov     edi, [rcx+rax*4-4]
.text:0000000000001E46                 jmp     loc_1D70
.text:0000000000001E4B ; ---------------------------------------------------------------------------
.text:0000000000001E4B
.text:0000000000001E4B loc_1E4B:                               ; CODE XREF: timsort_constprop_0+366↑j
.text:0000000000001E4B                 mov     rdx, r13
.text:0000000000001E4E                 mov     rax, r13
.text:0000000000001E51                 mov     rsi, r13
.text:0000000000001E54                 mov     rdi, rcx        ; dest
.text:0000000000001E57                 not     rdx
.text:0000000000001E5A                 and     rax, 0FFFFFFFFFFFFFFFBh
.text:0000000000001E5E                 or      rsi, 4
.text:0000000000001E62                 and     edx, 4
.text:0000000000001E65                 imul    rdx, rax
.text:0000000000001E69                 mov     rax, r13
.text:0000000000001E6C                 and     eax, 4
.text:0000000000001E6F                 imul    rax, rsi
.text:0000000000001E73                 lea     rsi, [r15+r12*4] ; src
.text:0000000000001E77                 add     rdx, rax        ; n
.text:0000000000001E7A                 call    _memcpy
.text:0000000000001E7F                 lea     rdx, [rbx+rbp]
.text:0000000000001E83                 mov     r11, [rsp+898h+var_870]
.text:0000000000001E88                 mov     rcx, rax
.text:0000000000001E8B                 mov     rax, r12
.text:0000000000001E8E                 xor     r12, r13
.text:0000000000001E91                 and     rax, r13
.text:0000000000001E94                 cmp     rbx, rdx
.text:0000000000001E97                 lea     rsi, [r12+rax*2]
.text:0000000000001E9B                 jnb     loc_2397
.text:0000000000001EA1                 test    r13, r13
.text:0000000000001EA4                 jz      short loc_1F15
.text:0000000000001EA6                 mov     r8d, [rcx+r13*4-4]
.text:0000000000001EAB                 mov     rax, r13
.text:0000000000001EAE                 xchg    ax, ax
.text:0000000000001EB0
.text:0000000000001EB0 loc_1EB0:                               ; CODE XREF: timsort_constprop_0+C01↓j
.text:0000000000001EB0                                         ; timsort_constprop_0+C7A↓j
.text:0000000000001EB0                 sub     rsi, 1
.text:0000000000001EB4                 cmp     r8d, [r15+rdx*4-4]
.text:0000000000001EB9                 jge     loc_1F40
.text:0000000000001EBF                 mov     r9, rdx
.text:0000000000001EC2                 not     rdx
.text:0000000000001EC5                 lea     rdi, [rdx+rdx]
.text:0000000000001EC9                 xor     r9, 1
.text:0000000000001ECD                 and     edi, 2
.text:0000000000001ED0                 mov     rdx, r9
.text:0000000000001ED3                 sub     rdx, rdi
.text:0000000000001ED6                 mov     edi, [r15+rdx*4]
.text:0000000000001EDA                 mov     [r15+rsi*4], edi
.text:0000000000001EDE                 cmp     rbx, rdx
.text:0000000000001EE1                 jb      short loc_1EB0
.text:0000000000001EE3
.text:0000000000001EE3 loc_1EE3:                               ; CODE XREF: timsort_constprop_0+C6E↓j
.text:0000000000001EE3                                         ; timsort_constprop_0+10BA↓j
.text:0000000000001EE3                 test    rax, rax
.text:0000000000001EE6                 jz      short loc_1F15
.text:0000000000001EE8                 lea     rsi, [r15+rsi*4-4]
.text:0000000000001EED                 nop     dword ptr [rax]
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: timsort_constprop_0+C33↓j
.text:0000000000001EF0                 mov     rdi, rax
.text:0000000000001EF3                 not     rax
.text:0000000000001EF6                 sub     rsi, 4
.text:0000000000001EFA                 and     eax, 1
.text:0000000000001EFD                 and     rdi, 0FFFFFFFFFFFFFFFEh
.text:0000000000001F01                 mov     rdx, rax
.text:0000000000001F04                 mov     rax, rdi
.text:0000000000001F07                 sub     rax, rdx
.text:0000000000001F0A                 mov     edx, [rcx+rax*4]
.text:0000000000001F0D                 mov     [rsi+4], edx
.text:0000000000001F10                 test    rax, rax
.text:0000000000001F13                 jnz     short loc_1EF0
.text:0000000000001F15
.text:0000000000001F15 loc_1F15:                               ; CODE XREF: timsort_constprop_0+BC4↑j
.text:0000000000001F15                                         ; timsort_constprop_0+C06↑j ...
.text:0000000000001F15                 mov     rbx, [rsp+898h+var_898]
.text:0000000000001F19                 or      r13, rbp
.text:0000000000001F1C                 lea     rax, [r13+r13+0]
.text:0000000000001F21                 sub     rax, [rsp+898h+var_878]
.text:0000000000001F26                 mov     [rsp+rbx*8+898h+var_448], rax
.text:0000000000001F2E                 cmp     r11, 1
.text:0000000000001F32                 ja      loc_19F9
.text:0000000000001F38                 jmp     loc_1575
.text:0000000000001F38 ; ---------------------------------------------------------------------------
.text:0000000000001F3D                 align 20h
.text:0000000000001F40
.text:0000000000001F40 loc_1F40:                               ; CODE XREF: timsort_constprop_0+BD9↑j
.text:0000000000001F40                 sub     rax, 1
.text:0000000000001F44                 mov     edi, [rcx+rax*4]
.text:0000000000001F47                 mov     [r15+rsi*4], edi
.text:0000000000001F4B                 cmp     rbx, rdx
.text:0000000000001F4E                 jnb     short loc_1EE3
.text:0000000000001F50                 test    rax, rax
.text:0000000000001F53                 jz      short loc_1F15
.text:0000000000001F55                 mov     r8d, [rcx+rax*4-4]
.text:0000000000001F5A                 jmp     loc_1EB0
.text:0000000000001F5F ; ---------------------------------------------------------------------------
.text:0000000000001F5F
.text:0000000000001F5F loc_1F5F:                               ; CODE XREF: timsort_constprop_0+3C2↑j
.text:0000000000001F5F                                         ; timsort_constprop_0+3E7↑j
.text:0000000000001F5F                 or      rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F63
.text:0000000000001F63 loc_1F63:                               ; CODE XREF: timsort_constprop_0+435↑j
.text:0000000000001F63                                         ; timsort_constprop_0+456↑j
.text:0000000000001F63                 mov     rdx, rdi
.text:0000000000001F66                 mov     rsi, rax
.text:0000000000001F69                 and     rdi, rbp
.text:0000000000001F6C                 or      rdx, rbp
.text:0000000000001F6F                 sub     rsi, rbp
.text:0000000000001F72                 and     rdx, rsi
.text:0000000000001F75                 or      rdx, rdi
.text:0000000000001F78                 jns     short loc_1F15
.text:0000000000001F7A                 mov     edx, 1
.text:0000000000001F7F                 lea     rdi, [rcx+rbp*4]
.text:0000000000001F83                 sub     rdx, rbp
.text:0000000000001F86                 add     rax, rdx
.text:0000000000001F89                 nop     dword ptr [rax+00000000h]
.text:0000000000001F90
.text:0000000000001F90 loc_1F90:                               ; CODE XREF: timsort_constprop_0+CE9↓j
.text:0000000000001F90                 lea     rdx, [rbx+rbx]
.text:0000000000001F94                 mov     rsi, rbx
.text:0000000000001F97                 mov     r8, rbx
.text:0000000000001F9A                 or      rdx, 2
.text:0000000000001F9E                 xor     r8, 1
.text:0000000000001FA2                 mov     rbx, rdx
.text:0000000000001FA5                 mov     edx, [rdi+rax*4-4]
.text:0000000000001FA9                 sub     rbx, r8
.text:0000000000001FAC                 mov     [r15+rsi*4], edx
.text:0000000000001FB0                 mov     rdx, r14
.text:0000000000001FB3                 mov     rsi, rbp
.text:0000000000001FB6                 sub     rdx, rax
.text:0000000000001FB9                 or      rsi, rdx
.text:0000000000001FBC                 and     rdx, rbp
.text:0000000000001FBF                 and     rsi, rax
.text:0000000000001FC2                 add     rax, 1
.text:0000000000001FC6                 or      rsi, rdx
.text:0000000000001FC9                 js      short loc_1F90
.text:0000000000001FCB                 jmp     loc_1F15
.text:0000000000001FD0 ; ---------------------------------------------------------------------------
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: timsort_constprop_0+528↑j
.text:0000000000001FD0                 mov     [rsp+898h+var_888], rax
.text:0000000000001FD5                 mov     [rsp+898h+var_890], rcx
.text:0000000000001FDA                 jmp     loc_137E
.text:0000000000001FDF ; ---------------------------------------------------------------------------
.text:0000000000001FDF
.text:0000000000001FDF loc_1FDF:                               ; CODE XREF: timsort_constprop_0+8CB↑j
.text:0000000000001FDF                                         ; timsort_constprop_0+8EA↑j
.text:0000000000001FDF                 or      rsi, r12
.text:0000000000001FE2                 mov     r13, [rsp+898h+var_880]
.text:0000000000001FE7                 and     rsi, r10
.text:0000000000001FEA                 or      rsi, rdi
.text:0000000000001FED                 jns     short loc_203D
.text:0000000000001FEF
.text:0000000000001FEF loc_1FEF:                               ; CODE XREF: timsort_constprop_0+869↑j
.text:0000000000001FEF                 mov     edx, 1
.text:0000000000001FF4                 lea     rsi, [r9+r12*4]
.text:0000000000001FF8                 sub     rdx, r12
.text:0000000000001FFB                 add     rax, rdx
.text:0000000000001FFE                 xchg    ax, ax
.text:0000000000002000
.text:0000000000002000 loc_2000:                               ; CODE XREF: timsort_constprop_0+D5B↓j
.text:0000000000002000                 mov     rdx, rbp
.text:0000000000002003                 mov     rdi, rbp
.text:0000000000002006                 mov     rcx, rbp
.text:0000000000002009                 or      rdx, 1
.text:000000000000200D                 xor     rdi, 1
.text:0000000000002011                 add     rdx, rdx
.text:0000000000002014                 sub     rdx, rdi
.text:0000000000002017                 mov     rbp, rdx
.text:000000000000201A                 mov     edx, [rsi+rax*4-4]
.text:000000000000201E                 mov     [r15+rcx*4], edx
.text:0000000000002022                 mov     rdx, r14
.text:0000000000002025                 mov     rcx, r12
.text:0000000000002028                 sub     rdx, rax
.text:000000000000202B                 or      rcx, rdx
.text:000000000000202E                 and     rdx, r12
.text:0000000000002031                 and     rcx, rax
.text:0000000000002034                 add     rax, 1
.text:0000000000002038                 or      rcx, rdx
.text:000000000000203B                 js      short loc_2000
.text:000000000000203D
.text:000000000000203D loc_203D:                               ; CODE XREF: timsort_constprop_0+840↑j
.text:000000000000203D                                         ; timsort_constprop_0+D0D↑j ...
.text:000000000000203D                 mov     rbx, [rsp+898h+var_890]
.text:0000000000002042                 or      r13, r12
.text:0000000000002045                 lea     rax, [r13+r13+0]
.text:000000000000204A                 sub     rax, [rsp+898h+var_888]
.text:000000000000204F                 mov     [rsp+rbx*8+898h+var_448], rax
.text:0000000000002057                 mov     rax, [rsp+898h+var_898]
.text:000000000000205B                 mov     rdx, rax
.text:000000000000205E                 not     rax
.text:0000000000002061                 and     rdx, 0FFFFFFFFFFFFFFFEh
.text:0000000000002065                 and     eax, 1
.text:0000000000002068                 sub     rdx, rax
.text:000000000000206B                 mov     [rsp+898h+var_898], rdx
.text:000000000000206F                 cmp     rdx, 1
.text:0000000000002073                 jnz     loc_1A78
.text:0000000000002079
.text:0000000000002079 loc_2079:                               ; CODE XREF: timsort_constprop_0+78C↑j
.text:0000000000002079                 mov     rax, [rsp+898h+var_40]
.text:0000000000002081                 sub     rax, fs:28h
.text:000000000000208A                 jnz     loc_23A7
.text:0000000000002090                 add     rsp, 868h
.text:0000000000002097                 mov     rdi, r9         ; ptr
.text:000000000000209A                 pop     rbx
.text:000000000000209B                 pop     rbp
.text:000000000000209C                 pop     r12
.text:000000000000209E                 pop     r13
.text:00000000000020A0                 pop     r14
.text:00000000000020A2                 pop     r15
.text:00000000000020A4                 jmp     _free
.text:00000000000020A9 ; ---------------------------------------------------------------------------
.text:00000000000020A9
.text:00000000000020A9 loc_20A9:                               ; CODE XREF: timsort_constprop_0+7E8↑j
.text:00000000000020A9                 mov     rdx, r13
.text:00000000000020AC                 mov     rax, r13
.text:00000000000020AF                 mov     rcx, r13
.text:00000000000020B2                 mov     rdi, r9         ; dest
.text:00000000000020B5                 not     rdx
.text:00000000000020B8                 and     rax, 0FFFFFFFFFFFFFFFBh
.text:00000000000020BC                 lea     rsi, [r15+rbx*4] ; src
.text:00000000000020C0                 or      rcx, 4
.text:00000000000020C4                 and     edx, 4
.text:00000000000020C7                 add     rbx, r13
.text:00000000000020CA                 imul    rdx, rax
.text:00000000000020CE                 mov     rax, r13
.text:00000000000020D1                 and     eax, 4
.text:00000000000020D4                 imul    rax, rcx
.text:00000000000020D8                 add     rdx, rax        ; n
.text:00000000000020DB                 call    _memcpy
.text:00000000000020E0                 mov     rcx, rbp
.text:00000000000020E3                 mov     r9, rax
.text:00000000000020E6                 or      rcx, r12
.text:00000000000020E9                 mov     rax, rbp
.text:00000000000020EC                 add     rcx, rcx
.text:00000000000020EF                 xor     rax, r12
.text:00000000000020F2                 sub     rcx, rax
.text:00000000000020F5                 cmp     rbp, rcx
.text:00000000000020F8                 jnb     loc_2380
.text:00000000000020FE                 test    r13, r13
.text:0000000000002101                 jz      loc_203D
.text:0000000000002107                 mov     rax, r13
.text:000000000000210A                 jmp     short loc_2134
.text:000000000000210A ; ---------------------------------------------------------------------------
.text:000000000000210C                 align 10h
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: timsort_constprop_0+E65↓j
.text:0000000000002110                 and     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000002114                 sub     rcx, 1
.text:0000000000002118                 add     rbx, rbx
.text:000000000000211B                 sub     rbx, rdx
.text:000000000000211E                 mov     edx, [r15+rcx*4]
.text:0000000000002122                 mov     [r15+rbx*4], edx
.text:0000000000002126                 cmp     rcx, rbp
.text:0000000000002129                 jbe     short loc_2175
.text:000000000000212B
.text:000000000000212B loc_212B:                               ; CODE XREF: timsort_constprop_0+E93↓j
.text:000000000000212B                 test    rax, rax
.text:000000000000212E                 jz      loc_203D
.text:0000000000002134
.text:0000000000002134 loc_2134:                               ; CODE XREF: timsort_constprop_0+E2A↑j
.text:0000000000002134                 mov     rdx, rbx
.text:0000000000002137                 mov     esi, [r15+rcx*4-4]
.text:000000000000213C                 xor     rdx, 1
.text:0000000000002140                 cmp     [r9+rax*4-4], esi
.text:0000000000002145                 jl      short loc_2110
.text:0000000000002147                 add     rbx, rbx
.text:000000000000214A                 and     rbx, 0FFFFFFFFFFFFFFFCh
.text:000000000000214E                 sub     rbx, rdx
.text:0000000000002151                 mov     rdx, rax
.text:0000000000002154                 xor     rax, 1
.text:0000000000002158                 and     rdx, 0FFFFFFFFFFFFFFFEh
.text:000000000000215C                 mov     rsi, rax
.text:000000000000215F                 add     rdx, rdx
.text:0000000000002162                 mov     rax, rdx
.text:0000000000002165                 sub     rax, rsi
.text:0000000000002168                 mov     edx, [r9+rax*4]
.text:000000000000216C                 mov     [r15+rbx*4], edx
.text:0000000000002170                 cmp     rcx, rbp
.text:0000000000002173                 ja      short loc_212B
.text:0000000000002175
.text:0000000000002175 loc_2175:                               ; CODE XREF: timsort_constprop_0+E49↑j
.text:0000000000002175                                         ; timsort_constprop_0+10A3↓j
.text:0000000000002175                 lea     rcx, [r15+rbx*4-4]
.text:000000000000217A                 test    rax, rax
.text:000000000000217D                 jz      loc_203D
.text:0000000000002183                 nop     dword ptr [rax+rax+00h]
.text:0000000000002188
.text:0000000000002188 loc_2188:                               ; CODE XREF: timsort_constprop_0+ECC↓j
.text:0000000000002188                 mov     rsi, rax
.text:000000000000218B                 not     rax
.text:000000000000218E                 sub     rcx, 4
.text:0000000000002192                 and     eax, 1
.text:0000000000002195                 and     rsi, 0FFFFFFFFFFFFFFFEh
.text:0000000000002199                 mov     rdx, rax
.text:000000000000219C                 mov     rax, rsi
.text:000000000000219F                 sub     rax, rdx
.text:00000000000021A2                 mov     edx, [r9+rax*4]
.text:00000000000021A6                 mov     [rcx+4], edx
.text:00000000000021A9                 test    rax, rax
.text:00000000000021AC                 jnz     short loc_2188
.text:00000000000021AE                 jmp     loc_203D
.text:00000000000021B3 ; ---------------------------------------------------------------------------
.text:00000000000021B3
.text:00000000000021B3 loc_21B3:                               ; CODE XREF: timsort_constprop_0+34↑j
.text:00000000000021B3                 mov     rax, [rsp+898h+var_40]
.text:00000000000021BB                 sub     rax, fs:28h
.text:00000000000021C4                 jnz     loc_23A7
.text:00000000000021CA                 add     rsp, 868h
.text:00000000000021D1                 pop     rbx
.text:00000000000021D2                 pop     rbp
.text:00000000000021D3                 pop     r12
.text:00000000000021D5                 pop     r13
.text:00000000000021D7                 pop     r14
.text:00000000000021D9                 pop     r15
.text:00000000000021DB                 retn
.text:00000000000021DC ; ---------------------------------------------------------------------------
.text:00000000000021DC
.text:00000000000021DC loc_21DC:                               ; CODE XREF: timsort_constprop_0+764↑j
.text:00000000000021DC                 mov     rax, rbx
.text:00000000000021DF                 mov     rcx, rbx
.text:00000000000021E2                 and     edx, 4
.text:00000000000021E5                 mov     r13, [rsp+898h+var_848]
.text:00000000000021EA                 or      rcx, 4
.text:00000000000021EE                 and     eax, 4
.text:00000000000021F1                 mov     rdi, [rsp+898h+dest] ; dest
.text:00000000000021F6                 mov     rbp, [rsp+898h+var_840]
.text:00000000000021FB                 imul    rax, rcx
.text:00000000000021FF                 mov     rcx, rbx
.text:0000000000002202                 lea     rsi, [r15+r13*4] ; src
.text:0000000000002206                 and     rcx, 0FFFFFFFFFFFFFFFBh
.text:000000000000220A                 imul    rdx, rcx
.text:000000000000220E                 add     rdx, rax        ; n
.text:0000000000002211                 call    _memcpy
.text:0000000000002216                 mov     rax, r12
.text:0000000000002219                 mov     rdx, r12
.text:000000000000221C                 mov     rcx, rbx
.text:000000000000221F                 or      rax, rbp
.text:0000000000002222                 xor     rdx, rbp
.text:0000000000002225                 neg     rcx
.text:0000000000002228                 add     rax, rax
.text:000000000000222B                 mov     r10, rax
.text:000000000000222E                 sub     r10, rdx
.text:0000000000002231                 or      rcx, rbx
.text:0000000000002234                 jns     loc_2368
.text:000000000000223A                 sub     rdx, rax
.text:000000000000223D                 mov     r11, rdx
.text:0000000000002240                 mov     rdx, rbp
.text:0000000000002243                 not     rdx
.text:0000000000002246                 lea     rax, [r11+rbp]
.text:000000000000224A                 mov     rcx, rdx
.text:000000000000224D                 and     rdx, r10
.text:0000000000002250                 or      rcx, r10
.text:0000000000002253                 and     rax, rcx
.text:0000000000002256                 or      rax, rdx
.text:0000000000002259                 shr     rax, 3Fh
.text:000000000000225D                 jz      loc_2320
.text:0000000000002263                 mov     [rsp+898h+var_878], r12
.text:0000000000002268                 xor     eax, eax
.text:000000000000226A                 mov     r12, [rsp+898h+dest]
.text:000000000000226F                 jmp     short loc_22CA
.text:0000000000002271 ; ---------------------------------------------------------------------------
.text:0000000000002271
.text:0000000000002271 loc_2271:                               ; CODE XREF: timsort_constprop_0+1020↓j
.text:0000000000002271                 mov     rdx, rbp
.text:0000000000002274                 mov     rsi, rbp
.text:0000000000002277                 or      rdx, 1
.text:000000000000227B                 xor     rsi, 1
.text:000000000000227F                 add     rdx, rdx
.text:0000000000002282                 sub     rdx, rsi
.text:0000000000002285                 mov     rbp, rdx
.text:0000000000002288
.text:0000000000002288 loc_2288:                               ; CODE XREF: timsort_constprop_0+1036↓j
.text:0000000000002288                 mov     rdx, rbx
.text:000000000000228B                 mov     [r8], ecx
.text:000000000000228E                 mov     rcx, rax
.text:0000000000002291                 xor     rdx, rax
.text:0000000000002294                 sub     rcx, rbx
.text:0000000000002297                 not     rdx
.text:000000000000229A                 and     rdx, rcx
.text:000000000000229D                 mov     rcx, rax
.text:00000000000022A0                 not     rcx
.text:00000000000022A3                 and     rcx, rbx
.text:00000000000022A6                 or      rdx, rcx
.text:00000000000022A9                 jns     loc_2388
.text:00000000000022AF                 mov     rdx, rbp
.text:00000000000022B2                 mov     rcx, r10
.text:00000000000022B5                 lea     rsi, [r11+rbp]
.text:00000000000022B9                 not     rdx
.text:00000000000022BC                 or      rcx, rdx
.text:00000000000022BF                 and     rdx, r10
.text:00000000000022C2                 and     rcx, rsi
.text:00000000000022C5                 or      rcx, rdx
.text:00000000000022C8                 jns     short loc_231B
.text:00000000000022CA
.text:00000000000022CA loc_22CA:                               ; CODE XREF: timsort_constprop_0+F8F↑j
.text:00000000000022CA                 mov     ecx, [r15+rbp*4]
.text:00000000000022CE                 mov     esi, [r12+rax*4]
.text:00000000000022D2                 mov     r9, r13
.text:00000000000022D5                 mov     r8, r13
.text:00000000000022D8                 or      r9, 1
.text:00000000000022DC                 xor     r8, 0FFFFFFFFFFFFFFFEh
.text:00000000000022E0                 mov     rdi, r13
.text:00000000000022E3                 mov     edx, ecx
.text:00000000000022E5                 lea     r13, [r8+r9*2+1]
.text:00000000000022EA                 lea     r8, [r15+rdi*4]
.text:00000000000022EE                 mov     r9d, esi
.text:00000000000022F1                 not     edx
.text:00000000000022F3                 xor     r9d, ecx
.text:00000000000022F6                 lea     edi, [rsi+rdx]
.text:00000000000022F9                 or      edx, esi
.text:00000000000022FB                 or      edi, r9d
.text:00000000000022FE                 test    edi, edx
.text:0000000000002300                 jns     loc_2271
.text:0000000000002306                 mov     rdx, rax
.text:0000000000002309                 and     eax, 1
.text:000000000000230C                 mov     ecx, esi
.text:000000000000230E                 xor     rdx, 1
.text:0000000000002312                 lea     rax, [rdx+rax*2]
.text:0000000000002316                 jmp     loc_2288
.text:000000000000231B ; ---------------------------------------------------------------------------
.text:000000000000231B
.text:000000000000231B loc_231B:                               ; CODE XREF: timsort_constprop_0+FE8↑j
.text:000000000000231B                 mov     r12, [rsp+898h+var_878]
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: timsort_constprop_0+F7D↑j
.text:0000000000002320                 mov     rdi, [rsp+898h+dest]
.text:0000000000002325                 lea     rcx, [r15+r13*4]
.text:0000000000002329
.text:0000000000002329 loc_2329:                               ; CODE XREF: timsort_constprop_0+1086↓j
.text:0000000000002329                 mov     rdx, rax
.text:000000000000232C                 mov     rsi, rax
.text:000000000000232F                 mov     r8, rax
.text:0000000000002332                 add     rcx, 4
.text:0000000000002336                 mov     edx, [rdi+rdx*4]
.text:0000000000002339                 xor     rsi, 1
.text:000000000000233D                 and     r8d, 1
.text:0000000000002341                 lea     rax, [rsi+r8*2]
.text:0000000000002345                 mov     [rcx-4], edx
.text:0000000000002348                 mov     rdx, rbx
.text:000000000000234B                 mov     rsi, rax
.text:000000000000234E                 xor     rdx, rax
.text:0000000000002351                 sub     rsi, rbx
.text:0000000000002354                 not     rdx
.text:0000000000002357                 and     rdx, rsi
.text:000000000000235A                 mov     rsi, rax
.text:000000000000235D                 not     rsi
.text:0000000000002360                 and     rsi, rbx
.text:0000000000002363                 or      rdx, rsi
.text:0000000000002366                 js      short loc_2329
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: timsort_constprop_0+F54↑j
.text:0000000000002368                                         ; timsort_constprop_0+10AD↓j
.text:0000000000002368                 and     rbx, r12
.text:000000000000236B                 add     rbx, rbx
.text:000000000000236E                 add     rbx, [rsp+898h+var_880]
.text:0000000000002373                 mov     [rsp+898h+var_448], rbx
.text:000000000000237B                 jmp     loc_157E
.text:0000000000002380 ; ---------------------------------------------------------------------------
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: timsort_constprop_0+E18↑j
.text:0000000000002380                 mov     rax, r13
.text:0000000000002383                 jmp     loc_2175
.text:0000000000002388 ; ---------------------------------------------------------------------------
.text:0000000000002388
.text:0000000000002388 loc_2388:                               ; CODE XREF: timsort_constprop_0+FC9↑j
.text:0000000000002388                 mov     r12, [rsp+898h+var_878]
.text:000000000000238D                 jmp     short loc_2368
.text:000000000000238F ; ---------------------------------------------------------------------------
.text:000000000000238F
.text:000000000000238F loc_238F:                               ; CODE XREF: timsort_constprop_0+502↑j
.text:000000000000238F                 mov     r14, rax
.text:0000000000002392                 jmp     loc_137E
.text:0000000000002397 ; ---------------------------------------------------------------------------
.text:0000000000002397
.text:0000000000002397 loc_2397:                               ; CODE XREF: timsort_constprop_0+BBB↑j
.text:0000000000002397                 mov     rax, r13
.text:000000000000239A                 jmp     loc_1EE3
.text:000000000000239F ; ---------------------------------------------------------------------------
.text:000000000000239F
.text:000000000000239F loc_239F:                               ; CODE XREF: timsort_constprop_0+A75↑j
.text:000000000000239F                 mov     rax, r14
.text:00000000000023A2                 jmp     loc_1DB5
.text:00000000000023A7 ; ---------------------------------------------------------------------------
.text:00000000000023A7
.text:00000000000023A7 loc_23A7:                               ; CODE XREF: timsort_constprop_0+DAA↑j
.text:00000000000023A7                                         ; timsort_constprop_0+EE4↑j
.text:00000000000023A7                 call    ___stack_chk_fail
.text:00000000000023A7 ; } // starts at 12E0
.text:00000000000023A7 timsort_constprop_0 endp
.text:00000000000023A7
.text:00000000000023A7 _text           ends
.text:00000000000023A7
.fini:00000000000023AC ; ===========================================================================
.fini:00000000000023AC
.fini:00000000000023AC ; Segment type: Pure code
.fini:00000000000023AC ; Segment permissions: Read/Execute
.fini:00000000000023AC _fini           segment dword public 'CODE' use64
.fini:00000000000023AC                 assume cs:_fini
.fini:00000000000023AC                 ;org 23ACh
.fini:00000000000023AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000023AC
.fini:00000000000023AC ; =============== S U B R O U T I N E =======================================
.fini:00000000000023AC
.fini:00000000000023AC
.fini:00000000000023AC                 public _term_proc
.fini:00000000000023AC _term_proc      proc near
.fini:00000000000023AC                 endbr64                 ; _fini
.fini:00000000000023B0                 sub     rsp, 8
.fini:00000000000023B4                 add     rsp, 8
.fini:00000000000023B8                 retn
.fini:00000000000023B8 _term_proc      endp
.fini:00000000000023B8
.fini:00000000000023B8 _fini           ends
.fini:00000000000023B8
.rodata:0000000000003000 ; ===========================================================================
.rodata:0000000000003000
.rodata:0000000000003000 ; Segment type: Pure data
.rodata:0000000000003000 ; Segment permissions: Read
.rodata:0000000000003000 _rodata         segment dword public 'CONST' use64
.rodata:0000000000003000                 assume cs:_rodata
.rodata:0000000000003000                 ;org 3000h
.rodata:0000000000003000                 public _IO_stdin_used
.rodata:0000000000003000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
.rodata:0000000000003001                 db    0
.rodata:0000000000003002                 db    2
.rodata:0000000000003003                 db    0
.rodata:0000000000003004 unk_3004        db  20h                 ; DATA XREF: main+47↑o
.rodata:0000000000003005                 db    0
.rodata:0000000000003006 ; const char format[]
.rodata:0000000000003006 format          db '%d%s',0             ; DATA XREF: main+53↑o
.rodata:000000000000300B asc_300B        db 0Ah,0                ; DATA XREF: main+DE↑o
.rodata:000000000000300B _rodata         ends
.rodata:000000000000300B
LOAD:000000000000300D ; ===========================================================================
LOAD:000000000000300D
LOAD:000000000000300D ; Segment type: Pure data
LOAD:000000000000300D ; Segment permissions: Read
LOAD:000000000000300D LOAD            segment mempage public 'DATA' use64
LOAD:000000000000300D                 assume cs:LOAD
LOAD:000000000000300D                 ;org 300Dh
LOAD:000000000000300D                 align 10h
LOAD:000000000000300D LOAD            ends
LOAD:000000000000300D
.eh_frame_hdr:0000000000003010 ; ===========================================================================
.eh_frame_hdr:0000000000003010
.eh_frame_hdr:0000000000003010 ; Segment type: Pure data
.eh_frame_hdr:0000000000003010 ; Segment permissions: Read
.eh_frame_hdr:0000000000003010 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000003010                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000003010                 ;org 3010h
.eh_frame_hdr:0000000000003010 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
.eh_frame_hdr:0000000000003011                 db  1Bh
.eh_frame_hdr:0000000000003012                 db    3
.eh_frame_hdr:0000000000003013                 db  3Bh ; ;
.eh_frame_hdr:0000000000003014                 db  3Ch ; <
.eh_frame_hdr:0000000000003015                 db    0
.eh_frame_hdr:0000000000003016                 db    0
.eh_frame_hdr:0000000000003017                 db    0
.eh_frame_hdr:0000000000003018                 db    6
.eh_frame_hdr:0000000000003019                 db    0
.eh_frame_hdr:000000000000301A                 db    0
.eh_frame_hdr:000000000000301B                 db    0
.eh_frame_hdr:000000000000301C                 db  10h
.eh_frame_hdr:000000000000301D                 db 0E0h
.eh_frame_hdr:000000000000301E                 db 0FFh
.eh_frame_hdr:000000000000301F                 db 0FFh
.eh_frame_hdr:0000000000003020                 db  70h ; p
.eh_frame_hdr:0000000000003021                 db    0
.eh_frame_hdr:0000000000003022                 db    0
.eh_frame_hdr:0000000000003023                 db    0
.eh_frame_hdr:0000000000003024                 db  70h ; p
.eh_frame_hdr:0000000000003025                 db 0E0h
.eh_frame_hdr:0000000000003026                 db 0FFh
.eh_frame_hdr:0000000000003027                 db 0FFh
.eh_frame_hdr:0000000000003028                 db  98h
.eh_frame_hdr:0000000000003029                 db    0
.eh_frame_hdr:000000000000302A                 db    0
.eh_frame_hdr:000000000000302B                 db    0
.eh_frame_hdr:000000000000302C                 db  80h
.eh_frame_hdr:000000000000302D                 db 0E0h
.eh_frame_hdr:000000000000302E                 db 0FFh
.eh_frame_hdr:000000000000302F                 db 0FFh
.eh_frame_hdr:0000000000003030                 db 0B0h
.eh_frame_hdr:0000000000003031                 db    0
.eh_frame_hdr:0000000000003032                 db    0
.eh_frame_hdr:0000000000003033                 db    0
.eh_frame_hdr:0000000000003034                 db 0D0h
.eh_frame_hdr:0000000000003035                 db 0E0h
.eh_frame_hdr:0000000000003036                 db 0FFh
.eh_frame_hdr:0000000000003037                 db 0FFh
.eh_frame_hdr:0000000000003038                 db  30h ; 0
.eh_frame_hdr:0000000000003039                 db    1
.eh_frame_hdr:000000000000303A                 db    0
.eh_frame_hdr:000000000000303B                 db    0
.eh_frame_hdr:000000000000303C                 db 0E0h
.eh_frame_hdr:000000000000303D                 db 0E1h
.eh_frame_hdr:000000000000303E                 db 0FFh
.eh_frame_hdr:000000000000303F                 db 0FFh
.eh_frame_hdr:0000000000003040                 db  58h ; X
.eh_frame_hdr:0000000000003041                 db    0
.eh_frame_hdr:0000000000003042                 db    0
.eh_frame_hdr:0000000000003043                 db    0
.eh_frame_hdr:0000000000003044                 db 0D0h
.eh_frame_hdr:0000000000003045                 db 0E2h
.eh_frame_hdr:0000000000003046                 db 0FFh
.eh_frame_hdr:0000000000003047                 db 0FFh
.eh_frame_hdr:0000000000003048                 db 0C8h
.eh_frame_hdr:0000000000003049                 db    0
.eh_frame_hdr:000000000000304A                 db    0
.eh_frame_hdr:000000000000304B                 db    0
.eh_frame_hdr:000000000000304B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000304B
LOAD:000000000000304C ; ===========================================================================
LOAD:000000000000304C
LOAD:000000000000304C ; Segment type: Pure data
LOAD:000000000000304C ; Segment permissions: Read
LOAD:000000000000304C LOAD            segment mempage public 'DATA' use64
LOAD:000000000000304C                 assume cs:LOAD
LOAD:000000000000304C                 ;org 304Ch
LOAD:000000000000304C                 align 10h
LOAD:000000000000304C LOAD            ends
LOAD:000000000000304C
.eh_frame:0000000000003050 ; ===========================================================================
.eh_frame:0000000000003050
.eh_frame:0000000000003050 ; Segment type: Pure data
.eh_frame:0000000000003050 ; Segment permissions: Read
.eh_frame:0000000000003050 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000003050                 assume cs:_eh_frame
.eh_frame:0000000000003050                 ;org 3050h
.eh_frame:0000000000003050                 db  14h
.eh_frame:0000000000003051                 db    0
.eh_frame:0000000000003052                 db    0
.eh_frame:0000000000003053                 db    0
.eh_frame:0000000000003054                 db    0
.eh_frame:0000000000003055                 db    0
.eh_frame:0000000000003056                 db    0
.eh_frame:0000000000003057                 db    0
.eh_frame:0000000000003058                 db    1
.eh_frame:0000000000003059                 db  7Ah ; z
.eh_frame:000000000000305A                 db  52h ; R
.eh_frame:000000000000305B                 db    0
.eh_frame:000000000000305C                 db    1
.eh_frame:000000000000305D                 db  78h ; x
.eh_frame:000000000000305E                 db  10h
.eh_frame:000000000000305F                 db    1
.eh_frame:0000000000003060                 db  1Bh
.eh_frame:0000000000003061                 db  0Ch
.eh_frame:0000000000003062                 db    7
.eh_frame:0000000000003063                 db    8
.eh_frame:0000000000003064                 db  90h
.eh_frame:0000000000003065                 db    1
.eh_frame:0000000000003066                 db    0
.eh_frame:0000000000003067                 db    0
.eh_frame:0000000000003068                 db  14h
.eh_frame:0000000000003069                 db    0
.eh_frame:000000000000306A                 db    0
.eh_frame:000000000000306B                 db    0
.eh_frame:000000000000306C                 db  1Ch
.eh_frame:000000000000306D                 db    0
.eh_frame:000000000000306E                 db    0
.eh_frame:000000000000306F                 db    0
.eh_frame:0000000000003070                 db  80h
.eh_frame:0000000000003071                 db 0E1h
.eh_frame:0000000000003072                 db 0FFh
.eh_frame:0000000000003073                 db 0FFh
.eh_frame:0000000000003074                 db  26h ; &
.eh_frame:0000000000003075                 db    0
.eh_frame:0000000000003076                 db    0
.eh_frame:0000000000003077                 db    0
.eh_frame:0000000000003078                 db    0
.eh_frame:0000000000003079                 db  44h ; D
.eh_frame:000000000000307A                 db    7
.eh_frame:000000000000307B                 db  10h
.eh_frame:000000000000307C                 db    0
.eh_frame:000000000000307D                 db    0
.eh_frame:000000000000307E                 db    0
.eh_frame:000000000000307F                 db    0
.eh_frame:0000000000003080                 db  24h ; $
.eh_frame:0000000000003081                 db    0
.eh_frame:0000000000003082                 db    0
.eh_frame:0000000000003083                 db    0
.eh_frame:0000000000003084                 db  34h ; 4
.eh_frame:0000000000003085                 db    0
.eh_frame:0000000000003086                 db    0
.eh_frame:0000000000003087                 db    0
.eh_frame:0000000000003088                 db  98h
.eh_frame:0000000000003089                 db 0DFh
.eh_frame:000000000000308A                 db 0FFh
.eh_frame:000000000000308B                 db 0FFh
.eh_frame:000000000000308C                 db  60h ; `
.eh_frame:000000000000308D                 db    0
.eh_frame:000000000000308E                 db    0
.eh_frame:000000000000308F                 db    0
.eh_frame:0000000000003090                 db    0
.eh_frame:0000000000003091                 db  0Eh
.eh_frame:0000000000003092                 db  10h
.eh_frame:0000000000003093                 db  46h ; F
.eh_frame:0000000000003094                 db  0Eh
.eh_frame:0000000000003095                 db  18h
.eh_frame:0000000000003096                 db  4Ah ; J
.eh_frame:0000000000003097                 db  0Fh
.eh_frame:0000000000003098                 db  0Bh
.eh_frame:0000000000003099                 db  77h ; w
.eh_frame:000000000000309A                 db    8
.eh_frame:000000000000309B                 db  80h
.eh_frame:000000000000309C                 db    0
.eh_frame:000000000000309D                 db  3Fh ; ?
.eh_frame:000000000000309E                 db  1Ah
.eh_frame:000000000000309F                 db  3Ah ; :
.eh_frame:00000000000030A0                 db  2Ah ; *
.eh_frame:00000000000030A1                 db  33h ; 3
.eh_frame:00000000000030A2                 db  24h ; $
.eh_frame:00000000000030A3                 db  22h ; "
.eh_frame:00000000000030A4                 db    0
.eh_frame:00000000000030A5                 db    0
.eh_frame:00000000000030A6                 db    0
.eh_frame:00000000000030A7                 db    0
.eh_frame:00000000000030A8                 db  14h
.eh_frame:00000000000030A9                 db    0
.eh_frame:00000000000030AA                 db    0
.eh_frame:00000000000030AB                 db    0
.eh_frame:00000000000030AC                 db  5Ch ; \
.eh_frame:00000000000030AD                 db    0
.eh_frame:00000000000030AE                 db    0
.eh_frame:00000000000030AF                 db    0
.eh_frame:00000000000030B0                 db 0D0h
.eh_frame:00000000000030B1                 db 0DFh
.eh_frame:00000000000030B2                 db 0FFh
.eh_frame:00000000000030B3                 db 0FFh
.eh_frame:00000000000030B4                 db  10h
.eh_frame:00000000000030B5                 db    0
.eh_frame:00000000000030B6                 db    0
.eh_frame:00000000000030B7                 db    0
.eh_frame:00000000000030B8                 db    0
.eh_frame:00000000000030B9                 db    0
.eh_frame:00000000000030BA                 db    0
.eh_frame:00000000000030BB                 db    0
.eh_frame:00000000000030BC                 db    0
.eh_frame:00000000000030BD                 db    0
.eh_frame:00000000000030BE                 db    0
.eh_frame:00000000000030BF                 db    0
.eh_frame:00000000000030C0                 db  14h
.eh_frame:00000000000030C1                 db    0
.eh_frame:00000000000030C2                 db    0
.eh_frame:00000000000030C3                 db    0
.eh_frame:00000000000030C4                 db  74h ; t
.eh_frame:00000000000030C5                 db    0
.eh_frame:00000000000030C6                 db    0
.eh_frame:00000000000030C7                 db    0
.eh_frame:00000000000030C8                 db 0C8h
.eh_frame:00000000000030C9                 db 0DFh
.eh_frame:00000000000030CA                 db 0FFh
.eh_frame:00000000000030CB                 db 0FFh
.eh_frame:00000000000030CC                 db  50h ; P
.eh_frame:00000000000030CD                 db    0
.eh_frame:00000000000030CE                 db    0
.eh_frame:00000000000030CF                 db    0
.eh_frame:00000000000030D0                 db    0
.eh_frame:00000000000030D1                 db    0
.eh_frame:00000000000030D2                 db    0
.eh_frame:00000000000030D3                 db    0
.eh_frame:00000000000030D4                 db    0
.eh_frame:00000000000030D5                 db    0
.eh_frame:00000000000030D6                 db    0
.eh_frame:00000000000030D7                 db    0
.eh_frame:00000000000030D8                 db  64h ; d
.eh_frame:00000000000030D9                 db    0
.eh_frame:00000000000030DA                 db    0
.eh_frame:00000000000030DB                 db    0
.eh_frame:00000000000030DC                 db  8Ch
.eh_frame:00000000000030DD                 db    0
.eh_frame:00000000000030DE                 db    0
.eh_frame:00000000000030DF                 db    0
.eh_frame:00000000000030E0                 db    0
.eh_frame:00000000000030E1                 db 0E2h
.eh_frame:00000000000030E2                 db 0FFh
.eh_frame:00000000000030E3                 db 0FFh
.eh_frame:00000000000030E4                 db 0CCh
.eh_frame:00000000000030E5                 db  10h
.eh_frame:00000000000030E6                 db    0
.eh_frame:00000000000030E7                 db    0
.eh_frame:00000000000030E8                 db    0
.eh_frame:00000000000030E9                 db  42h ; B
.eh_frame:00000000000030EA                 db  0Eh
.eh_frame:00000000000030EB                 db  10h
.eh_frame:00000000000030EC                 db  8Fh
.eh_frame:00000000000030ED                 db    2
.eh_frame:00000000000030EE                 db  4Ah ; J
.eh_frame:00000000000030EF                 db  0Eh
.eh_frame:00000000000030F0                 db  18h
.eh_frame:00000000000030F1                 db  8Eh
.eh_frame:00000000000030F2                 db    3
.eh_frame:00000000000030F3                 db  42h ; B
.eh_frame:00000000000030F4                 db  0Eh
.eh_frame:00000000000030F5                 db  20h
.eh_frame:00000000000030F6                 db  8Dh
.eh_frame:00000000000030F7                 db    4
.eh_frame:00000000000030F8                 db  42h ; B
.eh_frame:00000000000030F9                 db  0Eh
.eh_frame:00000000000030FA                 db  28h ; (
.eh_frame:00000000000030FB                 db  8Ch
.eh_frame:00000000000030FC                 db    5
.eh_frame:00000000000030FD                 db  41h ; A
.eh_frame:00000000000030FE                 db  0Eh
.eh_frame:00000000000030FF                 db  30h ; 0
.eh_frame:0000000000003100                 db  86h
.eh_frame:0000000000003101                 db    6
.eh_frame:0000000000003102                 db  41h ; A
.eh_frame:0000000000003103                 db  0Eh
.eh_frame:0000000000003104                 db  38h ; 8
.eh_frame:0000000000003105                 db  83h
.eh_frame:0000000000003106                 db    7
.eh_frame:0000000000003107                 db  47h ; G
.eh_frame:0000000000003108                 db  0Eh
.eh_frame:0000000000003109                 db 0A0h
.eh_frame:000000000000310A                 db  11h
.eh_frame:000000000000310B                 db    3
.eh_frame:000000000000310C                 db  9Eh
.eh_frame:000000000000310D                 db  0Dh
.eh_frame:000000000000310E                 db  0Ah
.eh_frame:000000000000310F                 db  0Eh
.eh_frame:0000000000003110                 db  38h ; 8
.eh_frame:0000000000003111                 db  44h ; D
.eh_frame:0000000000003112                 db  0Eh
.eh_frame:0000000000003113                 db  30h ; 0
.eh_frame:0000000000003114                 db  41h ; A
.eh_frame:0000000000003115                 db  0Eh
.eh_frame:0000000000003116                 db  28h ; (
.eh_frame:0000000000003117                 db  42h ; B
.eh_frame:0000000000003118                 db  0Eh
.eh_frame:0000000000003119                 db  20h
.eh_frame:000000000000311A                 db  42h ; B
.eh_frame:000000000000311B                 db  0Eh
.eh_frame:000000000000311C                 db  18h
.eh_frame:000000000000311D                 db  42h ; B
.eh_frame:000000000000311E                 db  0Eh
.eh_frame:000000000000311F                 db  10h
.eh_frame:0000000000003120                 db  42h ; B
.eh_frame:0000000000003121                 db  0Eh
.eh_frame:0000000000003122                 db    8
.eh_frame:0000000000003123                 db  45h ; E
.eh_frame:0000000000003124                 db  0Bh
.eh_frame:0000000000003125                 db    3
.eh_frame:0000000000003126                 db  28h ; (
.eh_frame:0000000000003127                 db    1
.eh_frame:0000000000003128                 db  0Ah
.eh_frame:0000000000003129                 db  0Eh
.eh_frame:000000000000312A                 db  38h ; 8
.eh_frame:000000000000312B                 db  41h ; A
.eh_frame:000000000000312C                 db  0Eh
.eh_frame:000000000000312D                 db  30h ; 0
.eh_frame:000000000000312E                 db  41h ; A
.eh_frame:000000000000312F                 db  0Eh
.eh_frame:0000000000003130                 db  28h ; (
.eh_frame:0000000000003131                 db  42h ; B
.eh_frame:0000000000003132                 db  0Eh
.eh_frame:0000000000003133                 db  20h
.eh_frame:0000000000003134                 db  42h ; B
.eh_frame:0000000000003135                 db  0Eh
.eh_frame:0000000000003136                 db  18h
.eh_frame:0000000000003137                 db  42h ; B
.eh_frame:0000000000003138                 db  0Eh
.eh_frame:0000000000003139                 db  10h
.eh_frame:000000000000313A                 db  42h ; B
.eh_frame:000000000000313B                 db  0Eh
.eh_frame:000000000000313C                 db    8
.eh_frame:000000000000313D                 db  41h ; A
.eh_frame:000000000000313E                 db  0Bh
.eh_frame:000000000000313F                 db    0
.eh_frame:0000000000003140                 db  38h ; 8
.eh_frame:0000000000003141                 db    0
.eh_frame:0000000000003142                 db    0
.eh_frame:0000000000003143                 db    0
.eh_frame:0000000000003144                 db 0F4h
.eh_frame:0000000000003145                 db    0
.eh_frame:0000000000003146                 db    0
.eh_frame:0000000000003147                 db    0
.eh_frame:0000000000003148                 db  98h
.eh_frame:0000000000003149                 db 0DFh
.eh_frame:000000000000314A                 db 0FFh
.eh_frame:000000000000314B                 db 0FFh
.eh_frame:000000000000314C                 db  0Fh
.eh_frame:000000000000314D                 db    1
.eh_frame:000000000000314E                 db    0
.eh_frame:000000000000314F                 db    0
.eh_frame:0000000000003150                 db    0
.eh_frame:0000000000003151                 db  46h ; F
.eh_frame:0000000000003152                 db  0Eh
.eh_frame:0000000000003153                 db  10h
.eh_frame:0000000000003154                 db  8Dh
.eh_frame:0000000000003155                 db    2
.eh_frame:0000000000003156                 db  42h ; B
.eh_frame:0000000000003157                 db  0Eh
.eh_frame:0000000000003158                 db  18h
.eh_frame:0000000000003159                 db  8Ch
.eh_frame:000000000000315A                 db    3
.eh_frame:000000000000315B                 db  41h ; A
.eh_frame:000000000000315C                 db  0Eh
.eh_frame:000000000000315D                 db  20h
.eh_frame:000000000000315E                 db  86h
.eh_frame:000000000000315F                 db    4
.eh_frame:0000000000003160                 db  41h ; A
.eh_frame:0000000000003161                 db  0Eh
.eh_frame:0000000000003162                 db  28h ; (
.eh_frame:0000000000003163                 db  83h
.eh_frame:0000000000003164                 db    5
.eh_frame:0000000000003165                 db  44h ; D
.eh_frame:0000000000003166                 db  0Eh
.eh_frame:0000000000003167                 db  80h
.eh_frame:0000000000003168                 db    1
.eh_frame:0000000000003169                 db    2
.eh_frame:000000000000316A                 db 0F3h
.eh_frame:000000000000316B                 db  0Ah
.eh_frame:000000000000316C                 db  0Eh
.eh_frame:000000000000316D                 db  28h ; (
.eh_frame:000000000000316E                 db  43h ; C
.eh_frame:000000000000316F                 db  0Eh
.eh_frame:0000000000003170                 db  20h
.eh_frame:0000000000003171                 db  41h ; A
.eh_frame:0000000000003172                 db  0Eh
.eh_frame:0000000000003173                 db  18h
.eh_frame:0000000000003174                 db  42h ; B
.eh_frame:0000000000003175                 db  0Eh
.eh_frame:0000000000003176                 db  10h
.eh_frame:0000000000003177                 db  42h ; B
.eh_frame:0000000000003178                 db  0Eh
.eh_frame:0000000000003179                 db    8
.eh_frame:000000000000317A                 db  41h ; A
.eh_frame:000000000000317B                 db  0Bh
.eh_frame:000000000000317C __FRAME_END__   db    0
.eh_frame:000000000000317D                 db    0
.eh_frame:000000000000317E                 db    0
.eh_frame:000000000000317F                 db    0
.eh_frame:000000000000317F _eh_frame       ends
.eh_frame:000000000000317F
.init_array:0000000000004D98 ; ELF Initialization Function Table
.init_array:0000000000004D98 ; ===========================================================================
.init_array:0000000000004D98
.init_array:0000000000004D98 ; Segment type: Pure data
.init_array:0000000000004D98 ; Segment permissions: Read/Write
.init_array:0000000000004D98 _init_array     segment qword public 'DATA' use64
.init_array:0000000000004D98                 assume cs:_init_array
.init_array:0000000000004D98                 ;org 4D98h
.init_array:0000000000004D98 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000004D98                                         ; DATA XREF: LOAD:0000000000000168↑o
.init_array:0000000000004D98                                         ; LOAD:00000000000002F0↑o
.init_array:0000000000004D98 _init_array     ends
.init_array:0000000000004D98
.fini_array:0000000000004DA0 ; ELF Termination Function Table
.fini_array:0000000000004DA0 ; ===========================================================================
.fini_array:0000000000004DA0
.fini_array:0000000000004DA0 ; Segment type: Pure data
.fini_array:0000000000004DA0 ; Segment permissions: Read/Write
.fini_array:0000000000004DA0 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000004DA0                 assume cs:_fini_array
.fini_array:0000000000004DA0                 ;org 4DA0h
.fini_array:0000000000004DA0 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000004DA0 _fini_array     ends
.fini_array:0000000000004DA0
LOAD:0000000000004DA8 ; ELF Dynamic Information
LOAD:0000000000004DA8 ; ===========================================================================
LOAD:0000000000004DA8
LOAD:0000000000004DA8 ; Segment type: Pure data
LOAD:0000000000004DA8 ; Segment permissions: Read/Write
LOAD:0000000000004DA8 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000004DA8                 assume cs:LOAD
LOAD:0000000000004DA8                 ;org 4DA8h
LOAD:0000000000004DA8 _DYNAMIC        Elf64_Dyn <1, 4Dh>      ; DATA XREF: LOAD:00000000000001A0↑o
LOAD:0000000000004DA8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000004DA8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000004DB8                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
LOAD:0000000000004DC8                 Elf64_Dyn <0Dh, 23ACh>  ; DT_FINI
LOAD:0000000000004DD8                 Elf64_Dyn <19h, 4D98h>  ; DT_INIT_ARRAY
LOAD:0000000000004DE8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000004DF8                 Elf64_Dyn <1Ah, 4DA0h>  ; DT_FINI_ARRAY
LOAD:0000000000004E08                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000004E18                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
LOAD:0000000000004E28                 Elf64_Dyn <5, 4E0h>     ; DT_STRTAB
LOAD:0000000000004E38                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
LOAD:0000000000004E48                 Elf64_Dyn <0Ah, 0C8h>   ; DT_STRSZ
LOAD:0000000000004E58                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000004E68                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000004E78                 Elf64_Dyn <3, 4F98h>    ; DT_PLTGOT
LOAD:0000000000004E88                 Elf64_Dyn <2, 78h>      ; DT_PLTRELSZ
LOAD:0000000000004E98                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000004EA8                 Elf64_Dyn <17h, 6D0h>   ; DT_JMPREL
LOAD:0000000000004EB8                 Elf64_Dyn <7, 610h>     ; DT_RELA
LOAD:0000000000004EC8                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
LOAD:0000000000004ED8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000004EE8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000004EF8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000004F08                 Elf64_Dyn <6FFFFFFEh, 5C0h> ; DT_VERNEED
LOAD:0000000000004F18                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000004F28                 Elf64_Dyn <6FFFFFF0h, 5A8h> ; DT_VERSYM
LOAD:0000000000004F38                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
LOAD:0000000000004F48                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000004F58                 db    0
LOAD:0000000000004F59                 db    0
LOAD:0000000000004F5A                 db    0
LOAD:0000000000004F5B                 db    0
LOAD:0000000000004F5C                 db    0
LOAD:0000000000004F5D                 db    0
LOAD:0000000000004F5E                 db    0
LOAD:0000000000004F5F                 db    0
LOAD:0000000000004F60                 db    0
LOAD:0000000000004F61                 db    0
LOAD:0000000000004F62                 db    0
LOAD:0000000000004F63                 db    0
LOAD:0000000000004F64                 db    0
LOAD:0000000000004F65                 db    0
LOAD:0000000000004F66                 db    0
LOAD:0000000000004F67                 db    0
LOAD:0000000000004F68                 db    0
LOAD:0000000000004F69                 db    0
LOAD:0000000000004F6A                 db    0
LOAD:0000000000004F6B                 db    0
LOAD:0000000000004F6C                 db    0
LOAD:0000000000004F6D                 db    0
LOAD:0000000000004F6E                 db    0
LOAD:0000000000004F6F                 db    0
LOAD:0000000000004F70                 db    0
LOAD:0000000000004F71                 db    0
LOAD:0000000000004F72                 db    0
LOAD:0000000000004F73                 db    0
LOAD:0000000000004F74                 db    0
LOAD:0000000000004F75                 db    0
LOAD:0000000000004F76                 db    0
LOAD:0000000000004F77                 db    0
LOAD:0000000000004F78                 db    0
LOAD:0000000000004F79                 db    0
LOAD:0000000000004F7A                 db    0
LOAD:0000000000004F7B                 db    0
LOAD:0000000000004F7C                 db    0
LOAD:0000000000004F7D                 db    0
LOAD:0000000000004F7E                 db    0
LOAD:0000000000004F7F                 db    0
LOAD:0000000000004F80                 db    0
LOAD:0000000000004F81                 db    0
LOAD:0000000000004F82                 db    0
LOAD:0000000000004F83                 db    0
LOAD:0000000000004F84                 db    0
LOAD:0000000000004F85                 db    0
LOAD:0000000000004F86                 db    0
LOAD:0000000000004F87                 db    0
LOAD:0000000000004F88                 db    0
LOAD:0000000000004F89                 db    0
LOAD:0000000000004F8A                 db    0
LOAD:0000000000004F8B                 db    0
LOAD:0000000000004F8C                 db    0
LOAD:0000000000004F8D                 db    0
LOAD:0000000000004F8E                 db    0
LOAD:0000000000004F8F                 db    0
LOAD:0000000000004F90                 db    0
LOAD:0000000000004F91                 db    0
LOAD:0000000000004F92                 db    0
LOAD:0000000000004F93                 db    0
LOAD:0000000000004F94                 db    0
LOAD:0000000000004F95                 db    0
LOAD:0000000000004F96                 db    0
LOAD:0000000000004F97                 db    0
LOAD:0000000000004F97 LOAD            ends
LOAD:0000000000004F97
.got:0000000000004F98 ; ===========================================================================
.got:0000000000004F98
.got:0000000000004F98 ; Segment type: Pure data
.got:0000000000004F98 ; Segment permissions: Read/Write
.got:0000000000004F98 _got            segment qword public 'DATA' use64
.got:0000000000004F98                 assume cs:_got
.got:0000000000004F98                 ;org 4F98h
.got:0000000000004F98 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000004FA0 qword_4FA0      dq 0                    ; DATA XREF: sub_1020↑r
.got:0000000000004FA8 qword_4FA8      dq 0                    ; DATA XREF: sub_1020+6↑r
.got:0000000000004FB0 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
.got:0000000000004FB8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000004FB8                                         ; DATA XREF: ___stack_chk_fail+4↑r
.got:0000000000004FC0 printf_ptr      dq offset printf        ; DATA XREF: _printf+4↑r
.got:0000000000004FC8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy+4↑r
.got:0000000000004FD0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
.got:0000000000004FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000004FD8                                         ; DATA XREF: _start+1F↑r
.got:0000000000004FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000004FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
.got:0000000000004FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000004FE8                                         ; DATA XREF: _init_proc+8↑r
.got:0000000000004FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000004FF0                                         ; DATA XREF: register_tm_clones+24↑r
.got:0000000000004FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000004FF8                                         ; DATA XREF: __cxa_finalize+4↑r
.got:0000000000004FF8                                         ; __do_global_dtors_aux+E↑r
.got:0000000000004FF8 _got            ends
.got:0000000000004FF8
.data:0000000000005000 ; ===========================================================================
.data:0000000000005000
.data:0000000000005000 ; Segment type: Pure data
.data:0000000000005000 ; Segment permissions: Read/Write
.data:0000000000005000 _data           segment qword public 'DATA' use64
.data:0000000000005000                 assume cs:_data
.data:0000000000005000                 ;org 5000h
.data:0000000000005000                 public __data_start ; weak
.data:0000000000005000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000005000                                         ; data_start
.data:0000000000005001                 db    0
.data:0000000000005002                 db    0
.data:0000000000005003                 db    0
.data:0000000000005004                 db    0
.data:0000000000005005                 db    0
.data:0000000000005006                 db    0
.data:0000000000005007                 db    0
.data:0000000000005008                 public __dso_handle
.data:0000000000005008 ; void *_dso_handle
.data:0000000000005008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
.data:0000000000005008                                         ; .data:__dso_handle↓o
.data:0000000000005008 _data           ends
.data:0000000000005008
.bss:0000000000005010 ; ===========================================================================
.bss:0000000000005010
.bss:0000000000005010 ; Segment type: Uninitialized
.bss:0000000000005010 ; Segment permissions: Read/Write
.bss:0000000000005010 _bss            segment qword public 'BSS' use64
.bss:0000000000005010                 assume cs:_bss
.bss:0000000000005010                 ;org 5010h
.bss:0000000000005010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000005010                 public __bss_start
.bss:0000000000005010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
.bss:0000000000005010                                         ; deregister_tm_clones+7↑o ...
.bss:0000000000005010                                         ; Alternative name is '__TMC_END__'
.bss:0000000000005010                                         ; completed.0
.bss:0000000000005010                                         ; _edata
.bss:0000000000005011                 align 8
.bss:0000000000005018                 public _TIG_IZ_FShb_envp
.bss:0000000000005018 _TIG_IZ_FShb_envp dq ?                  ; DATA XREF: main+A7↑w
.bss:0000000000005020                 public _TIG_IZ_FShb_argc
.bss:0000000000005020 _TIG_IZ_FShb_argc dd ?                  ; DATA XREF: main+21↑w
.bss:0000000000005024                 align 8
.bss:0000000000005028                 public _TIG_IZ_FShb_argv
.bss:0000000000005028 _TIG_IZ_FShb_argv dq ?                  ; DATA XREF: main+A0↑w
.bss:0000000000005028 _bss            ends
.bss:0000000000005028
.prgend:0000000000005030 ; ===========================================================================
.prgend:0000000000005030
.prgend:0000000000005030 ; Segment type: Zero-length
.prgend:0000000000005030 _prgend         segment byte public '' use64
.prgend:0000000000005030 _end            label byte
.prgend:0000000000005030 _prgend         ends
.prgend:0000000000005030
extern:0000000000005038 ; ===========================================================================
extern:0000000000005038
extern:0000000000005038 ; Segment type: Externs
extern:0000000000005038 ; extern
extern:0000000000005038 ; void free(void *ptr)
extern:0000000000005038                 extrn free:near         ; CODE XREF: _free+4↑j
extern:0000000000005038                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000005040 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000005040                 extrn __libc_start_main:near
extern:0000000000005040                                         ; CODE XREF: _start+1F↑p
extern:0000000000005040                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000005048                 extrn __stack_chk_fail:near
extern:0000000000005048                                         ; CODE XREF: ___stack_chk_fail+4↑j
extern:0000000000005048                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000005050 ; int printf(const char *format, ...)
extern:0000000000005050                 extrn printf:near       ; CODE XREF: _printf+4↑j
extern:0000000000005050                                         ; DATA XREF: .got:printf_ptr↑o
extern:0000000000005058 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000005058                 extrn memcpy:near       ; CODE XREF: _memcpy+4↑j
extern:0000000000005058                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000005060 ; void *malloc(size_t size)
extern:0000000000005060                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
extern:0000000000005060                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000005068 ; int __cxa_finalize(void *)
extern:0000000000005068                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000005068                                         ; CODE XREF: __cxa_finalize+4↑j
extern:0000000000005068                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000005070                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000005070                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000005078                 extrn __gmon_start__:near ; weak
extern:0000000000005078                                         ; CODE XREF: _init_proc+14↑p
extern:0000000000005078                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000005080                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000005080                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000005080
extern:0000000000005080
extern:0000000000005080                 end _start