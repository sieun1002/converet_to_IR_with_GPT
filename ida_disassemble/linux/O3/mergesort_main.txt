; Function: main
; Start: 0x10c0, End: 0x1445

0x10c0: endbr64
0x10c4: push    r15
0x10c6: mov     edi, 28h ; '('; size
0x10cb: push    r14
0x10cd: push    r13
0x10cf: push    r12
0x10d1: push    rbp
0x10d2: push    rbx
0x10d3: sub     rsp, 58h
0x10d7: movdqa  xmm0, cs:xmmword_2010
0x10df: mov     rax, fs:28h
0x10e8: mov     [rsp+88h+var_40], rax
0x10ed: xor     eax, eax
0x10ef: mov     [rsp+88h+var_48], 4
0x10f8: movaps  [rsp+88h+var_68], xmm0
0x10fd: movdqa  xmm0, cs:xmmword_2020
0x1105: movaps  [rsp+88h+var_58], xmm0
0x110a: call    _malloc
0x110f: test    rax, rax
0x1112: jz      loc_142E
0x1118: lea     rbx, [rsp+88h+var_68]
0x111d: mov     [rsp+88h+ptr], rax
0x1122: mov     rsi, rax
0x1125: mov     edi, 1
0x112a: mov     r10d, 4
0x1130: mov     [rsp+88h+var_70], rbx
0x1135: mov     rcx, rbx
0x1138: mov     [rsp+88h+var_7C], r10d
0x113d: nop     dword ptr [rax]
0x1140: mov     r11, rdi
0x1143: add     rdi, rdi
0x1146: xor     r8d, r8d
0x1149: mov     [rsp+88h+var_88], rdi
0x114d: jmp     loc_128A
0x1152: align 8
0x1158: mov     r9d, [rcx+r12*4]
0x115c: lea     rdi, [rax+1]
0x1160: mov     [rsi+rax*4], r9d
0x1164: cmp     rdx, rdi
0x1167: jz      loc_1280
0x116d: lea     r9, [r12+1]
0x1172: cmp     r10, rbx
0x1175: jb      loc_143A
0x117b: mov     rbx, rdx
0x117e: lea     r13, [rax+2]
0x1182: sub     rbx, rdi
0x1185: lea     r10, [rbx-1]
0x1189: cmp     r10, 2
0x118d: jbe     loc_13A0
0x1193: cmp     rdx, r13
0x1196: jb      loc_13A0
0x119c: lea     r10, ds:0[rdi*4]
0x11a4: lea     r12, ds:8[r12*4]
0x11ac: lea     rbp, [rsi+r10]
0x11b0: lea     r15, [rcx+r12]
0x11b4: mov     r14, rbp
0x11b7: sub     r14, r15
0x11ba: cmp     r14, 8
0x11be: ja      loc_12F0
0x11c4: lea     rbx, ds:0[r9*4]
0x11cc: mov     r9d, [rcx+r9*4]
0x11d0: mov     [rsi+r10], r9d
0x11d4: cmp     r13, rdx
0x11d7: jnb     loc_1280
0x11dd: mov     r9d, [rcx+rbx+4]
0x11e2: mov     [rsi+r10+4], r9d
0x11e7: lea     r9, [rax+3]
0x11eb: cmp     r9, rdx
0x11ee: jnb     loc_1280
0x11f4: mov     r9d, [rcx+rbx+8]
0x11f9: mov     [rsi+r10+8], r9d
0x11fe: lea     r9, [rax+4]
0x1202: cmp     r9, rdx
0x1205: jnb     short loc_1280
0x1207: mov     r9d, [rcx+rbx+0Ch]
0x120c: mov     [rsi+r10+0Ch], r9d
0x1211: lea     r9, [rax+5]
0x1215: cmp     r9, rdx
0x1218: jnb     short loc_1280
0x121a: mov     r9d, [rcx+rbx+10h]
0x121f: mov     [rsi+r10+10h], r9d
0x1224: lea     r9, [rax+6]
0x1228: cmp     r9, rdx
0x122b: jnb     short loc_1280
0x122d: mov     r9d, [rcx+rbx+14h]
0x1232: mov     [rsi+r10+14h], r9d
0x1237: lea     r9, [rax+7]
0x123b: cmp     r9, rdx
0x123e: jnb     short loc_1280
0x1240: mov     r9d, [rcx+rbx+18h]
0x1245: add     rax, 8
0x1249: mov     [rsi+r10+18h], r9d
0x124e: cmp     rax, rdx
0x1251: jnb     short loc_1280
0x1253: mov     eax, [rcx+rbx+1Ch]
0x1257: mov     [rsi+r10+1Ch], eax
0x125c: xor     eax, eax
0x125e: cmp     rdi, 1
0x1262: setz    al
0x1265: neg     rax
0x1268: add     rax, 0Ah
0x126c: cmp     rax, rdx
0x126f: jnb     short loc_1280
0x1271: mov     eax, [rcx+rbx+20h]
0x1275: mov     [rsi+24h], eax
0x1278: nop     dword ptr [rax+rax+00000000h]
0x1280: cmp     r8, 9
0x1284: ja      loc_1380
0x128a: lea     rdx, [r11+r8]
0x128e: mov     ebx, 0Ah
0x1293: mov     rax, r8
0x1296: cmp     rdx, rbx
0x1299: lea     r8, [rdx+r11]
0x129d: mov     r10, rax
0x12a0: cmovbe  rbx, rdx
0x12a4: mov     edx, 0Ah
0x12a9: cmp     r8, rdx
0x12ac: cmovbe  rdx, r8
0x12b0: mov     r12, rbx
0x12b3: cmp     rax, rdx
0x12b6: jnb     short loc_1280
0x12b8: cmp     r10, rbx
0x12bb: jnb     loc_1158
0x12c1: mov     edi, [rcx+r10*4]
0x12c5: cmp     r12, rdx
0x12c8: jnb     short loc_12D7
0x12ca: mov     r9d, [rcx+r12*4]
0x12ce: cmp     r9d, edi
0x12d1: jl      loc_115C
0x12d7: mov     [rsi+rax*4], edi
0x12da: add     rax, 1
0x12de: cmp     rdx, rax
0x12e1: jz      short loc_1280
0x12e3: add     r10, 1
0x12e7: jmp     short loc_12B8
0x12e9: align 10h
0x12f0: lea     rax, [rcx+r12-4]
0x12f5: mov     r10, rbx
0x12f8: movdqu  xmm1, xmmword ptr [rax]
0x12fc: shr     r10, 2
0x1300: movups  xmmword ptr [rbp+0], xmm1
0x1304: cmp     r10, 1
0x1308: jz      short loc_1313
0x130a: movdqu  xmm2, xmmword ptr [rax+10h]
0x130f: movups  xmmword ptr [rbp+10h], xmm2
0x1313: mov     rax, rbx
0x1316: and     rax, 0FFFFFFFFFFFFFFFCh
0x131a: add     r9, rax
0x131d: add     rax, rdi
0x1320: and     ebx, 3
0x1323: jz      loc_1280
0x1329: lea     r10, ds:0[r9*4]
0x1331: mov     r9d, [rcx+r9*4]
0x1335: lea     rdi, ds:0[rax*4]
0x133d: mov     [rsi+rax*4], r9d
0x1341: lea     r9, [rax+1]
0x1345: cmp     r9, rdx
0x1348: jnb     loc_1280
0x134e: mov     r9d, [rcx+r10+4]
0x1353: add     rax, 2
0x1357: mov     [rsi+rdi+4], r9d
0x135c: cmp     rax, rdx
0x135f: jnb     loc_1280
0x1365: mov     eax, [rcx+r10+8]
0x136a: mov     [rsi+rdi+8], eax
0x136e: cmp     r8, 9
0x1372: jbe     loc_128A
0x1378: nop     dword ptr [rax+rax+00000000h]
0x1380: sub     [rsp+88h+var_7C], 1
0x1385: mov     rdi, [rsp+88h+var_88]
0x1389: jz      short loc_13AD
0x138b: mov     rdx, rcx
0x138e: mov     rcx, rsi
0x1391: mov     rsi, rdx
0x1394: jmp     loc_1140
0x1399: align 20h
0x13a0: lea     r10, ds:0[rdi*4]
0x13a8: jmp     loc_11C4
0x13ad: mov     rbx, [rsp+88h+var_70]
0x13b2: mov     rax, [rsp+88h+ptr]
0x13b7: cmp     rsi, rbx
0x13ba: jz      short loc_13C6
0x13bc: mov     ecx, 0Ah
0x13c1: mov     rdi, rbx
0x13c4: rep movsd
0x13c6: mov     rdi, rax; ptr
0x13c9: call    _free
0x13ce: lea     r12, [rsp+88h+var_40]
0x13d3: lea     rbp, unk_2004
0x13da: nop     word ptr [rax+rax+00h]
0x13e0: mov     edx, [rbx]
0x13e2: mov     rsi, rbp
0x13e5: mov     edi, 2
0x13ea: xor     eax, eax
0x13ec: add     rbx, 4
0x13f0: call    ___printf_chk
0x13f5: cmp     r12, rbx
0x13f8: jnz     short loc_13E0
0x13fa: xor     eax, eax
0x13fc: lea     rsi, unk_2008
0x1403: mov     edi, 2
0x1408: call    ___printf_chk
0x140d: mov     rax, [rsp+88h+var_40]
0x1412: sub     rax, fs:28h
0x141b: jnz     short loc_1435
0x141d: add     rsp, 58h
0x1421: xor     eax, eax
0x1423: pop     rbx
0x1424: pop     rbp
0x1425: pop     r12
0x1427: pop     r13
0x1429: pop     r14
0x142b: pop     r15
0x142d: retn
0x142e: lea     rbx, [rsp+88h+var_68]
0x1433: jmp     short loc_13CE
0x1435: call    ___stack_chk_fail
0x143a: mov     r12, r9
0x143d: mov     rax, rdi
0x1440: jmp     loc_12B8