LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : F9B836A1B6BB45730035C18FC96914D8841BD38FC503EA730EC53D30A0CEECC5
LOAD:0000000000000000 ; Input MD5    : DFCADCFBC45430D3A569A252F4B2D55D
LOAD:0000000000000000 ; Input CRC32  : 0A4DF0F9
LOAD:0000000000000000 ; Compiler     : GNU C++
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\insertionsort
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'Scrt1.o'
LOAD:0000000000000000 ; Source File : 'insertionsort.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure data
LOAD:0000000000000000 ; Segment permissions: Read
LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset _start        ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 36D8h                ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 318h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 318h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 4                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6A8h                 ; Size in file image
LOAD:00000000000000D8                 dq 6A8h                 ; Size in memory image
LOAD:00000000000000E0                 dq 1000h                ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 5                    ; Flags
LOAD:00000000000000F0                 dq 1000h                ; File offset
LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
LOAD:0000000000000100                 dq 1000h                ; Physical address
LOAD:0000000000000108                 dq 299h                 ; Size in file image
LOAD:0000000000000110                 dq 299h                 ; Size in memory image
LOAD:0000000000000118                 dq 1000h                ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 1                    ; Type: LOAD
LOAD:0000000000000124                 dd 4                    ; Flags
LOAD:0000000000000128                 dq 2000h                ; File offset
LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
LOAD:0000000000000138                 dq 2000h                ; Physical address
LOAD:0000000000000140                 dq 100h                 ; Size in file image
LOAD:0000000000000148                 dq 100h                 ; Size in memory image
LOAD:0000000000000150                 dq 1000h                ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 1                    ; Type: LOAD
LOAD:000000000000015C                 dd 6                    ; Flags
LOAD:0000000000000160                 dq 2DB0h                ; File offset
LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000170                 dq 3DB0h                ; Physical address
LOAD:0000000000000178                 dq 260h                 ; Size in file image
LOAD:0000000000000180                 dq 268h                 ; Size in memory image
LOAD:0000000000000188                 dq 1000h                ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000194                 dd 6                    ; Flags
LOAD:0000000000000198                 dq 2DC0h                ; File offset
LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
LOAD:00000000000001A8                 dq 3DC0h                ; Physical address
LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
LOAD:00000000000001C0                 dq 8                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
LOAD:00000000000001CC                 dd 4                    ; Flags
LOAD:00000000000001D0                 dq 338h                 ; File offset
LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
LOAD:00000000000001E0                 dq 338h                 ; Physical address
LOAD:00000000000001E8                 dq 30h                  ; Size in file image
LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
LOAD:00000000000001F8                 dq 8                    ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 4                    ; Type: NOTE
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 368h                 ; File offset
LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
LOAD:0000000000000218                 dq 368h                 ; Physical address
LOAD:0000000000000220                 dq 44h                  ; Size in file image
LOAD:0000000000000228                 dq 44h                  ; Size in memory image
LOAD:0000000000000230                 dq 4                    ; Alignment
LOAD:0000000000000238 ; PHT Entry 9
LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
LOAD:000000000000023C                 dd 4                    ; Flags
LOAD:0000000000000240                 dq 338h                 ; File offset
LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
LOAD:0000000000000250                 dq 338h                 ; Physical address
LOAD:0000000000000258                 dq 30h                  ; Size in file image
LOAD:0000000000000260                 dq 30h                  ; Size in memory image
LOAD:0000000000000268                 dq 8                    ; Alignment
LOAD:0000000000000270 ; PHT Entry 10
LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000274                 dd 4                    ; Flags
LOAD:0000000000000278                 dq 200Ch                ; File offset
LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:0000000000000288                 dq 200Ch                ; Physical address
LOAD:0000000000000290                 dq 34h                  ; Size in file image
LOAD:0000000000000298                 dq 34h                  ; Size in memory image
LOAD:00000000000002A0                 dq 4                    ; Alignment
LOAD:00000000000002A8 ; PHT Entry 11
LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000002AC                 dd 6                    ; Flags
LOAD:00000000000002B0                 dq 0                    ; File offset
LOAD:00000000000002B8                 dq 0                    ; Virtual address
LOAD:00000000000002C0                 dq 0                    ; Physical address
LOAD:00000000000002C8                 dq 0                    ; Size in file image
LOAD:00000000000002D0                 dq 0                    ; Size in memory image
LOAD:00000000000002D8                 dq 10h                  ; Alignment
LOAD:00000000000002E0 ; PHT Entry 12
LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
LOAD:00000000000002E4                 dd 4                    ; Flags
LOAD:00000000000002E8                 dq 2DB0h                ; File offset
LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:00000000000002F8                 dq 3DB0h                ; Physical address
LOAD:0000000000000300                 dq 250h                 ; Size in file image
LOAD:0000000000000308                 dq 250h                 ; Size in memory image
LOAD:0000000000000310                 dq 1                    ; Alignment
LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000334                 align 8
LOAD:0000000000000338 ; ELF Note Entry
LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
LOAD:0000000000000338                                         ; Name Size
LOAD:000000000000033C                 dd 20h                  ; Desc Size
LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
LOAD:0000000000000368 ; ELF Note Entry
LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
LOAD:0000000000000368                                         ; Name Size
LOAD:000000000000036C                 dd 14h                  ; Desc Size
LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000378                 db 0A4h, 35h, 94h, 8Ah, 7Dh, 0DAh, 5Ah, 2Dh, 0B9h, 0CAh ; Desc
LOAD:0000000000000382                 db 3Eh, 5Dh, 8Ah, 3Eh, 64h, 0D2h, 96h, 5Fh, 8Fh, 0D3h
LOAD:000000000000038C ; ELF Note Entry
LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
LOAD:0000000000000390                 dd 10h                  ; Desc Size
LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:00000000000003AC                 align 10h
LOAD:00000000000003B0 ; ELF GNU Hash Table
LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
LOAD:00000000000003B4 elf_gnu_hash_symbias dd 7
LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000003BC elf_gnu_hash_shift dd 6
LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
LOAD:00000000000003C8 elf_gnu_hash_bucket dd 7, 0
LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
LOAD:00000000000003D8 ; ELF Symbol Table
LOAD:00000000000003D8                 Elf64_Sym <0>
LOAD:00000000000003F0                 Elf64_Sym <offset aLibcStartMain - offset unk_498, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000003F0                            offset dword_0, 0>
LOAD:0000000000000408                 Elf64_Sym <offset aItmDeregistert - offset unk_498, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aStackChkFail - offset unk_498, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000420                            offset dword_0, 0>
LOAD:0000000000000438                 Elf64_Sym <offset aGmonStart - offset unk_498, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aPrintfChk - offset unk_498, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000450                            offset dword_0, 0>
LOAD:0000000000000468                 Elf64_Sym <offset aItmRegistertmc - offset unk_498, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000468                            offset dword_0, 0>
LOAD:0000000000000480                 Elf64_Sym <offset aCxaFinalize - offset unk_498, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000480                            offset dword_0, 0>
LOAD:0000000000000498 ; ELF String Table
LOAD:0000000000000498 unk_498         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:0000000000000498                                         ; LOAD:0000000000000408↑o ...
LOAD:0000000000000499 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000480↑o
LOAD:00000000000004A8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
LOAD:00000000000004B5 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000004B5                                         ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:00000000000004C7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000420↑o
LOAD:00000000000004D8 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000568↓o
LOAD:00000000000004E2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000578↓o
LOAD:00000000000004EE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000588↓o
LOAD:00000000000004FA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000598↓o
LOAD:0000000000000504 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005A8↓o
LOAD:000000000000050F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:000000000000050F                                         ; DATA XREF: LOAD:0000000000000408↑o
LOAD:000000000000052B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000438↑o
LOAD:000000000000053A aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:000000000000053A                                         ; DATA XREF: LOAD:0000000000000468↑o
LOAD:0000000000000554 ; ELF GNU Symbol Version Table
LOAD:0000000000000554                 dw 0
LOAD:0000000000000556                 dw 2                    ; __libc_start_main@@GLIBC_2.34
LOAD:0000000000000558                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:000000000000055A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:000000000000055C                 dw 1                    ; global symbol: __gmon_start__
LOAD:000000000000055E                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000560                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:0000000000000562                 dw 5                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000564                 dw 0
LOAD:0000000000000566                 dw 0
LOAD:0000000000000568 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000568                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_498, 10h, 0> ; "libc.so.6"
LOAD:0000000000000578                 Elf64_Vernaux <9691A75h, 0, 5, offset aGlibc225 - offset unk_498, 10h> ; "GLIBC_2.2.5"
LOAD:0000000000000588                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset unk_498, 10h> ; "GLIBC_2.3.4"
LOAD:0000000000000598                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_498, 10h> ; "GLIBC_2.4"
LOAD:00000000000005A8                 Elf64_Vernaux <69691B4h, 0, 2, offset aGlibc234_0 - offset unk_498, 0> ; "GLIBC_2.34"
LOAD:00000000000005B8 ; ELF RELA Relocation Table
LOAD:00000000000005B8                 Elf64_Rela <3DB0h, 8, 1280h> ; R_X86_64_RELATIVE +1280h
LOAD:00000000000005D0                 Elf64_Rela <3DB8h, 8, 1240h> ; R_X86_64_RELATIVE +1240h
LOAD:00000000000005E8                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
LOAD:0000000000000600                 Elf64_Rela <3FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000618                 Elf64_Rela <3FE0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000630                 Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000648                 Elf64_Rela <3FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000660                 Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000678 ; ELF JMPREL Relocation Table
LOAD:0000000000000678                 Elf64_Rela <3FC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000690                 Elf64_Rela <3FD0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000000690 LOAD            ends
LOAD:0000000000000690
.init:0000000000001000 ; ===========================================================================
.init:0000000000001000
.init:0000000000001000 ; Segment type: Pure code
.init:0000000000001000 ; Segment permissions: Read/Execute
.init:0000000000001000 _init           segment dword public 'CODE' use64
.init:0000000000001000                 assume cs:_init
.init:0000000000001000                 ;org 1000h
.init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001000
.init:0000000000001000 ; =============== S U B R O U T I N E =======================================
.init:0000000000001000
.init:0000000000001000
.init:0000000000001000                 public _init_proc
.init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
.init:0000000000001000                 endbr64                 ; _init
.init:0000000000001004                 sub     rsp, 8
.init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
.init:000000000000100F                 test    rax, rax
.init:0000000000001012                 jz      short loc_1016
.init:0000000000001014                 call    rax ; __gmon_start__
.init:0000000000001016
.init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
.init:0000000000001016                 add     rsp, 8
.init:000000000000101A                 retn
.init:000000000000101A _init_proc      endp
.init:000000000000101A
.init:000000000000101A _init           ends
.init:000000000000101A
LOAD:000000000000101B ; ===========================================================================
LOAD:000000000000101B
LOAD:000000000000101B ; Segment type: Pure code
LOAD:000000000000101B ; Segment permissions: Read/Execute
LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
LOAD:000000000000101B                 assume cs:LOAD
LOAD:000000000000101B                 ;org 101Bh
LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000101B                 align 20h
LOAD:000000000000101B LOAD            ends
LOAD:000000000000101B
.plt:0000000000001020 ; ===========================================================================
.plt:0000000000001020
.plt:0000000000001020 ; Segment type: Pure code
.plt:0000000000001020 ; Segment permissions: Read/Execute
.plt:0000000000001020 _plt            segment para public 'CODE' use64
.plt:0000000000001020                 assume cs:_plt
.plt:0000000000001020                 ;org 1020h
.plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001020
.plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001020
.plt:0000000000001020
.plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
.plt:0000000000001020                                         ; sub_1040+9↓j
.plt:0000000000001020 ; __unwind {
.plt:0000000000001020                 push    cs:qword_3FB8
.plt:0000000000001026                 bnd jmp cs:qword_3FC0
.plt:0000000000001026 sub_1020        endp
.plt:0000000000001026
.plt:0000000000001026 ; ---------------------------------------------------------------------------
.plt:000000000000102D                 align 10h
.plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
.plt:000000000000103F                 align 20h
.plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
.plt:000000000000104F                 align 10h
.plt:000000000000104F ; } // starts at 1020
.plt:000000000000104F _plt            ends
.plt:000000000000104F
.plt.got:0000000000001050 ; ===========================================================================
.plt.got:0000000000001050
.plt.got:0000000000001050 ; Segment type: Pure code
.plt.got:0000000000001050 ; Segment permissions: Read/Execute
.plt.got:0000000000001050 _plt_got        segment para public 'CODE' use64
.plt.got:0000000000001050                 assume cs:_plt_got
.plt.got:0000000000001050                 ;org 1050h
.plt.got:0000000000001050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001050 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
.plt.got:000000000000105B                 align 20h
.plt.got:000000000000105B ; } // starts at 1050
.plt.got:000000000000105B _plt_got        ends
.plt.got:000000000000105B
.plt.sec:0000000000001060 ; ===========================================================================
.plt.sec:0000000000001060
.plt.sec:0000000000001060 ; Segment type: Pure code
.plt.sec:0000000000001060 ; Segment permissions: Read/Execute
.plt.sec:0000000000001060 _plt_sec        segment para public 'CODE' use64
.plt.sec:0000000000001060                 assume cs:_plt_sec
.plt.sec:0000000000001060                 ;org 1060h
.plt.sec:0000000000001060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.sec:0000000000001060 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
.plt.sec:000000000000106B                 align 10h
.plt.sec:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
.plt.sec:000000000000107B                 align 20h
.plt.sec:000000000000107B ; } // starts at 1060
.plt.sec:000000000000107B _plt_sec        ends
.plt.sec:000000000000107B
.text:0000000000001080 ; ===========================================================================
.text:0000000000001080
.text:0000000000001080 ; Segment type: Pure code
.text:0000000000001080 ; Segment permissions: Read/Execute
.text:0000000000001080 _text           segment para public 'CODE' use64
.text:0000000000001080                 assume cs:_text
.text:0000000000001080                 ;org 1080h
.text:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001080
.text:0000000000001080 ; =============== S U B R O U T I N E =======================================
.text:0000000000001080
.text:0000000000001080
.text:0000000000001080 ; int __fastcall main(int argc, const char **argv, const char **envp)
.text:0000000000001080                 public main
.text:0000000000001080 main            proc near               ; DATA XREF: _start+18↓o
.text:0000000000001080
.text:0000000000001080 var_44          = byte ptr -44h
.text:0000000000001080 var_40          = qword ptr -40h
.text:0000000000001080 var_38          = qword ptr -38h
.text:0000000000001080 var_30          = qword ptr -30h
.text:0000000000001080 var_28          = qword ptr -28h
.text:0000000000001080 var_20          = qword ptr -20h
.text:0000000000001080
.text:0000000000001080 ; __unwind {
.text:0000000000001080                 endbr64
.text:0000000000001084                 push    r12
.text:0000000000001086                 mov     edx, 9
.text:000000000000108B                 mov     r9d, 1
.text:0000000000001091                 push    rbp
.text:0000000000001092                 push    rbx
.text:0000000000001093                 sub     rsp, 30h
.text:0000000000001097                 mov     rax, fs:28h
.text:00000000000010A0                 mov     [rsp+48h+var_20], rax
.text:00000000000010A5                 mov     rax, 100000009h
.text:00000000000010AF                 lea     r8, [rsp+48h+var_44]
.text:00000000000010B4                 mov     rcx, rsp
.text:00000000000010B7                 mov     [rsp+48h+var_28], 4
.text:00000000000010C0                 mov     [rsp], rax
.text:00000000000010C4                 mov     rax, 300000005h
.text:00000000000010CE                 mov     [rsp+48h+var_40], rax
.text:00000000000010D3                 mov     rax, 200000007h
.text:00000000000010DD                 mov     [rsp+48h+var_38], rax
.text:00000000000010E2                 mov     rax, 600000008h
.text:00000000000010EC                 mov     [rsp+48h+var_30], rax
.text:00000000000010F1                 nop     dword ptr [rax+00000000h]
.text:00000000000010F8
.text:00000000000010F8 loc_10F8:                               ; CODE XREF: main+B3↓j
.text:00000000000010F8                 mov     esi, [r8]
.text:00000000000010FB                 mov     rbp, rcx
.text:00000000000010FE                 mov     rax, r8
.text:0000000000001101                 jmp     short loc_110B
.text:0000000000001101 ; ---------------------------------------------------------------------------
.text:0000000000001103                 align 8
.text:0000000000001108
.text:0000000000001108 loc_1108:                               ; CODE XREF: main+9B↓j
.text:0000000000001108                 mov     edx, [rax-4]
.text:000000000000110B
.text:000000000000110B loc_110B:                               ; CODE XREF: main+81↑j
.text:000000000000110B                 mov     rdi, rax
.text:000000000000110E                 cmp     esi, edx
.text:0000000000001110                 jge     short loc_1120
.text:0000000000001112                 mov     [rax], edx
.text:0000000000001114                 sub     rax, 4
.text:0000000000001118                 cmp     rax, rcx
.text:000000000000111B                 jnz     short loc_1108
.text:000000000000111D                 mov     rdi, rcx
.text:0000000000001120
.text:0000000000001120 loc_1120:                               ; CODE XREF: main+90↑j
.text:0000000000001120                 add     r9, 1
.text:0000000000001124                 mov     [rdi], esi
.text:0000000000001126                 cmp     r9, 0Ah
.text:000000000000112A                 jz      short loc_1138
.text:000000000000112C                 mov     edx, [r8]
.text:000000000000112F                 add     r8, 4
.text:0000000000001133                 jmp     short loc_10F8
.text:0000000000001133 ; ---------------------------------------------------------------------------
.text:0000000000001135                 align 8
.text:0000000000001138
.text:0000000000001138 loc_1138:                               ; CODE XREF: main+AA↑j
.text:0000000000001138                 lea     rbx, [rcx+28h]
.text:000000000000113C                 lea     r12, unk_2004
.text:0000000000001143                 nop     dword ptr [rax+rax+00h]
.text:0000000000001148
.text:0000000000001148 loc_1148:                               ; CODE XREF: main+E1↓j
.text:0000000000001148                 mov     edx, [rbp+0]
.text:000000000000114B                 mov     rsi, r12
.text:000000000000114E                 mov     edi, 1
.text:0000000000001153                 xor     eax, eax
.text:0000000000001155                 add     rbp, 4
.text:0000000000001159                 call    ___printf_chk
.text:000000000000115E                 cmp     rbx, rbp
.text:0000000000001161                 jnz     short loc_1148
.text:0000000000001163                 xor     eax, eax
.text:0000000000001165                 lea     rsi, unk_2008
.text:000000000000116C                 mov     edi, 1
.text:0000000000001171                 call    ___printf_chk
.text:0000000000001176                 mov     rax, [rsp+48h+var_20]
.text:000000000000117B                 sub     rax, fs:28h
.text:0000000000001184                 jnz     short loc_1191
.text:0000000000001186                 add     rsp, 30h
.text:000000000000118A                 xor     eax, eax
.text:000000000000118C                 pop     rbx
.text:000000000000118D                 pop     rbp
.text:000000000000118E                 pop     r12
.text:0000000000001190                 retn
.text:0000000000001191 ; ---------------------------------------------------------------------------
.text:0000000000001191
.text:0000000000001191 loc_1191:                               ; CODE XREF: main+104↑j
.text:0000000000001191                 call    ___stack_chk_fail
.text:0000000000001191 ; } // starts at 1080
.text:0000000000001191 main            endp
.text:0000000000001191
.text:0000000000001191 ; ---------------------------------------------------------------------------
.text:0000000000001196                 align 20h
.text:00000000000011A0
.text:00000000000011A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000011A0
.text:00000000000011A0 ; Attributes: noreturn fuzzy-sp
.text:00000000000011A0
.text:00000000000011A0                 public _start
.text:00000000000011A0 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000011A0 ; __unwind {
.text:00000000000011A0                 endbr64
.text:00000000000011A4                 xor     ebp, ebp
.text:00000000000011A6                 mov     r9, rdx         ; rtld_fini
.text:00000000000011A9                 pop     rsi             ; argc
.text:00000000000011AA                 mov     rdx, rsp        ; ubp_av
.text:00000000000011AD                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000011B1                 push    rax
.text:00000000000011B2                 push    rsp             ; stack_end
.text:00000000000011B3                 xor     r8d, r8d        ; fini
.text:00000000000011B6                 xor     ecx, ecx        ; init
.text:00000000000011B8                 lea     rdi, main       ; main
.text:00000000000011BF                 call    cs:__libc_start_main_ptr
.text:00000000000011C5                 hlt
.text:00000000000011C5 ; } // starts at 11A0
.text:00000000000011C5 _start          endp
.text:00000000000011C5
.text:00000000000011C5 ; ---------------------------------------------------------------------------
.text:00000000000011C6                 align 10h
.text:00000000000011D0
.text:00000000000011D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000011D0
.text:00000000000011D0
.text:00000000000011D0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1267↓p
.text:00000000000011D0                 lea     rdi, __bss_start
.text:00000000000011D7                 lea     rax, __bss_start
.text:00000000000011DE                 cmp     rax, rdi
.text:00000000000011E1                 jz      short locret_11F8
.text:00000000000011E3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000011EA                 test    rax, rax
.text:00000000000011ED                 jz      short locret_11F8
.text:00000000000011EF                 jmp     rax
.text:00000000000011EF ; ---------------------------------------------------------------------------
.text:00000000000011F1                 align 8
.text:00000000000011F8
.text:00000000000011F8 locret_11F8:                            ; CODE XREF: deregister_tm_clones+11↑j
.text:00000000000011F8                                         ; deregister_tm_clones+1D↑j
.text:00000000000011F8                 retn
.text:00000000000011F8 deregister_tm_clones endp
.text:00000000000011F8
.text:00000000000011F8 ; ---------------------------------------------------------------------------
.text:00000000000011F9                 align 20h
.text:0000000000001200
.text:0000000000001200 ; =============== S U B R O U T I N E =======================================
.text:0000000000001200
.text:0000000000001200
.text:0000000000001200 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
.text:0000000000001200                 lea     rdi, __bss_start
.text:0000000000001207                 lea     rsi, __bss_start
.text:000000000000120E                 sub     rsi, rdi
.text:0000000000001211                 mov     rax, rsi
.text:0000000000001214                 shr     rsi, 3Fh
.text:0000000000001218                 sar     rax, 3
.text:000000000000121C                 add     rsi, rax
.text:000000000000121F                 sar     rsi, 1
.text:0000000000001222                 jz      short locret_1238
.text:0000000000001224                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000122B                 test    rax, rax
.text:000000000000122E                 jz      short locret_1238
.text:0000000000001230                 jmp     rax
.text:0000000000001230 ; ---------------------------------------------------------------------------
.text:0000000000001232                 align 8
.text:0000000000001238
.text:0000000000001238 locret_1238:                            ; CODE XREF: register_tm_clones+22↑j
.text:0000000000001238                                         ; register_tm_clones+2E↑j
.text:0000000000001238                 retn
.text:0000000000001238 register_tm_clones endp
.text:0000000000001238
.text:0000000000001238 ; ---------------------------------------------------------------------------
.text:0000000000001239                 align 20h
.text:0000000000001240
.text:0000000000001240 ; =============== S U B R O U T I N E =======================================
.text:0000000000001240
.text:0000000000001240
.text:0000000000001240 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001240                 endbr64
.text:0000000000001244                 cmp     cs:__bss_start, 0
.text:000000000000124B                 jnz     short locret_1278
.text:000000000000124D                 push    rbp
.text:000000000000124E                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001256                 mov     rbp, rsp
.text:0000000000001259                 jz      short loc_1267
.text:000000000000125B                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001262                 call    __cxa_finalize
.text:0000000000001267
.text:0000000000001267 loc_1267:                               ; CODE XREF: __do_global_dtors_aux+19↑j
.text:0000000000001267                 call    deregister_tm_clones
.text:000000000000126C                 mov     cs:__bss_start, 1
.text:0000000000001273                 pop     rbp
.text:0000000000001274                 retn
.text:0000000000001274 ; ---------------------------------------------------------------------------
.text:0000000000001275                 align 8
.text:0000000000001278
.text:0000000000001278 locret_1278:                            ; CODE XREF: __do_global_dtors_aux+B↑j
.text:0000000000001278                 retn
.text:0000000000001278 __do_global_dtors_aux endp
.text:0000000000001278
.text:0000000000001278 ; ---------------------------------------------------------------------------
.text:0000000000001279                 align 20h
.text:0000000000001280
.text:0000000000001280 ; =============== S U B R O U T I N E =======================================
.text:0000000000001280
.text:0000000000001280
.text:0000000000001280 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001280                 endbr64
.text:0000000000001284                 jmp     register_tm_clones
.text:0000000000001284 frame_dummy     endp
.text:0000000000001284
.text:0000000000001284 _text           ends
.text:0000000000001284
LOAD:0000000000001289 ; ===========================================================================
LOAD:0000000000001289
LOAD:0000000000001289 ; Segment type: Pure code
LOAD:0000000000001289 ; Segment permissions: Read/Execute
LOAD:0000000000001289 LOAD            segment mempage public 'CODE' use64
LOAD:0000000000001289                 assume cs:LOAD
LOAD:0000000000001289                 ;org 1289h
LOAD:0000000000001289                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001289                 align 4
LOAD:0000000000001289 LOAD            ends
LOAD:0000000000001289
.fini:000000000000128C ; ===========================================================================
.fini:000000000000128C
.fini:000000000000128C ; Segment type: Pure code
.fini:000000000000128C ; Segment permissions: Read/Execute
.fini:000000000000128C _fini           segment dword public 'CODE' use64
.fini:000000000000128C                 assume cs:_fini
.fini:000000000000128C                 ;org 128Ch
.fini:000000000000128C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000128C
.fini:000000000000128C ; =============== S U B R O U T I N E =======================================
.fini:000000000000128C
.fini:000000000000128C
.fini:000000000000128C                 public _term_proc
.fini:000000000000128C _term_proc      proc near
.fini:000000000000128C                 endbr64                 ; _fini
.fini:0000000000001290                 sub     rsp, 8
.fini:0000000000001294                 add     rsp, 8
.fini:0000000000001298                 retn
.fini:0000000000001298 _term_proc      endp
.fini:0000000000001298
.fini:0000000000001298 _fini           ends
.fini:0000000000001298
.rodata:0000000000002000 ; ===========================================================================
.rodata:0000000000002000
.rodata:0000000000002000 ; Segment type: Pure data
.rodata:0000000000002000 ; Segment permissions: Read
.rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
.rodata:0000000000002000                 assume cs:_rodata
.rodata:0000000000002000                 ;org 2000h
.rodata:0000000000002000                 public _IO_stdin_used
.rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
.rodata:0000000000002001                 db    0
.rodata:0000000000002002                 db    2
.rodata:0000000000002003                 db    0
.rodata:0000000000002004 unk_2004        db  25h ; %             ; DATA XREF: main+BC↑o
.rodata:0000000000002005                 db  64h ; d
.rodata:0000000000002006                 db  20h
.rodata:0000000000002007                 db    0
.rodata:0000000000002008 unk_2008        db  0Ah                 ; DATA XREF: main+E5↑o
.rodata:0000000000002009                 db    0
.rodata:0000000000002009 _rodata         ends
.rodata:0000000000002009
LOAD:000000000000200A ; ===========================================================================
LOAD:000000000000200A
LOAD:000000000000200A ; Segment type: Pure data
LOAD:000000000000200A ; Segment permissions: Read
LOAD:000000000000200A LOAD            segment mempage public 'DATA' use64
LOAD:000000000000200A                 assume cs:LOAD
LOAD:000000000000200A                 ;org 200Ah
LOAD:000000000000200A                 align 4
LOAD:000000000000200A LOAD            ends
LOAD:000000000000200A
.eh_frame_hdr:000000000000200C ; ===========================================================================
.eh_frame_hdr:000000000000200C
.eh_frame_hdr:000000000000200C ; Segment type: Pure data
.eh_frame_hdr:000000000000200C ; Segment permissions: Read
.eh_frame_hdr:000000000000200C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000200C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000200C                 ;org 200Ch
.eh_frame_hdr:000000000000200C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
.eh_frame_hdr:000000000000200D                 db  1Bh
.eh_frame_hdr:000000000000200E                 db    3
.eh_frame_hdr:000000000000200F                 db  3Bh ; ;
.eh_frame_hdr:0000000000002010                 db  30h ; 0
.eh_frame_hdr:0000000000002011                 db    0
.eh_frame_hdr:0000000000002012                 db    0
.eh_frame_hdr:0000000000002013                 db    0
.eh_frame_hdr:0000000000002014                 db    5
.eh_frame_hdr:0000000000002015                 db    0
.eh_frame_hdr:0000000000002016                 db    0
.eh_frame_hdr:0000000000002017                 db    0
.eh_frame_hdr:0000000000002018                 db  14h
.eh_frame_hdr:0000000000002019                 db 0F0h
.eh_frame_hdr:000000000000201A                 db 0FFh
.eh_frame_hdr:000000000000201B                 db 0FFh
.eh_frame_hdr:000000000000201C                 db  64h ; d
.eh_frame_hdr:000000000000201D                 db    0
.eh_frame_hdr:000000000000201E                 db    0
.eh_frame_hdr:000000000000201F                 db    0
.eh_frame_hdr:0000000000002020                 db  44h ; D
.eh_frame_hdr:0000000000002021                 db 0F0h
.eh_frame_hdr:0000000000002022                 db 0FFh
.eh_frame_hdr:0000000000002023                 db 0FFh
.eh_frame_hdr:0000000000002024                 db  8Ch
.eh_frame_hdr:0000000000002025                 db    0
.eh_frame_hdr:0000000000002026                 db    0
.eh_frame_hdr:0000000000002027                 db    0
.eh_frame_hdr:0000000000002028                 db  54h ; T
.eh_frame_hdr:0000000000002029                 db 0F0h
.eh_frame_hdr:000000000000202A                 db 0FFh
.eh_frame_hdr:000000000000202B                 db 0FFh
.eh_frame_hdr:000000000000202C                 db 0A4h
.eh_frame_hdr:000000000000202D                 db    0
.eh_frame_hdr:000000000000202E                 db    0
.eh_frame_hdr:000000000000202F                 db    0
.eh_frame_hdr:0000000000002030                 db  74h ; t
.eh_frame_hdr:0000000000002031                 db 0F0h
.eh_frame_hdr:0000000000002032                 db 0FFh
.eh_frame_hdr:0000000000002033                 db 0FFh
.eh_frame_hdr:0000000000002034                 db 0BCh
.eh_frame_hdr:0000000000002035                 db    0
.eh_frame_hdr:0000000000002036                 db    0
.eh_frame_hdr:0000000000002037                 db    0
.eh_frame_hdr:0000000000002038                 db  94h
.eh_frame_hdr:0000000000002039                 db 0F1h
.eh_frame_hdr:000000000000203A                 db 0FFh
.eh_frame_hdr:000000000000203B                 db 0FFh
.eh_frame_hdr:000000000000203C                 db  4Ch ; L
.eh_frame_hdr:000000000000203D                 db    0
.eh_frame_hdr:000000000000203E                 db    0
.eh_frame_hdr:000000000000203F                 db    0
.eh_frame_hdr:000000000000203F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000203F
.eh_frame:0000000000002040 ; ===========================================================================
.eh_frame:0000000000002040
.eh_frame:0000000000002040 ; Segment type: Pure data
.eh_frame:0000000000002040 ; Segment permissions: Read
.eh_frame:0000000000002040 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000002040                 assume cs:_eh_frame
.eh_frame:0000000000002040                 ;org 2040h
.eh_frame:0000000000002040                 db  14h
.eh_frame:0000000000002041                 db    0
.eh_frame:0000000000002042                 db    0
.eh_frame:0000000000002043                 db    0
.eh_frame:0000000000002044                 db    0
.eh_frame:0000000000002045                 db    0
.eh_frame:0000000000002046                 db    0
.eh_frame:0000000000002047                 db    0
.eh_frame:0000000000002048                 db    1
.eh_frame:0000000000002049                 db  7Ah ; z
.eh_frame:000000000000204A                 db  52h ; R
.eh_frame:000000000000204B                 db    0
.eh_frame:000000000000204C                 db    1
.eh_frame:000000000000204D                 db  78h ; x
.eh_frame:000000000000204E                 db  10h
.eh_frame:000000000000204F                 db    1
.eh_frame:0000000000002050                 db  1Bh
.eh_frame:0000000000002051                 db  0Ch
.eh_frame:0000000000002052                 db    7
.eh_frame:0000000000002053                 db    8
.eh_frame:0000000000002054                 db  90h
.eh_frame:0000000000002055                 db    1
.eh_frame:0000000000002056                 db    0
.eh_frame:0000000000002057                 db    0
.eh_frame:0000000000002058                 db  14h
.eh_frame:0000000000002059                 db    0
.eh_frame:000000000000205A                 db    0
.eh_frame:000000000000205B                 db    0
.eh_frame:000000000000205C                 db  1Ch
.eh_frame:000000000000205D                 db    0
.eh_frame:000000000000205E                 db    0
.eh_frame:000000000000205F                 db    0
.eh_frame:0000000000002060                 db  40h ; @
.eh_frame:0000000000002061                 db 0F1h
.eh_frame:0000000000002062                 db 0FFh
.eh_frame:0000000000002063                 db 0FFh
.eh_frame:0000000000002064                 db  26h ; &
.eh_frame:0000000000002065                 db    0
.eh_frame:0000000000002066                 db    0
.eh_frame:0000000000002067                 db    0
.eh_frame:0000000000002068                 db    0
.eh_frame:0000000000002069                 db  44h ; D
.eh_frame:000000000000206A                 db    7
.eh_frame:000000000000206B                 db  10h
.eh_frame:000000000000206C                 db    0
.eh_frame:000000000000206D                 db    0
.eh_frame:000000000000206E                 db    0
.eh_frame:000000000000206F                 db    0
.eh_frame:0000000000002070                 db  24h ; $
.eh_frame:0000000000002071                 db    0
.eh_frame:0000000000002072                 db    0
.eh_frame:0000000000002073                 db    0
.eh_frame:0000000000002074                 db  34h ; 4
.eh_frame:0000000000002075                 db    0
.eh_frame:0000000000002076                 db    0
.eh_frame:0000000000002077                 db    0
.eh_frame:0000000000002078                 db 0A8h
.eh_frame:0000000000002079                 db 0EFh
.eh_frame:000000000000207A                 db 0FFh
.eh_frame:000000000000207B                 db 0FFh
.eh_frame:000000000000207C                 db  30h ; 0
.eh_frame:000000000000207D                 db    0
.eh_frame:000000000000207E                 db    0
.eh_frame:000000000000207F                 db    0
.eh_frame:0000000000002080                 db    0
.eh_frame:0000000000002081                 db  0Eh
.eh_frame:0000000000002082                 db  10h
.eh_frame:0000000000002083                 db  46h ; F
.eh_frame:0000000000002084                 db  0Eh
.eh_frame:0000000000002085                 db  18h
.eh_frame:0000000000002086                 db  4Ah ; J
.eh_frame:0000000000002087                 db  0Fh
.eh_frame:0000000000002088                 db  0Bh
.eh_frame:0000000000002089                 db  77h ; w
.eh_frame:000000000000208A                 db    8
.eh_frame:000000000000208B                 db  80h
.eh_frame:000000000000208C                 db    0
.eh_frame:000000000000208D                 db  3Fh ; ?
.eh_frame:000000000000208E                 db  1Ah
.eh_frame:000000000000208F                 db  3Ah ; :
.eh_frame:0000000000002090                 db  2Ah ; *
.eh_frame:0000000000002091                 db  33h ; 3
.eh_frame:0000000000002092                 db  24h ; $
.eh_frame:0000000000002093                 db  22h ; "
.eh_frame:0000000000002094                 db    0
.eh_frame:0000000000002095                 db    0
.eh_frame:0000000000002096                 db    0
.eh_frame:0000000000002097                 db    0
.eh_frame:0000000000002098                 db  14h
.eh_frame:0000000000002099                 db    0
.eh_frame:000000000000209A                 db    0
.eh_frame:000000000000209B                 db    0
.eh_frame:000000000000209C                 db  5Ch ; \
.eh_frame:000000000000209D                 db    0
.eh_frame:000000000000209E                 db    0
.eh_frame:000000000000209F                 db    0
.eh_frame:00000000000020A0                 db 0B0h
.eh_frame:00000000000020A1                 db 0EFh
.eh_frame:00000000000020A2                 db 0FFh
.eh_frame:00000000000020A3                 db 0FFh
.eh_frame:00000000000020A4                 db  10h
.eh_frame:00000000000020A5                 db    0
.eh_frame:00000000000020A6                 db    0
.eh_frame:00000000000020A7                 db    0
.eh_frame:00000000000020A8                 db    0
.eh_frame:00000000000020A9                 db    0
.eh_frame:00000000000020AA                 db    0
.eh_frame:00000000000020AB                 db    0
.eh_frame:00000000000020AC                 db    0
.eh_frame:00000000000020AD                 db    0
.eh_frame:00000000000020AE                 db    0
.eh_frame:00000000000020AF                 db    0
.eh_frame:00000000000020B0                 db  14h
.eh_frame:00000000000020B1                 db    0
.eh_frame:00000000000020B2                 db    0
.eh_frame:00000000000020B3                 db    0
.eh_frame:00000000000020B4                 db  74h ; t
.eh_frame:00000000000020B5                 db    0
.eh_frame:00000000000020B6                 db    0
.eh_frame:00000000000020B7                 db    0
.eh_frame:00000000000020B8                 db 0A8h
.eh_frame:00000000000020B9                 db 0EFh
.eh_frame:00000000000020BA                 db 0FFh
.eh_frame:00000000000020BB                 db 0FFh
.eh_frame:00000000000020BC                 db  20h
.eh_frame:00000000000020BD                 db    0
.eh_frame:00000000000020BE                 db    0
.eh_frame:00000000000020BF                 db    0
.eh_frame:00000000000020C0                 db    0
.eh_frame:00000000000020C1                 db    0
.eh_frame:00000000000020C2                 db    0
.eh_frame:00000000000020C3                 db    0
.eh_frame:00000000000020C4                 db    0
.eh_frame:00000000000020C5                 db    0
.eh_frame:00000000000020C6                 db    0
.eh_frame:00000000000020C7                 db    0
.eh_frame:00000000000020C8                 db  30h ; 0
.eh_frame:00000000000020C9                 db    0
.eh_frame:00000000000020CA                 db    0
.eh_frame:00000000000020CB                 db    0
.eh_frame:00000000000020CC                 db  8Ch
.eh_frame:00000000000020CD                 db    0
.eh_frame:00000000000020CE                 db    0
.eh_frame:00000000000020CF                 db    0
.eh_frame:00000000000020D0                 db 0B0h
.eh_frame:00000000000020D1                 db 0EFh
.eh_frame:00000000000020D2                 db 0FFh
.eh_frame:00000000000020D3                 db 0FFh
.eh_frame:00000000000020D4                 db  16h
.eh_frame:00000000000020D5                 db    1
.eh_frame:00000000000020D6                 db    0
.eh_frame:00000000000020D7                 db    0
.eh_frame:00000000000020D8                 db    0
.eh_frame:00000000000020D9                 db  46h ; F
.eh_frame:00000000000020DA                 db  0Eh
.eh_frame:00000000000020DB                 db  10h
.eh_frame:00000000000020DC                 db  8Ch
.eh_frame:00000000000020DD                 db    2
.eh_frame:00000000000020DE                 db  4Ch ; L
.eh_frame:00000000000020DF                 db  0Eh
.eh_frame:00000000000020E0                 db  18h
.eh_frame:00000000000020E1                 db  86h
.eh_frame:00000000000020E2                 db    3
.eh_frame:00000000000020E3                 db  41h ; A
.eh_frame:00000000000020E4                 db  0Eh
.eh_frame:00000000000020E5                 db  20h
.eh_frame:00000000000020E6                 db  83h
.eh_frame:00000000000020E7                 db    4
.eh_frame:00000000000020E8                 db  44h ; D
.eh_frame:00000000000020E9                 db  0Eh
.eh_frame:00000000000020EA                 db  50h ; P
.eh_frame:00000000000020EB                 db    2
.eh_frame:00000000000020EC                 db 0F3h
.eh_frame:00000000000020ED                 db  0Ah
.eh_frame:00000000000020EE                 db  0Eh
.eh_frame:00000000000020EF                 db  20h
.eh_frame:00000000000020F0                 db  43h ; C
.eh_frame:00000000000020F1                 db  0Eh
.eh_frame:00000000000020F2                 db  18h
.eh_frame:00000000000020F3                 db  41h ; A
.eh_frame:00000000000020F4                 db  0Eh
.eh_frame:00000000000020F5                 db  10h
.eh_frame:00000000000020F6                 db  42h ; B
.eh_frame:00000000000020F7                 db  0Eh
.eh_frame:00000000000020F8                 db    8
.eh_frame:00000000000020F9                 db  41h ; A
.eh_frame:00000000000020FA                 db  0Bh
.eh_frame:00000000000020FB                 db    0
.eh_frame:00000000000020FC __FRAME_END__   db    0
.eh_frame:00000000000020FD                 db    0
.eh_frame:00000000000020FE                 db    0
.eh_frame:00000000000020FF                 db    0
.eh_frame:00000000000020FF _eh_frame       ends
.eh_frame:00000000000020FF
.init_array:0000000000003DB0 ; ELF Initialization Function Table
.init_array:0000000000003DB0 ; ===========================================================================
.init_array:0000000000003DB0
.init_array:0000000000003DB0 ; Segment type: Pure data
.init_array:0000000000003DB0 ; Segment permissions: Read/Write
.init_array:0000000000003DB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000003DB0                 assume cs:_init_array
.init_array:0000000000003DB0                 ;org 3DB0h
.init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000003DB0                                         ; DATA XREF: LOAD:0000000000000168↑o
.init_array:0000000000003DB0                                         ; LOAD:00000000000002F0↑o
.init_array:0000000000003DB0 _init_array     ends
.init_array:0000000000003DB0
.fini_array:0000000000003DB8 ; ELF Termination Function Table
.fini_array:0000000000003DB8 ; ===========================================================================
.fini_array:0000000000003DB8
.fini_array:0000000000003DB8 ; Segment type: Pure data
.fini_array:0000000000003DB8 ; Segment permissions: Read/Write
.fini_array:0000000000003DB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000003DB8                 assume cs:_fini_array
.fini_array:0000000000003DB8                 ;org 3DB8h
.fini_array:0000000000003DB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000003DB8 _fini_array     ends
.fini_array:0000000000003DB8
LOAD:0000000000003DC0 ; ELF Dynamic Information
LOAD:0000000000003DC0 ; ===========================================================================
LOAD:0000000000003DC0
LOAD:0000000000003DC0 ; Segment type: Pure data
LOAD:0000000000003DC0 ; Segment permissions: Read/Write
LOAD:0000000000003DC0 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000003DC0                 assume cs:LOAD
LOAD:0000000000003DC0                 ;org 3DC0h
LOAD:0000000000003DC0 _DYNAMIC        Elf64_Dyn <1, 40h>      ; DATA XREF: LOAD:00000000000001A0↑o
LOAD:0000000000003DC0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000003DC0                                         ; DT_NEEDED libc.so.6
LOAD:0000000000003DD0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
LOAD:0000000000003DE0                 Elf64_Dyn <0Dh, 128Ch>  ; DT_FINI
LOAD:0000000000003DF0                 Elf64_Dyn <19h, 3DB0h>  ; DT_INIT_ARRAY
LOAD:0000000000003E00                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000003E10                 Elf64_Dyn <1Ah, 3DB8h>  ; DT_FINI_ARRAY
LOAD:0000000000003E20                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000003E30                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
LOAD:0000000000003E40                 Elf64_Dyn <5, 498h>     ; DT_STRTAB
LOAD:0000000000003E50                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
LOAD:0000000000003E60                 Elf64_Dyn <0Ah, 0BCh>   ; DT_STRSZ
LOAD:0000000000003E70                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000003E80                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000003E90                 Elf64_Dyn <3, 3FB0h>    ; DT_PLTGOT
LOAD:0000000000003EA0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
LOAD:0000000000003EB0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000003EC0                 Elf64_Dyn <17h, 678h>   ; DT_JMPREL
LOAD:0000000000003ED0                 Elf64_Dyn <7, 5B8h>     ; DT_RELA
LOAD:0000000000003EE0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
LOAD:0000000000003EF0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000003F00                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFEh, 568h> ; DT_VERNEED
LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF0h, 554h> ; DT_VERSYM
LOAD:0000000000003F50                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
LOAD:0000000000003F60                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000003F70                 db    0
LOAD:0000000000003F71                 db    0
LOAD:0000000000003F72                 db    0
LOAD:0000000000003F73                 db    0
LOAD:0000000000003F74                 db    0
LOAD:0000000000003F75                 db    0
LOAD:0000000000003F76                 db    0
LOAD:0000000000003F77                 db    0
LOAD:0000000000003F78                 db    0
LOAD:0000000000003F79                 db    0
LOAD:0000000000003F7A                 db    0
LOAD:0000000000003F7B                 db    0
LOAD:0000000000003F7C                 db    0
LOAD:0000000000003F7D                 db    0
LOAD:0000000000003F7E                 db    0
LOAD:0000000000003F7F                 db    0
LOAD:0000000000003F80                 db    0
LOAD:0000000000003F81                 db    0
LOAD:0000000000003F82                 db    0
LOAD:0000000000003F83                 db    0
LOAD:0000000000003F84                 db    0
LOAD:0000000000003F85                 db    0
LOAD:0000000000003F86                 db    0
LOAD:0000000000003F87                 db    0
LOAD:0000000000003F88                 db    0
LOAD:0000000000003F89                 db    0
LOAD:0000000000003F8A                 db    0
LOAD:0000000000003F8B                 db    0
LOAD:0000000000003F8C                 db    0
LOAD:0000000000003F8D                 db    0
LOAD:0000000000003F8E                 db    0
LOAD:0000000000003F8F                 db    0
LOAD:0000000000003F90                 db    0
LOAD:0000000000003F91                 db    0
LOAD:0000000000003F92                 db    0
LOAD:0000000000003F93                 db    0
LOAD:0000000000003F94                 db    0
LOAD:0000000000003F95                 db    0
LOAD:0000000000003F96                 db    0
LOAD:0000000000003F97                 db    0
LOAD:0000000000003F98                 db    0
LOAD:0000000000003F99                 db    0
LOAD:0000000000003F9A                 db    0
LOAD:0000000000003F9B                 db    0
LOAD:0000000000003F9C                 db    0
LOAD:0000000000003F9D                 db    0
LOAD:0000000000003F9E                 db    0
LOAD:0000000000003F9F                 db    0
LOAD:0000000000003FA0                 db    0
LOAD:0000000000003FA1                 db    0
LOAD:0000000000003FA2                 db    0
LOAD:0000000000003FA3                 db    0
LOAD:0000000000003FA4                 db    0
LOAD:0000000000003FA5                 db    0
LOAD:0000000000003FA6                 db    0
LOAD:0000000000003FA7                 db    0
LOAD:0000000000003FA8                 db    0
LOAD:0000000000003FA9                 db    0
LOAD:0000000000003FAA                 db    0
LOAD:0000000000003FAB                 db    0
LOAD:0000000000003FAC                 db    0
LOAD:0000000000003FAD                 db    0
LOAD:0000000000003FAE                 db    0
LOAD:0000000000003FAF                 db    0
LOAD:0000000000003FAF LOAD            ends
LOAD:0000000000003FAF
.got:0000000000003FB0 ; ===========================================================================
.got:0000000000003FB0
.got:0000000000003FB0 ; Segment type: Pure data
.got:0000000000003FB0 ; Segment permissions: Read/Write
.got:0000000000003FB0 _got            segment qword public 'DATA' use64
.got:0000000000003FB0                 assume cs:_got
.got:0000000000003FB0                 ;org 3FB0h
.got:0000000000003FB0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000003FB8 qword_3FB8      dq 0                    ; DATA XREF: sub_1020↑r
.got:0000000000003FC0 qword_3FC0      dq 0                    ; DATA XREF: sub_1020+6↑r
.got:0000000000003FC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000003FC8                                         ; DATA XREF: ___stack_chk_fail+4↑r
.got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
.got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
.got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
.got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
.got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
.got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
.got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
.got:0000000000003FF8 _got            ends
.got:0000000000003FF8
.data:0000000000004000 ; ===========================================================================
.data:0000000000004000
.data:0000000000004000 ; Segment type: Pure data
.data:0000000000004000 ; Segment permissions: Read/Write
.data:0000000000004000 _data           segment qword public 'DATA' use64
.data:0000000000004000                 assume cs:_data
.data:0000000000004000                 ;org 4000h
.data:0000000000004000                 public __data_start ; weak
.data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000004000                                         ; data_start
.data:0000000000004001                 db    0
.data:0000000000004002                 db    0
.data:0000000000004003                 db    0
.data:0000000000004004                 db    0
.data:0000000000004005                 db    0
.data:0000000000004006                 db    0
.data:0000000000004007                 db    0
.data:0000000000004008                 public __dso_handle
.data:0000000000004008 ; void *_dso_handle
.data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
.data:0000000000004008                                         ; .data:__dso_handle↓o
.data:0000000000004008 _data           ends
.data:0000000000004008
.bss:0000000000004010 ; ===========================================================================
.bss:0000000000004010
.bss:0000000000004010 ; Segment type: Uninitialized
.bss:0000000000004010 ; Segment permissions: Read/Write
.bss:0000000000004010 _bss            segment byte public 'BSS' use64
.bss:0000000000004010                 assume cs:_bss
.bss:0000000000004010                 ;org 4010h
.bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000004010                 public __bss_start
.bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
.bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
.bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
.bss:0000000000004010                                         ; completed.0
.bss:0000000000004010                                         ; _edata
.bss:0000000000004011                 align 8
.bss:0000000000004011 _bss            ends
.bss:0000000000004011
.prgend:0000000000004018 ; ===========================================================================
.prgend:0000000000004018
.prgend:0000000000004018 ; Segment type: Zero-length
.prgend:0000000000004018 _prgend         segment byte public '' use64
.prgend:0000000000004018 _end            label byte
.prgend:0000000000004018 _prgend         ends
.prgend:0000000000004018
extern:0000000000004020 ; ===========================================================================
extern:0000000000004020
extern:0000000000004020 ; Segment type: Externs
extern:0000000000004020 ; extern
extern:0000000000004020 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000004020                 extrn __libc_start_main:near
extern:0000000000004020                                         ; CODE XREF: _start+1F↑p
extern:0000000000004020                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000004028                 extrn __stack_chk_fail:near
extern:0000000000004028                                         ; CODE XREF: ___stack_chk_fail+4↑j
extern:0000000000004028                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000004030                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
extern:0000000000004030                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000004038 ; int __cxa_finalize(void *)
extern:0000000000004038                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000004038                                         ; CODE XREF: __cxa_finalize+4↑j
extern:0000000000004038                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000004040                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000004040                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000004048                 extrn __gmon_start__:near ; weak
extern:0000000000004048                                         ; CODE XREF: _init_proc+14↑p
extern:0000000000004048                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000004050                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000004050                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000004050
extern:0000000000004050
extern:0000000000004050                 end _start