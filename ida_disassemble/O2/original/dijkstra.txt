1. ida에서 함수 리스트 뽑기
2. 힘수 리스트 -> gpt -> 필요한 함수만 선별
3. 함수별로 ir (.ll) 뽑기. 

- 테스트 (heapsort)
    
    **llvm 버전: 14**
    
    - 코드
        - ida에서 함수 리스트 뽑는 코드
            
            ```python
            # idapro91_list_functions_v3.py
            # IDA Pro 9.1: 함수 목록을 JSON으로 출력 (inf가 None이어도 안전)
            
            import json
            import idaapi
            import ida_funcs
            import ida_segment
            import idautils
            
            SAVE_TO_FILE    = False   # True: JSON 파일로 저장
            ONLY_USER       = False   # True: "user?" 로 분류된 함수만 출력
            INCLUDE_CALLEES = True    # True: 각 함수의 call 대상 심볼도 수집
            
            # ---------- 안전한 inf 획득 & 폴백 ----------
            def get_inf_safe():
                # 1) ida_nalt.get_inf_structure
                try:
                    import ida_nalt
                    inf = ida_nalt.get_inf_structure()
                    if inf:
                        return inf
                except Exception:
                    pass
                # 2) idaapi.get_inf_structure
                try:
                    inf = idaapi.get_inf_structure()
                    if inf:
                        return inf
                except Exception:
                    pass
                # 3) idaapi.get_inf
                try:
                    inf = idaapi.get_inf()
                    if inf:
                        return inf
                except Exception:
                    pass
                # 4) 전역 cvar.inf
                try:
                    return idaapi.cvar.inf
                except Exception:
                    return None
            
            def detect_bits_arch(inf):
                bits = 64
                arch = ""
                if inf:
                    try:
                        if hasattr(inf, "is_64bit") and inf.is_64bit():
                            bits = 64
                        elif hasattr(inf, "is_32bit") and inf.is_32bit():
                            bits = 32
                        elif hasattr(inf, "is_16bit") and inf.is_16bit():
                            bits = 16
                    except Exception:
                        bits = 64
                    try:
                        arch = getattr(inf, "procname", getattr(inf, "procName", "")) or ""
                    except Exception:
                        arch = ""
                # inf가 None이어도 기본값으로 진행
                return bits, arch
            
            # ---------- 유틸 ----------
            def segname_of(ea: int) -> str:
                seg = idaapi.getseg(ea)
                return ida_segment.get_segm_name(seg) if seg else ""
            
            def is_runtime_name(name: str) -> bool:
                rt_prefixes = (
                    "_start", "_init", "_fini", "_init_proc", "_term_proc",
                    "frame_dummy", "deregister_tm_clones", "register_tm_clones",
                    "__do_global_dtors_aux", "__libc_", "__gmon_start__",
                    "_dl_relocate_static_pie",
                )
                return name.startswith(rt_prefixes)
            
            def classify(name: str, segname: str, is_thunk: bool) -> str:
                if (segname or "").startswith(".plt"):
                    return "plt"
                if is_runtime_name(name):
                    return "crt/runtime"
                if is_thunk:
                    return "thunk"
                return "user?"
            
            def get_callees(func_ea: int):
                if not INCLUDE_CALLEES:
                    return []
                names = set()
                for ea in idautils.FuncItems(func_ea):
                    try:
                        mnem = idaapi.print_insn_mnem(ea) or ""
                    except Exception:
                        mnem = ""
                    if not mnem.startswith("call"):
                        continue
                    try:
                        tgt = idaapi.get_operand_value(ea, 0)
                        nm = idaapi.get_name(tgt) or ""
                        if nm:
                            names.add(nm)
                    except Exception:
                        pass
                return sorted(names)
            
            # ---------- 메인 ----------
            def main():
                inf = get_inf_safe()
                bits, arch = detect_bits_arch(inf)
            
                functions = []
                for ea in idautils.Functions():
                    f = ida_funcs.get_func(ea)
                    if not f:
                        continue
                    name    = ida_funcs.get_func_name(ea)
                    segname = segname_of(f.start_ea)
                    try:
                        thunk = bool(ida_funcs.is_thunk_func(f))
                    except Exception:
                        # 일부 빌드에서 is_thunk_func가 없으면 플래그로 판단 시도
                        try:
                            thunk = bool(f.flags & getattr(idaapi, "FUNC_THUNK", 0x0008))
                        except Exception:
                            thunk = False
                    cat = classify(name, segname, thunk)
            
                    if ONLY_USER and cat != "user?":
                        continue
            
                    functions.append({
                        "name":     name,
                        "start":    hex(f.start_ea),
                        "end":      hex(f.end_ea),
                        "size":     int(f.end_ea - f.start_ea),
                        "segment":  segname,
                        "category": cat,
                        "thunk":    thunk,
                        "callees":  get_callees(ea),
                    })
            
                # 보기 좋게 정렬
                cat_order = {"crt/runtime":0, "plt":1, "thunk":2, "user?":3}
                functions.sort(key=lambda x: (cat_order.get(x["category"], 99), int(x["start"], 16)))
            
                # 루트 파일 이름: 두 API 중 되는 쪽 사용
                try:
                    import ida_nalt
                    root = ida_nalt.get_root_filename()
                except Exception:
                    try:
                        root = idaapi.get_root_filename()
                    except Exception:
                        root = ""
            
                out = {
                    "binary": root,
                    "arch":   arch,
                    "bits":   bits,
                    "functions": functions,
                }
            
                text = json.dumps(out, ensure_ascii=False, indent=2)
                print("\n===== FUNCTION LIST (JSON) =====")
                print(text)
            
                if not ONLY_USER:
                    total = len(functions)
                    maybe_user = sum(1 for x in functions if x["category"] == "user?")
                    print("\n----- SUMMARY -----")
                    print("total functions:", total)
                    print("user? candidates:", maybe_user)
                    print("tip: 보통 'user?' + segment='.text' 가 사용자 코드일 가능성이 큽니다.")
            
                if SAVE_TO_FILE:
                    import ida_kernwin
                    path = ida_kernwin.ask_file(True, "*.json", "Save function list as JSON")
                    if path:
                        with open(path, "w", encoding="utf-8") as fp:
                            fp.write(text)
                        print("[+] Saved to:", path)
            
            if __name__ == "__main__":
                main()
            
            ```
            
        - IR 통합하는 코드
            - llvm 최근 버전
                
                ```python
                # 1) 두 파일의 트리플을 동일하게 정규화
                opt -S -opaque-pointers -mtriple=x86_64-unknown-linux-gnu \
                    -o heap_sort.norm.ll heap_sort_llm.ll
                
                # 2) 링크(병합)해서 하나의 .ll로
                llvm-link-14 -S -opaque-pointers main.norm.ll heap_sort.norm.ll -o heapsort_llm.ll
                
                # 3) 컴파일/링크
                clang -O2 merged.ll -o heapsort_demo
                ```
                
            - llvm 14 버전 (내가 쓰고 있는 버전)
                
                llvm-as-14 quicksort_main.ll      -o quicksort_main.bc
                
                ```python
                # (1) .ll → .bc (조립)
                llvm-as-14 main_llm.ll      -o main_llm.bc
                llvm-as-14 heap_sort_llm.ll -o heap_sort_llm.bc
                
                # (2) .bc 병합 → merged.bc
                llvm-link-14 main_llm.bc heap_sort_llm.bc -o heapsort_llm.bc
                
                # (3) 다시 텍스트로 → merged.ll
                llvm-dis-14 heapsort_llm.bc -o heapsort_llm.ll
                ```
                
    - heapsort
        - heap_sort 함수
            - ida
                
                ```python
                LOAD:0000000000400000 ;
                LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
                LOAD:0000000000400000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                LOAD:0000000000400000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                LOAD:0000000000400000 ; |                      License info: 48-2137-ACAB-99                      |
                LOAD:0000000000400000 ; |                              elf <elv@ven>                              |
                LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
                LOAD:0000000000400000 ;
                LOAD:0000000000400000 ; Input SHA256 : 6658E234F7BF48EC184723CB25956D33FAF0D968CD698260EDAD3F32C8A78E28
                LOAD:0000000000400000 ; Input MD5    : 61BC86FB464A1CE6082E3E2B1831E284
                LOAD:0000000000400000 ; Input CRC32  : C1206B35
                LOAD:0000000000400000 ; Compiler     : GNU C++
                LOAD:0000000000400000
                LOAD:0000000000400000 ; File Name   : C:\Users\EMSEC\Desktop\mcsema0\heapsort2
                LOAD:0000000000400000 ; Format      : ELF64 for x86-64 (Executable)
                LOAD:0000000000400000 ; Imagebase   : 400000
                LOAD:0000000000400000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                LOAD:0000000000400000 ; Needed Library 'libc.so.6'
                LOAD:0000000000400000 ;
                LOAD:0000000000400000 ; Source File : 'crt1.o'
                LOAD:0000000000400000 ; Source File : 'crtstuff.c'
                LOAD:0000000000400000 ; Source File : 'heapsort.c'
                LOAD:0000000000400000 ; Source File : 'crtstuff.c'
                LOAD:0000000000400000
                LOAD:0000000000400000                 .686p
                LOAD:0000000000400000                 .mmx
                LOAD:0000000000400000                 .model flat
                LOAD:0000000000400000 .intel_syntax noprefix
                LOAD:0000000000400000
                LOAD:0000000000400000 ; ===========================================================================
                LOAD:0000000000400000
                LOAD:0000000000400000 ; Segment type: Pure data
                LOAD:0000000000400000 ; Segment permissions: Read
                LOAD:0000000000400000 LOAD            segment mempage public 'DATA' use64
                LOAD:0000000000400000                 assume cs:LOAD
                LOAD:0000000000400000                 ;org 400000h
                LOAD:0000000000400000 dword_400000    dd 464C457Fh            ; DATA XREF: LOAD:00000000004000C0↓o
                LOAD:0000000000400000                                         ; File format: \x7FELF
                LOAD:0000000000400004                 db 2                    ; File class: 64-bit
                LOAD:0000000000400005                 db 1                    ; Data encoding: little-endian
                LOAD:0000000000400006                 db 1                    ; File version
                LOAD:0000000000400007                 db 0                    ; OS/ABI: UNIX System V ABI
                LOAD:0000000000400008                 db 0                    ; ABI Version
                LOAD:0000000000400009                 db 7 dup(0)             ; Padding
                LOAD:0000000000400010                 dw 2                    ; File type: Executable
                LOAD:0000000000400012                 dw 3Eh                  ; Machine: x86-64
                LOAD:0000000000400014                 dd 1                    ; File version
                LOAD:0000000000400018                 dq offset _start        ; Entry point
                LOAD:0000000000400020                 dq 40h                  ; PHT file offset
                LOAD:0000000000400028                 dq 3E88h                ; SHT file offset
                LOAD:0000000000400030                 dd 0                    ; Processor-specific flags
                LOAD:0000000000400034                 dw 40h                  ; ELF header size
                LOAD:0000000000400036                 dw 38h                  ; PHT entry size
                LOAD:0000000000400038                 dw 0Dh                  ; Number of entries in PHT
                LOAD:000000000040003A                 dw 40h                  ; SHT entry size
                LOAD:000000000040003C                 dw 26h                  ; Number of entries in SHT
                LOAD:000000000040003E                 dw 25h                  ; SHT entry index for string table
                LOAD:0000000000400040 ; ELF64 Program Header
                LOAD:0000000000400040 ; PHT Entry 0
                LOAD:0000000000400040 dword_400040    dd 6                    ; DATA XREF: LOAD:0000000000400050↓o
                LOAD:0000000000400040                                         ; Type: PHDR
                LOAD:0000000000400044                 dd 4                    ; Flags
                LOAD:0000000000400048                 dq 40h                  ; File offset
                LOAD:0000000000400050                 dq offset dword_400040  ; Virtual address
                LOAD:0000000000400058                 dq 400040h              ; Physical address
                LOAD:0000000000400060                 dq 2D8h                 ; Size in file image
                LOAD:0000000000400068                 dq 2D8h                 ; Size in memory image
                LOAD:0000000000400070                 dq 8                    ; Alignment
                LOAD:0000000000400078 ; PHT Entry 1
                LOAD:0000000000400078                 dd 3                    ; Type: INTERP
                LOAD:000000000040007C                 dd 4                    ; Flags
                LOAD:0000000000400080                 dq 318h                 ; File offset
                LOAD:0000000000400088                 dq offset aLib64LdLinuxX8 ; Virtual address
                LOAD:0000000000400090                 dq 400318h              ; Physical address
                LOAD:0000000000400098                 dq 1Ch                  ; Size in file image
                LOAD:00000000004000A0                 dq 1Ch                  ; Size in memory image
                LOAD:00000000004000A8                 dq 1                    ; Alignment
                LOAD:00000000004000B0 ; PHT Entry 2
                LOAD:00000000004000B0                 dd 1                    ; Type: LOAD
                LOAD:00000000004000B4                 dd 4                    ; Flags
                LOAD:00000000004000B8                 dq 0                    ; File offset
                LOAD:00000000004000C0                 dq offset dword_400000  ; Virtual address
                LOAD:00000000004000C8                 dq 400000h              ; Physical address
                LOAD:00000000004000D0                 dq 538h                 ; Size in file image
                LOAD:00000000004000D8                 dq 538h                 ; Size in memory image
                LOAD:00000000004000E0                 dq 1000h                ; Alignment
                LOAD:00000000004000E8 ; PHT Entry 3
                LOAD:00000000004000E8                 dd 1                    ; Type: LOAD
                LOAD:00000000004000EC                 dd 5                    ; Flags
                LOAD:00000000004000F0                 dq 1000h                ; File offset
                LOAD:00000000004000F8                 dq offset _init_proc    ; Virtual address
                LOAD:0000000000400100                 dq 401000h              ; Physical address
                LOAD:0000000000400108                 dq 52Dh                 ; Size in file image
                LOAD:0000000000400110                 dq 52Dh                 ; Size in memory image
                LOAD:0000000000400118                 dq 1000h                ; Alignment
                LOAD:0000000000400120 ; PHT Entry 4
                LOAD:0000000000400120                 dd 1                    ; Type: LOAD
                LOAD:0000000000400124                 dd 4                    ; Flags
                LOAD:0000000000400128                 dq 2000h                ; File offset
                LOAD:0000000000400130                 dq offset _IO_stdin_used ; Virtual address
                LOAD:0000000000400138                 dq 402000h              ; Physical address
                LOAD:0000000000400140                 dq 124h                 ; Size in file image
                LOAD:0000000000400148                 dq 124h                 ; Size in memory image
                LOAD:0000000000400150                 dq 1000h                ; Alignment
                LOAD:0000000000400158 ; PHT Entry 5
                LOAD:0000000000400158                 dd 1                    ; Type: LOAD
                LOAD:000000000040015C                 dd 6                    ; Flags
                LOAD:0000000000400160                 dq 2E10h                ; File offset
                LOAD:0000000000400168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                LOAD:0000000000400170                 dq 403E10h              ; Physical address
                LOAD:0000000000400178                 dq 228h                 ; Size in file image
                LOAD:0000000000400180                 dq 230h                 ; Size in memory image
                LOAD:0000000000400188                 dq 1000h                ; Alignment
                LOAD:0000000000400190 ; PHT Entry 6
                LOAD:0000000000400190                 dd 2                    ; Type: DYNAMIC
                LOAD:0000000000400194                 dd 6                    ; Flags
                LOAD:0000000000400198                 dq 2E20h                ; File offset
                LOAD:00000000004001A0                 dq offset _DYNAMIC      ; Virtual address
                LOAD:00000000004001A8                 dq 403E20h              ; Physical address
                LOAD:00000000004001B0                 dq 1D0h                 ; Size in file image
                LOAD:00000000004001B8                 dq 1D0h                 ; Size in memory image
                LOAD:00000000004001C0                 dq 8                    ; Alignment
                LOAD:00000000004001C8 ; PHT Entry 7
                LOAD:00000000004001C8                 dd 4                    ; Type: NOTE
                LOAD:00000000004001CC                 dd 4                    ; Flags
                LOAD:00000000004001D0                 dq 338h                 ; File offset
                LOAD:00000000004001D8                 dq offset dword_400338  ; Virtual address
                LOAD:00000000004001E0                 dq 400338h              ; Physical address
                LOAD:00000000004001E8                 dq 30h                  ; Size in file image
                LOAD:00000000004001F0                 dq 30h                  ; Size in memory image
                LOAD:00000000004001F8                 dq 8                    ; Alignment
                LOAD:0000000000400200 ; PHT Entry 8
                LOAD:0000000000400200                 dd 4                    ; Type: NOTE
                LOAD:0000000000400204                 dd 4                    ; Flags
                LOAD:0000000000400208                 dq 368h                 ; File offset
                LOAD:0000000000400210                 dq offset dword_400368  ; Virtual address
                LOAD:0000000000400218                 dq 400368h              ; Physical address
                LOAD:0000000000400220                 dq 44h                  ; Size in file image
                LOAD:0000000000400228                 dq 44h                  ; Size in memory image
                LOAD:0000000000400230                 dq 4                    ; Alignment
                LOAD:0000000000400238 ; PHT Entry 9
                LOAD:0000000000400238                 dd 6474E553h            ; Type: 6474E553
                LOAD:000000000040023C                 dd 4                    ; Flags
                LOAD:0000000000400240                 dq 338h                 ; File offset
                LOAD:0000000000400248                 dq offset dword_400338  ; Virtual address
                LOAD:0000000000400250                 dq 400338h              ; Physical address
                LOAD:0000000000400258                 dq 30h                  ; Size in file image
                LOAD:0000000000400260                 dq 30h                  ; Size in memory image
                LOAD:0000000000400268                 dq 8                    ; Alignment
                LOAD:0000000000400270 ; PHT Entry 10
                LOAD:0000000000400270                 dd 6474E550h            ; Type: EH_FRAME
                LOAD:0000000000400274                 dd 4                    ; Flags
                LOAD:0000000000400278                 dq 2020h                ; File offset
                LOAD:0000000000400280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                LOAD:0000000000400288                 dq 402020h              ; Physical address
                LOAD:0000000000400290                 dq 3Ch                  ; Size in file image
                LOAD:0000000000400298                 dq 3Ch                  ; Size in memory image
                LOAD:00000000004002A0                 dq 4                    ; Alignment
                LOAD:00000000004002A8 ; PHT Entry 11
                LOAD:00000000004002A8                 dd 6474E551h            ; Type: STACK
                LOAD:00000000004002AC                 dd 6                    ; Flags
                LOAD:00000000004002B0                 dq 0                    ; File offset
                LOAD:00000000004002B8                 dq 0                    ; Virtual address
                LOAD:00000000004002C0                 dq 0                    ; Physical address
                LOAD:00000000004002C8                 dq 0                    ; Size in file image
                LOAD:00000000004002D0                 dq 0                    ; Size in memory image
                LOAD:00000000004002D8                 dq 10h                  ; Alignment
                LOAD:00000000004002E0 ; PHT Entry 12
                LOAD:00000000004002E0                 dd 6474E552h            ; Type: RO-AFTER
                LOAD:00000000004002E4                 dd 4                    ; Flags
                LOAD:00000000004002E8                 dq 2E10h                ; File offset
                LOAD:00000000004002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                LOAD:00000000004002F8                 dq 403E10h              ; Physical address
                LOAD:0000000000400300                 dq 1F0h                 ; Size in file image
                LOAD:0000000000400308                 dq 1F0h                 ; Size in memory image
                LOAD:0000000000400310                 dq 1                    ; Alignment
                LOAD:0000000000400318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                LOAD:0000000000400318                                         ; DATA XREF: LOAD:0000000000400088↑o
                LOAD:0000000000400334                 align 8
                LOAD:0000000000400338 ; ELF Note Entry
                LOAD:0000000000400338 dword_400338    dd 4                    ; DATA XREF: LOAD:00000000004001D8↑o
                LOAD:0000000000400338                                         ; LOAD:0000000000400248↑o
                LOAD:0000000000400338                                         ; Name Size
                LOAD:000000000040033C                 dd 20h                  ; Desc Size
                LOAD:0000000000400340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                LOAD:0000000000400344 aGnu            db 'GNU',0              ; Name
                LOAD:0000000000400348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                LOAD:000000000040035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                LOAD:0000000000400368 ; ELF Note Entry
                LOAD:0000000000400368 dword_400368    dd 4                    ; DATA XREF: LOAD:0000000000400210↑o
                LOAD:0000000000400368                                         ; Name Size
                LOAD:000000000040036C                 dd 14h                  ; Desc Size
                LOAD:0000000000400370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                LOAD:0000000000400374 aGnu_0          db 'GNU',0              ; Name
                LOAD:0000000000400378                 db 80h, 4, 0FCh, 20h, 0BCh, 23h, 0C4h, 0Ch, 0Dh, 6Eh, 4Dh ; Desc
                LOAD:0000000000400383                 db 1Eh, 50h, 60h, 65h, 3Bh, 0A4h, 6Dh, 77h, 0DBh
                LOAD:000000000040038C ; ELF Note Entry
                LOAD:000000000040038C __abi_tag       dd 4                    ; Name Size
                LOAD:0000000000400390                 dd 10h                  ; Desc Size
                LOAD:0000000000400394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                LOAD:0000000000400398 aGnu_1          db 'GNU',0              ; Name
                LOAD:000000000040039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                LOAD:00000000004003AC                 align 10h
                LOAD:00000000004003B0 ; ELF GNU Hash Table
                LOAD:00000000004003B0 elf_gnu_hash_nbuckets dd 1
                LOAD:00000000004003B4 elf_gnu_hash_symbias dd 1
                LOAD:00000000004003B8 elf_gnu_hash_bitmask_nwords dd 1
                LOAD:00000000004003BC elf_gnu_hash_shift dd 0
                LOAD:00000000004003C0 elf_gnu_hash_indexes dq 0
                LOAD:00000000004003C8 elf_gnu_hash_bucket dd 0
                LOAD:00000000004003CC elf_gnu_hash_chain dd 0
                LOAD:00000000004003D0 ; ELF Symbol Table
                LOAD:00000000004003D0                 Elf64_Sym <0>
                LOAD:00000000004003E8                 Elf64_Sym <offset aPutchar - offset unk_400448, 12h, 0, 0, 0, 0> ; "putchar"
                LOAD:0000000000400400                 Elf64_Sym <offset aLibcStartMain - offset unk_400448, 12h, 0, 0, 0, 0> ; "__libc_start_main"
                LOAD:0000000000400418                 Elf64_Sym <offset aPrintf - offset unk_400448, 12h, 0, 0, 0, 0> ; "printf"
                LOAD:0000000000400430                 Elf64_Sym <offset aGmonStart - offset unk_400448, 20h, 0, 0, 0, 0> ; "__gmon_start__"
                LOAD:0000000000400448 ; ELF String Table
                LOAD:0000000000400448 unk_400448      db    0                 ; DATA XREF: LOAD:00000000004003E8↑o
                LOAD:0000000000400448                                         ; LOAD:0000000000400400↑o ...
                LOAD:0000000000400449 aLibcStartMain  db '__libc_start_main',0
                LOAD:0000000000400449                                         ; DATA XREF: LOAD:0000000000400400↑o
                LOAD:000000000040045B aPutchar        db 'putchar',0          ; DATA XREF: LOAD:00000000004003E8↑o
                LOAD:0000000000400463 aPrintf         db 'printf',0           ; DATA XREF: LOAD:0000000000400418↑o
                LOAD:000000000040046A aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000004004A8↓o
                LOAD:0000000000400474 aGlibc234       db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000004004B8↓o
                LOAD:000000000040047F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000004004C8↓o
                LOAD:000000000040048B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000400430↑o
                LOAD:000000000040049A ; ELF GNU Symbol Version Table
                LOAD:000000000040049A                 dw 0
                LOAD:000000000040049C                 dw 2                    ; putchar@@GLIBC_2.2.5
                LOAD:000000000040049E                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                LOAD:00000000004004A0                 dw 2                    ; printf@@GLIBC_2.2.5
                LOAD:00000000004004A2                 dw 1                    ; global symbol: __gmon_start__
                LOAD:00000000004004A4                 dw 0
                LOAD:00000000004004A6                 dw 0
                LOAD:00000000004004A8 ; ELF GNU Symbol Version Requirements
                LOAD:00000000004004A8                 Elf64_Verneed <1, 2, offset aLibcSo6 - offset unk_400448, 10h, 0> ; "libc.so.6"
                LOAD:00000000004004B8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234 - offset unk_400448, \ ; "GLIBC_2.34"
                LOAD:00000000004004B8                                10h>
                LOAD:00000000004004C8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_400448, \ ; "GLIBC_2.2.5"
                LOAD:00000000004004C8                                0>
                LOAD:00000000004004D8 ; ELF RELA Relocation Table
                LOAD:00000000004004D8                 Elf64_Rela <403FF0h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                LOAD:00000000004004F0                 Elf64_Rela <403FF8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                LOAD:0000000000400508 ; ELF JMPREL Relocation Table
                LOAD:0000000000400508                 Elf64_Rela <404018h, 100000007h, 0> ; R_X86_64_JUMP_SLOT putchar
                LOAD:0000000000400520                 Elf64_Rela <404020h, 300000007h, 0> ; R_X86_64_JUMP_SLOT printf
                LOAD:0000000000400520 LOAD            ends
                LOAD:0000000000400520
                .init:0000000000401000 ; ===========================================================================
                .init:0000000000401000
                .init:0000000000401000 ; Segment type: Pure code
                .init:0000000000401000 ; Segment permissions: Read/Execute
                .init:0000000000401000 _init           segment dword public 'CODE' use64
                .init:0000000000401000                 assume cs:_init
                .init:0000000000401000                 ;org 401000h
                .init:0000000000401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .init:0000000000401000
                .init:0000000000401000 ; =============== S U B R O U T I N E =======================================
                .init:0000000000401000
                .init:0000000000401000
                .init:0000000000401000                 public _init_proc
                .init:0000000000401000 _init_proc      proc near               ; DATA XREF: LOAD:00000000004000F8↑o
                .init:0000000000401000                 endbr64                 ; _init
                .init:0000000000401004                 sub     rsp, 8
                .init:0000000000401008                 mov     rax, cs:__gmon_start___ptr
                .init:000000000040100F                 test    rax, rax
                .init:0000000000401012                 jz      short loc_401016
                .init:0000000000401014                 call    rax ; __gmon_start__
                .init:0000000000401016
                .init:0000000000401016 loc_401016:                             ; CODE XREF: _init_proc+12↑j
                .init:0000000000401016                 add     rsp, 8
                .init:000000000040101A                 retn
                .init:000000000040101A _init_proc      endp
                .init:000000000040101A
                .init:000000000040101A _init           ends
                .init:000000000040101A
                LOAD:000000000040101B ; ===========================================================================
                LOAD:000000000040101B
                LOAD:000000000040101B ; Segment type: Pure code
                LOAD:000000000040101B ; Segment permissions: Read/Execute
                LOAD:000000000040101B LOAD            segment mempage public 'CODE' use64
                LOAD:000000000040101B                 assume cs:LOAD
                LOAD:000000000040101B                 ;org 40101Bh
                LOAD:000000000040101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                LOAD:000000000040101B                 align 20h
                LOAD:000000000040101B LOAD            ends
                LOAD:000000000040101B
                .plt:0000000000401020 ; ===========================================================================
                .plt:0000000000401020
                .plt:0000000000401020 ; Segment type: Pure code
                .plt:0000000000401020 ; Segment permissions: Read/Execute
                .plt:0000000000401020 _plt            segment para public 'CODE' use64
                .plt:0000000000401020                 assume cs:_plt
                .plt:0000000000401020                 ;org 401020h
                .plt:0000000000401020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .plt:0000000000401020
                .plt:0000000000401020 ; =============== S U B R O U T I N E =======================================
                .plt:0000000000401020
                .plt:0000000000401020
                .plt:0000000000401020 sub_401020      proc near               ; CODE XREF: sub_401030+9↓j
                .plt:0000000000401020                                         ; sub_401040+9↓j
                .plt:0000000000401020 ; __unwind {
                .plt:0000000000401020                 push    cs:qword_404008
                .plt:0000000000401026                 bnd jmp cs:qword_404010
                .plt:0000000000401026 sub_401020      endp
                .plt:0000000000401026
                .plt:0000000000401026 ; ---------------------------------------------------------------------------
                .plt:000000000040102D                 align 10h
                .plt:0000000000401030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_401030]
                .plt:000000000040103F                 align 20h
                .plt:0000000000401040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_401040]
                .plt:000000000040104F                 align 10h
                .plt:000000000040104F ; } // starts at 401020
                .plt:000000000040104F _plt            ends
                .plt:000000000040104F
                .plt.sec:0000000000401050 ; ===========================================================================
                .plt.sec:0000000000401050
                .plt.sec:0000000000401050 ; Segment type: Pure code
                .plt.sec:0000000000401050 ; Segment permissions: Read/Execute
                .plt.sec:0000000000401050 _plt_sec        segment para public 'CODE' use64
                .plt.sec:0000000000401050                 assume cs:_plt_sec
                .plt.sec:0000000000401050                 ;org 401050h
                .plt.sec:0000000000401050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .plt.sec:0000000000401050 ; [0000000B BYTES: COLLAPSED FUNCTION _putchar]
                .plt.sec:000000000040105B                 align 20h
                .plt.sec:0000000000401060 ; [0000000B BYTES: COLLAPSED FUNCTION _printf]
                .plt.sec:000000000040106B                 align 10h
                .plt.sec:000000000040106B ; } // starts at 401050
                .plt.sec:000000000040106B _plt_sec        ends
                .plt.sec:000000000040106B
                .text:0000000000401070 ; ===========================================================================
                .text:0000000000401070
                .text:0000000000401070 ; Segment type: Pure code
                .text:0000000000401070 ; Segment permissions: Read/Execute
                .text:0000000000401070 _text           segment para public 'CODE' use64
                .text:0000000000401070                 assume cs:_text
                .text:0000000000401070                 ;org 401070h
                .text:0000000000401070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .text:0000000000401070
                .text:0000000000401070 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401070
                .text:0000000000401070 ; Attributes: noreturn fuzzy-sp
                .text:0000000000401070
                .text:0000000000401070                 public _start
                .text:0000000000401070 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
                .text:0000000000401070 ; __unwind {
                .text:0000000000401070                 endbr64
                .text:0000000000401074                 xor     ebp, ebp
                .text:0000000000401076                 mov     r9, rdx         ; rtld_fini
                .text:0000000000401079                 pop     rsi             ; argc
                .text:000000000040107A                 mov     rdx, rsp        ; ubp_av
                .text:000000000040107D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                .text:0000000000401081                 push    rax
                .text:0000000000401082                 push    rsp             ; stack_end
                .text:0000000000401083                 xor     r8d, r8d        ; fini
                .text:0000000000401086                 xor     ecx, ecx        ; init
                .text:0000000000401088                 mov     rdi, offset main ; main
                .text:000000000040108F                 call    cs:__libc_start_main_ptr
                .text:0000000000401095                 hlt
                .text:0000000000401095 ; } // starts at 401070
                .text:0000000000401095 _start          endp
                .text:0000000000401095
                .text:0000000000401095 ; ---------------------------------------------------------------------------
                .text:0000000000401096                 align 20h
                .text:00000000004010A0
                .text:00000000004010A0 ; =============== S U B R O U T I N E =======================================
                .text:00000000004010A0
                .text:00000000004010A0
                .text:00000000004010A0                 public _dl_relocate_static_pie
                .text:00000000004010A0 _dl_relocate_static_pie proc near
                .text:00000000004010A0 ; __unwind {
                .text:00000000004010A0                 endbr64
                .text:00000000004010A4                 retn
                .text:00000000004010A4 ; } // starts at 4010A0
                .text:00000000004010A4 _dl_relocate_static_pie endp
                .text:00000000004010A4
                .text:00000000004010A4 ; ---------------------------------------------------------------------------
                .text:00000000004010A5                 align 10h
                .text:00000000004010B0
                .text:00000000004010B0 ; =============== S U B R O U T I N E =======================================
                .text:00000000004010B0
                .text:00000000004010B0
                .text:00000000004010B0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux+11↓p
                .text:00000000004010B0                 mov     eax, offset __bss_start
                .text:00000000004010B5                 cmp     rax, offset __bss_start
                .text:00000000004010BB                 jz      short locret_4010D0
                .text:00000000004010BD                 mov     eax, 0
                .text:00000000004010C2                 test    rax, rax
                .text:00000000004010C5                 jz      short locret_4010D0
                .text:00000000004010C7                 mov     edi, offset __bss_start
                .text:00000000004010CC                 jmp     rax
                .text:00000000004010CC ; ---------------------------------------------------------------------------
                .text:00000000004010CE                 align 10h
                .text:00000000004010D0
                .text:00000000004010D0 locret_4010D0:                          ; CODE XREF: deregister_tm_clones+B↑j
                .text:00000000004010D0                                         ; deregister_tm_clones+15↑j
                .text:00000000004010D0                 retn
                .text:00000000004010D0 deregister_tm_clones endp
                .text:00000000004010D0
                .text:00000000004010D0 ; ---------------------------------------------------------------------------
                .text:00000000004010D1                 align 20h
                .text:00000000004010E0
                .text:00000000004010E0 ; =============== S U B R O U T I N E =======================================
                .text:00000000004010E0
                .text:00000000004010E0
                .text:00000000004010E0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                .text:00000000004010E0                 mov     esi, offset __bss_start
                .text:00000000004010E5                 sub     rsi, offset __bss_start
                .text:00000000004010EC                 mov     rax, rsi
                .text:00000000004010EF                 shr     rsi, 3Fh
                .text:00000000004010F3                 sar     rax, 3
                .text:00000000004010F7                 add     rsi, rax
                .text:00000000004010FA                 sar     rsi, 1
                .text:00000000004010FD                 jz      short locret_401110
                .text:00000000004010FF                 mov     eax, 0
                .text:0000000000401104                 test    rax, rax
                .text:0000000000401107                 jz      short locret_401110
                .text:0000000000401109                 mov     edi, offset __bss_start
                .text:000000000040110E                 jmp     rax
                .text:0000000000401110 ; ---------------------------------------------------------------------------
                .text:0000000000401110
                .text:0000000000401110 locret_401110:                          ; CODE XREF: register_tm_clones+1D↑j
                .text:0000000000401110                                         ; register_tm_clones+27↑j
                .text:0000000000401110                 retn
                .text:0000000000401110 register_tm_clones endp
                .text:0000000000401110
                .text:0000000000401110 ; ---------------------------------------------------------------------------
                .text:0000000000401111                 align 20h
                .text:0000000000401120
                .text:0000000000401120 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401120
                .text:0000000000401120
                .text:0000000000401120 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                .text:0000000000401120                 endbr64
                .text:0000000000401124                 cmp     cs:__bss_start, 0
                .text:000000000040112B                 jnz     short locret_401140
                .text:000000000040112D                 push    rbp
                .text:000000000040112E                 mov     rbp, rsp
                .text:0000000000401131                 call    deregister_tm_clones
                .text:0000000000401136                 mov     cs:__bss_start, 1
                .text:000000000040113D                 pop     rbp
                .text:000000000040113E                 retn
                .text:000000000040113E ; ---------------------------------------------------------------------------
                .text:000000000040113F                 align 20h
                .text:0000000000401140
                .text:0000000000401140 locret_401140:                          ; CODE XREF: __do_global_dtors_aux+B↑j
                .text:0000000000401140                 retn
                .text:0000000000401140 __do_global_dtors_aux endp
                .text:0000000000401140
                .text:0000000000401140 ; ---------------------------------------------------------------------------
                .text:0000000000401141                 align 10h
                .text:0000000000401150
                .text:0000000000401150 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401150
                .text:0000000000401150
                .text:0000000000401150 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                .text:0000000000401150                 endbr64
                .text:0000000000401154                 jmp     short register_tm_clones
                .text:0000000000401154 frame_dummy     endp
                .text:0000000000401154
                .text:0000000000401156
                .text:0000000000401156 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401156
                .text:0000000000401156 ; Attributes: bp-based frame
                .text:0000000000401156
                .text:0000000000401156 ; void __cdecl heap_sort(int *a, size_t n)
                .text:0000000000401156                 public heap_sort
                .text:0000000000401156 heap_sort       proc near               ; CODE XREF: main+AC↓p
                .text:0000000000401156
                .text:0000000000401156 n               = qword ptr -80h
                .text:0000000000401156 a               = qword ptr -78h
                .text:0000000000401156 t               = dword ptr -64h
                .text:0000000000401156 swap_idx        = qword ptr -60h
                .text:0000000000401156 right           = qword ptr -58h
                .text:0000000000401156 left            = qword ptr -50h
                .text:0000000000401156 tt              = dword ptr -44h
                .text:0000000000401156 swap_idx_0      = qword ptr -40h
                .text:0000000000401156 right_0         = qword ptr -38h
                .text:0000000000401156 left_0          = qword ptr -30h
                .text:0000000000401156 t_0             = dword ptr -24h
                .text:0000000000401156 root_0          = qword ptr -20h
                .text:0000000000401156 end             = qword ptr -18h
                .text:0000000000401156 root            = qword ptr -10h
                .text:0000000000401156 i               = qword ptr -8
                .text:0000000000401156
                .text:0000000000401156 ; __unwind {
                .text:0000000000401156                 endbr64
                .text:000000000040115A                 push    rbp
                .text:000000000040115B                 mov     rbp, rsp
                .text:000000000040115E                 sub     rsp, 8
                .text:0000000000401162                 mov     [rbp+a], rdi
                .text:0000000000401166                 mov     [rbp+n], rsi
                .text:000000000040116A                 cmp     [rbp+n], 1
                .text:000000000040116F                 jbe     loc_401418
                .text:0000000000401175                 mov     rax, [rbp+n]
                .text:0000000000401179                 shr     rax, 1
                .text:000000000040117C                 mov     [rbp+i], rax
                .text:0000000000401180                 jmp     loc_401294
                .text:0000000000401185 ; ---------------------------------------------------------------------------
                .text:0000000000401185
                .text:0000000000401185 loc_401185:                             ; CODE XREF: heap_sort+14D↓j
                .text:0000000000401185                 mov     rax, [rbp+i]
                .text:0000000000401189                 mov     [rbp+root], rax
                .text:000000000040118D
                .text:000000000040118D loc_40118D:                             ; CODE XREF: heap_sort+139↓j
                .text:000000000040118D                 mov     rax, [rbp+root]
                .text:0000000000401191                 add     rax, rax
                .text:0000000000401194                 add     rax, 1
                .text:0000000000401198                 mov     [rbp+left], rax
                .text:000000000040119C                 mov     rax, [rbp+left]
                .text:00000000004011A0                 cmp     rax, [rbp+n]
                .text:00000000004011A4                 jb      short loc_4011AB
                .text:00000000004011A6                 jmp     loc_401294
                .text:00000000004011AB ; ---------------------------------------------------------------------------
                .text:00000000004011AB
                .text:00000000004011AB loc_4011AB:                             ; CODE XREF: heap_sort+4E↑j
                .text:00000000004011AB                 mov     rax, [rbp+left]
                .text:00000000004011AF                 add     rax, 1
                .text:00000000004011B3                 mov     [rbp+right], rax
                .text:00000000004011B7                 mov     rax, [rbp+right]
                .text:00000000004011BB                 cmp     rax, [rbp+n]
                .text:00000000004011BF                 jnb     short loc_4011F5
                .text:00000000004011C1                 mov     rax, [rbp+right]
                .text:00000000004011C5                 lea     rdx, ds:0[rax*4]
                .text:00000000004011CD                 mov     rax, [rbp+a]
                .text:00000000004011D1                 add     rax, rdx
                .text:00000000004011D4                 mov     edx, [rax]
                .text:00000000004011D6                 mov     rax, [rbp+left]
                .text:00000000004011DA                 lea     rcx, ds:0[rax*4]
                .text:00000000004011E2                 mov     rax, [rbp+a]
                .text:00000000004011E6                 add     rax, rcx
                .text:00000000004011E9                 mov     eax, [rax]
                .text:00000000004011EB                 cmp     edx, eax
                .text:00000000004011ED                 jle     short loc_4011F5
                .text:00000000004011EF                 mov     rax, [rbp+right]
                .text:00000000004011F3                 jmp     short loc_4011F9
                .text:00000000004011F5 ; ---------------------------------------------------------------------------
                .text:00000000004011F5
                .text:00000000004011F5 loc_4011F5:                             ; CODE XREF: heap_sort+69↑j
                .text:00000000004011F5                                         ; heap_sort+97↑j
                .text:00000000004011F5                 mov     rax, [rbp+left]
                .text:00000000004011F9
                .text:00000000004011F9 loc_4011F9:                             ; CODE XREF: heap_sort+9D↑j
                .text:00000000004011F9                 mov     [rbp+swap_idx], rax
                .text:00000000004011FD                 mov     rax, [rbp+root]
                .text:0000000000401201                 lea     rdx, ds:0[rax*4]
                .text:0000000000401209                 mov     rax, [rbp+a]
                .text:000000000040120D                 add     rax, rdx
                .text:0000000000401210                 mov     edx, [rax]
                .text:0000000000401212                 mov     rax, [rbp+swap_idx]
                .text:0000000000401216                 lea     rcx, ds:0[rax*4]
                .text:000000000040121E                 mov     rax, [rbp+a]
                .text:0000000000401222                 add     rax, rcx
                .text:0000000000401225                 mov     eax, [rax]
                .text:0000000000401227                 cmp     edx, eax
                .text:0000000000401229                 jl      short loc_40122D
                .text:000000000040122B                 jmp     short loc_401294
                .text:000000000040122D ; ---------------------------------------------------------------------------
                .text:000000000040122D
                .text:000000000040122D loc_40122D:                             ; CODE XREF: heap_sort+D3↑j
                .text:000000000040122D                 mov     rax, [rbp+root]
                .text:0000000000401231                 lea     rdx, ds:0[rax*4]
                .text:0000000000401239                 mov     rax, [rbp+a]
                .text:000000000040123D                 add     rax, rdx
                .text:0000000000401240                 mov     eax, [rax]
                .text:0000000000401242                 mov     [rbp+t], eax
                .text:0000000000401245                 mov     rax, [rbp+swap_idx]
                .text:0000000000401249                 lea     rdx, ds:0[rax*4]
                .text:0000000000401251                 mov     rax, [rbp+a]
                .text:0000000000401255                 add     rax, rdx
                .text:0000000000401258                 mov     rdx, [rbp+root]
                .text:000000000040125C                 lea     rcx, ds:0[rdx*4]
                .text:0000000000401264                 mov     rdx, [rbp+a]
                .text:0000000000401268                 add     rdx, rcx
                .text:000000000040126B                 mov     eax, [rax]
                .text:000000000040126D                 mov     [rdx], eax
                .text:000000000040126F                 mov     rax, [rbp+swap_idx]
                .text:0000000000401273                 lea     rdx, ds:0[rax*4]
                .text:000000000040127B                 mov     rax, [rbp+a]
                .text:000000000040127F                 add     rdx, rax
                .text:0000000000401282                 mov     eax, [rbp+t]
                .text:0000000000401285                 mov     [rdx], eax
                .text:0000000000401287                 mov     rax, [rbp+swap_idx]
                .text:000000000040128B                 mov     [rbp+root], rax
                .text:000000000040128F                 jmp     loc_40118D
                .text:0000000000401294 ; ---------------------------------------------------------------------------
                .text:0000000000401294
                .text:0000000000401294 loc_401294:                             ; CODE XREF: heap_sort+2A↑j
                .text:0000000000401294                                         ; heap_sort+50↑j ...
                .text:0000000000401294                 mov     rax, [rbp+i]
                .text:0000000000401298                 lea     rdx, [rax-1]
                .text:000000000040129C                 mov     [rbp+i], rdx
                .text:00000000004012A0                 test    rax, rax
                .text:00000000004012A3                 jnz     loc_401185
                .text:00000000004012A9                 mov     rax, [rbp+n]
                .text:00000000004012AD                 sub     rax, 1
                .text:00000000004012B1                 mov     [rbp+end], rax
                .text:00000000004012B5                 jmp     loc_40140B
                .text:00000000004012BA ; ---------------------------------------------------------------------------
                .text:00000000004012BA
                .text:00000000004012BA loc_4012BA:                             ; CODE XREF: heap_sort+2BA↓j
                .text:00000000004012BA                 mov     rax, [rbp+a]
                .text:00000000004012BE                 mov     eax, [rax]
                .text:00000000004012C0                 mov     [rbp+t_0], eax
                .text:00000000004012C3                 mov     rax, [rbp+end]
                .text:00000000004012C7                 lea     rdx, ds:0[rax*4]
                .text:00000000004012CF                 mov     rax, [rbp+a]
                .text:00000000004012D3                 add     rax, rdx
                .text:00000000004012D6                 mov     edx, [rax]
                .text:00000000004012D8                 mov     rax, [rbp+a]
                .text:00000000004012DC                 mov     [rax], edx
                .text:00000000004012DE                 mov     rax, [rbp+end]
                .text:00000000004012E2                 lea     rdx, ds:0[rax*4]
                .text:00000000004012EA                 mov     rax, [rbp+a]
                .text:00000000004012EE                 add     rdx, rax
                .text:00000000004012F1                 mov     eax, [rbp+t_0]
                .text:00000000004012F4                 mov     [rdx], eax
                .text:00000000004012F6                 mov     [rbp+root_0], 0
                .text:00000000004012FE
                .text:00000000004012FE loc_4012FE:                             ; CODE XREF: heap_sort+2A7↓j
                .text:00000000004012FE                 mov     rax, [rbp+root_0]
                .text:0000000000401302                 add     rax, rax
                .text:0000000000401305                 add     rax, 1
                .text:0000000000401309                 mov     [rbp+left_0], rax
                .text:000000000040130D                 mov     rax, [rbp+left_0]
                .text:0000000000401311                 cmp     rax, [rbp+end]
                .text:0000000000401315                 jnb     loc_401402
                .text:000000000040131B                 mov     rax, [rbp+left_0]
                .text:000000000040131F                 add     rax, 1
                .text:0000000000401323                 mov     [rbp+right_0], rax
                .text:0000000000401327                 mov     rax, [rbp+right_0]
                .text:000000000040132B                 cmp     rax, [rbp+end]
                .text:000000000040132F                 jnb     short loc_401365
                .text:0000000000401331                 mov     rax, [rbp+right_0]
                .text:0000000000401335                 lea     rdx, ds:0[rax*4]
                .text:000000000040133D                 mov     rax, [rbp+a]
                .text:0000000000401341                 add     rax, rdx
                .text:0000000000401344                 mov     edx, [rax]
                .text:0000000000401346                 mov     rax, [rbp+left_0]
                .text:000000000040134A                 lea     rcx, ds:0[rax*4]
                .text:0000000000401352                 mov     rax, [rbp+a]
                .text:0000000000401356                 add     rax, rcx
                .text:0000000000401359                 mov     eax, [rax]
                .text:000000000040135B                 cmp     edx, eax
                .text:000000000040135D                 jle     short loc_401365
                .text:000000000040135F                 mov     rax, [rbp+right_0]
                .text:0000000000401363                 jmp     short loc_401369
                .text:0000000000401365 ; ---------------------------------------------------------------------------
                .text:0000000000401365
                .text:0000000000401365 loc_401365:                             ; CODE XREF: heap_sort+1D9↑j
                .text:0000000000401365                                         ; heap_sort+207↑j
                .text:0000000000401365                 mov     rax, [rbp+left_0]
                .text:0000000000401369
                .text:0000000000401369 loc_401369:                             ; CODE XREF: heap_sort+20D↑j
                .text:0000000000401369                 mov     [rbp+swap_idx_0], rax
                .text:000000000040136D                 mov     rax, [rbp+root_0]
                .text:0000000000401371                 lea     rdx, ds:0[rax*4]
                .text:0000000000401379                 mov     rax, [rbp+a]
                .text:000000000040137D                 add     rax, rdx
                .text:0000000000401380                 mov     edx, [rax]
                .text:0000000000401382                 mov     rax, [rbp+swap_idx_0]
                .text:0000000000401386                 lea     rcx, ds:0[rax*4]
                .text:000000000040138E                 mov     rax, [rbp+a]
                .text:0000000000401392                 add     rax, rcx
                .text:0000000000401395                 mov     eax, [rax]
                .text:0000000000401397                 cmp     edx, eax
                .text:0000000000401399                 jge     short loc_401405
                .text:000000000040139B                 mov     rax, [rbp+root_0]
                .text:000000000040139F                 lea     rdx, ds:0[rax*4]
                .text:00000000004013A7                 mov     rax, [rbp+a]
                .text:00000000004013AB                 add     rax, rdx
                .text:00000000004013AE                 mov     eax, [rax]
                .text:00000000004013B0                 mov     [rbp+tt], eax
                .text:00000000004013B3                 mov     rax, [rbp+swap_idx_0]
                .text:00000000004013B7                 lea     rdx, ds:0[rax*4]
                .text:00000000004013BF                 mov     rax, [rbp+a]
                .text:00000000004013C3                 add     rax, rdx
                .text:00000000004013C6                 mov     rdx, [rbp+root_0]
                .text:00000000004013CA                 lea     rcx, ds:0[rdx*4]
                .text:00000000004013D2                 mov     rdx, [rbp+a]
                .text:00000000004013D6                 add     rdx, rcx
                .text:00000000004013D9                 mov     eax, [rax]
                .text:00000000004013DB                 mov     [rdx], eax
                .text:00000000004013DD                 mov     rax, [rbp+swap_idx_0]
                .text:00000000004013E1                 lea     rdx, ds:0[rax*4]
                .text:00000000004013E9                 mov     rax, [rbp+a]
                .text:00000000004013ED                 add     rdx, rax
                .text:00000000004013F0                 mov     eax, [rbp+tt]
                .text:00000000004013F3                 mov     [rdx], eax
                .text:00000000004013F5                 mov     rax, [rbp+swap_idx_0]
                .text:00000000004013F9                 mov     [rbp+root_0], rax
                .text:00000000004013FD                 jmp     loc_4012FE
                .text:0000000000401402 ; ---------------------------------------------------------------------------
                .text:0000000000401402
                .text:0000000000401402 loc_401402:                             ; CODE XREF: heap_sort+1BF↑j
                .text:0000000000401402                 nop
                .text:0000000000401403                 jmp     short loc_401406
                .text:0000000000401405 ; ---------------------------------------------------------------------------
                .text:0000000000401405
                .text:0000000000401405 loc_401405:                             ; CODE XREF: heap_sort+243↑j
                .text:0000000000401405                 nop
                .text:0000000000401406
                .text:0000000000401406 loc_401406:                             ; CODE XREF: heap_sort+2AD↑j
                .text:0000000000401406                 sub     [rbp+end], 1
                .text:000000000040140B
                .text:000000000040140B loc_40140B:                             ; CODE XREF: heap_sort+15F↑j
                .text:000000000040140B                 cmp     [rbp+end], 0
                .text:0000000000401410                 jnz     loc_4012BA
                .text:0000000000401416                 jmp     short locret_401419
                .text:0000000000401418 ; ---------------------------------------------------------------------------
                .text:0000000000401418
                .text:0000000000401418 loc_401418:                             ; CODE XREF: heap_sort+19↑j
                .text:0000000000401418                 nop
                .text:0000000000401419
                .text:0000000000401419 locret_401419:                          ; CODE XREF: heap_sort+2C0↑j
                .text:0000000000401419                 leave
                .text:000000000040141A                 retn
                .text:000000000040141A ; } // starts at 401156
                .text:000000000040141A heap_sort       endp
                .text:000000000040141A
                .text:000000000040141B
                .text:000000000040141B ; =============== S U B R O U T I N E =======================================
                .text:000000000040141B
                .text:000000000040141B ; Attributes: bp-based frame
                .text:000000000040141B
                .text:000000000040141B ; int __fastcall main(int argc, const char **argv, const char **envp)
                .text:000000000040141B                 public main
                .text:000000000040141B main            proc near               ; DATA XREF: _start+18↑o
                .text:000000000040141B
                .text:000000000040141B arr             = dword ptr -40h
                .text:000000000040141B n               = qword ptr -18h
                .text:000000000040141B i_0             = qword ptr -10h
                .text:000000000040141B i               = qword ptr -8
                .text:000000000040141B
                .text:000000000040141B ; __unwind {
                .text:000000000040141B                 endbr64
                .text:000000000040141F                 push    rbp
                .text:0000000000401420                 mov     rbp, rsp
                .text:0000000000401423                 sub     rsp, 40h
                .text:0000000000401427                 mov     [rbp+arr], 7
                .text:000000000040142E                 mov     [rbp+arr+4], 3
                .text:0000000000401435                 mov     [rbp+arr+8], 9
                .text:000000000040143C                 mov     [rbp+arr+0Ch], 1
                .text:0000000000401443                 mov     [rbp+arr+10h], 4
                .text:000000000040144A                 mov     [rbp+arr+14h], 8
                .text:0000000000401451                 mov     [rbp+arr+18h], 2
                .text:0000000000401458                 mov     [rbp+arr+1Ch], 6
                .text:000000000040145F                 mov     [rbp+arr+20h], 5
                .text:0000000000401466                 mov     [rbp+n], 9
                .text:000000000040146E                 mov     edi, offset format ; format
                .text:0000000000401473                 mov     eax, 0
                .text:0000000000401478                 call    _printf
                .text:000000000040147D                 mov     [rbp+i], 0
                .text:0000000000401485                 jmp     short loc_4014A5
                .text:0000000000401487 ; ---------------------------------------------------------------------------
                .text:0000000000401487
                .text:0000000000401487 loc_401487:                             ; CODE XREF: main+92↓j
                .text:0000000000401487                 mov     rax, [rbp+i]
                .text:000000000040148B                 mov     eax, [rbp+rax*4+arr]
                .text:000000000040148F                 mov     esi, eax
                .text:0000000000401491                 mov     edi, offset aD  ; "%d "
                .text:0000000000401496                 mov     eax, 0
                .text:000000000040149B                 call    _printf
                .text:00000000004014A0                 add     [rbp+i], 1
                .text:00000000004014A5
                .text:00000000004014A5 loc_4014A5:                             ; CODE XREF: main+6A↑j
                .text:00000000004014A5                 mov     rax, [rbp+i]
                .text:00000000004014A9                 cmp     rax, [rbp+n]
                .text:00000000004014AD                 jb      short loc_401487
                .text:00000000004014AF                 mov     edi, 0Ah        ; c
                .text:00000000004014B4                 call    _putchar
                .text:00000000004014B9                 mov     rdx, [rbp+n]
                .text:00000000004014BD                 lea     rax, [rbp+arr]
                .text:00000000004014C1                 mov     rsi, rdx        ; n
                .text:00000000004014C4                 mov     rdi, rax        ; a
                .text:00000000004014C7                 call    heap_sort
                .text:00000000004014CC                 mov     edi, offset byte_402011 ; format
                .text:00000000004014D1                 mov     eax, 0
                .text:00000000004014D6                 call    _printf
                .text:00000000004014DB                 mov     [rbp+i_0], 0
                .text:00000000004014E3                 jmp     short loc_401503
                .text:00000000004014E5 ; ---------------------------------------------------------------------------
                .text:00000000004014E5
                .text:00000000004014E5 loc_4014E5:                             ; CODE XREF: main+F0↓j
                .text:00000000004014E5                 mov     rax, [rbp+i_0]
                .text:00000000004014E9                 mov     eax, [rbp+rax*4+arr]
                .text:00000000004014ED                 mov     esi, eax
                .text:00000000004014EF                 mov     edi, offset aD  ; "%d "
                .text:00000000004014F4                 mov     eax, 0
                .text:00000000004014F9                 call    _printf
                .text:00000000004014FE                 add     [rbp+i_0], 1
                .text:0000000000401503
                .text:0000000000401503 loc_401503:                             ; CODE XREF: main+C8↑j
                .text:0000000000401503                 mov     rax, [rbp+i_0]
                .text:0000000000401507                 cmp     rax, [rbp+n]
                .text:000000000040150B                 jb      short loc_4014E5
                .text:000000000040150D                 mov     edi, 0Ah        ; c
                .text:0000000000401512                 call    _putchar
                .text:0000000000401517                 mov     eax, 0
                .text:000000000040151C                 leave
                .text:000000000040151D                 retn
                .text:000000000040151D ; } // starts at 40141B
                .text:000000000040151D main            endp
                .text:000000000040151D
                .text:000000000040151D _text           ends
                .text:000000000040151D
                LOAD:000000000040151E ; ===========================================================================
                LOAD:000000000040151E
                LOAD:000000000040151E ; Segment type: Pure code
                LOAD:000000000040151E ; Segment permissions: Read/Execute
                LOAD:000000000040151E LOAD            segment mempage public 'CODE' use64
                LOAD:000000000040151E                 assume cs:LOAD
                LOAD:000000000040151E                 ;org 40151Eh
                LOAD:000000000040151E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                LOAD:000000000040151E                 align 20h
                LOAD:000000000040151E LOAD            ends
                LOAD:000000000040151E
                .fini:0000000000401520 ; ===========================================================================
                .fini:0000000000401520
                .fini:0000000000401520 ; Segment type: Pure code
                .fini:0000000000401520 ; Segment permissions: Read/Execute
                .fini:0000000000401520 _fini           segment dword public 'CODE' use64
                .fini:0000000000401520                 assume cs:_fini
                .fini:0000000000401520                 ;org 401520h
                .fini:0000000000401520                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .fini:0000000000401520
                .fini:0000000000401520 ; =============== S U B R O U T I N E =======================================
                .fini:0000000000401520
                .fini:0000000000401520
                .fini:0000000000401520                 public _term_proc
                .fini:0000000000401520 _term_proc      proc near
                .fini:0000000000401520                 endbr64                 ; _fini
                .fini:0000000000401524                 sub     rsp, 8
                .fini:0000000000401528                 add     rsp, 8
                .fini:000000000040152C                 retn
                .fini:000000000040152C _term_proc      endp
                .fini:000000000040152C
                .fini:000000000040152C _fini           ends
                .fini:000000000040152C
                .rodata:0000000000402000 ; ===========================================================================
                .rodata:0000000000402000
                .rodata:0000000000402000 ; Segment type: Pure data
                .rodata:0000000000402000 ; Segment permissions: Read
                .rodata:0000000000402000 _rodata         segment dword public 'CONST' use64
                .rodata:0000000000402000                 assume cs:_rodata
                .rodata:0000000000402000                 ;org 402000h
                .rodata:0000000000402000                 public _IO_stdin_used
                .rodata:0000000000402000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000400130↑o
                .rodata:0000000000402001                 db    0
                .rodata:0000000000402002                 db    2
                .rodata:0000000000402003                 db    0
                .rodata:0000000000402004 ; const char format
                .rodata:0000000000402004 format          db 0ECh                 ; DATA XREF: main+53↑o
                .rodata:0000000000402005                 db  9Bh
                .rodata:0000000000402006                 db  90h
                .rodata:0000000000402007                 db 0EBh
                .rodata:0000000000402008                 db 0B3h
                .rodata:0000000000402009                 db 0B8h
                .rodata:000000000040200A                 db  3Ah ; :
                .rodata:000000000040200B                 db  20h
                .rodata:000000000040200C                 db    0
                .rodata:000000000040200D ; const char aD[4]
                .rodata:000000000040200D aD              db '%d ',0              ; DATA XREF: main+76↑o
                .rodata:000000000040200D                                         ; main+D4↑o
                .rodata:0000000000402011 ; const char byte_402011
                .rodata:0000000000402011 byte_402011     db 0ECh                 ; DATA XREF: main+B1↑o
                .rodata:0000000000402012                 db 0A0h
                .rodata:0000000000402013                 db  95h
                .rodata:0000000000402014                 db 0EBh
                .rodata:0000000000402015                 db 0A0h
                .rodata:0000000000402016                 db 0ACh
                .rodata:0000000000402017                 db  20h
                .rodata:0000000000402018                 db 0EDh
                .rodata:0000000000402019                 db  9Bh
                .rodata:000000000040201A                 db  84h
                .rodata:000000000040201B                 db  3Ah ; :
                .rodata:000000000040201C                 db  20h
                .rodata:000000000040201D                 db    0
                .rodata:000000000040201D _rodata         ends
                .rodata:000000000040201D
                LOAD:000000000040201E ; ===========================================================================
                LOAD:000000000040201E
                LOAD:000000000040201E ; Segment type: Pure data
                LOAD:000000000040201E ; Segment permissions: Read
                LOAD:000000000040201E LOAD            segment mempage public 'DATA' use64
                LOAD:000000000040201E                 assume cs:LOAD
                LOAD:000000000040201E                 ;org 40201Eh
                LOAD:000000000040201E                 align 20h
                LOAD:000000000040201E LOAD            ends
                LOAD:000000000040201E
                .eh_frame_hdr:0000000000402020 ; ===========================================================================
                .eh_frame_hdr:0000000000402020
                .eh_frame_hdr:0000000000402020 ; Segment type: Pure data
                .eh_frame_hdr:0000000000402020 ; Segment permissions: Read
                .eh_frame_hdr:0000000000402020 _eh_frame_hdr   segment dword public 'CONST' use64
                .eh_frame_hdr:0000000000402020                 assume cs:_eh_frame_hdr
                .eh_frame_hdr:0000000000402020                 ;org 402020h
                .eh_frame_hdr:0000000000402020 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000400280↑o
                .eh_frame_hdr:0000000000402021                 db  1Bh
                .eh_frame_hdr:0000000000402022                 db    3
                .eh_frame_hdr:0000000000402023                 db  3Bh ; ;
                .eh_frame_hdr:0000000000402024                 db  3Ch ; <
                .eh_frame_hdr:0000000000402025                 db    0
                .eh_frame_hdr:0000000000402026                 db    0
                .eh_frame_hdr:0000000000402027                 db    0
                .eh_frame_hdr:0000000000402028                 db    6
                .eh_frame_hdr:0000000000402029                 db    0
                .eh_frame_hdr:000000000040202A                 db    0
                .eh_frame_hdr:000000000040202B                 db    0
                .eh_frame_hdr:000000000040202C                 db    0
                .eh_frame_hdr:000000000040202D                 db 0F0h
                .eh_frame_hdr:000000000040202E                 db 0FFh
                .eh_frame_hdr:000000000040202F                 db 0FFh
                .eh_frame_hdr:0000000000402030                 db  80h
                .eh_frame_hdr:0000000000402031                 db    0
                .eh_frame_hdr:0000000000402032                 db    0
                ```
                
            - chatGPT 1
                
                ```python
                ; heapsort2 :: heap_sort (typed pointers for LLVM 14)
                target triple = "x86_64-unknown-linux-gnu"
                
                define void @heap_sort(i32* %a, i64 %n) {
                entry:
                  %n_le1 = icmp ule i64 %n, 1
                  br i1 %n_le1, label %ret, label %build.init
                
                ; -------- Build max-heap --------
                build.init:
                  %i0 = lshr i64 %n, 1
                  br label %build.loop
                
                build.loop:
                  %i = phi i64 [ %i0, %build.init ], [ %i.dec, %build.after ]
                  %cond = icmp ne i64 %i, 0
                  br i1 %cond, label %sb.head, label %extract.init
                
                sb.head:
                  ; PHI는 블록 맨 위!
                  %root.b  = phi i64 [ %i, %build.loop ], [ %swap.idx.b, %sb.swap ]
                  %root2x  = shl i64 %root.b, 1
                  %left.b  = add i64 %root2x, 1
                  %left.ok = icmp ult i64 %left.b, %n
                  br i1 %left.ok, label %sb.has.left, label %build.after
                
                sb.has.left:
                  %right.b   = add i64 %left.b, 1
                  %right.in  = icmp ult i64 %right.b, %n
                  %left.ptr.b = getelementptr inbounds i32, i32* %a, i64 %left.b
                  %left.val.b = load i32, i32* %left.ptr.b, align 4
                  br i1 %right.in, label %sb.cmp.right, label %sb.pick.left
                
                sb.cmp.right:
                  %right.ptr.b = getelementptr inbounds i32, i32* %a, i64 %right.b
                  %right.val.b = load i32, i32* %right.ptr.b, align 4
                  %right.gt = icmp sgt i32 %right.val.b, %left.val.b
                  br i1 %right.gt, label %sb.pick.right, label %sb.pick.left
                
                sb.pick.left:
                  %swap.idx.b.l = phi i64 [ %left.b, %sb.has.left ], [ %left.b, %sb.cmp.right ]
                  br label %sb.cmp.root
                
                sb.pick.right:
                  %swap.idx.b.r = phi i64 [ %right.b, %sb.cmp.right ]
                  br label %sb.cmp.root
                
                sb.cmp.root:
                  %swap.idx.b = phi i64 [ %swap.idx.b.l, %sb.pick.left ], [ %swap.idx.b.r, %sb.pick.right ]
                  %root.ptr.b = getelementptr inbounds i32, i32* %a, i64 %root.b
                  %root.val.b = load i32, i32* %root.ptr.b, align 4
                  %swap.ptr.b = getelementptr inbounds i32, i32* %a, i64 %swap.idx.b
                  %swap.val.b = load i32, i32* %swap.ptr.b, align 4
                  %need.swap.b = icmp slt i32 %root.val.b, %swap.val.b
                  br i1 %need.swap.b, label %sb.swap, label %build.after
                
                sb.swap:
                  store i32 %swap.val.b, i32* %root.ptr.b, align 4
                  store i32 %root.val.b, i32* %swap.ptr.b, align 4
                  br label %sb.head
                
                build.after:
                  %i.dec = add i64 %i, -1
                  br label %build.loop
                
                ; -------- Extract max --------
                extract.init:
                  %end0 = add i64 %n, -1
                  br label %extract.loop
                
                extract.loop:
                  %end = phi i64 [ %end0, %extract.init ], [ %end.dec, %after.sift ]
                  %keep = icmp ne i64 %end, 0
                  br i1 %keep, label %extract.body, label %ret
                
                extract.body:
                  %a0.ptr  = getelementptr inbounds i32, i32* %a, i64 0
                  %a0.val  = load i32, i32* %a0.ptr, align 4
                  %end.ptr = getelementptr inbounds i32, i32* %a, i64 %end
                  %end.val = load i32, i32* %end.ptr, align 4
                  store i32 %end.val, i32* %a0.ptr,  align 4
                  store i32 %a0.val,  i32* %end.ptr, align 4
                  br label %se.head
                
                se.head:
                  ; PHI는 블록 맨 위!
                  %root.e   = phi i64 [ 0, %extract.body ], [ %swap.idx.e, %se.swap ]
                  %root2x.e = shl i64 %root.e, 1
                  %left.e   = add i64 %root2x.e, 1
                  %left.le  = icmp ule i64 %left.e, %end
                  br i1 %left.le, label %se.has.left, label %after.sift
                
                se.has.left:
                  %right.e  = add i64 %left.e, 1
                  %right.le = icmp ule i64 %right.e, %end
                  %left.ptr.e = getelementptr inbounds i32, i32* %a, i64 %left.e
                  %left.val.e = load i32, i32* %left.ptr.e, align 4
                  br i1 %right.le, label %se.cmp.right, label %se.pick.left
                
                se.cmp.right:
                  %right.ptr.e = getelementptr inbounds i32, i32* %a, i64 %right.e
                  %right.val.e = load i32, i32* %right.ptr.e, align 4
                  %right.gt.e  = icmp sgt i32 %right.val.e, %left.val.e
                  br i1 %right.gt.e, label %se.pick.right, label %se.pick.left
                
                se.pick.left:
                  %swap.idx.e.l = phi i64 [ %left.e, %se.has.left ], [ %left.e, %se.cmp.right ]
                  br label %se.cmp.root
                
                se.pick.right:
                  %swap.idx.e.r = phi i64 [ %right.e, %se.cmp.right ]
                  br label %se.cmp.root
                
                se.cmp.root:
                  %swap.idx.e = phi i64 [ %swap.idx.e.l, %se.pick.left ], [ %swap.idx.e.r, %se.pick.right ]
                  %root.ptr.e = getelementptr inbounds i32, i32* %a, i64 %root.e
                  %root.val.e = load i32, i32* %root.ptr.e, align 4
                  %swap.ptr.e = getelementptr inbounds i32, i32* %a, i64 %swap.idx.e
                  %swap.val.e = load i32, i32* %swap.ptr.e, align 4
                  %need.swap.e = icmp slt i32 %root.val.e, %swap.val.e
                  br i1 %need.swap.e, label %se.swap, label %after.sift
                
                se.swap:
                  store i32 %swap.val.e, i32* %root.ptr.e, align 4
                  store i32 %root.val.e, i32* %swap.ptr.e, align 4
                  br label %se.head
                
                after.sift:
                  %end.dec = add i64 %end, -1
                  br label %extract.loop
                
                ret:
                  ret void
                }
                
                ```
                
            - chatGPT2
                
                ```python
                ; ModuleID = 'heap_sort'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; Symbol: heap_sort ; Address: 0x401156
                ; Intent: in-place ascending heap sort of a 32-bit int array (confidence=0.94). Evidence: build max-heap using left=2root+1/right=left+1, pick larger child, sift-down, then swap a[0] with a[end] and shrink heap.
                ; Preconditions: %S.RDI holds the address of the first int element within %MEM; %S.RSI is the element count n. Memory at [%S.RDI, %S.RDI+4(n-1)] is valid and little-endian 32-bit ints.
                ; Postconditions: a[0..n-1] sorted nondecreasing; in-place; not stable. RIP is set to the caller’s return address and RSP += 8 on return.
                
                %Regs = type {
                  i64, i64, i64, i64, i64, i64, i64, i64,
                  i64, i64, i64, i64, i64, i64, i64, i64,
                  i64, i1, i1, i1, i1, i1, i1, i1
                }
                
                declare void @llvm.trap()
                
                define dso_local void @heap_sort(i8* nocapture %MEM, %Regs* nocapture %S) local_unnamed_addr {
                entry:
                  ; load arguments: a (RDI), n (RSI)
                  %RDI.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 5
                  %RSI.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 4
                  %a.addr = load i64, i64* %RDI.p, align 8
                  %n = load i64, i64* %RSI.p, align 8
                
                  ; if (n <= 1) return
                  %n_le1 = icmp ule i64 %n, 1
                  br i1 %n_le1, label %ret, label %prep
                
                prep:
                  ; materialize int* base inside %MEM
                  %a.mem.i8 = getelementptr inbounds i8, i8* %MEM, i64 %a.addr
                  %a.base = bitcast i8* %a.mem.i8 to i32*
                
                  ; build max-heap: for (i = n>>1; i > 0; --i) siftDown(root=i-1, limit=n)
                  %i.init = lshr i64 %n, 1
                  br label %build.check
                
                build.check:
                  %i.cur = phi i64 [ %i.init, %prep ], [ %i.next, %build.next ]
                  %has.more = icmp ne i64 %i.cur, 0
                  br i1 %has.more, label %build.iter, label %build.done
                
                build.iter:
                  %root.start = add i64 %i.cur, -1
                  br label %sift1.check
                
                sift1.check:
                  %root.1 = phi i64 [ %root.start, %build.iter ], [ %root.next, %sift1.swap ]
                  %t0 = shl i64 %root.1, 1
                  %left.1 = add i64 %t0, 1
                  ; while (left < n) ...
                  %left_ge_n = icmp uge i64 %left.1, %n
                  br i1 %left_ge_n, label %build.next, label %sift1.have_left
                
                sift1.have_left:
                  %right.1 = add i64 %left.1, 1
                  %right_lt_n = icmp ult i64 %right.1, %n
                  br i1 %right_lt_n, label %sift1.choose.cmp, label %sift1.choose.left
                
                sift1.choose.cmp:
                  %pr1 = getelementptr inbounds i32, i32* %a.base, i64 %right.1
                  %vr1 = load i32, i32* %pr1, align 4
                  %pl1 = getelementptr inbounds i32, i32* %a.base, i64 %left.1
                  %vl1 = load i32, i32* %pl1, align 4
                  %rgtl1 = icmp sgt i32 %vr1, %vl1
                  %swap.idx.sel1 = select i1 %rgtl1, i64 %right.1, i64 %left.1
                  br label %sift1.compare
                
                sift1.choose.left:
                  br label %sift1.compare
                
                sift1.compare:
                  %swap.idx.1 = phi i64 [ %swap.idx.sel1, %sift1.choose.cmp ], [ %left.1, %sift1.choose.left ]
                  %proot1 = getelementptr inbounds i32, i32* %a.base, i64 %root.1
                  %vroot1 = load i32, i32* %proot1, align 4
                  %ps1 = getelementptr inbounds i32, i32* %a.base, i64 %swap.idx.1
                  %vs1 = load i32, i32* %ps1, align 4
                  %root_lt_sw1 = icmp slt i32 %vroot1, %vs1
                  br i1 %root_lt_sw1, label %sift1.swap, label %build.next
                
                sift1.swap:
                  ; SSA fix: define next root via phi (must be first in block)
                  %root.next = phi i64 [ %swap.idx.1, %sift1.compare ]
                  ; swap a[root] <-> a[swap_idx]
                  store i32 %vs1, i32* %proot1, align 4
                  store i32 %vroot1, i32* %ps1, align 4
                  br label %sift1.check
                
                build.next:
                  %i.next = add i64 %i.cur, -1
                  br label %build.check
                
                ; sorting phase
                build.done:
                  %end0 = add i64 %n, -1
                  br label %phase2.loop
                
                ; Outer loop:
                ; do { swap(a[0], a[end]); siftDown(root=0, limit=end); --end; } while (end != 0);
                phase2.loop:
                  %end = phi i64 [ %end0, %build.done ], [ %end.dec, %after.sift2 ]
                  ; swap a[0] and a[end]
                  %p0 = getelementptr inbounds i32, i32* %a.base, i64 0
                  %v0 = load i32, i32* %p0, align 4
                  %pend = getelementptr inbounds i32, i32* %a.base, i64 %end
                  %vend = load i32, i32* %pend, align 4
                  store i32 %vend, i32* %p0, align 4
                  store i32 %v0, i32* %pend, align 4
                  br label %sift2.check
                
                ; Sift with inclusive end index: continue while left < end
                sift2.check:
                  %root2 = phi i64 [ 0, %phase2.loop ], [ %root2.next, %sift2.swap ]
                  %t2 = shl i64 %root2, 1
                  %left2 = add i64 %t2, 1
                  %left_ge_end = icmp uge i64 %left2, %end
                  br i1 %left_ge_end, label %after.sift2, label %s2.have_left
                
                s2.have_left:
                  %right2 = add i64 %left2, 1
                  %right_lt_end = icmp ult i64 %right2, %end
                  br i1 %right_lt_end, label %s2.choose.cmp, label %s2.choose.left
                
                s2.choose.cmp:
                  %pr2 = getelementptr inbounds i32, i32* %a.base, i64 %right2
                  %vr2 = load i32, i32* %pr2, align 4
                  %pl2 = getelementptr inbounds i32, i32* %a.base, i64 %left2
                  %vl2 = load i32, i32* %pl2, align 4
                  %rgtl2 = icmp sgt i32 %vr2, %vl2
                  %swap.idx.sel2 = select i1 %rgtl2, i64 %right2, i64 %left2
                  br label %sift2.compare
                
                s2.choose.left:
                  br label %sift2.compare
                
                sift2.compare:
                  %swap.idx2 = phi i64 [ %swap.idx.sel2, %s2.choose.cmp ], [ %left2, %s2.choose.left ]
                  %proot2 = getelementptr inbounds i32, i32* %a.base, i64 %root2
                  %vroot2 = load i32, i32* %proot2, align 4
                  %ps2 = getelementptr inbounds i32, i32* %a.base, i64 %swap.idx2
                  %vs2 = load i32, i32* %ps2, align 4
                  %root_lt_sw2 = icmp slt i32 %vroot2, %vs2
                  br i1 %root_lt_sw2, label %sift2.swap, label %after.sift2
                
                sift2.swap:
                  ; SSA fix: define next root via phi (must be first in block)
                  %root2.next = phi i64 [ %swap.idx2, %sift2.compare ]
                  store i32 %vs2, i32* %proot2, align 4
                  store i32 %vroot2, i32* %ps2, align 4
                  br label %sift2.check
                
                after.sift2:
                  %end.dec = add i64 %end, -1
                  %more = icmp ne i64 %end.dec, 0
                  br i1 %more, label %phase2.loop, label %ret
                
                ; standard x86-64 'ret' epilogue: RIP=[RSP], RSP+=8
                ret:
                  %RSP.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 7
                  %rsp0 = load i64, i64* %RSP.p, align 8
                  %retaddr.i8 = getelementptr inbounds i8, i8* %MEM, i64 %rsp0
                  %retaddr.p = bitcast i8* %retaddr.i8 to i64*
                  %retaddr = load i64, i64* %retaddr.p, align 8
                  %RIP.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 16
                  store i64 %retaddr, i64* %RIP.p, align 8
                  %rsp1 = add i64 %rsp0, 8
                  store i64 %rsp1, i64* %RSP.p, align 8
                  ret void
                }
                
                ```
                
            - chatGPT3
                
                ```python
                ; ModuleID = 'heap_sort'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; Symbol: heap_sort ; Address: 0x401156
                ; Intent: In-place ascending heapsort on i32 array (confidence=0.95). Evidence: child index 2*root+1, signed compares with sibling/root and sift-down loops.
                ; Preconditions: %a points to at least %n consecutive i32 elements.
                ; Postconditions: The first %n elements at %a are sorted in nondecreasing (signed) order.
                
                ; Only the needed extern declarations:
                
                define dso_local void @heap_sort(i32* %a, i64 %n) local_unnamed_addr {
                entry:
                %cmp_n_le1 = icmp ule i64 %n, 1
                br i1 %cmp_n_le1, label %ret, label %build_init
                
                build_init:
                %i0 = lshr i64 %n, 1
                br label %build_header
                
                build_header:
                %i = phi i64 [ %i0, %build_init ], [ %i_dec, %build_dec ]
                %is_zero = icmp eq i64 %i, 0
                br i1 %is_zero, label %sort_init, label %sift_build_entry
                
                sift_build_entry:
                %root_init = add i64 %i, -1
                br label %sift_build_loop
                
                sift_build_loop:
                %root = phi i64 [ %root_init, %sift_build_entry ], [ %swap_idx, %sift_build_swapped ]
                %root_x2 = shl i64 %root, 1
                %left = add i64 %root_x2, 1
                %left_lt_n = icmp ult i64 %left, %n
                br i1 %left_lt_n, label %have_left, label %build_dec
                
                have_left:
                %right = add i64 %left, 1
                %right_lt_n = icmp ult i64 %right, %n
                %left_ptr = getelementptr inbounds i32, i32* %a, i64 %left
                %left_val = load i32, i32* %left_ptr, align 4
                br i1 %right_lt_n, label %have_right, label %choose_left
                
                have_right:
                %right_ptr = getelementptr inbounds i32, i32* %a, i64 %right
                %right_val = load i32, i32* %right_ptr, align 4
                %right_gt_left = icmp sgt i32 %right_val, %left_val
                br i1 %right_gt_left, label %choose_right, label %choose_left
                
                choose_left:
                %swap_idx_left = phi i64 [ %left, %have_right ], [ %left, %have_left ]
                br label %choose_done
                
                choose_right:
                %swap_idx_right = phi i64 [ %right, %have_right ]
                br label %choose_done
                
                choose_done:
                %swap_idx = phi i64 [ %swap_idx_right, %choose_right ], [ %swap_idx_left, %choose_left ]
                %root_ptr = getelementptr inbounds i32, i32* %a, i64 %root
                %root_val = load i32, i32* %root_ptr, align 4
                %swap_ptr = getelementptr inbounds i32, i32* %a, i64 %swap_idx
                %swap_val = load i32, i32* %swap_ptr, align 4
                %root_lt_swap = icmp slt i32 %root_val, %swap_val
                br i1 %root_lt_swap, label %sift_build_swapped, label %build_dec
                
                sift_build_swapped:
                store i32 %swap_val, i32* %root_ptr, align 4
                store i32 %root_val, i32* %swap_ptr, align 4
                br label %sift_build_loop
                
                build_dec:
                %i_dec = add i64 %i, -1
                br label %build_header
                
                sort_init:
                %end0 = add i64 %n, -1
                br label %sort_check
                
                sort_check:
                %end = phi i64 [ %end0, %sort_init ], [ %end_next, %after_decrement ]
                %end_ne_zero = icmp ne i64 %end, 0
                br i1 %end_ne_zero, label %sort_body, label %ret
                
                sort_body:
                %p0 = getelementptr inbounds i32, i32* %a, i64 0
                %v0 = load i32, i32* %p0, align 4
                %pend = getelementptr inbounds i32, i32* %a, i64 %end
                %vend = load i32, i32* %pend, align 4
                store i32 %vend, i32* %p0, align 4
                store i32 %v0, i32* %pend, align 4
                br label %sift_sort_loop
                
                sift_sort_loop:
                %root2 = phi i64 [ 0, %sort_body ], [ %swap_idx2, %do_swap_sort ]
                %root2_x2 = shl i64 %root2, 1
                %left2 = add i64 %root2_x2, 1
                %left2_lt_end = icmp ult i64 %left2, %end
                br i1 %left2_lt_end, label %have_left2, label %after_sift
                
                have_left2:
                %right2 = add i64 %left2, 1
                %right2_lt_end = icmp ult i64 %right2, %end
                %left2_ptr = getelementptr inbounds i32, i32* %a, i64 %left2
                %left2_val = load i32, i32* %left2_ptr, align 4
                br i1 %right2_lt_end, label %have_right2, label %choose_left2
                
                have_right2:
                %right2_ptr = getelementptr inbounds i32, i32* %a, i64 %right2
                %right2_val = load i32, i32* %right2_ptr, align 4
                %right2_gt_left2 = icmp sgt i32 %right2_val, %left2_val
                br i1 %right2_gt_left2, label %choose_right2, label %choose_left2
                
                choose_left2:
                %swap_idx2_left = phi i64 [ %left2, %have_right2 ], [ %left2, %have_left2 ]
                br label %choose_done2
                
                choose_right2:
                %swap_idx2_right = phi i64 [ %right2, %have_right2 ]
                br label %choose_done2
                
                choose_done2:
                %swap_idx2 = phi i64 [ %swap_idx2_right, %choose_right2 ], [ %swap_idx2_left, %choose_left2 ]
                %root2_ptr = getelementptr inbounds i32, i32* %a, i64 %root2
                %root2_val = load i32, i32* %root2_ptr, align 4
                %swap2_ptr = getelementptr inbounds i32, i32* %a, i64 %swap_idx2
                %swap2_val = load i32, i32* %swap2_ptr, align 4
                %root2_lt_swap2 = icmp slt i32 %root2_val, %swap2_val
                br i1 %root2_lt_swap2, label %do_swap_sort, label %after_sift
                
                do_swap_sort:
                store i32 %swap2_val, i32* %root2_ptr, align 4
                store i32 %root2_val, i32* %swap2_ptr, align 4
                br label %sift_sort_loop
                
                after_sift:
                %end_next = add i64 %end, -1
                br label %after_decrement
                
                after_decrement:
                br label %sort_check
                
                ret:
                ret void
                }
                ```
                
        - main 함수
            - ida
                
                ```python
                LOAD:0000000000400000 ;
                LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
                LOAD:0000000000400000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                LOAD:0000000000400000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                LOAD:0000000000400000 ; |                      License info: 48-2137-ACAB-99                      |
                LOAD:0000000000400000 ; |                              elf <elv@ven>                              |
                LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
                LOAD:0000000000400000 ;
                LOAD:0000000000400000 ; Input SHA256 : 6658E234F7BF48EC184723CB25956D33FAF0D968CD698260EDAD3F32C8A78E28
                LOAD:0000000000400000 ; Input MD5    : 61BC86FB464A1CE6082E3E2B1831E284
                LOAD:0000000000400000 ; Input CRC32  : C1206B35
                LOAD:0000000000400000 ; Compiler     : GNU C++
                LOAD:0000000000400000
                LOAD:0000000000400000 ; File Name   : C:\Users\EMSEC\Desktop\mcsema0\heapsort2
                LOAD:0000000000400000 ; Format      : ELF64 for x86-64 (Executable)
                LOAD:0000000000400000 ; Imagebase   : 400000
                LOAD:0000000000400000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                LOAD:0000000000400000 ; Needed Library 'libc.so.6'
                LOAD:0000000000400000 ;
                LOAD:0000000000400000 ; Source File : 'crt1.o'
                LOAD:0000000000400000 ; Source File : 'crtstuff.c'
                LOAD:0000000000400000 ; Source File : 'heapsort.c'
                LOAD:0000000000400000 ; Source File : 'crtstuff.c'
                LOAD:0000000000400000
                LOAD:0000000000400000                 .686p
                LOAD:0000000000400000                 .mmx
                LOAD:0000000000400000                 .model flat
                LOAD:0000000000400000 .intel_syntax noprefix
                LOAD:0000000000400000
                LOAD:0000000000400000 ; ===========================================================================
                LOAD:0000000000400000
                LOAD:0000000000400000 ; Segment type: Pure data
                LOAD:0000000000400000 ; Segment permissions: Read
                LOAD:0000000000400000 LOAD            segment mempage public 'DATA' use64
                LOAD:0000000000400000                 assume cs:LOAD
                LOAD:0000000000400000                 ;org 400000h
                LOAD:0000000000400000 dword_400000    dd 464C457Fh            ; DATA XREF: LOAD:00000000004000C0↓o
                LOAD:0000000000400000                                         ; File format: \x7FELF
                LOAD:0000000000400004                 db 2                    ; File class: 64-bit
                LOAD:0000000000400005                 db 1                    ; Data encoding: little-endian
                LOAD:0000000000400006                 db 1                    ; File version
                LOAD:0000000000400007                 db 0                    ; OS/ABI: UNIX System V ABI
                LOAD:0000000000400008                 db 0                    ; ABI Version
                LOAD:0000000000400009                 db 7 dup(0)             ; Padding
                LOAD:0000000000400010                 dw 2                    ; File type: Executable
                LOAD:0000000000400012                 dw 3Eh                  ; Machine: x86-64
                LOAD:0000000000400014                 dd 1                    ; File version
                LOAD:0000000000400018                 dq offset _start        ; Entry point
                LOAD:0000000000400020                 dq 40h                  ; PHT file offset
                LOAD:0000000000400028                 dq 3E88h                ; SHT file offset
                LOAD:0000000000400030                 dd 0                    ; Processor-specific flags
                LOAD:0000000000400034                 dw 40h                  ; ELF header size
                LOAD:0000000000400036                 dw 38h                  ; PHT entry size
                LOAD:0000000000400038                 dw 0Dh                  ; Number of entries in PHT
                LOAD:000000000040003A                 dw 40h                  ; SHT entry size
                LOAD:000000000040003C                 dw 26h                  ; Number of entries in SHT
                LOAD:000000000040003E                 dw 25h                  ; SHT entry index for string table
                LOAD:0000000000400040 ; ELF64 Program Header
                LOAD:0000000000400040 ; PHT Entry 0
                LOAD:0000000000400040 dword_400040    dd 6                    ; DATA XREF: LOAD:0000000000400050↓o
                LOAD:0000000000400040                                         ; Type: PHDR
                LOAD:0000000000400044                 dd 4                    ; Flags
                LOAD:0000000000400048                 dq 40h                  ; File offset
                LOAD:0000000000400050                 dq offset dword_400040  ; Virtual address
                LOAD:0000000000400058                 dq 400040h              ; Physical address
                LOAD:0000000000400060                 dq 2D8h                 ; Size in file image
                LOAD:0000000000400068                 dq 2D8h                 ; Size in memory image
                LOAD:0000000000400070                 dq 8                    ; Alignment
                LOAD:0000000000400078 ; PHT Entry 1
                LOAD:0000000000400078                 dd 3                    ; Type: INTERP
                LOAD:000000000040007C                 dd 4                    ; Flags
                LOAD:0000000000400080                 dq 318h                 ; File offset
                LOAD:0000000000400088                 dq offset aLib64LdLinuxX8 ; Virtual address
                LOAD:0000000000400090                 dq 400318h              ; Physical address
                LOAD:0000000000400098                 dq 1Ch                  ; Size in file image
                LOAD:00000000004000A0                 dq 1Ch                  ; Size in memory image
                LOAD:00000000004000A8                 dq 1                    ; Alignment
                LOAD:00000000004000B0 ; PHT Entry 2
                LOAD:00000000004000B0                 dd 1                    ; Type: LOAD
                LOAD:00000000004000B4                 dd 4                    ; Flags
                LOAD:00000000004000B8                 dq 0                    ; File offset
                LOAD:00000000004000C0                 dq offset dword_400000  ; Virtual address
                LOAD:00000000004000C8                 dq 400000h              ; Physical address
                LOAD:00000000004000D0                 dq 538h                 ; Size in file image
                LOAD:00000000004000D8                 dq 538h                 ; Size in memory image
                LOAD:00000000004000E0                 dq 1000h                ; Alignment
                LOAD:00000000004000E8 ; PHT Entry 3
                LOAD:00000000004000E8                 dd 1                    ; Type: LOAD
                LOAD:00000000004000EC                 dd 5                    ; Flags
                LOAD:00000000004000F0                 dq 1000h                ; File offset
                LOAD:00000000004000F8                 dq offset _init_proc    ; Virtual address
                LOAD:0000000000400100                 dq 401000h              ; Physical address
                LOAD:0000000000400108                 dq 52Dh                 ; Size in file image
                LOAD:0000000000400110                 dq 52Dh                 ; Size in memory image
                LOAD:0000000000400118                 dq 1000h                ; Alignment
                LOAD:0000000000400120 ; PHT Entry 4
                LOAD:0000000000400120                 dd 1                    ; Type: LOAD
                LOAD:0000000000400124                 dd 4                    ; Flags
                LOAD:0000000000400128                 dq 2000h                ; File offset
                LOAD:0000000000400130                 dq offset _IO_stdin_used ; Virtual address
                LOAD:0000000000400138                 dq 402000h              ; Physical address
                LOAD:0000000000400140                 dq 124h                 ; Size in file image
                LOAD:0000000000400148                 dq 124h                 ; Size in memory image
                LOAD:0000000000400150                 dq 1000h                ; Alignment
                LOAD:0000000000400158 ; PHT Entry 5
                LOAD:0000000000400158                 dd 1                    ; Type: LOAD
                LOAD:000000000040015C                 dd 6                    ; Flags
                LOAD:0000000000400160                 dq 2E10h                ; File offset
                LOAD:0000000000400168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                LOAD:0000000000400170                 dq 403E10h              ; Physical address
                LOAD:0000000000400178                 dq 228h                 ; Size in file image
                LOAD:0000000000400180                 dq 230h                 ; Size in memory image
                LOAD:0000000000400188                 dq 1000h                ; Alignment
                LOAD:0000000000400190 ; PHT Entry 6
                LOAD:0000000000400190                 dd 2                    ; Type: DYNAMIC
                LOAD:0000000000400194                 dd 6                    ; Flags
                LOAD:0000000000400198                 dq 2E20h                ; File offset
                LOAD:00000000004001A0                 dq offset _DYNAMIC      ; Virtual address
                LOAD:00000000004001A8                 dq 403E20h              ; Physical address
                LOAD:00000000004001B0                 dq 1D0h                 ; Size in file image
                LOAD:00000000004001B8                 dq 1D0h                 ; Size in memory image
                LOAD:00000000004001C0                 dq 8                    ; Alignment
                LOAD:00000000004001C8 ; PHT Entry 7
                LOAD:00000000004001C8                 dd 4                    ; Type: NOTE
                LOAD:00000000004001CC                 dd 4                    ; Flags
                LOAD:00000000004001D0                 dq 338h                 ; File offset
                LOAD:00000000004001D8                 dq offset dword_400338  ; Virtual address
                LOAD:00000000004001E0                 dq 400338h              ; Physical address
                LOAD:00000000004001E8                 dq 30h                  ; Size in file image
                LOAD:00000000004001F0                 dq 30h                  ; Size in memory image
                LOAD:00000000004001F8                 dq 8                    ; Alignment
                LOAD:0000000000400200 ; PHT Entry 8
                LOAD:0000000000400200                 dd 4                    ; Type: NOTE
                LOAD:0000000000400204                 dd 4                    ; Flags
                LOAD:0000000000400208                 dq 368h                 ; File offset
                LOAD:0000000000400210                 dq offset dword_400368  ; Virtual address
                LOAD:0000000000400218                 dq 400368h              ; Physical address
                LOAD:0000000000400220                 dq 44h                  ; Size in file image
                LOAD:0000000000400228                 dq 44h                  ; Size in memory image
                LOAD:0000000000400230                 dq 4                    ; Alignment
                LOAD:0000000000400238 ; PHT Entry 9
                LOAD:0000000000400238                 dd 6474E553h            ; Type: 6474E553
                LOAD:000000000040023C                 dd 4                    ; Flags
                LOAD:0000000000400240                 dq 338h                 ; File offset
                LOAD:0000000000400248                 dq offset dword_400338  ; Virtual address
                LOAD:0000000000400250                 dq 400338h              ; Physical address
                LOAD:0000000000400258                 dq 30h                  ; Size in file image
                LOAD:0000000000400260                 dq 30h                  ; Size in memory image
                LOAD:0000000000400268                 dq 8                    ; Alignment
                LOAD:0000000000400270 ; PHT Entry 10
                LOAD:0000000000400270                 dd 6474E550h            ; Type: EH_FRAME
                LOAD:0000000000400274                 dd 4                    ; Flags
                LOAD:0000000000400278                 dq 2020h                ; File offset
                LOAD:0000000000400280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                LOAD:0000000000400288                 dq 402020h              ; Physical address
                LOAD:0000000000400290                 dq 3Ch                  ; Size in file image
                LOAD:0000000000400298                 dq 3Ch                  ; Size in memory image
                LOAD:00000000004002A0                 dq 4                    ; Alignment
                LOAD:00000000004002A8 ; PHT Entry 11
                LOAD:00000000004002A8                 dd 6474E551h            ; Type: STACK
                LOAD:00000000004002AC                 dd 6                    ; Flags
                LOAD:00000000004002B0                 dq 0                    ; File offset
                LOAD:00000000004002B8                 dq 0                    ; Virtual address
                LOAD:00000000004002C0                 dq 0                    ; Physical address
                LOAD:00000000004002C8                 dq 0                    ; Size in file image
                LOAD:00000000004002D0                 dq 0                    ; Size in memory image
                LOAD:00000000004002D8                 dq 10h                  ; Alignment
                LOAD:00000000004002E0 ; PHT Entry 12
                LOAD:00000000004002E0                 dd 6474E552h            ; Type: RO-AFTER
                LOAD:00000000004002E4                 dd 4                    ; Flags
                LOAD:00000000004002E8                 dq 2E10h                ; File offset
                LOAD:00000000004002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                LOAD:00000000004002F8                 dq 403E10h              ; Physical address
                LOAD:0000000000400300                 dq 1F0h                 ; Size in file image
                LOAD:0000000000400308                 dq 1F0h                 ; Size in memory image
                LOAD:0000000000400310                 dq 1                    ; Alignment
                LOAD:0000000000400318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                LOAD:0000000000400318                                         ; DATA XREF: LOAD:0000000000400088↑o
                LOAD:0000000000400334                 align 8
                LOAD:0000000000400338 ; ELF Note Entry
                LOAD:0000000000400338 dword_400338    dd 4                    ; DATA XREF: LOAD:00000000004001D8↑o
                LOAD:0000000000400338                                         ; LOAD:0000000000400248↑o
                LOAD:0000000000400338                                         ; Name Size
                LOAD:000000000040033C                 dd 20h                  ; Desc Size
                LOAD:0000000000400340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                LOAD:0000000000400344 aGnu            db 'GNU',0              ; Name
                LOAD:0000000000400348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                LOAD:000000000040035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                LOAD:0000000000400368 ; ELF Note Entry
                LOAD:0000000000400368 dword_400368    dd 4                    ; DATA XREF: LOAD:0000000000400210↑o
                LOAD:0000000000400368                                         ; Name Size
                LOAD:000000000040036C                 dd 14h                  ; Desc Size
                LOAD:0000000000400370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                LOAD:0000000000400374 aGnu_0          db 'GNU',0              ; Name
                LOAD:0000000000400378                 db 80h, 4, 0FCh, 20h, 0BCh, 23h, 0C4h, 0Ch, 0Dh, 6Eh, 4Dh ; Desc
                LOAD:0000000000400383                 db 1Eh, 50h, 60h, 65h, 3Bh, 0A4h, 6Dh, 77h, 0DBh
                LOAD:000000000040038C ; ELF Note Entry
                LOAD:000000000040038C __abi_tag       dd 4                    ; Name Size
                LOAD:0000000000400390                 dd 10h                  ; Desc Size
                LOAD:0000000000400394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                LOAD:0000000000400398 aGnu_1          db 'GNU',0              ; Name
                LOAD:000000000040039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                LOAD:00000000004003AC                 align 10h
                LOAD:00000000004003B0 ; ELF GNU Hash Table
                LOAD:00000000004003B0 elf_gnu_hash_nbuckets dd 1
                LOAD:00000000004003B4 elf_gnu_hash_symbias dd 1
                LOAD:00000000004003B8 elf_gnu_hash_bitmask_nwords dd 1
                LOAD:00000000004003BC elf_gnu_hash_shift dd 0
                LOAD:00000000004003C0 elf_gnu_hash_indexes dq 0
                LOAD:00000000004003C8 elf_gnu_hash_bucket dd 0
                LOAD:00000000004003CC elf_gnu_hash_chain dd 0
                LOAD:00000000004003D0 ; ELF Symbol Table
                LOAD:00000000004003D0                 Elf64_Sym <0>
                LOAD:00000000004003E8                 Elf64_Sym <offset aPutchar - offset unk_400448, 12h, 0, 0, 0, 0> ; "putchar"
                LOAD:0000000000400400                 Elf64_Sym <offset aLibcStartMain - offset unk_400448, 12h, 0, 0, 0, 0> ; "__libc_start_main"
                LOAD:0000000000400418                 Elf64_Sym <offset aPrintf - offset unk_400448, 12h, 0, 0, 0, 0> ; "printf"
                LOAD:0000000000400430                 Elf64_Sym <offset aGmonStart - offset unk_400448, 20h, 0, 0, 0, 0> ; "__gmon_start__"
                LOAD:0000000000400448 ; ELF String Table
                LOAD:0000000000400448 unk_400448      db    0                 ; DATA XREF: LOAD:00000000004003E8↑o
                LOAD:0000000000400448                                         ; LOAD:0000000000400400↑o ...
                LOAD:0000000000400449 aLibcStartMain  db '__libc_start_main',0
                LOAD:0000000000400449                                         ; DATA XREF: LOAD:0000000000400400↑o
                LOAD:000000000040045B aPutchar        db 'putchar',0          ; DATA XREF: LOAD:00000000004003E8↑o
                LOAD:0000000000400463 aPrintf         db 'printf',0           ; DATA XREF: LOAD:0000000000400418↑o
                LOAD:000000000040046A aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000004004A8↓o
                LOAD:0000000000400474 aGlibc234       db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000004004B8↓o
                LOAD:000000000040047F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000004004C8↓o
                LOAD:000000000040048B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000400430↑o
                LOAD:000000000040049A ; ELF GNU Symbol Version Table
                LOAD:000000000040049A                 dw 0
                LOAD:000000000040049C                 dw 2                    ; putchar@@GLIBC_2.2.5
                LOAD:000000000040049E                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                LOAD:00000000004004A0                 dw 2                    ; printf@@GLIBC_2.2.5
                LOAD:00000000004004A2                 dw 1                    ; global symbol: __gmon_start__
                LOAD:00000000004004A4                 dw 0
                LOAD:00000000004004A6                 dw 0
                LOAD:00000000004004A8 ; ELF GNU Symbol Version Requirements
                LOAD:00000000004004A8                 Elf64_Verneed <1, 2, offset aLibcSo6 - offset unk_400448, 10h, 0> ; "libc.so.6"
                LOAD:00000000004004B8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234 - offset unk_400448, \ ; "GLIBC_2.34"
                LOAD:00000000004004B8                                10h>
                LOAD:00000000004004C8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_400448, \ ; "GLIBC_2.2.5"
                LOAD:00000000004004C8                                0>
                LOAD:00000000004004D8 ; ELF RELA Relocation Table
                LOAD:00000000004004D8                 Elf64_Rela <403FF0h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                LOAD:00000000004004F0                 Elf64_Rela <403FF8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                LOAD:0000000000400508 ; ELF JMPREL Relocation Table
                LOAD:0000000000400508                 Elf64_Rela <404018h, 100000007h, 0> ; R_X86_64_JUMP_SLOT putchar
                LOAD:0000000000400520                 Elf64_Rela <404020h, 300000007h, 0> ; R_X86_64_JUMP_SLOT printf
                LOAD:0000000000400520 LOAD            ends
                LOAD:0000000000400520
                .init:0000000000401000 ; ===========================================================================
                .init:0000000000401000
                .init:0000000000401000 ; Segment type: Pure code
                .init:0000000000401000 ; Segment permissions: Read/Execute
                .init:0000000000401000 _init           segment dword public 'CODE' use64
                .init:0000000000401000                 assume cs:_init
                .init:0000000000401000                 ;org 401000h
                .init:0000000000401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .init:0000000000401000
                .init:0000000000401000 ; =============== S U B R O U T I N E =======================================
                .init:0000000000401000
                .init:0000000000401000
                .init:0000000000401000                 public _init_proc
                .init:0000000000401000 _init_proc      proc near               ; DATA XREF: LOAD:00000000004000F8↑o
                .init:0000000000401000                 endbr64                 ; _init
                .init:0000000000401004                 sub     rsp, 8
                .init:0000000000401008                 mov     rax, cs:__gmon_start___ptr
                .init:000000000040100F                 test    rax, rax
                .init:0000000000401012                 jz      short loc_401016
                .init:0000000000401014                 call    rax ; __gmon_start__
                .init:0000000000401016
                .init:0000000000401016 loc_401016:                             ; CODE XREF: _init_proc+12↑j
                .init:0000000000401016                 add     rsp, 8
                .init:000000000040101A                 retn
                .init:000000000040101A _init_proc      endp
                .init:000000000040101A
                .init:000000000040101A _init           ends
                .init:000000000040101A
                LOAD:000000000040101B ; ===========================================================================
                LOAD:000000000040101B
                LOAD:000000000040101B ; Segment type: Pure code
                LOAD:000000000040101B ; Segment permissions: Read/Execute
                LOAD:000000000040101B LOAD            segment mempage public 'CODE' use64
                LOAD:000000000040101B                 assume cs:LOAD
                LOAD:000000000040101B                 ;org 40101Bh
                LOAD:000000000040101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                LOAD:000000000040101B                 align 20h
                LOAD:000000000040101B LOAD            ends
                LOAD:000000000040101B
                .plt:0000000000401020 ; ===========================================================================
                .plt:0000000000401020
                .plt:0000000000401020 ; Segment type: Pure code
                .plt:0000000000401020 ; Segment permissions: Read/Execute
                .plt:0000000000401020 _plt            segment para public 'CODE' use64
                .plt:0000000000401020                 assume cs:_plt
                .plt:0000000000401020                 ;org 401020h
                .plt:0000000000401020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .plt:0000000000401020
                .plt:0000000000401020 ; =============== S U B R O U T I N E =======================================
                .plt:0000000000401020
                .plt:0000000000401020
                .plt:0000000000401020 sub_401020      proc near               ; CODE XREF: sub_401030+9↓j
                .plt:0000000000401020                                         ; sub_401040+9↓j
                .plt:0000000000401020 ; __unwind {
                .plt:0000000000401020                 push    cs:qword_404008
                .plt:0000000000401026                 bnd jmp cs:qword_404010
                .plt:0000000000401026 sub_401020      endp
                .plt:0000000000401026
                .plt:0000000000401026 ; ---------------------------------------------------------------------------
                .plt:000000000040102D                 align 10h
                .plt:0000000000401030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_401030]
                .plt:000000000040103F                 align 20h
                .plt:0000000000401040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_401040]
                .plt:000000000040104F                 align 10h
                .plt:000000000040104F ; } // starts at 401020
                .plt:000000000040104F _plt            ends
                .plt:000000000040104F
                .plt.sec:0000000000401050 ; ===========================================================================
                .plt.sec:0000000000401050
                .plt.sec:0000000000401050 ; Segment type: Pure code
                .plt.sec:0000000000401050 ; Segment permissions: Read/Execute
                .plt.sec:0000000000401050 _plt_sec        segment para public 'CODE' use64
                .plt.sec:0000000000401050                 assume cs:_plt_sec
                .plt.sec:0000000000401050                 ;org 401050h
                .plt.sec:0000000000401050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .plt.sec:0000000000401050 ; [0000000B BYTES: COLLAPSED FUNCTION _putchar]
                .plt.sec:000000000040105B                 align 20h
                .plt.sec:0000000000401060 ; [0000000B BYTES: COLLAPSED FUNCTION _printf]
                .plt.sec:000000000040106B                 align 10h
                .plt.sec:000000000040106B ; } // starts at 401050
                .plt.sec:000000000040106B _plt_sec        ends
                .plt.sec:000000000040106B
                .text:0000000000401070 ; ===========================================================================
                .text:0000000000401070
                .text:0000000000401070 ; Segment type: Pure code
                .text:0000000000401070 ; Segment permissions: Read/Execute
                .text:0000000000401070 _text           segment para public 'CODE' use64
                .text:0000000000401070                 assume cs:_text
                .text:0000000000401070                 ;org 401070h
                .text:0000000000401070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .text:0000000000401070
                .text:0000000000401070 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401070
                .text:0000000000401070 ; Attributes: noreturn fuzzy-sp
                .text:0000000000401070
                .text:0000000000401070                 public _start
                .text:0000000000401070 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o
                .text:0000000000401070 ; __unwind {
                .text:0000000000401070                 endbr64
                .text:0000000000401074                 xor     ebp, ebp
                .text:0000000000401076                 mov     r9, rdx         ; rtld_fini
                .text:0000000000401079                 pop     rsi             ; argc
                .text:000000000040107A                 mov     rdx, rsp        ; ubp_av
                .text:000000000040107D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                .text:0000000000401081                 push    rax
                .text:0000000000401082                 push    rsp             ; stack_end
                .text:0000000000401083                 xor     r8d, r8d        ; fini
                .text:0000000000401086                 xor     ecx, ecx        ; init
                .text:0000000000401088                 mov     rdi, offset main ; main
                .text:000000000040108F                 call    cs:__libc_start_main_ptr
                .text:0000000000401095                 hlt
                .text:0000000000401095 ; } // starts at 401070
                .text:0000000000401095 _start          endp
                .text:0000000000401095
                .text:0000000000401095 ; ---------------------------------------------------------------------------
                .text:0000000000401096                 align 20h
                .text:00000000004010A0
                .text:00000000004010A0 ; =============== S U B R O U T I N E =======================================
                .text:00000000004010A0
                .text:00000000004010A0
                .text:00000000004010A0                 public _dl_relocate_static_pie
                .text:00000000004010A0 _dl_relocate_static_pie proc near
                .text:00000000004010A0 ; __unwind {
                .text:00000000004010A0                 endbr64
                .text:00000000004010A4                 retn
                .text:00000000004010A4 ; } // starts at 4010A0
                .text:00000000004010A4 _dl_relocate_static_pie endp
                .text:00000000004010A4
                .text:00000000004010A4 ; ---------------------------------------------------------------------------
                .text:00000000004010A5                 align 10h
                .text:00000000004010B0
                .text:00000000004010B0 ; =============== S U B R O U T I N E =======================================
                .text:00000000004010B0
                .text:00000000004010B0
                .text:00000000004010B0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux+11↓p
                .text:00000000004010B0                 mov     eax, offset __bss_start
                .text:00000000004010B5                 cmp     rax, offset __bss_start
                .text:00000000004010BB                 jz      short locret_4010D0
                .text:00000000004010BD                 mov     eax, 0
                .text:00000000004010C2                 test    rax, rax
                .text:00000000004010C5                 jz      short locret_4010D0
                .text:00000000004010C7                 mov     edi, offset __bss_start
                .text:00000000004010CC                 jmp     rax
                .text:00000000004010CC ; ---------------------------------------------------------------------------
                .text:00000000004010CE                 align 10h
                .text:00000000004010D0
                .text:00000000004010D0 locret_4010D0:                          ; CODE XREF: deregister_tm_clones+B↑j
                .text:00000000004010D0                                         ; deregister_tm_clones+15↑j
                .text:00000000004010D0                 retn
                .text:00000000004010D0 deregister_tm_clones endp
                .text:00000000004010D0
                .text:00000000004010D0 ; ---------------------------------------------------------------------------
                .text:00000000004010D1                 align 20h
                .text:00000000004010E0
                .text:00000000004010E0 ; =============== S U B R O U T I N E =======================================
                .text:00000000004010E0
                .text:00000000004010E0
                .text:00000000004010E0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                .text:00000000004010E0                 mov     esi, offset __bss_start
                .text:00000000004010E5                 sub     rsi, offset __bss_start
                .text:00000000004010EC                 mov     rax, rsi
                .text:00000000004010EF                 shr     rsi, 3Fh
                .text:00000000004010F3                 sar     rax, 3
                .text:00000000004010F7                 add     rsi, rax
                .text:00000000004010FA                 sar     rsi, 1
                .text:00000000004010FD                 jz      short locret_401110
                .text:00000000004010FF                 mov     eax, 0
                .text:0000000000401104                 test    rax, rax
                .text:0000000000401107                 jz      short locret_401110
                .text:0000000000401109                 mov     edi, offset __bss_start
                .text:000000000040110E                 jmp     rax
                .text:0000000000401110 ; ---------------------------------------------------------------------------
                .text:0000000000401110
                .text:0000000000401110 locret_401110:                          ; CODE XREF: register_tm_clones+1D↑j
                .text:0000000000401110                                         ; register_tm_clones+27↑j
                .text:0000000000401110                 retn
                .text:0000000000401110 register_tm_clones endp
                .text:0000000000401110
                .text:0000000000401110 ; ---------------------------------------------------------------------------
                .text:0000000000401111                 align 20h
                .text:0000000000401120
                .text:0000000000401120 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401120
                .text:0000000000401120
                .text:0000000000401120 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                .text:0000000000401120                 endbr64
                .text:0000000000401124                 cmp     cs:__bss_start, 0
                .text:000000000040112B                 jnz     short locret_401140
                .text:000000000040112D                 push    rbp
                .text:000000000040112E                 mov     rbp, rsp
                .text:0000000000401131                 call    deregister_tm_clones
                .text:0000000000401136                 mov     cs:__bss_start, 1
                .text:000000000040113D                 pop     rbp
                .text:000000000040113E                 retn
                .text:000000000040113E ; ---------------------------------------------------------------------------
                .text:000000000040113F                 align 20h
                .text:0000000000401140
                .text:0000000000401140 locret_401140:                          ; CODE XREF: __do_global_dtors_aux+B↑j
                .text:0000000000401140                 retn
                .text:0000000000401140 __do_global_dtors_aux endp
                .text:0000000000401140
                .text:0000000000401140 ; ---------------------------------------------------------------------------
                .text:0000000000401141                 align 10h
                .text:0000000000401150
                .text:0000000000401150 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401150
                .text:0000000000401150
                .text:0000000000401150 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                .text:0000000000401150                 endbr64
                .text:0000000000401154                 jmp     short register_tm_clones
                .text:0000000000401154 frame_dummy     endp
                .text:0000000000401154
                .text:0000000000401156
                .text:0000000000401156 ; =============== S U B R O U T I N E =======================================
                .text:0000000000401156
                .text:0000000000401156 ; Attributes: bp-based frame
                .text:0000000000401156
                .text:0000000000401156 ; void __cdecl heap_sort(int *a, size_t n)
                .text:0000000000401156                 public heap_sort
                .text:0000000000401156 heap_sort       proc near               ; CODE XREF: main+AC↓p
                .text:0000000000401156
                .text:0000000000401156 n               = qword ptr -80h
                .text:0000000000401156 a               = qword ptr -78h
                .text:0000000000401156 t               = dword ptr -64h
                .text:0000000000401156 swap_idx        = qword ptr -60h
                .text:0000000000401156 right           = qword ptr -58h
                .text:0000000000401156 left            = qword ptr -50h
                .text:0000000000401156 tt              = dword ptr -44h
                .text:0000000000401156 swap_idx_0      = qword ptr -40h
                .text:0000000000401156 right_0         = qword ptr -38h
                .text:0000000000401156 left_0          = qword ptr -30h
                .text:0000000000401156 t_0             = dword ptr -24h
                .text:0000000000401156 root_0          = qword ptr -20h
                .text:0000000000401156 end             = qword ptr -18h
                .text:0000000000401156 root            = qword ptr -10h
                .text:0000000000401156 i               = qword ptr -8
                .text:0000000000401156
                .text:0000000000401156 ; __unwind {
                .text:0000000000401156                 endbr64
                .text:000000000040115A                 push    rbp
                .text:000000000040115B                 mov     rbp, rsp
                .text:000000000040115E                 sub     rsp, 8
                .text:0000000000401162                 mov     [rbp+a], rdi
                .text:0000000000401166                 mov     [rbp+n], rsi
                .text:000000000040116A                 cmp     [rbp+n], 1
                .text:000000000040116F                 jbe     loc_401418
                .text:0000000000401175                 mov     rax, [rbp+n]
                .text:0000000000401179                 shr     rax, 1
                .text:000000000040117C                 mov     [rbp+i], rax
                .text:0000000000401180                 jmp     loc_401294
                .text:0000000000401185 ; ---------------------------------------------------------------------------
                .text:0000000000401185
                .text:0000000000401185 loc_401185:                             ; CODE XREF: heap_sort+14D↓j
                .text:0000000000401185                 mov     rax, [rbp+i]
                .text:0000000000401189                 mov     [rbp+root], rax
                .text:000000000040118D
                .text:000000000040118D loc_40118D:                             ; CODE XREF: heap_sort+139↓j
                .text:000000000040118D                 mov     rax, [rbp+root]
                .text:0000000000401191                 add     rax, rax
                .text:0000000000401194                 add     rax, 1
                .text:0000000000401198                 mov     [rbp+left], rax
                .text:000000000040119C                 mov     rax, [rbp+left]
                .text:00000000004011A0                 cmp     rax, [rbp+n]
                .text:00000000004011A4                 jb      short loc_4011AB
                .text:00000000004011A6                 jmp     loc_401294
                .text:00000000004011AB ; ---------------------------------------------------------------------------
                .text:00000000004011AB
                .text:00000000004011AB loc_4011AB:                             ; CODE XREF: heap_sort+4E↑j
                .text:00000000004011AB                 mov     rax, [rbp+left]
                .text:00000000004011AF                 add     rax, 1
                .text:00000000004011B3                 mov     [rbp+right], rax
                .text:00000000004011B7                 mov     rax, [rbp+right]
                .text:00000000004011BB                 cmp     rax, [rbp+n]
                .text:00000000004011BF                 jnb     short loc_4011F5
                .text:00000000004011C1                 mov     rax, [rbp+right]
                .text:00000000004011C5                 lea     rdx, ds:0[rax*4]
                .text:00000000004011CD                 mov     rax, [rbp+a]
                .text:00000000004011D1                 add     rax, rdx
                .text:00000000004011D4                 mov     edx, [rax]
                .text:00000000004011D6                 mov     rax, [rbp+left]
                .text:00000000004011DA                 lea     rcx, ds:0[rax*4]
                .text:00000000004011E2                 mov     rax, [rbp+a]
                .text:00000000004011E6                 add     rax, rcx
                .text:00000000004011E9                 mov     eax, [rax]
                .text:00000000004011EB                 cmp     edx, eax
                .text:00000000004011ED                 jle     short loc_4011F5
                .text:00000000004011EF                 mov     rax, [rbp+right]
                .text:00000000004011F3                 jmp     short loc_4011F9
                .text:00000000004011F5 ; ---------------------------------------------------------------------------
                .text:00000000004011F5
                .text:00000000004011F5 loc_4011F5:                             ; CODE XREF: heap_sort+69↑j
                .text:00000000004011F5                                         ; heap_sort+97↑j
                .text:00000000004011F5                 mov     rax, [rbp+left]
                .text:00000000004011F9
                .text:00000000004011F9 loc_4011F9:                             ; CODE XREF: heap_sort+9D↑j
                .text:00000000004011F9                 mov     [rbp+swap_idx], rax
                .text:00000000004011FD                 mov     rax, [rbp+root]
                .text:0000000000401201                 lea     rdx, ds:0[rax*4]
                .text:0000000000401209                 mov     rax, [rbp+a]
                .text:000000000040120D                 add     rax, rdx
                .text:0000000000401210                 mov     edx, [rax]
                .text:0000000000401212                 mov     rax, [rbp+swap_idx]
                .text:0000000000401216                 lea     rcx, ds:0[rax*4]
                .text:000000000040121E                 mov     rax, [rbp+a]
                .text:0000000000401222                 add     rax, rcx
                .text:0000000000401225                 mov     eax, [rax]
                .text:0000000000401227                 cmp     edx, eax
                .text:0000000000401229                 jl      short loc_40122D
                .text:000000000040122B                 jmp     short loc_401294
                .text:000000000040122D ; ---------------------------------------------------------------------------
                .text:000000000040122D
                .text:000000000040122D loc_40122D:                             ; CODE XREF: heap_sort+D3↑j
                .text:000000000040122D                 mov     rax, [rbp+root]
                .text:0000000000401231                 lea     rdx, ds:0[rax*4]
                .text:0000000000401239                 mov     rax, [rbp+a]
                .text:000000000040123D                 add     rax, rdx
                .text:0000000000401240                 mov     eax, [rax]
                .text:0000000000401242                 mov     [rbp+t], eax
                .text:0000000000401245                 mov     rax, [rbp+swap_idx]
                .text:0000000000401249                 lea     rdx, ds:0[rax*4]
                .text:0000000000401251                 mov     rax, [rbp+a]
                .text:0000000000401255                 add     rax, rdx
                .text:0000000000401258                 mov     rdx, [rbp+root]
                .text:000000000040125C                 lea     rcx, ds:0[rdx*4]
                .text:0000000000401264                 mov     rdx, [rbp+a]
                .text:0000000000401268                 add     rdx, rcx
                .text:000000000040126B                 mov     eax, [rax]
                .text:000000000040126D                 mov     [rdx], eax
                .text:000000000040126F                 mov     rax, [rbp+swap_idx]
                .text:0000000000401273                 lea     rdx, ds:0[rax*4]
                .text:000000000040127B                 mov     rax, [rbp+a]
                .text:000000000040127F                 add     rdx, rax
                .text:0000000000401282                 mov     eax, [rbp+t]
                .text:0000000000401285                 mov     [rdx], eax
                .text:0000000000401287                 mov     rax, [rbp+swap_idx]
                .text:000000000040128B                 mov     [rbp+root], rax
                .text:000000000040128F                 jmp     loc_40118D
                .text:0000000000401294 ; ---------------------------------------------------------------------------
                .text:0000000000401294
                .text:0000000000401294 loc_401294:                             ; CODE XREF: heap_sort+2A↑j
                .text:0000000000401294                                         ; heap_sort+50↑j ...
                .text:0000000000401294                 mov     rax, [rbp+i]
                .text:0000000000401298                 lea     rdx, [rax-1]
                .text:000000000040129C                 mov     [rbp+i], rdx
                .text:00000000004012A0                 test    rax, rax
                .text:00000000004012A3                 jnz     loc_401185
                .text:00000000004012A9                 mov     rax, [rbp+n]
                .text:00000000004012AD                 sub     rax, 1
                .text:00000000004012B1                 mov     [rbp+end], rax
                .text:00000000004012B5                 jmp     loc_40140B
                .text:00000000004012BA ; ---------------------------------------------------------------------------
                .text:00000000004012BA
                .text:00000000004012BA loc_4012BA:                             ; CODE XREF: heap_sort+2BA↓j
                .text:00000000004012BA                 mov     rax, [rbp+a]
                .text:00000000004012BE                 mov     eax, [rax]
                .text:00000000004012C0                 mov     [rbp+t_0], eax
                .text:00000000004012C3                 mov     rax, [rbp+end]
                .text:00000000004012C7                 lea     rdx, ds:0[rax*4]
                .text:00000000004012CF                 mov     rax, [rbp+a]
                .text:00000000004012D3                 add     rax, rdx
                .text:00000000004012D6                 mov     edx, [rax]
                .text:00000000004012D8                 mov     rax, [rbp+a]
                .text:00000000004012DC                 mov     [rax], edx
                .text:00000000004012DE                 mov     rax, [rbp+end]
                .text:00000000004012E2                 lea     rdx, ds:0[rax*4]
                .text:00000000004012EA                 mov     rax, [rbp+a]
                .text:00000000004012EE                 add     rdx, rax
                .text:00000000004012F1                 mov     eax, [rbp+t_0]
                .text:00000000004012F4                 mov     [rdx], eax
                .text:00000000004012F6                 mov     [rbp+root_0], 0
                .text:00000000004012FE
                .text:00000000004012FE loc_4012FE:                             ; CODE XREF: heap_sort+2A7↓j
                .text:00000000004012FE                 mov     rax, [rbp+root_0]
                .text:0000000000401302                 add     rax, rax
                .text:0000000000401305                 add     rax, 1
                .text:0000000000401309                 mov     [rbp+left_0], rax
                .text:000000000040130D                 mov     rax, [rbp+left_0]
                .text:0000000000401311                 cmp     rax, [rbp+end]
                .text:0000000000401315                 jnb     loc_401402
                .text:000000000040131B                 mov     rax, [rbp+left_0]
                .text:000000000040131F                 add     rax, 1
                .text:0000000000401323                 mov     [rbp+right_0], rax
                .text:0000000000401327                 mov     rax, [rbp+right_0]
                .text:000000000040132B                 cmp     rax, [rbp+end]
                .text:000000000040132F                 jnb     short loc_401365
                .text:0000000000401331                 mov     rax, [rbp+right_0]
                .text:0000000000401335                 lea     rdx, ds:0[rax*4]
                .text:000000000040133D                 mov     rax, [rbp+a]
                .text:0000000000401341                 add     rax, rdx
                .text:0000000000401344                 mov     edx, [rax]
                .text:0000000000401346                 mov     rax, [rbp+left_0]
                .text:000000000040134A                 lea     rcx, ds:0[rax*4]
                .text:0000000000401352                 mov     rax, [rbp+a]
                .text:0000000000401356                 add     rax, rcx
                .text:0000000000401359                 mov     eax, [rax]
                .text:000000000040135B                 cmp     edx, eax
                .text:000000000040135D                 jle     short loc_401365
                .text:000000000040135F                 mov     rax, [rbp+right_0]
                .text:0000000000401363                 jmp     short loc_401369
                .text:0000000000401365 ; ---------------------------------------------------------------------------
                .text:0000000000401365
                .text:0000000000401365 loc_401365:                             ; CODE XREF: heap_sort+1D9↑j
                .text:0000000000401365                                         ; heap_sort+207↑j
                .text:0000000000401365                 mov     rax, [rbp+left_0]
                .text:0000000000401369
                .text:0000000000401369 loc_401369:                             ; CODE XREF: heap_sort+20D↑j
                .text:0000000000401369                 mov     [rbp+swap_idx_0], rax
                .text:000000000040136D                 mov     rax, [rbp+root_0]
                .text:0000000000401371                 lea     rdx, ds:0[rax*4]
                .text:0000000000401379                 mov     rax, [rbp+a]
                .text:000000000040137D                 add     rax, rdx
                .text:0000000000401380                 mov     edx, [rax]
                .text:0000000000401382                 mov     rax, [rbp+swap_idx_0]
                .text:0000000000401386                 lea     rcx, ds:0[rax*4]
                .text:000000000040138E                 mov     rax, [rbp+a]
                .text:0000000000401392                 add     rax, rcx
                .text:0000000000401395                 mov     eax, [rax]
                .text:0000000000401397                 cmp     edx, eax
                .text:0000000000401399                 jge     short loc_401405
                .text:000000000040139B                 mov     rax, [rbp+root_0]
                .text:000000000040139F                 lea     rdx, ds:0[rax*4]
                .text:00000000004013A7                 mov     rax, [rbp+a]
                .text:00000000004013AB                 add     rax, rdx
                .text:00000000004013AE                 mov     eax, [rax]
                .text:00000000004013B0                 mov     [rbp+tt], eax
                .text:00000000004013B3                 mov     rax, [rbp+swap_idx_0]
                .text:00000000004013B7                 lea     rdx, ds:0[rax*4]
                .text:00000000004013BF                 mov     rax, [rbp+a]
                .text:00000000004013C3                 add     rax, rdx
                .text:00000000004013C6                 mov     rdx, [rbp+root_0]
                .text:00000000004013CA                 lea     rcx, ds:0[rdx*4]
                .text:00000000004013D2                 mov     rdx, [rbp+a]
                .text:00000000004013D6                 add     rdx, rcx
                .text:00000000004013D9                 mov     eax, [rax]
                .text:00000000004013DB                 mov     [rdx], eax
                .text:00000000004013DD                 mov     rax, [rbp+swap_idx_0]
                .text:00000000004013E1                 lea     rdx, ds:0[rax*4]
                .text:00000000004013E9                 mov     rax, [rbp+a]
                .text:00000000004013ED                 add     rdx, rax
                .text:00000000004013F0                 mov     eax, [rbp+tt]
                .text:00000000004013F3                 mov     [rdx], eax
                .text:00000000004013F5                 mov     rax, [rbp+swap_idx_0]
                .text:00000000004013F9                 mov     [rbp+root_0], rax
                .text:00000000004013FD                 jmp     loc_4012FE
                .text:0000000000401402 ; ---------------------------------------------------------------------------
                .text:0000000000401402
                .text:0000000000401402 loc_401402:                             ; CODE XREF: heap_sort+1BF↑j
                .text:0000000000401402                 nop
                .text:0000000000401403                 jmp     short loc_401406
                .text:0000000000401405 ; ---------------------------------------------------------------------------
                .text:0000000000401405
                .text:0000000000401405 loc_401405:                             ; CODE XREF: heap_sort+243↑j
                .text:0000000000401405                 nop
                .text:0000000000401406
                .text:0000000000401406 loc_401406:                             ; CODE XREF: heap_sort+2AD↑j
                .text:0000000000401406                 sub     [rbp+end], 1
                .text:000000000040140B
                .text:000000000040140B loc_40140B:                             ; CODE XREF: heap_sort+15F↑j
                .text:000000000040140B                 cmp     [rbp+end], 0
                .text:0000000000401410                 jnz     loc_4012BA
                .text:0000000000401416                 jmp     short locret_401419
                .text:0000000000401418 ; ---------------------------------------------------------------------------
                .text:0000000000401418
                .text:0000000000401418 loc_401418:                             ; CODE XREF: heap_sort+19↑j
                .text:0000000000401418                 nop
                .text:0000000000401419
                .text:0000000000401419 locret_401419:                          ; CODE XREF: heap_sort+2C0↑j
                .text:0000000000401419                 leave
                .text:000000000040141A                 retn
                .text:000000000040141A ; } // starts at 401156
                .text:000000000040141A heap_sort       endp
                .text:000000000040141A
                .text:000000000040141B
                .text:000000000040141B ; =============== S U B R O U T I N E =======================================
                .text:000000000040141B
                .text:000000000040141B ; Attributes: bp-based frame
                .text:000000000040141B
                .text:000000000040141B ; int __fastcall main(int argc, const char **argv, const char **envp)
                .text:000000000040141B                 public main
                .text:000000000040141B main            proc near               ; DATA XREF: _start+18↑o
                .text:000000000040141B
                .text:000000000040141B arr             = dword ptr -40h
                .text:000000000040141B n               = qword ptr -18h
                .text:000000000040141B i_0             = qword ptr -10h
                .text:000000000040141B i               = qword ptr -8
                .text:000000000040141B
                .text:000000000040141B ; __unwind {
                .text:000000000040141B                 endbr64
                .text:000000000040141F                 push    rbp
                .text:0000000000401420                 mov     rbp, rsp
                .text:0000000000401423                 sub     rsp, 40h
                .text:0000000000401427                 mov     [rbp+arr], 7
                .text:000000000040142E                 mov     [rbp+arr+4], 3
                .text:0000000000401435                 mov     [rbp+arr+8], 9
                .text:000000000040143C                 mov     [rbp+arr+0Ch], 1
                .text:0000000000401443                 mov     [rbp+arr+10h], 4
                .text:000000000040144A                 mov     [rbp+arr+14h], 8
                .text:0000000000401451                 mov     [rbp+arr+18h], 2
                .text:0000000000401458                 mov     [rbp+arr+1Ch], 6
                .text:000000000040145F                 mov     [rbp+arr+20h], 5
                .text:0000000000401466                 mov     [rbp+n], 9
                .text:000000000040146E                 mov     edi, offset format ; format
                .text:0000000000401473                 mov     eax, 0
                .text:0000000000401478                 call    _printf
                .text:000000000040147D                 mov     [rbp+i], 0
                .text:0000000000401485                 jmp     short loc_4014A5
                .text:0000000000401487 ; ---------------------------------------------------------------------------
                .text:0000000000401487
                .text:0000000000401487 loc_401487:                             ; CODE XREF: main+92↓j
                .text:0000000000401487                 mov     rax, [rbp+i]
                .text:000000000040148B                 mov     eax, [rbp+rax*4+arr]
                .text:000000000040148F                 mov     esi, eax
                .text:0000000000401491                 mov     edi, offset aD  ; "%d "
                .text:0000000000401496                 mov     eax, 0
                .text:000000000040149B                 call    _printf
                .text:00000000004014A0                 add     [rbp+i], 1
                .text:00000000004014A5
                .text:00000000004014A5 loc_4014A5:                             ; CODE XREF: main+6A↑j
                .text:00000000004014A5                 mov     rax, [rbp+i]
                .text:00000000004014A9                 cmp     rax, [rbp+n]
                .text:00000000004014AD                 jb      short loc_401487
                .text:00000000004014AF                 mov     edi, 0Ah        ; c
                .text:00000000004014B4                 call    _putchar
                .text:00000000004014B9                 mov     rdx, [rbp+n]
                .text:00000000004014BD                 lea     rax, [rbp+arr]
                .text:00000000004014C1                 mov     rsi, rdx        ; n
                .text:00000000004014C4                 mov     rdi, rax        ; a
                .text:00000000004014C7                 call    heap_sort
                .text:00000000004014CC                 mov     edi, offset byte_402011 ; format
                .text:00000000004014D1                 mov     eax, 0
                .text:00000000004014D6                 call    _printf
                .text:00000000004014DB                 mov     [rbp+i_0], 0
                .text:00000000004014E3                 jmp     short loc_401503
                .text:00000000004014E5 ; ---------------------------------------------------------------------------
                .text:00000000004014E5
                .text:00000000004014E5 loc_4014E5:                             ; CODE XREF: main+F0↓j
                .text:00000000004014E5                 mov     rax, [rbp+i_0]
                .text:00000000004014E9                 mov     eax, [rbp+rax*4+arr]
                .text:00000000004014ED                 mov     esi, eax
                .text:00000000004014EF                 mov     edi, offset aD  ; "%d "
                .text:00000000004014F4                 mov     eax, 0
                .text:00000000004014F9                 call    _printf
                .text:00000000004014FE                 add     [rbp+i_0], 1
                .text:0000000000401503
                .text:0000000000401503 loc_401503:                             ; CODE XREF: main+C8↑j
                .text:0000000000401503                 mov     rax, [rbp+i_0]
                .text:0000000000401507                 cmp     rax, [rbp+n]
                .text:000000000040150B                 jb      short loc_4014E5
                .text:000000000040150D                 mov     edi, 0Ah        ; c
                .text:0000000000401512                 call    _putchar
                .text:0000000000401517                 mov     eax, 0
                .text:000000000040151C                 leave
                .text:000000000040151D                 retn
                .text:000000000040151D ; } // starts at 40141B
                .text:000000000040151D main            endp
                .text:000000000040151D
                .text:000000000040151D _text           ends
                .text:000000000040151D
                LOAD:000000000040151E ; ===========================================================================
                LOAD:000000000040151E
                LOAD:000000000040151E ; Segment type: Pure code
                LOAD:000000000040151E ; Segment permissions: Read/Execute
                LOAD:000000000040151E LOAD            segment mempage public 'CODE' use64
                LOAD:000000000040151E                 assume cs:LOAD
                LOAD:000000000040151E                 ;org 40151Eh
                LOAD:000000000040151E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                LOAD:000000000040151E                 align 20h
                LOAD:000000000040151E LOAD            ends
                LOAD:000000000040151E
                .fini:0000000000401520 ; ===========================================================================
                .fini:0000000000401520
                .fini:0000000000401520 ; Segment type: Pure code
                .fini:0000000000401520 ; Segment permissions: Read/Execute
                .fini:0000000000401520 _fini           segment dword public 'CODE' use64
                .fini:0000000000401520                 assume cs:_fini
                .fini:0000000000401520                 ;org 401520h
                .fini:0000000000401520                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .fini:0000000000401520
                .fini:0000000000401520 ; =============== S U B R O U T I N E =======================================
                .fini:0000000000401520
                .fini:0000000000401520
                .fini:0000000000401520                 public _term_proc
                .fini:0000000000401520 _term_proc      proc near
                .fini:0000000000401520                 endbr64                 ; _fini
                .fini:0000000000401524                 sub     rsp, 8
                .fini:0000000000401528                 add     rsp, 8
                .fini:000000000040152C                 retn
                .fini:000000000040152C _term_proc      endp
                .fini:000000000040152C
                .fini:000000000040152C _fini           ends
                .fini:000000000040152C
                .rodata:0000000000402000 ; ===========================================================================
                .rodata:0000000000402000
                .rodata:0000000000402000 ; Segment type: Pure data
                .rodata:0000000000402000 ; Segment permissions: Read
                .rodata:0000000000402000 _rodata         segment dword public 'CONST' use64
                .rodata:0000000000402000                 assume cs:_rodata
                .rodata:0000000000402000                 ;org 402000h
                .rodata:0000000000402000                 public _IO_stdin_used
                .rodata:0000000000402000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000400130↑o
                .rodata:0000000000402001                 db    0
                .rodata:0000000000402002                 db    2
                .rodata:0000000000402003                 db    0
                .rodata:0000000000402004 ; const char format
                .rodata:0000000000402004 format          db 0ECh                 ; DATA XREF: main+53↑o
                .rodata:0000000000402005                 db  9Bh
                .rodata:0000000000402006                 db  90h
                .rodata:0000000000402007                 db 0EBh
                .rodata:0000000000402008                 db 0B3h
                .rodata:0000000000402009                 db 0B8h
                .rodata:000000000040200A                 db  3Ah ; :
                .rodata:000000000040200B                 db  20h
                .rodata:000000000040200C                 db    0
                .rodata:000000000040200D ; const char aD[4]
                .rodata:000000000040200D aD              db '%d ',0              ; DATA XREF: main+76↑o
                .rodata:000000000040200D                                         ; main+D4↑o
                .rodata:0000000000402011 ; const char byte_402011
                .rodata:0000000000402011 byte_402011     db 0ECh                 ; DATA XREF: main+B1↑o
                .rodata:0000000000402012                 db 0A0h
                .rodata:0000000000402013                 db  95h
                .rodata:0000000000402014                 db 0EBh
                .rodata:0000000000402015                 db 0A0h
                .rodata:0000000000402016                 db 0ACh
                .rodata:0000000000402017                 db  20h
                .rodata:0000000000402018                 db 0EDh
                .rodata:0000000000402019                 db  9Bh
                .rodata:000000000040201A                 db  84h
                .rodata:000000000040201B                 db  3Ah ; :
                .rodata:000000000040201C                 db  20h
                .rodata:000000000040201D                 db    0
                .rodata:000000000040201D _rodata         ends
                .rodata:000000000040201D
                LOAD:000000000040201E ; ===========================================================================
                LOAD:000000000040201E
                LOAD:000000000040201E ; Segment type: Pure data
                LOAD:000000000040201E ; Segment permissions: Read
                LOAD:000000000040201E LOAD            segment mempage public 'DATA' use64
                LOAD:000000000040201E                 assume cs:LOAD
                LOAD:000000000040201E                 ;org 40201Eh
                LOAD:000000000040201E                 align 20h
                LOAD:000000000040201E LOAD            ends
                LOAD:000000000040201E
                .eh_frame_hdr:0000000000402020 ; ===========================================================================
                .eh_frame_hdr:0000000000402020
                .eh_frame_hdr:0000000000402020 ; Segment type: Pure data
                .eh_frame_hdr:0000000000402020 ; Segment permissions: Read
                .eh_frame_hdr:0000000000402020 _eh_frame_hdr   segment dword public 'CONST' use64
                .eh_frame_hdr:0000000000402020                 assume cs:_eh_frame_hdr
                .eh_frame_hdr:0000000000402020                 ;org 402020h
                .eh_frame_hdr:0000000000402020 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000400280↑o
                .eh_frame_hdr:0000000000402021                 db  1Bh
                .eh_frame_hdr:0000000000402022                 db    3
                .eh_frame_hdr:0000000000402023                 db  3Bh ; ;
                .eh_frame_hdr:0000000000402024                 db  3Ch ; <
                .eh_frame_hdr:0000000000402025                 db    0
                .eh_frame_hdr:0000000000402026                 db    0
                .eh_frame_hdr:0000000000402027                 db    0
                .eh_frame_hdr:0000000000402028                 db    6
                .eh_frame_hdr:0000000000402029                 db    0
                .eh_frame_hdr:000000000040202A                 db    0
                .eh_frame_hdr:000000000040202B                 db    0
                .eh_frame_hdr:000000000040202C                 db    0
                .eh_frame_hdr:000000000040202D                 db 0F0h
                .eh_frame_hdr:000000000040202E                 db 0FFh
                .eh_frame_hdr:000000000040202F                 db 0FFh
                .eh_frame_hdr:0000000000402030                 db  80h
                .eh_frame_hdr:0000000000402031                 db    0
                .eh_frame_hdr:0000000000402032                 db    0
                .eh_frame_hdr:0000000000402033                 db    0
                .eh_frame_hdr:0000000000402034                 db  30h ; 0
                .eh_frame_hdr:0000000000402035                 db 0F0h
                .eh_frame_hdr:0000000000402036                 db 0FFh
                .eh_frame_hdr:0000000000402037                 db 0FFh
                .eh_frame_hdr:0000000000402038                 db 0A8h
                .eh_frame_hdr:0000000000402039                 db    0
                .eh_frame_hdr:000000000040203A                 db    0
                .eh_frame_hdr:000000000040203B                 db    0
                .eh_frame_hdr:000000000040203C                 db  50h ; P
                .eh_frame_hdr:000000000040203D                 db 0F0h
                .eh_frame_hdr:000000000040203E                 db 0FFh
                .eh_frame_hdr:000000000040203F                 db 0FFh
                .eh_frame_hdr:0000000000402040                 db  58h ; X
                .eh_frame_hdr:0000000000402041                 db    0
                .eh_frame_hdr:0000000000402042                 db    0
                .eh_frame_hdr:0000000000402043                 db    0
                .eh_frame_hdr:0000000000402044                 db  80h
                .eh_frame_hdr:0000000000402045                 db 0F0h
                .eh_frame_hdr:0000000000402046                 db 0FFh
                .eh_frame_hdr:0000000000402047                 db 0FFh
                .eh_frame_hdr:0000000000402048                 db  6Ch ; l
                .eh_frame_hdr:0000000000402049                 db    0
                .eh_frame_hdr:000000000040204A                 db    0
                .eh_frame_hdr:000000000040204B                 db    0
                .eh_frame_hdr:000000000040204C                 db  36h ; 6
                .eh_frame_hdr:000000000040204D                 db 0F1h
                .eh_frame_hdr:000000000040204E                 db 0FFh
                .eh_frame_hdr:000000000040204F                 db 0FFh
                .eh_frame_hdr:0000000000402050                 db 0C0h
                .eh_frame_hdr:0000000000402051                 db    0
                .eh_frame_hdr:0000000000402052                 db    0
                .eh_frame_hdr:0000000000402053                 db    0
                .eh_frame_hdr:0000000000402054                 db 0FBh
                .eh_frame_hdr:0000000000402055                 db 0F3h
                .eh_frame_hdr:0000000000402056                 db 0FFh
                .eh_frame_hdr:0000000000402057                 db 0FFh
                .eh_frame_hdr:0000000000402058                 db 0E0h
                .eh_frame_hdr:0000000000402059                 db    0
                .eh_frame_hdr:000000000040205A                 db    0
                .eh_frame_hdr:000000000040205B                 db    0
                .eh_frame_hdr:000000000040205B _eh_frame_hdr   ends
                .eh_frame_hdr:000000000040205B
                LOAD:000000000040205C ; ===========================================================================
                LOAD:000000000040205C
                LOAD:000000000040205C ; Segment type: Pure data
                LOAD:000000000040205C ; Segment permissions: Read
                LOAD:000000000040205C LOAD            segment mempage public 'DATA' use64
                LOAD:000000000040205C                 assume cs:LOAD
                LOAD:000000000040205C                 ;org 40205Ch
                LOAD:000000000040205C                 align 20h
                LOAD:000000000040205C LOAD            ends
                LOAD:000000000040205C
                .eh_frame:0000000000402060 ; ===========================================================================
                .eh_frame:0000000000402060
                .eh_frame:0000000000402060 ; Segment type: Pure data
                .eh_frame:0000000000402060 ; Segment permissions: Read
                .eh_frame:0000000000402060 _eh_frame       segment qword public 'CONST' use64
                .eh_frame:0000000000402060                 assume cs:_eh_frame
                .eh_frame:0000000000402060                 ;org 402060h
                .eh_frame:0000000000402060                 db  14h
                .eh_frame:0000000000402061                 db    0
                .eh_frame:0000000000402062                 db    0
                .eh_frame:0000000000402063                 db    0
                .eh_frame:0000000000402064                 db    0
                .eh_frame:0000000000402065                 db    0
                .eh_frame:0000000000402066                 db    0
                .eh_frame:0000000000402067                 db    0
                .eh_frame:0000000000402068                 db    1
                .eh_frame:0000000000402069                 db  7Ah ; z
                .eh_frame:000000000040206A                 db  52h ; R
                .eh_frame:000000000040206B                 db    0
                .eh_frame:000000000040206C                 db    1
                .eh_frame:000000000040206D                 db  78h ; x
                .eh_frame:000000000040206E                 db  10h
                .eh_frame:000000000040206F                 db    1
                .eh_frame:0000000000402070                 db  1Bh
                .eh_frame:0000000000402071                 db  0Ch
                .eh_frame:0000000000402072                 db    7
                .eh_frame:0000000000402073                 db    8
                .eh_frame:0000000000402074                 db  90h
                .eh_frame:0000000000402075                 db    1
                .eh_frame:0000000000402076                 db    0
                .eh_frame:0000000000402077                 db    0
                .eh_frame:0000000000402078                 db  10h
                .eh_frame:0000000000402079                 db    0
                .eh_frame:000000000040207A                 db    0
                .eh_frame:000000000040207B                 db    0
                .eh_frame:000000000040207C                 db  1Ch
                .eh_frame:000000000040207D                 db    0
                .eh_frame:000000000040207E                 db    0
                .eh_frame:000000000040207F                 db    0
                .eh_frame:0000000000402080                 db 0F0h
                .eh_frame:0000000000402081                 db 0EFh
                .eh_frame:0000000000402082                 db 0FFh
                .eh_frame:0000000000402083                 db 0FFh
                .eh_frame:0000000000402084                 db  26h ; &
                .eh_frame:0000000000402085                 db    0
                .eh_frame:0000000000402086                 db    0
                .eh_frame:0000000000402087                 db    0
                .eh_frame:0000000000402088                 db    0
                .eh_frame:0000000000402089                 db  44h ; D
                .eh_frame:000000000040208A                 db    7
                .eh_frame:000000000040208B                 db  10h
                .eh_frame:000000000040208C                 db  10h
                .eh_frame:000000000040208D                 db    0
                .eh_frame:000000000040208E                 db    0
                .eh_frame:000000000040208F                 db    0
                .eh_frame:0000000000402090                 db  30h ; 0
                .eh_frame:0000000000402091                 db    0
                .eh_frame:0000000000402092                 db    0
                .eh_frame:0000000000402093                 db    0
                .eh_frame:0000000000402094                 db  0Ch
                .eh_frame:0000000000402095                 db 0F0h
                .eh_frame:0000000000402096                 db 0FFh
                .eh_frame:0000000000402097                 db 0FFh
                .eh_frame:0000000000402098                 db    5
                .eh_frame:0000000000402099                 db    0
                .eh_frame:000000000040209A                 db    0
                .eh_frame:000000000040209B                 db    0
                .eh_frame:000000000040209C                 db    0
                .eh_frame:000000000040209D                 db    0
                .eh_frame:000000000040209E                 db    0
                .eh_frame:000000000040209F                 db    0
                .eh_frame:00000000004020A0                 db  24h ; $
                .eh_frame:00000000004020A1                 db    0
                .eh_frame:00000000004020A2                 db    0
                .eh_frame:00000000004020A3                 db    0
                .eh_frame:00000000004020A4                 db  44h ; D
                .eh_frame:00000000004020A5                 db    0
                .eh_frame:00000000004020A6                 db    0
                .eh_frame:00000000004020A7                 db    0
                .eh_frame:00000000004020A8                 db  78h ; x
                .eh_frame:00000000004020A9                 db 0EFh
                .eh_frame:00000000004020AA                 db 0FFh
                .eh_frame:00000000004020AB                 db 0FFh
                .eh_frame:00000000004020AC                 db  30h ; 0
                .eh_frame:00000000004020AD                 db    0
                .eh_frame:00000000004020AE                 db    0
                .eh_frame:00000000004020AF                 db    0
                .eh_frame:00000000004020B0                 db    0
                .eh_frame:00000000004020B1                 db  0Eh
                .eh_frame:00000000004020B2                 db  10h
                .eh_frame:00000000004020B3                 db  46h ; F
                .eh_frame:00000000004020B4                 db  0Eh
                .eh_frame:00000000004020B5                 db  18h
                .eh_frame:00000000004020B6                 db  4Ah ; J
                .eh_frame:00000000004020B7                 db  0Fh
                .eh_frame:00000000004020B8                 db  0Bh
                .eh_frame:00000000004020B9                 db  77h ; w
                .eh_frame:00000000004020BA                 db    8
                .eh_frame:00000000004020BB                 db  80h
                .eh_frame:00000000004020BC                 db    0
                .eh_frame:00000000004020BD                 db  3Fh ; ?
                .eh_frame:00000000004020BE                 db  1Ah
                .eh_frame:00000000004020BF                 db  3Ah ; :
                .eh_frame:00000000004020C0                 db  2Ah ; *
                .eh_frame:00000000004020C1                 db  33h ; 3
                .eh_frame:00000000004020C2                 db  24h ; $
                .eh_frame:00000000004020C3                 db  22h ; "
                .eh_frame:00000000004020C4                 db    0
                .eh_frame:00000000004020C5                 db    0
                .eh_frame:00000000004020C6                 db    0
                .eh_frame:00000000004020C7                 db    0
                .eh_frame:00000000004020C8                 db  14h
                .eh_frame:00000000004020C9                 db    0
                .eh_frame:00000000004020CA                 db    0
                .eh_frame:00000000004020CB                 db    0
                .eh_frame:00000000004020CC                 db  6Ch ; l
                .eh_frame:00000000004020CD                 db    0
                .eh_frame:00000000004020CE                 db    0
                .eh_frame:00000000004020CF                 db    0
                .eh_frame:00000000004020D0                 db  80h
                .eh_frame:00000000004020D1                 db 0EFh
                .eh_frame:00000000004020D2                 db 0FFh
                .eh_frame:00000000004020D3                 db 0FFh
                .eh_frame:00000000004020D4                 db  20h
                .eh_frame:00000000004020D5                 db    0
                .eh_frame:00000000004020D6                 db    0
                .eh_frame:00000000004020D7                 db    0
                .eh_frame:00000000004020D8                 db    0
                .eh_frame:00000000004020D9                 db    0
                .eh_frame:00000000004020DA                 db    0
                .eh_frame:00000000004020DB                 db    0
                .eh_frame:00000000004020DC                 db    0
                .eh_frame:00000000004020DD                 db    0
                .eh_frame:00000000004020DE                 db    0
                .eh_frame:00000000004020DF                 db    0
                .eh_frame:00000000004020E0                 db  1Ch
                .eh_frame:00000000004020E1                 db    0
                .eh_frame:00000000004020E2                 db    0
                .eh_frame:00000000004020E3                 db    0
                .eh_frame:00000000004020E4                 db  84h
                .eh_frame:00000000004020E5                 db    0
                .eh_frame:00000000004020E6                 db    0
                .eh_frame:00000000004020E7                 db    0
                .eh_frame:00000000004020E8                 db  6Eh ; n
                .eh_frame:00000000004020E9                 db 0F0h
                .eh_frame:00000000004020EA                 db 0FFh
                .eh_frame:00000000004020EB                 db 0FFh
                .eh_frame:00000000004020EC                 db 0C5h
                .eh_frame:00000000004020ED                 db    2
                .eh_frame:00000000004020EE                 db    0
                .eh_frame:00000000004020EF                 db    0
                .eh_frame:00000000004020F0                 db    0
                .eh_frame:00000000004020F1                 db  45h ; E
                .eh_frame:00000000004020F2                 db  0Eh
                .eh_frame:00000000004020F3                 db  10h
                .eh_frame:00000000004020F4                 db  86h
                .eh_frame:00000000004020F5                 db    2
                .eh_frame:00000000004020F6                 db  43h ; C
                .eh_frame:00000000004020F7                 db  0Dh
                .eh_frame:00000000004020F8                 db    6
                .eh_frame:00000000004020F9                 db    3
                .eh_frame:00000000004020FA                 db 0BCh
                .eh_frame:00000000004020FB                 db    2
                .eh_frame:00000000004020FC                 db  0Ch
                .eh_frame:00000000004020FD                 db    7
                .eh_frame:00000000004020FE                 db    8
                .eh_frame:00000000004020FF                 db    0
                .eh_frame:0000000000402100                 db  1Ch
                .eh_frame:0000000000402101                 db    0
                .eh_frame:0000000000402102                 db    0
                .eh_frame:0000000000402103                 db    0
                .eh_frame:0000000000402104                 db 0A4h
                .eh_frame:0000000000402105                 db    0
                .eh_frame:0000000000402106                 db    0
                .eh_frame:0000000000402107                 db    0
                .eh_frame:0000000000402108                 db  13h
                .eh_frame:0000000000402109                 db 0F3h
                .eh_frame:000000000040210A                 db 0FFh
                .eh_frame:000000000040210B                 db 0FFh
                .eh_frame:000000000040210C                 db    3
                .eh_frame:000000000040210D                 db    1
                .eh_frame:000000000040210E                 db    0
                .eh_frame:000000000040210F                 db    0
                .eh_frame:0000000000402110                 db    0
                .eh_frame:0000000000402111                 db  45h ; E
                .eh_frame:0000000000402112                 db  0Eh
                .eh_frame:0000000000402113                 db  10h
                .eh_frame:0000000000402114                 db  86h
                .eh_frame:0000000000402115                 db    2
                .eh_frame:0000000000402116                 db  43h ; C
                .eh_frame:0000000000402117                 db  0Dh
                .eh_frame:0000000000402118                 db    6
                .eh_frame:0000000000402119                 db    2
                .eh_frame:000000000040211A                 db 0FAh
                .eh_frame:000000000040211B                 db  0Ch
                .eh_frame:000000000040211C                 db    7
                .eh_frame:000000000040211D                 db    8
                .eh_frame:000000000040211E                 db    0
                .eh_frame:000000000040211F                 db    0
                .eh_frame:0000000000402120 __FRAME_END__   db    0
                .eh_frame:0000000000402121                 db    0
                .eh_frame:0000000000402122                 db    0
                .eh_frame:0000000000402123                 db    0
                .eh_frame:0000000000402123 _eh_frame       ends
                .eh_frame:0000000000402123
                .init_array:0000000000403E10 ; ELF Initialization Function Table
                .init_array:0000000000403E10 ; ===========================================================================
                .init_array:0000000000403E10
                .init_array:0000000000403E10 ; Segment type: Pure data
                .init_array:0000000000403E10 ; Segment permissions: Read/Write
                .init_array:0000000000403E10 _init_array     segment qword public 'DATA' use64
                .init_array:0000000000403E10                 assume cs:_init_array
                .init_array:0000000000403E10                 ;org 403E10h
                .init_array:0000000000403E10 __frame_dummy_init_array_entry dq offset frame_dummy
                .init_array:0000000000403E10                                         ; DATA XREF: LOAD:0000000000400168↑o
                .init_array:0000000000403E10                                         ; LOAD:00000000004002F0↑o
                .init_array:0000000000403E10 _init_array     ends
                .init_array:0000000000403E10
                .fini_array:0000000000403E18 ; ELF Termination Function Table
                .fini_array:0000000000403E18 ; ===========================================================================
                .fini_array:0000000000403E18
                .fini_array:0000000000403E18 ; Segment type: Pure data
                .fini_array:0000000000403E18 ; Segment permissions: Read/Write
                .fini_array:0000000000403E18 _fini_array     segment qword public 'DATA' use64
                .fini_array:0000000000403E18                 assume cs:_fini_array
                .fini_array:0000000000403E18                 ;org 403E18h
                .fini_array:0000000000403E18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                .fini_array:0000000000403E18 _fini_array     ends
                .fini_array:0000000000403E18
                LOAD:0000000000403E20 ; ELF Dynamic Information
                LOAD:0000000000403E20 ; ===========================================================================
                LOAD:0000000000403E20
                LOAD:0000000000403E20 ; Segment type: Pure data
                LOAD:0000000000403E20 ; Segment permissions: Read/Write
                LOAD:0000000000403E20 LOAD            segment mempage public 'DATA' use64
                LOAD:0000000000403E20                 assume cs:LOAD
                LOAD:0000000000403E20                 ;org 403E20h
                LOAD:0000000000403E20 _DYNAMIC        Elf64_Dyn <1, 22h>      ; DATA XREF: LOAD:00000000004001A0↑o
                LOAD:0000000000403E20                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o
                LOAD:0000000000403E20                                         ; DT_NEEDED libc.so.6
                LOAD:0000000000403E30                 Elf64_Dyn <0Ch, 401000h> ; DT_INIT
                LOAD:0000000000403E40                 Elf64_Dyn <0Dh, 401520h> ; DT_FINI
                LOAD:0000000000403E50                 Elf64_Dyn <19h, 403E10h> ; DT_INIT_ARRAY
                LOAD:0000000000403E60                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                LOAD:0000000000403E70                 Elf64_Dyn <1Ah, 403E18h> ; DT_FINI_ARRAY
                LOAD:0000000000403E80                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                LOAD:0000000000403E90                 Elf64_Dyn <6FFFFEF5h, 4003B0h> ; DT_GNU_HASH
                LOAD:0000000000403EA0                 Elf64_Dyn <5, 400448h>  ; DT_STRTAB
                LOAD:0000000000403EB0                 Elf64_Dyn <6, 4003D0h>  ; DT_SYMTAB
                LOAD:0000000000403EC0                 Elf64_Dyn <0Ah, 52h>    ; DT_STRSZ
                LOAD:0000000000403ED0                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                LOAD:0000000000403EE0                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                LOAD:0000000000403EF0                 Elf64_Dyn <3, 404000h>  ; DT_PLTGOT
                LOAD:0000000000403F00                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                LOAD:0000000000403F10                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                LOAD:0000000000403F20                 Elf64_Dyn <17h, 400508h> ; DT_JMPREL
                LOAD:0000000000403F30                 Elf64_Dyn <7, 4004D8h>  ; DT_RELA
                LOAD:0000000000403F40                 Elf64_Dyn <8, 30h>      ; DT_RELASZ
                LOAD:0000000000403F50                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                LOAD:0000000000403F60                 Elf64_Dyn <6FFFFFFEh, 4004A8h> ; DT_VERNEED
                LOAD:0000000000403F70                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                LOAD:0000000000403F80                 Elf64_Dyn <6FFFFFF0h, 40049Ah> ; DT_VERSYM
                LOAD:0000000000403F90                 Elf64_Dyn <0>           ; DT_NULL
                LOAD:0000000000403FA0                 db    0
                LOAD:0000000000403FA1                 db    0
                LOAD:0000000000403FA2                 db    0
                LOAD:0000000000403FA3                 db    0
                LOAD:0000000000403FA4                 db    0
                LOAD:0000000000403FA5                 db    0
                LOAD:0000000000403FA6                 db    0
                LOAD:0000000000403FA7                 db    0
                LOAD:0000000000403FA8                 db    0
                LOAD:0000000000403FA9                 db    0
                LOAD:0000000000403FAA                 db    0
                LOAD:0000000000403FAB                 db    0
                LOAD:0000000000403FAC                 db    0
                LOAD:0000000000403FAD                 db    0
                LOAD:0000000000403FAE                 db    0
                LOAD:0000000000403FAF                 db    0
                LOAD:0000000000403FB0                 db    0
                LOAD:0000000000403FB1                 db    0
                LOAD:0000000000403FB2                 db    0
                LOAD:0000000000403FB3                 db    0
                LOAD:0000000000403FB4                 db    0
                LOAD:0000000000403FB5                 db    0
                LOAD:0000000000403FB6                 db    0
                LOAD:0000000000403FB7                 db    0
                LOAD:0000000000403FB8                 db    0
                LOAD:0000000000403FB9                 db    0
                LOAD:0000000000403FBA                 db    0
                LOAD:0000000000403FBB                 db    0
                LOAD:0000000000403FBC                 db    0
                LOAD:0000000000403FBD                 db    0
                LOAD:0000000000403FBE                 db    0
                LOAD:0000000000403FBF                 db    0
                LOAD:0000000000403FC0                 db    0
                LOAD:0000000000403FC1                 db    0
                LOAD:0000000000403FC2                 db    0
                LOAD:0000000000403FC3                 db    0
                LOAD:0000000000403FC4                 db    0
                LOAD:0000000000403FC5                 db    0
                LOAD:0000000000403FC6                 db    0
                LOAD:0000000000403FC7                 db    0
                LOAD:0000000000403FC8                 db    0
                LOAD:0000000000403FC9                 db    0
                LOAD:0000000000403FCA                 db    0
                LOAD:0000000000403FCB                 db    0
                LOAD:0000000000403FCC                 db    0
                LOAD:0000000000403FCD                 db    0
                LOAD:0000000000403FCE                 db    0
                LOAD:0000000000403FCF                 db    0
                LOAD:0000000000403FD0                 db    0
                LOAD:0000000000403FD1                 db    0
                LOAD:0000000000403FD2                 db    0
                LOAD:0000000000403FD3                 db    0
                LOAD:0000000000403FD4                 db    0
                LOAD:0000000000403FD5                 db    0
                LOAD:0000000000403FD6                 db    0
                LOAD:0000000000403FD7                 db    0
                LOAD:0000000000403FD8                 db    0
                LOAD:0000000000403FD9                 db    0
                LOAD:0000000000403FDA                 db    0
                LOAD:0000000000403FDB                 db    0
                LOAD:0000000000403FDC                 db    0
                LOAD:0000000000403FDD                 db    0
                LOAD:0000000000403FDE                 db    0
                LOAD:0000000000403FDF                 db    0
                LOAD:0000000000403FE0                 db    0
                LOAD:0000000000403FE1                 db    0
                LOAD:0000000000403FE2                 db    0
                LOAD:0000000000403FE3                 db    0
                LOAD:0000000000403FE4                 db    0
                LOAD:0000000000403FE5                 db    0
                LOAD:0000000000403FE6                 db    0
                LOAD:0000000000403FE7                 db    0
                LOAD:0000000000403FE8                 db    0
                LOAD:0000000000403FE9                 db    0
                LOAD:0000000000403FEA                 db    0
                LOAD:0000000000403FEB                 db    0
                LOAD:0000000000403FEC                 db    0
                LOAD:0000000000403FED                 db    0
                LOAD:0000000000403FEE                 db    0
                LOAD:0000000000403FEF                 db    0
                LOAD:0000000000403FEF LOAD            ends
                LOAD:0000000000403FEF
                .got:0000000000403FF0 ; ===========================================================================
                .got:0000000000403FF0
                .got:0000000000403FF0 ; Segment type: Pure data
                .got:0000000000403FF0 ; Segment permissions: Read/Write
                .got:0000000000403FF0 _got            segment qword public 'DATA' use64
                .got:0000000000403FF0                 assume cs:_got
                .got:0000000000403FF0                 ;org 403FF0h
                .got:0000000000403FF0 __libc_start_main_ptr dq offset __libc_start_main
                .got:0000000000403FF0                                         ; DATA XREF: _start+1F↑r
                .got:0000000000403FF8 __gmon_start___ptr dq offset __gmon_start__
                .got:0000000000403FF8                                         ; DATA XREF: _init_proc+8↑r
                .got:0000000000403FF8 _got            ends
                .got:0000000000403FF8
                .got.plt:0000000000404000 ; ===========================================================================
                .got.plt:0000000000404000
                .got.plt:0000000000404000 ; Segment type: Pure data
                .got.plt:0000000000404000 ; Segment permissions: Read/Write
                .got.plt:0000000000404000 _got_plt        segment qword public 'DATA' use64
                .got.plt:0000000000404000                 assume cs:_got_plt
                .got.plt:0000000000404000                 ;org 404000h
                .got.plt:0000000000404000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                .got.plt:0000000000404008 qword_404008    dq 0                    ; DATA XREF: sub_401020↑r
                .got.plt:0000000000404010 qword_404010    dq 0                    ; DATA XREF: sub_401020+6↑r
                .got.plt:0000000000404018 off_404018      dq offset putchar       ; DATA XREF: _putchar+4↑r
                .got.plt:0000000000404020 off_404020      dq offset printf        ; DATA XREF: _printf+4↑r
                .got.plt:0000000000404020 _got_plt        ends
                .got.plt:0000000000404020
                .data:0000000000404028 ; ===========================================================================
                .data:0000000000404028
                .data:0000000000404028 ; Segment type: Pure data
                .data:0000000000404028 ; Segment permissions: Read/Write
                .data:0000000000404028 _data           segment qword public 'DATA' use64
                .data:0000000000404028                 assume cs:_data
                .data:0000000000404028                 ;org 404028h
                .data:0000000000404028                 public __data_start ; weak
                .data:0000000000404028 __data_start    db    0                 ; Alternative name is '__data_start'
                .data:0000000000404028                                         ; data_start
                .data:0000000000404029                 db    0
                .data:000000000040402A                 db    0
                .data:000000000040402B                 db    0
                .data:000000000040402C                 db    0
                .data:000000000040402D                 db    0
                .data:000000000040402E                 db    0
                .data:000000000040402F                 db    0
                .data:0000000000404030                 public __dso_handle
                .data:0000000000404030 __dso_handle    db    0
                .data:0000000000404031                 db    0
                .data:0000000000404032                 db    0
                .data:0000000000404033                 db    0
                .data:0000000000404034                 db    0
                .data:0000000000404035                 db    0
                .data:0000000000404036                 db    0
                .data:0000000000404037                 db    0
                .data:0000000000404037 _data           ends
                .data:0000000000404037
                .bss:0000000000404038 ; ===========================================================================
                .bss:0000000000404038
                .bss:0000000000404038 ; Segment type: Uninitialized
                .bss:0000000000404038 ; Segment permissions: Read/Write
                .bss:0000000000404038 _bss            segment byte public 'BSS' use64
                .bss:0000000000404038                 assume cs:_bss
                .bss:0000000000404038                 ;org 404038h
                .bss:0000000000404038                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                .bss:0000000000404038                 public __bss_start
                .bss:0000000000404038 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                .bss:0000000000404038                                         ; deregister_tm_clones+5↑o ...
                .bss:0000000000404038                                         ; Alternative name is '__TMC_END__'
                .bss:0000000000404038                                         ; completed.0
                .bss:0000000000404038                                         ; _edata
                .bss:0000000000404039                 align 20h
                .bss:0000000000404039 _bss            ends
                .bss:0000000000404039
                .prgend:0000000000404040 ; ===========================================================================
                .prgend:0000000000404040
                .prgend:0000000000404040 ; Segment type: Zero-length
                .prgend:0000000000404040 _prgend         segment byte public '' use64
                .prgend:0000000000404040 _end            label byte
                .prgend:0000000000404040 _prgend         ends
                .prgend:0000000000404040
                extern:0000000000404048 ; ===========================================================================
                extern:0000000000404048
                extern:0000000000404048 ; Segment type: Externs
                extern:0000000000404048 ; extern
                extern:0000000000404048 ; int putchar(int c)
                extern:0000000000404048                 extrn putchar:near      ; CODE XREF: _putchar+4↑j
                extern:0000000000404048                                         ; DATA XREF: .got.plt:off_404018↑o
                extern:0000000000404050 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                extern:0000000000404050                 extrn __libc_start_main:near
                extern:0000000000404050                                         ; CODE XREF: _start+1F↑p
                extern:0000000000404050                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                extern:0000000000404058 ; int printf(const char *format, ...)
                extern:0000000000404058                 extrn printf:near       ; CODE XREF: _printf+4↑j
                extern:0000000000404058                                         ; DATA XREF: .got.plt:off_404020↑o
                extern:0000000000404060                 extrn __gmon_start__:near ; weak
                extern:0000000000404060                                         ; CODE XREF: _init_proc+14↑p
                extern:0000000000404060                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                extern:0000000000404060
                extern:0000000000404060
                extern:0000000000404060                 end _start
                ```
                
            - chatGPT1
                
                ```python
                ; main (typed pointers for LLVM 14)
                target triple = "x86_64-unknown-linux-gnu"
                
                @.str.orig   = private unnamed_addr constant [9  x i8]  c"\EC\9B\90\EB\B3\B8: \00",           align 1 ; "원본: "
                @.str.sorted = private unnamed_addr constant [13 x i8]  c"\EC\A0\95\EB\A0\AC \ED\9B\84: \00", align 1 ; "정렬 후: "
                @.str.d      = private unnamed_addr constant [4  x i8]  c"%d \00",                              align 1
                
                declare i32 @printf(i8*, ...)
                declare i32 @putchar(i32)
                declare void @heap_sort(i32* %a, i64 %n)
                
                define i32 @main(i32 %argc, i8** %argv) {
                entry:
                  %arr = alloca [9 x i32], align 16
                  %n   = alloca i64, align 8
                  %i   = alloca i64, align 8
                  %i2  = alloca i64, align 8
                
                  ; 문자열 포인터들은 entry에서 한 번만 만듦(모든 사용을 지배)
                  %fmt1  = getelementptr inbounds [9  x i8],  [9  x i8]*  @.str.orig,   i64 0, i64 0
                  %fmt2  = getelementptr inbounds [13 x i8],  [13 x i8]* @.str.sorted, i64 0, i64 0
                  %fmt_d = getelementptr inbounds [4  x i8],  [4  x i8]*  @.str.d,      i64 0, i64 0
                
                  ; arr 초기화: {7,3,9,1,4,8,2,6,5}
                  %arr0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
                  store i32 7, i32* %arr0, align 4
                  %p1 = getelementptr inbounds i32, i32* %arr0, i64 1
                  store i32 3, i32* %p1,  align 4
                  %p2 = getelementptr inbounds i32, i32* %arr0, i64 2
                  store i32 9, i32* %p2,  align 4
                  %p3 = getelementptr inbounds i32, i32* %arr0, i64 3
                  store i32 1, i32* %p3,  align 4
                  %p4 = getelementptr inbounds i32, i32* %arr0, i64 4
                  store i32 4, i32* %p4,  align 4
                  %p5 = getelementptr inbounds i32, i32* %arr0, i64 5
                  store i32 8, i32* %p5,  align 4
                  %p6 = getelementptr inbounds i32, i32* %arr0, i64 6
                  store i32 2, i32* %p6,  align 4
                  %p7 = getelementptr inbounds i32, i32* %arr0, i64 7
                  store i32 6, i32* %p7,  align 4
                  %p8 = getelementptr inbounds i32, i32* %arr0, i64 8
                  store i32 5, i32* %p8,  align 4
                
                  store i64 9, i64* %n, align 8
                
                  ; printf("원본: ")
                  call i32 (i8*, ...) @printf(i8* %fmt1)
                
                  ; for (i=0; i<n; ++i) printf("%d ", arr[i]);
                  store i64 0, i64* %i, align 8
                  br label %loop1.cond
                
                loop1.cond:
                  %i.val = load i64, i64* %i, align 8
                  %n.val = load i64, i64* %n, align 8
                  %cmp   = icmp ult i64 %i.val, %n.val
                  br i1 %cmp, label %loop1.body, label %loop1.end
                
                loop1.body:
                  %elem.ptr = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %i.val
                  %elem     = load i32, i32* %elem.ptr, align 4
                  call i32 (i8*, ...) @printf(i8* %fmt_d, i32 %elem)
                  %inc = add i64 %i.val, 1
                  store i64 %inc, i64* %i, align 8
                  br label %loop1.cond
                
                loop1.end:
                  call i32 @putchar(i32 10) ; '\n'
                
                  ; heap_sort(arr, n)
                  %n2 = load i64, i64* %n, align 8
                  call void @heap_sort(i32* %arr0, i64 %n2)
                
                  ; printf("정렬 후: ")
                  call i32 (i8*, ...) @printf(i8* %fmt2)
                
                  ; for (i2=0; i<n; ++i2) printf("%d ", arr[i2]);
                  store i64 0, i64* %i2, align 8
                  br label %loop2.cond
                
                loop2.cond:
                  %i2.val = load i64, i64* %i2, align 8
                  %n3     = load i64, i64* %n,  align 8
                  %cmp2   = icmp ult i64 %i2.val, %n3
                  br i1 %cmp2, label %loop2.body, label %loop2.end
                
                loop2.body:
                  %elem2.ptr = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %i2.val
                  %elem2     = load i32, i32* %elem2.ptr, align 4
                  call i32 (i8*, ...) @printf(i8* %fmt_d, i32 %elem2)
                  %inc2 = add i64 %i2.val, 1
                  store i64 %inc2, i64* %i2, align 8
                  br label %loop2.cond
                
                loop2.end:
                  call i32 @putchar(i32 10) ; '\n'
                  ret i32 0
                }
                
                ```
                
            - chatGPT2
                
                ```python
                ; ModuleID = 'main'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; Symbol: main ; Address: 0x40141B
                ; Intent: demo/driver that prints an int array, calls heap_sort(a, n), then prints the sorted array (confidence=0.93). Evidence: stack-local 9-element int array initialized with {7,3,9,1,4,8,2,6,5}, two printf-loops around a call to heap_sort, newline via putchar.
                ; Preconditions: The C library shims @_printf and @_putchar are modeled as canonical calls. Read-only strings expected at 0x402004 ("prefix #1"), 0x40200D ("%d "), 0x402011 ("prefix #2") within %MEM.
                ; Postconditions: Returns 0 in RAX; observable effects are the two prints and the in-place sort performed by @heap_sort on the provided array memory.
                
                %Regs = type {
                i64, i64, i64, i64, i64, i64, i64, i64,
                i64, i64, i64, i64, i64, i64, i64, i64,
                i64, i1, i1, i1, i1, i1, i1, i1
                }
                
                declare void @llvm.trap()
                
                ; canonical interface for callees referenced by this function
                declare dso_local void @heap_sort(i8* nocapture, %Regs* nocapture) local_unnamed_addr
                declare dso_local void @_printf(i8* nocapture, %Regs* nocapture) local_unnamed_addr
                declare dso_local void @_putchar(i8* nocapture, %Regs* nocapture) local_unnamed_addr
                
                define dso_local void @main(i8* nocapture %MEM, %Regs* nocapture %S) local_unnamed_addr {
                entry:
                ; -------- load commonly used register fields --------
                %RAX.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 0
                %RBX.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 1
                %RCX.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 2
                %RDX.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 3
                %RSI.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 4
                %RDI.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 5
                %RBP.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 6
                %RSP.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 7
                %RSP0 = load i64, i64* %RSP.p, align 8
                
                ; -------- synthesize space for the local array below current RSP (no actual prologue modeled) --------
                ; int arr[9] lives at (RSP0 - 0x40)
                %arr.addr = add i64 %RSP0, -64
                %arr.base.i8 = getelementptr inbounds i8, i8* %MEM, i64 %arr.addr
                %arr.base = bitcast i8* %arr.base.i8 to i32*
                
                ; initialize arr with {7,3,9,1,4,8,2,6,5}
                %p0 = getelementptr inbounds i32, i32* %arr.base, i64 0
                store i32 7, i32* %p0, align 4
                %p1 = getelementptr inbounds i32, i32* %arr.base, i64 1
                store i32 3, i32* %p1, align 4
                %p2 = getelementptr inbounds i32, i32* %arr.base, i64 2
                store i32 9, i32* %p2, align 4
                %p3 = getelementptr inbounds i32, i32* %arr.base, i64 3
                store i32 1, i32* %p3, align 4
                %p4 = getelementptr inbounds i32, i32* %arr.base, i64 4
                store i32 4, i32* %p4, align 4
                %p5 = getelementptr inbounds i32, i32* %arr.base, i64 5
                store i32 8, i32* %p5, align 4
                %p6 = getelementptr inbounds i32, i32* %arr.base, i64 6
                store i32 2, i32* %p6, align 4
                %p7 = getelementptr inbounds i32, i32* %arr.base, i64 7
                store i32 6, i32* %p7, align 4
                %p8 = getelementptr inbounds i32, i32* %arr.base, i64 8
                store i32 5, i32* %p8, align 4
                
                ; n = 9 (size_t)
                %n = add i64 0, 9
                
                ; printf(prefix #1) (RDI = 0x402004, EAX = 0)
                store i64 0, i64* %RAX.p, align 8
                store i64 4202500, i64* %RDI.p, align 8 ; 0x402004
                call void @_printf(i8* %MEM, %Regs* %S)
                
                ; for (i = 0; i < n; ++i) printf("%d ", arr[i]);
                br label %print1.loop
                
                print1.loop:
                %i0 = phi i64 [ 0, %entry ], [ %i0.next, %print1.body ]
                %cond0 = icmp ult i64 %i0, %n
                br i1 %cond0, label %print1.body, label %after.print1
                
                print1.body:
                %elem.ptr0 = getelementptr inbounds i32, i32* %arr.base, i64 %i0
                %elem0 = load i32, i32* %elem.ptr0, align 4
                %elem0.sext = sext i32 %elem0 to i64
                store i64 0, i64* %RAX.p, align 8
                store i64 4202509, i64* %RDI.p, align 8 ; 0x40200D -> "%d "
                store i64 %elem0.sext, i64* %RSI.p, align 8
                call void @_printf(i8* %MEM, %Regs* %S)
                %i0.next = add i64 %i0, 1
                br label %print1.loop
                
                after.print1:
                ; putchar('\n') (RDI = 10)
                store i64 10, i64* %RDI.p, align 8
                call void @_putchar(i8* %MEM, %Regs* %S)
                
                ; heap_sort(arr, n) — RDI=a, RSI=n
                store i64 %arr.addr, i64* %RDI.p, align 8
                store i64 %n, i64* %RSI.p, align 8
                call void @heap_sort(i8* %MEM, %Regs* %S)
                
                ; printf(prefix #2)
                store i64 0, i64* %RAX.p, align 8
                store i64 4202513, i64* %RDI.p, align 8 ; 0x402011
                call void @_printf(i8* %MEM, %Regs* %S)
                
                ; for (i = 0; i < n; ++i) printf("%d ", arr[i]);
                br label %print2.loop
                
                print2.loop:
                %i1 = phi i64 [ 0, %after.print1 ], [ %i1.next, %print2.body ]
                %cond1 = icmp ult i64 %i1, %n
                br i1 %cond1, label %print2.body, label %after.print2
                
                print2.body:
                %elem.ptr1 = getelementptr inbounds i32, i32* %arr.base, i64 %i1
                %elem1 = load i32, i32* %elem.ptr1, align 4
                %elem1.sext = sext i32 %elem1 to i64
                store i64 0, i64* %RAX.p, align 8
                store i64 4202509, i64* %RDI.p, align 8 ; 0x40200D -> "%d "
                store i64 %elem1.sext, i64* %RSI.p, align 8
                call void @_printf(i8* %MEM, %Regs* %S)
                %i1.next = add i64 %i1, 1
                br label %print2.loop
                
                after.print2:
                ; putchar('\n')
                store i64 10, i64* %RDI.p, align 8
                call void @_putchar(i8* %MEM, %Regs* %S)
                
                ; return 0;
                store i64 0, i64* %RAX.p, align 8
                
                ; standard epilogue: RIP=[RSP], RSP+=8
                %RSP.now = load i64, i64* %RSP.p, align 8
                %retaddr.i8 = getelementptr inbounds i8, i8* %MEM, i64 %RSP.now
                %retaddr.p = bitcast i8* %retaddr.i8 to i64*
                %retaddr = load i64, i64* %retaddr.p, align 8
                %RIP.p = getelementptr inbounds %Regs, %Regs* %S, i32 0, i32 16
                store i64 %retaddr, i64* %RIP.p, align 8
                %RSP.next = add i64 %RSP.now, 8
                store i64 %RSP.next, i64* %RSP.p, align 8
                ret void
                }
                ```
                
            - chatGPT3
                
                ```python
                ; ModuleID = 'main'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; Symbol: main ; Address: 0x40141B
                ; Intent: Print an i32 array before and after in-place heapsort (confidence=0.95). Evidence: stack array init, two print loops with "%d ", newline via putchar, call to heap_sort(a,n).
                ; Preconditions: heap_sort is available as void @heap_sort(i32*, i64).
                ; Postconditions: Returns 0 after printing unsorted and sorted arrays.
                
                ; Only the needed extern declarations:
                declare i32 @printf(i8*, ...)
                declare i32 @putchar(i32)
                declare void @heap_sort(i32*, i64)
                
                @.str_before = private unnamed_addr constant [9 x i8] c"Before: \00"
                @.str_after = private unnamed_addr constant [8 x i8] c"After: \00"
                @.fmt_d = private unnamed_addr constant [4 x i8] c"%d \00"
                
                define dso_local i32 @main(i32 %argc, i8** %argv) {
                entry:
                %arr = alloca [9 x i32], align 16
                %p0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
                store i32 7, i32* %p0, align 4
                %p1 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 1
                store i32 3, i32* %p1, align 4
                %p2 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 2
                store i32 9, i32* %p2, align 4
                %p3 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 3
                store i32 1, i32* %p3, align 4
                %p4 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 4
                store i32 4, i32* %p4, align 4
                %p5 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 5
                store i32 8, i32* %p5, align 4
                %p6 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 6
                store i32 2, i32* %p6, align 4
                %p7 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 7
                store i32 6, i32* %p7, align 4
                %p8 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 8
                store i32 5, i32* %p8, align 4
                
                %before_s = getelementptr inbounds [9 x i8], [9 x i8]* @.str_before, i64 0, i64 0
                call i32 (i8*, ...) @printf(i8* %before_s)
                
                br label %print1.loop
                
                print1.loop:
                %i1 = phi i64 [ 0, %entry ], [ %i1.next, %print1.body ]
                %i1.cmp = icmp ult i64 %i1, 9
                br i1 %i1.cmp, label %print1.body, label %print1.end
                
                print1.body:
                %elem1.ptr = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %i1
                %elem1 = load i32, i32* %elem1.ptr, align 4
                %fmt = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
                call i32 (i8*, ...) @printf(i8* %fmt, i32 %elem1)
                %i1.next = add i64 %i1, 1
                br label %print1.loop
                
                print1.end:
                call i32 @putchar(i32 10)
                
                %a0 = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 0
                call void @heap_sort(i32* %a0, i64 9)
                
                %after_s = getelementptr inbounds [8 x i8], [8 x i8]* @.str_after, i64 0, i64 0
                call i32 (i8*, ...) @printf(i8* %after_s)
                
                br label %print2.loop
                
                print2.loop:
                %i2 = phi i64 [ 0, %print1.end ], [ %i2.next, %print2.body ]
                %i2.cmp = icmp ult i64 %i2, 9
                br i1 %i2.cmp, label %print2.body, label %print2.end
                
                print2.body:
                %elem2.ptr = getelementptr inbounds [9 x i32], [9 x i32]* %arr, i64 0, i64 %i2
                %elem2 = load i32, i32* %elem2.ptr, align 4
                %fmt2 = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt_d, i64 0, i64 0
                call i32 (i8*, ...) @printf(i8* %fmt2, i32 %elem2)
                %i2.next = add i64 %i2, 1
                br label %print2.loop
                
                print2.end:
                call i32 @putchar(i32 10)
                ret i32 0
                }
                ```
                
    
    ---
    
    평가 지표
    
    - IR 유효성
        
        : LLM이 뽑은 IR이 실제로 쓰일 수 있나
        
        1. valid_parse: IR 문법이 맞는지 검사 (llvm-as)
        2. verify_ok: IR 내부 규칙 (타입, SSA 등)이 맞는지 검사 (opt-verify)
        3. codegen_ok: IR를 실제 기계어로 바꿀 수 있는지 검사 (llc)
        4. diff_equal: 정답 IR과 구조 동일 여부 
        
        - 평가 방법
            1. 필요한 도구 (Ubuntu)
                
                ```python
                sudo apt-get update
                sudo apt-get install -y clang llvm
                ```
                
            2. 스크립트 파일 생성
                - 폴더 구조
                    
                    -ir-eval
                    
                    -cases
                    -out
                    -templates
                    
                    -harness_template.c
                    
                    quick_ir_eval.sh
                    
                    README_quick_ir_eval.md
                    
                - 스크립트 코드
                    - harness_template.c
                        
                        ```python
                        // 간단 하네스 템플릿(필요에 맞게 수정)
                        // 예: 대상 함수가 int target(int)인 경우
                        #include <stdio.h>
                        #include <stdlib.h>
                        
                        extern int target(int);
                        
                        int main(int argc, char** argv) {
                            int x = (argc > 1) ? atoi(argv[1]) : 42;
                            int y = target(x);
                            printf("%d\n", y);
                            return 0;
                        }
                        
                        ```
                        
                    - quick_ir_eval.sh
                        
                        ```python
                        #!/usr/bin/env bash
                        # quick_ir_eval.sh
                        # IR 유효성/라운드트립(컴파일·링크) 1일차 측정 스크립트
                        # 사용법:
                        #   bash quick_ir_eval.sh <CASES_ROOT>
                        # 폴더 구조 예:
                        #   <CASES_ROOT>/case1/src.c            # 선택: 정답 IR을 소스에서 생성
                        #   <CASES_ROOT>/case1/ref.ll           # 또는 미리 준비한 정답 IR
                        #   <CASES_ROOT>/case1/llm.ll           # 후보 IR(LLM)
                        #   <CASES_ROOT>/case1/mcsema.ll        # 후보 IR(McSema 산출물)
                        #   <CASES_ROOT>/case1/retdec.ll        # 후보 IR(RetDec 산출물)
                        #   <CASES_ROOT>/case1/harness.c        # 선택: 링크/라운드트립용 하네스
                        # 결과:
                        #   out/results.csv, out/summary.txt, 각 케이스별 *.log
                        #
                        # 필요 도구: clang, llvm-as, opt, llc, llvm-diff
                        
                        set -uo pipefail
                        
                        if [[ $# -lt 1 ]]; then
                          echo "Usage: $0 <CASES_ROOT>"
                          exit 1
                        fi
                        
                        CASES_ROOT="$1"
                        if [[ ! -d "$CASES_ROOT" ]]; then
                          echo "No such directory: $CASES_ROOT"
                          exit 1
                        fi
                        
                        # 확인: 필수 바이너리
                        require() { command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1"; exit 1; }; }
                        require clang
                        require llvm-as
                        require opt
                        require llc
                        require llvm-diff
                        
                        # 공통 정규화 패스(가벼운 세트)
                        PASSES=${PASSES:-"mem2reg,sroa,instcombine,simplifycfg,gvn,adce"}
                        
                        OUT="out"
                        mkdir -p "$OUT"
                        
                        CSV="$OUT/results.csv"
                        echo "case,artifact,valid_parse,verify_ok,codegen_ok,diff_equal,link_ok,roundtrip_ok" > "$CSV"
                        
                        shopt -s nullglob
                        
                        # 케이스 루프
                        for CASE in "$CASES_ROOT"/*; do
                          [[ -d "$CASE" ]] || continue
                        
                          # 정답 IR 준비
                          REF_LL="$CASE/ref.ll"
                          if [[ ! -f "$REF_LL" && -f "$CASE/src.c" ]]; then
                            clang -O0 -emit-llvm -S "$CASE/src.c" -o "$REF_LL" 2> "$CASE/ref.clang.log" || REF_LL=""
                          fi
                        
                          if [[ ! -f "$REF_LL" ]]; then
                            echo "WARN: $CASE 에 ref.ll 또는 src.c가 없어 정답 IR 없이 진행합니다(llvm-diff 생략)."
                          fi
                        
                          # 정답 정규화
                          REF_NORM="$CASE/ref.norm.ll"
                          if [[ -f "$REF_LL" ]]; then
                            opt -passes="$PASSES" "$REF_LL" -S -o "$REF_NORM" 2> "$CASE/ref.norm.log" || true
                          fi
                        
                          # 후보 IR들 순회(정답 ref.ll은 제외)
                          for CAND_LL in "$CASE"/*.ll; do
                            [[ -f "$CAND_LL" ]] || continue
                            [[ "$CAND_LL" == "$REF_LL" ]] && continue
                            [[ "$CAND_LL" == "$REF_NORM" ]] && continue      # ← 추가
                            [[ "$CAND_LL" == *.norm.ll ]] && continue  
                        
                            ARTIFACT="$(basename "$CAND_LL")"
                            BASE="${ARTIFACT%.ll}"
                        
                            # 1) 파싱 유효성
                            VALID=0
                            if llvm-as "$CAND_LL" -o /dev/null 2> "$CASE/$BASE.as.log"; then VALID=1; fi
                        
                            # 2) opt -verify
                            VERIFY=0
                            if opt -verify "$CAND_LL" -disable-output 2> "$CASE/$BASE.verify.log"; then VERIFY=1; fi
                        
                            # 정규화
                            CAND_NORM="$CASE/$BASE.norm.ll"
                            opt -passes="$PASSES" "$CAND_LL" -S -o "$CAND_NORM" 2> "$CASE/$BASE.norm.log" || true
                        
                            # 3) 경량 유사도: llvm-diff 동일 여부(정답이 있을 때만)
                            DIFF_EQUAL="NA"
                            if [[ -f "$REF_NORM" ]]; then
                              if llvm-diff "$REF_NORM" "$CAND_NORM" >/dev/null 2>&1; then
                                DIFF_EQUAL=1
                              else
                                DIFF_EQUAL=0
                              fi
                            fi
                        
                            # 4) 코드생성
                            CODEGEN=0
                            if llc "$CAND_NORM" -filetype=obj -o "$CASE/$BASE.o" 2> "$CASE/$BASE.llc.log"; then CODEGEN=1; fi
                        
                            # 5) 링크(선택: harness.c가 있을 때만)
                            LINK="NA"
                            ROUND="NA"
                            if [[ -f "$CASE/harness.c" ]]; then
                              LINK=0
                              if clang "$CASE/harness.c" "$CASE/$BASE.o" -o "$CASE/$BASE.bin" 2> "$CASE/$BASE.link.log"; then LINK=1; fi
                              if [[ "$CODEGEN" -eq 1 && "$LINK" -eq 1 ]]; then ROUND=1; else ROUND=0; fi
                            fi
                        
                            echo "$(basename "$CASE"),$ARTIFACT,$VALID,$VERIFY,$CODEGEN,$DIFF_EQUAL,$LINK,$ROUND" >> "$CSV"
                          done
                        done
                        
                        # 요약(NA 제외 집계)
                        {
                          echo "====== SUMMARY (rates; NA 제외) ======"
                          awk -F, 'NR>1 {
                                      v_tot+=($3!=""); v_ok+=($3==1);
                                      y_tot+=($4!=""); y_ok+=($4==1);
                                      c_tot+=($5!=""); c_ok+=($5==1);
                                      if($6!="NA"){ d_tot++; d_ok+=($6==1); }
                                      if($7!="NA"){ l_tot++; l_ok+=($7==1); }
                                      if($8!="NA"){ r_tot++; r_ok+=($8==1); }
                                   }
                                   END {
                                     if (v_tot) printf "valid_rate=%.4f (%d/%d)\n", v_ok/v_tot, v_ok, v_tot;
                                     if (y_tot) printf "verify_rate=%.4f (%d/%d)\n", y_ok/y_tot, y_ok, y_tot;
                                     if (c_tot) printf "codegen_rate=%.4f (%d/%d)\n", c_ok/c_tot, c_ok, c_tot;
                                     if (d_tot) printf "diff_equal_rate=%.4f (%d/%d)\n", d_ok/d_tot, d_ok, d_tot;
                                     if (l_tot) printf "link_rate=%.4f (%d/%d)\n", l_ok/l_tot, l_ok, l_tot;
                                     if (r_tot) printf "roundtrip_rate=%.4f (%d/%d)\n", r_ok/r_tot, r_ok, r_tot;
                                   }' "$CSV"
                        } | tee "$OUT/summary.txt"
                        
                        echo "Done. Results at: $CSV and $OUT/summary.txt"
                        
                        ```
                        
                    - README_quick_ir_eval.md
                        
                        ```python
                        빠른 IR 유효성/라운드트립 측정 가이드
                        
                        무엇을 측정하나
                        - valid_parse: llvm-as 통과 여부(구문·형식)
                        - verify_ok: opt -verify 통과 여부(SSA/타입 불변식)
                        - codegen_ok: llc 오브젝트 생성 성공 여부
                        - diff_equal: 정규화 후 llvm-diff 동일(정답 IR이 있을 때만)
                        - link_ok: 하네스와 링크 성공 여부(선택)
                        - roundtrip_ok: codegen_ok && link_ok
                        
                        사전 준비
                        - LLVM/Clang 설치(WSL/Ubuntu)
                          sudo apt-get update
                          sudo apt-get install -y clang llvm
                        
                        폴더 구조 예
                        cases/
                          add/
                            src.c           # 정답 IR을 만들 소스(또는 ref.ll을 직접 넣어도 됨)
                            ref.ll          # 선택(없으면 src.c로부터 자동 생성)
                            llm.ll          # 후보 IR(LLM 산출물)
                            mcsema.ll       # 후보 IR(McSema 산출물)
                            retdec.ll       # 후보 IR(RetDec 산출물)
                            harness.c       # 선택: 링크용 하네스
                        
                        하네스 템플릿
                        - 함수 시그니처를 아는 순수 함수라면 templates/harness_template.c 참고.
                        - 예: extern int target(int); 같은 프로토타입을 맞춰주세요.
                        
                        실행
                          chmod +x quick_ir_eval.sh
                          ./quick_ir_eval.sh cases
                        
                        결과 파일
                        - out/results.csv: 케이스×아티팩트별 세부 결과
                        - out/summary.txt: 전체 성공률 요약
                        
                        ```
                        
            3. 스크립트 실행
                
                ```python
                ./quick_ir_eval.sh cases
                ```
                
        - 평가 결과
            
            
            |  | mcsema | llm |
            | --- | --- | --- |
            | valid_parse | 1 | 1 |
            | verify_ok | 1 | 1 |
            | codegen_ok | 1 | 1 |
            | diff_equal | 0 | 0 |
    - 정답 IR과의 경량 유사도 (정규화 후 차이 축소)
        
        : 같은 정규화 패스 (간단한 최적화/정리)를 정답 IR과 후보 IR에 똑같이 걸고, 그 뒤에 구조가 얼마나 비슷한지 빠르게 수치로 보는 방법
        
        - 평가 방법
            1. 정규화 (정답/후보에 같은 패스 적용)
            : 사소한 표면 차이를 줄여서 공정 비교하려는 목적
            (첫 번째 평가지표 만들 때 이미 norm 파일을 만들었기 때문에 생략)
                
                ```python
                cd /home/nata20034/workspace/ir-eval/cases/heapsort
                PASSES='mem2reg,sroa,instcombine,simplifycfg,gvn,adce'
                
                opt -S -passes="$PASSES" ref.ll    -o ref.norm.ll
                opt -S -passes="$PASSES" llm.ll    -o llm.norm.ll
                ```
                
            2. 카운트형 특징 뽑기
                
                정규화 후 후보 IR이 정답 IR과 구조적으로 얼마나 비슷한지
                
                - 전체 명령 수 (TOTAL)이 비슷 → 규모/복잡도가 비슷하다는 신호
                - load/store 비중이 비슷 → 메모리 접근 구조 비슷
                - 정규화 후에도 phi/alloca가 남아 있음 → SSA 정리가 덜 됐을 가능성 있음
                - call이 많으면 → 런타임 헬퍼 의존이 높을 수 있음
                
                how
                
                - LLVM의 instcount 패스로 추출
                    
                    ```python
                    cd /home/nata20034/workspace/ir-eval/cases/heapsort3
                    
                    # 1) IR 한 파일에서 opcode/총 명령 수를 세는 함수
                    count_ops(){
                      awk '
                      # 주석/빈줄/전역 선언/메타데이터/라벨 제거
                      /^[[:space:]]*;/ {next}
                      /^[[:space:]]*$/ {next}
                      /^[[:space:]]*(define|declare|attributes|target|source_filename|module asm|!)\b/ {next}
                      {
                        line=$0
                        sub(/;.*$/,"",line)                            # 행 끝 주석 제거
                        sub(/^[[:space:]]*/,"",line)                   # 앞 공백 제거
                        if (line ~ /^[_A-Za-z.][-_A-Za-z0-9.]*:/) next # 라벨
                        sub(/^%[^=]+[[:space:]]*=[[:space:]]*/,"",line)# "%x = " 제거
                        if (line ~ /^[[:space:]]*}$/) next             # 블록 닫힘
                        if (line ~ /^[[:space:]]*$/) next
                        n=split(line,a,/[[:space:]]+/); if(n<1) next
                        op=a[1]; cnt[op]++; total++
                      }
                      END{
                        print "Total", total
                        # 관심 opcode는 꼭 나오게 0 기본값으로 보장
                        keys["load"]; keys["store"]; keys["call"]; keys["phi"]; keys["alloca"]
                        for (k in keys) if (!(k in cnt)) cnt[k]=0
                        for (k in cnt) print k, cnt[k]
                      }' "$1"
                    }
                    
                    # 2) ref/llm(/mcsema) 카운트를 텍스트로 저장
                    count_ops ref.norm.ll   > ref.ic.txt
                    count_ops llm.norm.ll   > llm.ic.txt
                    count_ops mcsema.slice.ll > mcsema.ic.txt
                    
                    # 확인
                    echo "=== ref.ic.txt ===";   head -n 30 ref.ic.txt
                    echo "=== llm.ic.txt ===";   head -n 30 llm.ic.txt
                    echo "=== mcsema.ic.txt ==="; head -n 30 mcsema.ic.txt
                    
                    ```
                    
                
                생긴 *.ic.txt 안에는 총 명령 수 (Total)이랑 load/store/call/phi/alloca 등 opcode 별 개수가 들어있음. 
                
                - 코드
                    - 계산 코드
                        
                        ```python
                        # === 실행 위치 ===
                        cd /home/nata20034/workspace/ir-eval/cases/heapsort3
                        
                        # 1) IR에서 직접 opcode/총 명령 수를 세는 함수(도구 출력에 의존 X, 가장 안정)
                        count_ops(){
                          awk '
                          /^[[:space:]]*;/ {next}                                   # 주석
                          /^[[:space:]]*$/ {next}                                   # 빈 줄
                          /^[[:space:]]*(define|declare|attributes|target|source_filename|module asm|!)\b/ {next}
                          {
                            line=$0
                            sub(/;.*$/,"",line)                                    # 행 끝 주석 제거
                            sub(/^[[:space:]]*/,"",line)                           # 앞 공백 제거
                            if (line ~ /^[_A-Za-z.][-_A-Za-z0-9.]*:/) next         # 라벨
                            sub(/^%[^=]+[[:space:]]*=[[:space:]]*/,"",line)        # "%x = " 제거
                            if (line ~ /^[[:space:]]*}$/) next                     # 블록 닫힘
                            if (line ~ /^[[:space:]]*$/) next
                            n=split(line,a,/[[:space:]]+/); if(n<1) next
                            op=a[1]; cnt[op]++; total++
                          }
                          END{
                            print "Total", total
                            # 관심 opcode는 0이라도 꼭 출력
                            keys["load"]; keys["store"]; keys["call"]; keys["phi"]; keys["alloca"]
                            for (k in keys) if (!(k in cnt)) cnt[k]=0
                            for (k in cnt) print k, cnt[k]
                          }' "$1"
                        }
                        
                        # 2) 카운트 추출(ref/llm/mcsema)
                        count_ops ref.norm.ll   > ref.ic.txt
                        count_ops llm.norm.ll   > llm.ic.txt
                        if [[ -f mcsema.norm.ll ]]; then
                          count_ops mcsema.norm.ll > mcsema.ic.txt
                        else
                          echo "WARN: mcsema.norm.ll not found, skipping mcsema" >&2
                        fi
                        
                        # 3) 헬퍼: 총계/특정 opcode 카운트 꺼내기
                        num_total(){ awk '$1=="Total"{print $2+0}' "$1"; }
                        op_get(){ awk -v k="$1" '$1==k{print $2+0}' "$2"; }
                        
                        # 4) 기준(ref) 숫자
                        REF_INST=$(num_total ref.ic.txt)
                        REF_LOAD=$(op_get load  ref.ic.txt);  REF_STORE=$(op_get store ref.ic.txt)
                        REF_PHI=$(op_get phi ref.ic.txt);     REF_ALLOCA=$(op_get alloca ref.ic.txt); REF_CALL=$(op_get call ref.ic.txt)
                        
                        # -------- LLM 지표 --------
                        LLM_INST=$(num_total llm.ic.txt)
                        LLM_LOAD=$(op_get load  llm.ic.txt);  LLM_STORE=$(op_get store llm.ic.txt)
                        LLM_PHI=$(op_get phi llm.ic.txt);     LLM_ALLOCA=$(op_get alloca llm.ic.txt); LLM_CALL=$(op_get call llm.ic.txt)
                        
                        inst_rel_error=$(awk -v r="${REF_INST:-1}" -v c="${LLM_INST:-0}" 'BEGIN{print ((c>r?c-r:r-c)/r)}')
                        ref_mem_ratio=$(awk -v l="${REF_LOAD:-0}" -v s="${REF_STORE:-0}" -v t="${REF_INST:-1}" 'BEGIN{print ((l+s)/t)}')
                        llm_mem_ratio=$(awk -v l="${LLM_LOAD:-0}" -v s="${LLM_STORE:-0}" -v t="${LLM_INST:-1}" 'BEGIN{print ((l+s)/t)}')
                        mem_ratio_gap=$(awk -v a="$ref_mem_ratio" -v b="$llm_mem_ratio" 'BEGIN{print (a>b?a-b:b-a)}')
                        
                        echo "== LLM metrics =="
                        echo "inst_rel_error    = $inst_rel_error"
                        echo "mem_ratio_gap     = $mem_ratio_gap"
                        echo "phi_after_norm    = $LLM_PHI"
                        echo "alloca_after_norm = $LLM_ALLOCA"
                        echo "call_count        = $LLM_CALL"
                        
                        # -------- McSema 지표 --------
                        if [[ -f mcsema.ic.txt ]]; then
                          MC_INST=$(num_total mcsema.ic.txt)
                          MC_LOAD=$(op_get load  mcsema.ic.txt);  MC_STORE=$(op_get store mcsema.ic.txt)
                          MC_PHI=$(op_get phi mcsema.ic.txt);     MC_ALLOCA=$(op_get alloca mcsema.ic.txt); MC_CALL=$(op_get call mcsema.ic.txt)
                        
                          mc_inst_rel_error=$(awk -v r="${REF_INST:-1}" -v c="${MC_INST:-0}" 'BEGIN{print ((c>r?c-r:r-c)/r)}')
                          mc_mem_ratio=$(awk -v l="${MC_LOAD:-0}" -v s="${MC_STORE:-0}" -v t="${MC_INST:-1}" 'BEGIN{print ((l+s)/t)}')
                          mc_mem_ratio_gap=$(awk -v a="$ref_mem_ratio" -v b="$mc_mem_ratio" 'BEGIN{print (a>b?a-b:b-a)}')
                        
                          echo "== McSema metrics =="
                          echo "inst_rel_error    = $mc_inst_rel_error"
                          echo "mem_ratio_gap     = $mc_mem_ratio_gap"
                          echo "phi_after_norm    = $MC_PHI"
                          echo "alloca_after_norm = $MC_ALLOCA"
                          echo "call_count        = $MC_CALL"
                        fi
                        
                        # 5) CSV 저장(보고서용)
                        echo "candidate,inst_rel_error,mem_ratio_gap,phi,alloca,call" > quick_similarity.csv
                        echo "LLM,$inst_rel_error,$mem_ratio_gap,$LLM_PHI,$LLM_ALLOCA,$LLM_CALL" >> quick_similarity.csv
                        if [[ -f mcsema.ic.txt ]]; then
                          echo "McSema,$mc_inst_rel_error,$mc_mem_ratio_gap,$MC_PHI,$MC_ALLOCA,$MC_CALL" >> quick_similarity.csv
                        fi
                        echo "saved: $(pwd)/quick_similarity.csv"
                        
                        ```
                        
                    - mcsema 함수 슬라이드 코드
                        
                        ```python
                        # 예시: 함수명이 heap_sort / main 인 경우
                        /usr/lib/llvm-14/bin/llvm-extract -S \
                          -func=heap_sort -func=main \
                          mcsema.norm.ll -o mcsema.slice.ll
                        ```
                        
                
                - inst_rel_error: 명령 수 상대 오차
                    
                    정답 IR과 후보 IR의 총 명령어 개수 차이를 정답의 규모로 나눠서 본 값
                    (값이 작을 수록 좋음)
                    
                    ![image.png](attachment:2d6e2e5a-b928-44a0-b0c3-0f02395eb271:image.png)
                    
                - mem_ratio_gap: 메모리 접근 비중 차이
                    
                    (load+store)/Total 비율을 정답과 후보에서 각각 계산하고 그 차이의 절대값
                    (값이 작을 수록 좋음)
                    
                    ![image.png](attachment:d1c0cd81-9308-45ef-95b2-3d6d48e88a49:image.png)
                    
                - phi_after_norm: 정규화 이후 남은 φ (파이) 수
                    
                    정규화(mem2reg, sroa, simplifycfg 등) 후에도 모듈 안에 남아 있는 phi 명령어 개수
                    
                    → phi opcode 개수 합계를 셈
                    
                    - why
                        - phi는 SSA의 합류 노드라서 정상적이긴 하지만 불필요하게 많으면
                            - CFG가 지저분
                            - 변환이 덜 되어 데이터 흐름이 복잡
                        - 정답과 비교할 때 너무 많거나 정규화 후에도 크게 남아 있으면 최적화 친화도가 낮을 가능성
                - alloca_after_norm: 정규화 이후 남은 alloca 수
                    
                    정규화 후에도 남아 있는 alloca (스택 변수) 개수
                    
                    → alloca opcode 개수 합계
                    
                    - why
                        - mem2reg/sroa가 잘 먹으면 지역 변수는 레지스터로 승격돼 alloca가 거의 사라짐
                        - 만약 남아 있으면?
                            - 주소 이탈 (escape)로 인해 승격 불가
                            - 포인터 별칭 불명확
                            - 구조체/배열 형태가 커서 분해 미흡
                            
                            등의 가능성 → 최적화 친화도가 떨어질 수 있음
                            
                - call_count: call 개수 (외부 호출/헬퍼 의존)
                    
                    call 명령어 총 개수 (정규화 후) (표준 라이브러리 포함)
                    
                    → call opcode 개수 합계
                    
                    - why
                        - 동일 기능을 하는 코드라도 후보 IR이 런타임 헬퍼/래퍼를 자주 부르면
                            - 명령 수는 적어 보여도 런타임 의존이 커서 전반 최적화가 덜 먹힐 수 있음
                            - 분석/검증 (정형 검증, symbolic exec)시 경로가 늘어남
                
                |  | llm | mcsema 
                (main, heap_sort 대상) | mcsema (모든 함수) |
                | --- | --- | --- | --- |
                | inst_rel_error  | 0.781139 | 0.903915 | 3.16192 |
                | mem_ratio_gap | 0.00243 | 0.217082 | 0.082837 |
                | phi_after_norm | 8 | 0 | 15 |
                | alloca_after_norm | 1 | 0 | 0 |
                | call_count | 7 | 2 | 40 |
                
                |  | llm | llm3 | mcsema 
                (main, heap_sort 대상) |
                | --- | --- | --- | --- |
                | inst_rel_error  | 0.781139 | 0.779359 | 0.903915 |
                | mem_ratio_gap | 0.00243 | 0.00066 | 0.217082 |
                | phi_after_norm | 8 | 8 | 0 |
                | alloca_after_norm | 1 | 1 | 0 |
                | call_count | 7 | 7 | 2 |
                - 구조적 깔끔함 (PHI/alloca/불필요한 call 제거): Mcsema
                - 메모리 동작 유사도: LLM
                - 명령 수 상대 오차: LLM
            
    - 실제 동작 비교 (차등 실행)
        - 코드
            - 두 IR을 공유 라이브러리 (.so)로 빌드하는 코드
                
                ```python
                cd /home/nata20034/workspace/ir-eval/cases/heapsort3
                
                # 1) llc에서 PIC 오브젝트로 생성
                llc -relocation-model=pic -filetype=obj -mtriple=x86_64-linux-gnu ref.norm.ll -o ref.pic.o
                llc -relocation-model=pic -filetype=obj -mtriple=x86_64-linux-gnu llm.norm.ll -o llm.pic.o
                # 필요하면 code model도 명시 가능:  -code-model=small
                
                # 2) 공유라이브러리로 링크 (추가로 -fPIC도 함께)
                clang -shared -fPIC -o ref.so ref.pic.o
                clang -shared -fPIC -o llm.so llm.pic.o
                
                # 3) 심볼 확인
                nm -D ref.so | grep -i heap_sort || true
                nm -D llm.so | grep -i heap_sort || true
                
                ```
                
            - 하네스 코드
                
                ```python
                cat > diff_runner.c <<'EOF'
                #include <dlfcn.h>
                #include <stdio.h>
                #include <stdlib.h>
                #include <string.h>
                #include <time.h>
                #include <stdint.h>
                typedef void (*heap_sort_t)(int*, size_t);
                static int is_sorted(const int *a, size_t n){ for(size_t i=1;i<n;i++) if(a[i-1]>a[i]) return 0; return 1; }
                int main(void){
                  void *A = dlopen("./ref.so", RTLD_NOW), *B = dlopen("./llm.so", RTLD_NOW);
                  if(!A||!B){ perror("dlopen"); return 1; }
                  heap_sort_t f_ref=(heap_sort_t)dlsym(A,"heap_sort");
                  heap_sort_t f_llm=(heap_sort_t)dlsym(B,"heap_sort");
                  if(!f_ref||!f_llm){ fprintf(stderr,"[ERR] heap_sort symbol not found\n"); return 2; }
                  srand(0xC0FFEE);
                  const int Ncases=1000; const size_t n=100; int agree=0, mism=0;
                  for(int t=0;t<Ncases;t++){
                    int *x1=(int*)malloc(sizeof(int)*n), *x2=(int*)malloc(sizeof(int)*n);
                    for(size_t i=0;i<n;i++){ int v=(rand()%2001)-1000; x1[i]=x2[i]=v; }
                    f_ref(x1,n); f_llm(x2,n);
                    int same=memcmp(x1,x2,sizeof(int)*n)==0, ok1=is_sorted(x1,n), ok2=is_sorted(x2,n);
                    if(same&&ok1&&ok2) agree++; else { mism++; if(mism<=5){ 
                      printf("[mismatch #%d] first 12 (ref/llm):\n",mism);
                      for(size_t i=0;i<12&&i<n;i++) printf("%d ",x1[i]); puts("");
                      for(size_t i=0;i<12&&i<n;i++) printf("%d ",x2[i]); puts("\n");
                      printf("sorted? ref=%d llm=%d\n", ok1, ok2);
                    }}
                    free(x1); free(x2);
                  }
                  printf("agree_rate_on_random_inputs=%.3f (%d/%d)\n",(double)agree/Ncases,agree,Ncases);
                  printf("mismatches=%d\n",mism);
                  return mism?2:0;
                }
                EOF
                
                clang -O2 diff_runner.c -ldl -o diff_runner
                ./diff_runner
                
                ```
                
            - 하네스 c
                
                ```python
                // diff_runner.c
                #define _GNU_SOURCE
                #include <dlfcn.h>
                #include <stdio.h>
                #include <stdlib.h>
                #include <string.h>
                #include <time.h>
                #include <stdint.h>
                #include <errno.h>
                #include <sys/stat.h>
                #include <sys/types.h>
                #include <limits.h>
                
                typedef void (*heap_sort_t)(int*, size_t);
                
                static int is_sorted(const int *a, size_t n){
                  for(size_t i=1;i<n;i++) if(a[i-1]>a[i]) return 0;
                  return 1;
                }
                
                static uint64_t now_ns(void){
                  struct timespec ts;
                #if defined(CLOCK_MONOTONIC_RAW)
                  clock_gettime(CLOCK_MONOTONIC_RAW, &ts);
                #else
                  clock_gettime(CLOCK_MONOTONIC, &ts);
                #endif
                  return (uint64_t)ts.tv_sec*1000000000ull + (uint64_t)ts.tv_nsec;
                }
                
                // 간단한 FNV-1a 64비트 해시(배열 내용 요약용)
                static uint64_t fnv1a64(const void *data, size_t len){
                  const unsigned char *p=(const unsigned char*)data;
                  uint64_t h=1469598103934665603ull;
                  for(size_t i=0;i<len;i++){ h ^= p[i]; h *= 1099511628211ull; }
                  return h;
                }
                
                static int write_array_txt(const char *path, const int *a, size_t n){
                  FILE *f=fopen(path,"w");
                  if(!f) return -1;
                  for(size_t i=0;i<n;i++){
                    if(i) fputc(' ', f);
                    fprintf(f, "%d", a[i]);
                  }
                  fputc('\n', f);
                  fclose(f);
                  return 0;
                }
                
                static int mkdir_if_needed(const char *dir){
                  if(!dir || !*dir) return 0;
                  if(mkdir(dir, 0755) == 0) return 0;
                  if(errno == EEXIST) return 0;
                  perror("mkdir");
                  return -1;
                }
                
                int main(int argc, char **argv){
                  // 인자: [Ncases] [n] [seed] [outdir]
                  int Ncases = (argc>1)? atoi(argv[1]) : 1000;
                  size_t n   = (argc>2)? (size_t)strtoull(argv[2],NULL,10) : 100;
                  unsigned int seed = (argc>3)? (unsigned int)strtoul(argv[3],NULL,10) : 0xC0FFEEu;
                  const char *outdir = (argc>4)? argv[4] : "out";
                  int dump_all = 0;
                  const char *env = getenv("DUMP_ALL");
                  if(env && strcmp(env,"0")!=0) dump_all = 1;
                
                  if(mkdir_if_needed(outdir)!=0) return 3;
                
                  // 요약 CSV
                  char summary_path[PATH_MAX];
                  snprintf(summary_path, sizeof(summary_path), "%s/summary.csv", outdir);
                  FILE *csv = fopen(summary_path, "w");
                  if(!csv){ perror("fopen summary.csv"); return 3; }
                  setvbuf(csv, NULL, _IOLBF, 0); // 줄버퍼링
                
                  fprintf(csv, "case,n,seed,agree,same,sorted_ref,sorted_llm,"
                               "first_diff_index,ref_val,llm_val,hash_ref,hash_llm,ns_ref,ns_llm\n");
                
                  void *A = dlopen("./ref.so", RTLD_NOW);
                  void *B = dlopen("./llm.so", RTLD_NOW);
                  if(!A || !B){
                    fprintf(stderr, "dlopen failed: %s\n", dlerror());
                    return 1;
                  }
                  heap_sort_t f_ref=(heap_sort_t)dlsym(A,"heap_sort");
                  heap_sort_t f_llm=(heap_sort_t)dlsym(B,"heap_sort");
                  if(!f_ref || !f_llm){
                    fprintf(stderr,"[ERR] heap_sort symbol not found\n");
                    return 2;
                  }
                
                  srand(seed);
                  int agree_cnt=0, mism_cnt=0;
                
                  for(int t=0; t<Ncases; t++){
                    // 입력 생성 및 보존
                    int *orig=(int*)malloc(sizeof(int)*n);
                    int *x1  =(int*)malloc(sizeof(int)*n);
                    int *x2  =(int*)malloc(sizeof(int)*n);
                    if(!orig||!x1||!x2){ fprintf(stderr,"malloc failed\n"); return 4; }
                
                    for(size_t i=0;i<n;i++){
                      int v=(rand()%2001)-1000;
                      orig[i]=v; x1[i]=v; x2[i]=v;
                    }
                
                    uint64_t t0=now_ns();
                    f_ref(x1,n);
                    uint64_t t1=now_ns();
                    f_llm(x2,n);
                    uint64_t t2=now_ns();
                
                    int same = memcmp(x1,x2,sizeof(int)*n)==0;
                    int ok1 = is_sorted(x1,n);
                    int ok2 = is_sorted(x2,n);
                
                    // 첫 차이 인덱스
                    long first_diff=-1; int dref=0, dllm=0;
                    if(!same){
                      for(size_t i=0;i<n;i++){
                        if(x1[i]!=x2[i]){ first_diff=(long)i; dref=x1[i]; dllm=x2[i]; break; }
                      }
                    }
                
                    uint64_t href = fnv1a64(x1, sizeof(int)*n);
                    uint64_t hllm = fnv1a64(x2, sizeof(int)*n);
                
                    int agree = (same && ok1 && ok2);
                    if(agree) agree_cnt++; else mism_cnt++;
                
                    // 요약 CSV 한 줄
                    fprintf(csv, "%d,%zu,%u,%d,%d,%d,%d,%ld,%d,%d,%llu,%llu,%llu,%llu\n",
                            t, n, seed, agree, same, ok1, ok2,
                            first_diff, dref, dllm,
                            (unsigned long long)href, (unsigned long long)hllm,
                            (unsigned long long)(t1-t0), (unsigned long long)(t2-t1));
                
                    // 덤프 조건: mismatch 또는 DUMP_ALL=1
                    if(!agree || dump_all){
                      char p_in[PATH_MAX], p_ref[PATH_MAX], p_llm[PATH_MAX];
                      snprintf(p_in,  sizeof(p_in),  "%s/case_%04d_input.txt", outdir, t);
                      snprintf(p_ref, sizeof(p_ref), "%s/case_%04d_ref.txt",   outdir, t);
                      snprintf(p_llm, sizeof(p_llm), "%s/case_%04d_llm.txt",   outdir, t);
                      write_array_txt(p_in,  orig, n);
                      write_array_txt(p_ref, x1,   n);
                      write_array_txt(p_llm, x2,   n);
                
                      // 화면에는 처음 12개만 간단히
                      if(!agree && mism_cnt<=5){
                        printf("[mismatch #%d] case=%d first 12 (ref/llm):\n", mism_cnt, t);
                        for(size_t i=0;i<12 && i<n;i++) printf("%d ", x1[i]); puts("");
                        for(size_t i=0;i<12 && i<n;i++) printf("%d ", x2[i]); puts("");
                        printf("sorted? ref=%d llm=%d  first_diff=%ld  ref=%d llm=%d\n",
                               ok1, ok2, first_diff, dref, dllm);
                      }
                    }
                
                    free(orig); free(x1); free(x2);
                  }
                
                  fclose(csv);
                
                  printf("agree_rate_on_random_inputs=%.3f (%d/%d)\n",
                         (double)agree_cnt/Ncases, agree_cnt, Ncases);
                  printf("mismatches=%d\n", mism_cnt);
                  printf("summary: %s\n", summary_path);
                  printf("array dumps: %s/case_####_{input,ref,llm}.txt\n", outdir);
                
                  return mism_cnt?2:0;
                }
                
                ```
                
        - 결과
            - llm
                - `agree_rate_on_random_inputs=0.000 (0/1000)`
                    
                    → 랜덤 1000개 입력 전부에서 **LLM-IR 결과가 ref와 달랐다**는 뜻.
                    
                - 각 블록의 `sorted? ref=1 llm=0`
                    
                    → ref(IR)는 정렬 완료, **LLM-IR은 정렬이 안 됨**(오름차순 위배)이라는 뜻.
                    
                - 마지막 줄 `echo $?`가 `2`
                    
                    → 하네스가 “mismatch가 있었다”로 종료했다는 의미
                    
                
            - mcsema
                
                해당 평가 방식 사용 x
                
                void heap_sort(int* a, size_t n) 시그니처를 사용한다고 예상하고 하네스 코드 제작 bit ABI가 안 맞음.  아마 mcsema는 Remill 런타임 전제를 깔기 때문인 것 같음 (CPU 레지스터/메모리를 구조체와 런타임 함수로 모델링)
                
    
    - chatGPT2 프롬프트
        - 시스템 프롬프트
            - ko
                
                ```python
                # 역할
                너는 “바이너리 함수 디스어셈블리 → LLVM 14 IR” 리프터다. 단일 함수의 IDA 스타일 디스어셈블리를 입력으로 받으면,
                (1) 먼저 함수의 의도/용도를 추정하고,
                (2) 그 의도를 보존하는 정확하고 일관된 LLVM IR(SSA)을 생성한다.
                
                # 타깃
                - LLVM 버전: 14
                - target triple: x86_64-unknown-linux-gnu
                - opaque pointers 금지. 반드시 typed pointer만 사용(‘ptr’ 토큰 사용 금지).
                - datalayout은 생략(만약 포함한다면 모든 출력에서 동일 문자열을 사용).
                
                # 파이프라인 전제(호출 맥락)
                - 사용자는 이 LLM을 호출하기 전에 아래 과정을 끝낸다:
                  1) IDA에서 함수 목록을 추출
                  2) 별도 모델로 필요한 함수만 선별
                  3) 선택된 각 함수의 디스어셈블리를 이 LLM에 제공
                - 이 LLM은 호출당 정확히 1개의 함수만 입력으로 받고, 그 함수에 대한 IR만 출력한다.
                - 파일 확장자는 .ll 일 수 있으나, 내용은 LLVM 14 IR 규격이어야 한다.
                
                # 정규 인터페이스(병합/링크 용이성 우선)
                - 링크 시 충돌을 피하기 위해 공통 상태 타입과 함수 시그니처를 고정한다.
                
                  %Regs = type {
                    i64 RAX, i64 RBX, i64 RCX, i64 RDX, i64 RSI, i64 RDI, i64 RBP, i64 RSP,
                    i64 R8,  i64 R9,  i64 R10, i64 R11, i64 R12, i64 R13, i64 R14, i64 R15,
                    i64 RIP,
                    i1 CF, i1 PF, i1 AF, i1 ZF, i1 SF, i1 OF, i1 DF
                  }
                
                  ; 리프트된 모든 함수는 동일한 시그니처를 사용한다:
                  define dso_local void @<FUNC_NAME>(i8* nocapture %MEM, %Regs* nocapture %S) local_unnamed_addr { ... }
                
                ## 함수 이름(IDA 심볼 우선)
                - IDA가 보고한 함수명(예: main, sub_401000, _Z7fooPi)을 우선 사용한다.
                - 해당 이름이 LLVM 식별자로 부적합하면 정규화(sanitization)한다:
                  • 허용되지 않는 문자는 '_'로 대체  
                  • 숫자로 시작하면 'f_' 접두어를 붙임  
                  • 연속된 '_'는 하나로 축약  
                - 정규화 후에도 중복이 있으면 '__<ADDR_HEX>'를 뒤에 붙여 구분한다.
                - 이름이 전혀 없으면 'fn_<ADDR_HEX>'로 폴백한다.
                - 원래의 IDA 이름과 주소를 주석으로 항상 기록한다:
                  ; Symbol: main  ; Address: 0x401000
                - 호출 시: 디스어셈블리가 심볼을 참조하면 그 정규화된 이름을 호출하고, 아니면 'fn_<ADDR_HEX>' 호출.
                - 현재 모듈에 정의되지 않은 피호출자는 동일 시그니처의 declare를 생성한다.
                
                # 의도 우선 정책(Intent-First)
                - 이름/주석/패턴/상수/루프/재귀/메모리 접근/분기를 근거로 의도를 추정한다.
                - 추정 결과, 신뢰도(0.0–1.0), 간단한 근거를 IR 상단 주석에 기록:
                  ; Intent: merge sort (confidence=0.86). Evidence: mid split, two recursive calls, two-pointer merge loop.
                - 2단계 생성 전략:
                  1) 의도 정합 리프트(confidence ≥ 0.8): 표준 의미론에 맞도록 경계/크기 등 보수적 “수선(repair)” 허용
                     (예: 머지 정렬/퀵 정렬/memset/memcpy). 관찰 가능한 동작과 인터페이스는 유지 필수.
                  2) 보수 리프트(confidence < 0.8): 디스어셈블리 시맨틱을 충실히 반영(수선 금지).
                - 새로운 부작용을 도입하거나 관찰 가능한 행동(전역, 메모리 레이아웃, 호출 인터페이스)을 바꾸면 안 된다.
                
                # 메모리 & 스택 모델
                - x86-64 리틀엔디언. push/pop은 8바이트 단위로 RSP가 변한다.
                - 유효주소 = base + scale*index + disp (i64로 계산); %MEM 기준 GEP 후 정확한 폭으로 load/store.
                - movzx → zext, movsx → sext. 32비트 GPR에 쓰기 시 64비트로 제로확장.
                
                # 레지스터 & 플래그
                - 레지스터 접근은 %S를 통해 수행: 사용 전 load, 계산 후 store로 %S에 반영.
                - ADD/SUB/INC/DEC/CMP/TEST/SHL/SHR/SAR/AND/OR/XOR에 대해 최소 ZF, SF, CF, OF 갱신(PF/AF는 가능 시).
                - 복잡한 플래그 갱신은 고정 헬퍼 호출 허용(서명은 모든 모듈에서 동일해야 함):
                  declare void @set_flags_add_i64(%Regs* %S, i64 %a, i64 %b, i64 %r)
                
                # 제어 흐름
                - 무조건/조건 분기는 br 사용, cmp/test 결과로 i1 조건을 만든다.
                - 합류 지점에서는 PHI를 사용. 권장 명명: %RAX.then, %RAX.else, %RAX.merge 등.
                
                # 호출 & 반환
                - 직접 호출: call void @<SANITIZED_NAME>(i8* %MEM, %Regs* %S) 또는 이름이 없으면 call void @fn_<ADDR>(...).
                - 간접 호출(예: call rax): 주석으로 명시하고 보수적으로 처리.
                - 반환(ret) 시퀀스:
                  - [RSP]에서 반환 주소를 로드해 RIP에 저장, RSP += 8, 이후 ret void.
                
                # 네이밍 & 스타일
                - 블록: entry, bb1, bb2, …
                - 임시값: %t0, %t1, … / 레지스터 스냅샷: %RAX0, %RAX1, …
                - 정수 리터럴은 10진수 사용. 불필요한 캐스트 금지. 메타데이터/디버그/벡터 타입/부동소수(원본에 없으면) 금지.
                
                # 미지원/폴백
                - 미지원 명령의 경우:
                  ; TODO unsupported: xsave
                  declare void @llvm.trap()
                  call void @llvm.trap()
                  unreachable
                
                # 출력 규약(항상 동일 스캐폴드)
                ; ModuleID = '<FUNC_NAME>'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; 심볼/주소 & 의도 헤더
                ; Symbol: <IDA_NAME or 'unknown'>  ; Address: 0x<ADDR_HEX>
                ; Intent: <guess> (confidence=<0.00–1.00>). Evidence: <핵심 단서 1–2개>
                ; Preconditions: <가정/범위/불변식 등, 있으면>
                ; Postconditions: <예: 정렬됨/안정성/길이 보존 등, 있으면>
                
                %Regs = type {
                  i64, i64, i64, i64, i64, i64, i64, i64,
                  i64, i64, i64, i64, i64, i64, i64, i64,
                  i64, i1, i1, i1, i1, i1, i1, i1
                }
                
                declare void @llvm.trap()
                ; 선택: declare void @set_flags_add_i64(%Regs* %S, i64, i64, i64)
                
                ; 여기서 IDA 정규화 이름 사용(예: @main). 폴백: @fn_<ADDR_HEX>
                define dso_local void @<FUNC_NAME>(i8* nocapture %MEM, %Regs* nocapture %S) local_unnamed_addr {
                entry:
                  ; body
                  ret void
                }
                
                # 의도 인지 패턴(예: merge sort)
                - merge_sort:
                  - 전형적 인터페이스: merge_sort(base_ptr, left, right) 또는 merge_sort(arr, n) 후 내부 mid 계산.
                  - 식별 단서:
                    • mid = l + ((r - l) >> 1)
                    • 좌/우 절반에 대한 재귀 2회 또는 반복 분할 스택
                    • 병합 루프: i, j, k; 두 포인터 비교; 더 작은 값을 임시 버퍼에 기록
                    • 임시 버퍼 흔적: alloca/malloc, memcpy/memmove, 단계적 쓰기 후 원본으로 복사
                  - confidence ≥ 0.8이면:
                    • 안정성(Stable) 보존, 경계/버퍼 크기 보수적 보정, overflow-safe mid(l + (r - l)/2) 선호
                  - confidence < 0.8이면: 수선 없이 디스어셈블리 의미를 그대로 반영
                  - merge()가 분리되어 있으면:
                    • @<SANITIZED_MERGE_NAME> 호출(없으면 declare), “원본으로의 복사” 단계를 명시
                
                # 정규화(사용자 후처리 가정)
                - 사용자는 다음 패스를 적용할 수 있음: mem2reg,sroa,instcombine,simplifycfg,reassociate,licm,loop-simplify,lcssa,gvn,adce,memcpyopt
                - 불필요한 alloca를 피하고, 가급적 바로 SSA로 작성한다.
                
                # 품질 기준
                - 우선순위 1: 동작 보존(의도 정합 포함). 우선순위 2: 병합 용이성(타입/시그니처/네이밍 일관).
                - confidence < 0.8이면 보수 리프트. ≥ 0.8이면 보수적 수선 허용.
                - 불확실하면 llvm.trap으로 명시적 실패 처리.
                
                # 입력 형식(요약)
                - 단일 함수의 IDA 디스어셈블리 텍스트(주소/바이트/니모닉/오퍼랜드/주석 허용).
                - 외부 맥락(전체 호출 그래프, 전역 심볼)은 제공되지 않는다고 가정.
                
                # 예시(IDA 심볼 사용 짧은 헤더)
                ; Symbol: main  ; Address: 0x401000
                ; Intent: merge sort (confidence=0.87). Evidence: mid split + two recursive calls + two-pointer merge loop.
                define dso_local void @main(i8* %MEM, %Regs* %S) local_unnamed_addr {
                entry:
                  ; mid 계산, 좌/우 재귀 호출(또는 @<MERGE_NAME> 호출), 병합 루프 후 원본으로 복사
                  ret void
                }
                
                ```
                
            - en
                
                ```python
                # Role
                You are a “binary function disassembly → LLVM 14 IR” lifter. Given the IDA-style disassembly of a single function, you must
                (1) infer the function’s intent/purpose first, and
                (2) produce precise, consistent LLVM IR (SSA) that preserves that intent.
                
                # Targets
                - LLVM version: 14
                - target triple: x86_64-unknown-linux-gnu
                - Opaque pointers are forbidden. Use typed pointers only (no 'ptr' token).
                - Omit datalayout (if you include it, use the exact same string in all outputs).
                
                # Pipeline Assumptions (call context)
                - The user completes the following before calling this LLM:
                  1) Extract function list from IDA
                  2) Filter to needed functions using a separate model
                  3) Provide each selected function’s disassembly to this LLM
                - This LLM receives exactly one function per call and must emit IR only for that function.
                - File extension may be .ll or user-defined (.ii), but the content must be valid LLVM 14 IR.
                
                # Canonical Interface (favor easy merging/linking)
                - Fix the common state type and function signature to avoid link-time conflicts.
                
                  %Regs = type {
                    i64 RAX, i64 RBX, i64 RCX, i64 RDX, i64 RSI, i64 RDI, i64 RBP, i64 RSP,
                    i64 R8,  i64 R9,  i64 R10, i64 R11, i64 R12, i64 R13, i64 R14, i64 R15,
                    i64 RIP,
                    i1 CF, i1 PF, i1 AF, i1 ZF, i1 SF, i1 OF, i1 DF
                  }
                
                  ; All lifted functions use the same canonical signature:
                  define dso_local void @<FUNC_NAME>(i8* nocapture %MEM, %Regs* nocapture %S) local_unnamed_addr { ... }
                
                ## Function Naming (IDA symbols first)
                - Prefer the function name reported by IDA (e.g., main, sub_401000, _Z7fooPi).
                - If the IDA name is invalid for an LLVM identifier, sanitize it:
                  • Replace invalid chars with '_'  
                  • If it starts with a digit, prefix 'f_'  
                  • Collapse consecutive '_'  
                - If duplicates remain after sanitization, disambiguate by appending '__<ADDR_HEX>'.
                - If no name is available, fall back to 'fn_<ADDR_HEX>'.
                - Always record the original IDA name and address in comments:
                  ; Symbol: main  ; Address: 0x401000
                - Calls: when the disassembly references a symbol, call that sanitized name; otherwise call the fallback 'fn_<ADDR_HEX>'.
                - For any callee not defined in the current module, emit a matching 'declare' with the same canonical signature.
                
                # Intent-First Policy
                - Infer intent using name/comments/patterns/constants/loops/recursion/memory access/branches.
                - Record the guess, confidence (0.0–1.0), and brief evidence as IR comments at the top:
                  ; Intent: merge sort (confidence=0.86). Evidence: mid split, two recursive calls, two-pointer merge loop.
                - Two-stage generation:
                  1) Intent-aligned lift (confidence ≥ 0.8): conservative repairs allowed to match standard semantics (bounds/size fixes only).
                  2) Conservative lift (confidence < 0.8): reflect disassembly exactly; no repairs.
                - Never introduce new side effects or change observable behavior (globals/memory layout/calling interface).
                
                # Memory & Stack Model
                - x86-64 little-endian. RSP changes in 8-byte units for push/pop.
                - Effective address = base + scale*index + disp (i64); access via %MEM with GEP and correctly sized load/store.
                - movzx → zext, movsx → sext. 32-bit GPR writes zero-extend to 64-bit.
                
                # Registers & Flags
                - Access registers via %S: load before use, store results back into %S.
                - Update at least ZF, SF, CF, OF for ADD/SUB/INC/DEC/CMP/TEST/SHL/SHR/SAR/AND/OR/XOR (PF/AF when feasible).
                - For complex flag updates, a fixed helper is allowed (signature must be identical everywhere):
                  declare void @set_flags_add_i64(%Regs* %S, i64 %a, i64 %b, i64 %r)
                
                # Control Flow
                - Use br with i1 conditions from cmp/test results.
                - Use PHI at merge points. Suggested naming: %RAX.then, %RAX.else, %RAX.merge, etc.
                
                # Calls & Returns
                - Direct calls: call void @<SANITIZED_NAME>(i8* %MEM, %Regs* %S) or call void @fn_<ADDR>(...) if unnamed.
                - Indirect calls (e.g., call rax): add a comment and handle conservatively.
                - ret sequence:
                  - Load return address from [RSP], store to RIP, RSP += 8, ret void.
                
                # Naming & Style
                - Blocks: entry, bb1, bb2, …
                - Temporaries: %t0, %t1, …; register snapshots: %RAX0, %RAX1, …
                - Use decimal integer literals. Avoid unnecessary casts. No metadata, debug info, vector types, or floats (unless present in the original).
                
                # Unsupported / Fallback
                - For unsupported instructions:
                  ; TODO unsupported: xsave
                  declare void @llvm.trap()
                  call void @llvm.trap()
                  unreachable
                
                # Output Contract (always the same scaffold)
                ; ModuleID = '<FUNC_NAME>'
                source_filename = '<FUNC_NAME>'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; Symbol/address & intent header
                ; Symbol: <IDA_NAME or 'unknown'>  ; Address: 0x<ADDR_HEX>
                ; Intent: <guess> (confidence=<0.00–1.00>). Evidence: <1–2 key cues>
                ; Preconditions: <assumptions/bounds/invariants if any>
                ; Postconditions: <e.g., sorted/stable/length-preserving, if any>
                
                %Regs = type {
                  i64, i64, i64, i64, i64, i64, i64, i64,
                  i64, i64, i64, i64, i64, i64, i64, i64,
                  i64, i1, i1, i1, i1, i1, i1, i1
                }
                
                declare void @llvm.trap()
                ; optional: declare void @set_flags_add_i64(%Regs* %S, i64, i64, i64)
                
                ; Use the sanitized IDA name here (e.g., @main). Fallback: @fn_<ADDR_HEX>
                define dso_local void @<FUNC_NAME>(i8* nocapture %MEM, %Regs* nocapture %S) local_unnamed_addr {
                entry:
                  ; body
                  ret void
                }
                
                # Intent-Aware Patterns (example: merge sort)
                - merge_sort:
                  - Typical interfaces: merge_sort(base_ptr, left, right) or merge_sort(arr, n) with internal mid computation.
                  - Indicators:
                    • mid = l + ((r - l) >> 1)
                    • two recursive calls (left/right) or iterative split stack
                    • merge loop: i, j, k; two-pointer compare; write smaller to temp buffer
                    • temp buffer usage: alloca/malloc, memcpy/memmove, staged writes then copy-back
                  - If confidence ≥ 0.8:
                    • preserve stability; fix bounds and temp size; prefer overflow-safe mid (l + (r - l)/2).
                  - If confidence < 0.8: no repairs; mirror the disassembly.
                  - If merge() is separate:
                    • call @<SANITIZED_MERGE_NAME> (declare if missing), make copy-back explicit.
                
                # Normalization (assumed user post-pass)
                - The user may run: mem2reg,sroa,instcombine,simplifycfg,reassociate,licm,loop-simplify,lcssa,gvn,adce,memcpyopt
                - Avoid unnecessary allocas; prefer SSA.
                
                # Quality Bar
                - Priority 1: behavior preservation (incl. intent alignment). Priority 2: mergeability (types/signatures/naming consistent).
                - If confidence < 0.8: conservative lift. If ≥ 0.8: conservative repairs allowed.
                - When uncertain, fail explicitly via llvm.trap.
                
                # Input Format (recap)
                - One function’s IDA disassembly text (addresses/bytes/mnemonics/operands/comments allowed).
                - Assume no external context (no full call graph or global symbols).
                
                # Example (short header using an IDA symbol)
                ; Symbol: main  ; Address: 0x401000
                ; Intent: merge sort (confidence=0.87). Evidence: mid split + two recursive calls + two-pointer merge loop.
                define dso_local void @main(i8* %MEM, %Regs* %S) local_unnamed_addr {
                entry:
                  ; mid computation, recursive calls to @merge_sort or inline merge loop, then copy-back
                  ret void
                }
                
                ```
                
            - ko2
                
                ```python
                당신의 역할:
                당신은 “바이너리 함수 디스어셈블리 → LLVM 14 IR (C-ABI)” 리프터다. 단일 함수의 IDA 스타일 디스어셈블리를 입력으로 받으면, C 호출 규약에 맞춘 LLVM 14 IR 모듈 1개만 출력한다. (설명/마크다운/코드펜스 금지, IR 내 주석은 허용)
                
                타깃/문법:
                - LLVM 14
                - target triple: x86_64-unknown-linux-gnu
                - opaque pointers 금지(절대 `ptr` 토큰 금지). 반드시 typed pointer(i8*, i32*, …)만 사용.
                - datalayout은 생략(포함 시 모든 출력에서 동일 문자열 유지).
                - 출력은 llvm-as(14)로 바로 어셈블 가능해야 한다.
                
                함수 시그니처 복원 규칙:
                - 입력은 “정확히 1개 함수”의 디스어셈블리이다. 그 함수 **하나**만 정의한다.
                - 함수명은 IDA 심볼 우선 사용(예: main, sub_401000, _Z7fooPi). LLVM 식별자로 부적합하면
                  비허용 문자 ‘_’ 치환, 숫자 시작 시 ‘f_’ 접두, 충돌 시 ‘__<ADDR_HEX>’ 덧붙임. 이름 없으면 `fn_<ADDR_HEX>`.
                - **main인 경우**: `define dso_local i32 @main(i32 %argc, i8** %argv)` 서명을 사용.
                - 그 외 함수는 디스어셈블리에서 관찰된 사용을 바탕으로 **C-ABI 형 서명**을 복원한다.
                  - 버퍼 + 길이 패턴이면 `i8*`/`i32*` + `i64` 등 합리적 타입 선택.
                  - 정렬/복사와 같이 의미가 뚜렷하면 관례적 시그니처를 사용(예: `void @heap_sort(i32* %a, i64 %n)`).
                  - 확실치 않으면 가장 보수적인 `i8*`(버퍼)와 정수 인자 조합을 택하고, 헤더 주석에 가정(Preconditions)을 명시.
                - 외부 호출은 실제 ABI로 선언한다(예: `declare i32 @printf(i8*, ...)`, `declare i32 @putchar(i32)` 등).
                  필요 없는 선언은 만들지 않는다.
                
                의도(semantic) 우선 & 수선 정책:
                - 이름/상수/루프/재귀/메모리 패턴으로 의도를 추정하고 헤더에 기록:
                  `; Intent: <guess> (confidence=<0.00–1.00>). Evidence: <핵심 단서 1–2개>`
                - confidence ≥ 0.8이면 표준 의미론에 맞게 **보수적 수선(repair)** 허용(경계/오프셋/사소 버그 교정). 외부 인터페이스는 보존.
                - confidence < 0.8이면 **보수 리프트**(관찰 의미 충실, 수선 금지).
                
                메모리/타입/연산:
                - x86-64 리틀엔디언. 정수 리터럴은 10진수.
                - 필요한 최소 범위에서만 `bitcast`/`getelementptr`을 사용하고, 불필요한 `alloca`는 피한다(SSA 친화적).
                - 8/16/32비트 load→확장은 `zext/sext`를 사용. 32비트 연산의 상위 32비트 제로확장 규칙을 준수.
                - 분기/합류는 `icmp` + `br i1` + `phi`를 사용. 모든 기본 블록은 terminator를 가져야 한다.
                
                예외/폴백:
                - 디스어셈블리에 없는 부동소수/벡터/메타데이터는 생성 금지.
                - 복원 불가한 동작은 주석으로 명시하고, 의미가 핵심이면 `declare void @llvm.trap()`을 선언해 `call` 후 `unreachable`.
                
                출력 스캐폴드(반드시 이 틀을 따르되, 내용은 채워 넣어라):
                ; ModuleID = '<FUNC_NAME>'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; Symbol: <IDA_NAME or 'unknown'>  ; Address: 0x<ADDR_HEX>
                ; Intent: <guess> (confidence=<0.00–1.00>). Evidence: <단서1–2>
                ; Preconditions: <있으면>
                ; Postconditions: <있으면>
                
                ; 필요한 외부 선언만:
                ; declare i32 @printf(i8*, ...)
                ; declare i32 @putchar(i32)
                ; (기타 필요한 extern만 선언)
                
                ; 여기서 IDA 심볼을 사용(예: @heap_sort 또는 @main)
                define dso_local <RET_TY> @<FUNC_NAME>(<C_ABI_PARAMS...>) local_unnamed_addr {
                entry:
                  ; body (SSA 친화적으로 작성)
                  ret <RET_TY> <RET_VAL or void>
                }
                
                최종 체크리스트(자가검증):
                - 출력은 IR “한 개” 모듈만이며, 마크다운/설명/코드펜스 없음(주석은 허용).
                - `ptr` 토큰이 전혀 없다(typed pointer만 사용).
                - 외부 선언은 실제로 쓰는 것만 포함.
                - 모든 블록은 terminator를 가진다.
                - llvm-as(14)로 어셈블이 성공한다.
                
                ```
                
            - en2
                
                ```python
                Your role:
                You are a “Binary Function Disassembly → LLVM 14 IR (C-ABI)” lifter. You take the IDA-style disassembly of exactly one function as input and output exactly one LLVM 14 IR module for that function—nothing else. (No explanations/markdown/code fences; IR comments are allowed.)
                
                Target / syntax:
                - LLVM version: 14
                - target triple: x86_64-unknown-linux-gnu
                - Opaque pointers are forbidden: never use the `ptr` token; always use typed pointers (i8*, i32*, …).
                - Omit datalayout (if you include it, the exact same string must be used in all outputs).
                - The output must assemble with llvm-as (14) without errors.
                
                Invocation context:
                - Each call provides the disassembly text of exactly one function.
                - Assume no whole-program context (no global/ABI knowledge beyond what’s in the disassembly).
                - You output only the IR module for that one function.
                
                Function signature reconstruction (C-ABI mode):
                - Define exactly one function per input.
                - Function name: prefer the IDA symbol (e.g., main, sub_401000, _Z7fooPi).
                  - If not a valid LLVM identifier: replace invalid chars with `_`; if it starts with a digit, prefix `f_`; collapse repeated `_` to one.
                  - On collision, append `__<ADDR_HEX>`. If no name, use `fn_<ADDR_HEX>`.
                  - Always record original symbol/address in a header comment:
                    ; Symbol: main  ; Address: 0x401000
                - If the function is `main`: use `define dso_local i32 @main(i32 %argc, i8** %argv)`.
                - Otherwise, reconstruct a **C-ABI style** signature from usage patterns in the disassembly:
                  - Buffer+length patterns → choose reasonable types (e.g., `i8*`/`i32*` with `i64` length).
                  - For clear semantics (e.g., sorting/copy), use conventional signatures (e.g., `void @heap_sort(i32* %a, i64 %n)`).
                  - If uncertain, choose conservative `i8*` for raw buffers and integer parameters, and state assumptions in `; Preconditions`.
                - External calls must be declared with their **real ABI** (e.g., `declare i32 @printf(i8*, ...)`, `declare i32 @putchar(i32)`).
                  - Do not emit unused extern declarations.
                
                Intent-first policy & conservative repair:
                - Infer the function’s intent from name/patterns/constants/loops/recursion/memory/branches.
                - Record it in the header:
                  ; Intent: <guess> (confidence=<0.00–1.00>). Evidence: <1–2 key cues>
                - If confidence ≥ 0.8: allow **conservative repair** to match the standard semantics (fix minor bounds/offset bugs) while preserving the observable interface and memory layout.
                - If confidence < 0.8: do a **conservative lift** (faithful to observed semantics; do not “repair”).
                
                Memory / types / operations:
                - x86-64 little-endian. Integer literals in decimal.
                - Use `getelementptr` and `bitcast` only as needed; avoid unnecessary `alloca` (write SSA-friendly IR).
                - 8/16/32-bit loads that feed wider ops must use `zext`/`sext` as appropriate.
                - Respect the x86 rule that 32-bit GPR writes zero-extend to 64-bit when modeling semantics.
                - Use `icmp` + `br i1` + `phi` for control flow; every basic block must end with a terminator.
                
                Exceptions / fallback:
                - Do not invent floating-point, vector types, metadata, or debug info if not present in the disassembly.
                - If a behavior cannot be reconstructed and is semantically critical, declare `declare void @llvm.trap()` and emit `call @llvm.trap()` followed by `unreachable`, and note the gap in a comment.
                
                Output scaffold (follow this template; fill in the content):
                ; ModuleID = '<FUNC_NAME>'
                target triple = "x86_64-unknown-linux-gnu"
                
                ; Symbol: <IDA_NAME or 'unknown'>  ; Address: 0x<ADDR_HEX>
                ; Intent: <guess> (confidence=<0.00–1.00>). Evidence: <cue1–2>
                ; Preconditions: <if any>
                ; Postconditions: <if any>
                
                ; Only the needed extern declarations:
                ; declare i32 @printf(i8*, ...)
                ; declare i32 @putchar(i32)
                ; (declare other externs only if they are actually called)
                
                define dso_local <RET_TY> @<FUNC_NAME>(<C_ABI_PARAMS...>) local_unnamed_addr {
                entry:
                  ; body (SSA-friendly; no unnecessary alloca)
                  ret <RET_TY> <RET_VAL or void>
                }
                
                Final self-check (before emitting):
                - Output is exactly one IR module; no markdown/explanations/code fences (comments are OK).
                - The `ptr` token does not appear anywhere (typed pointers only).
                - Only externs that are actually referenced are declared.
                - Every basic block ends with a terminator.
                - The IR assembles cleanly with llvm-as (14).
                
                ```
                
    

** 최적화 릴리즈 빌드 -O2 ( 실무에서 제일 흔한 기본 릴리즈 최적화)

- 소스코드
    - 난독화 x
        - BFS
            - ida 함수 리스트
                
                ```notion
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "BFS",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1340",
                      "end": "0x1366",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x1370",
                      "end": "0x1399",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x13a0",
                      "end": "0x13d9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x13e0",
                      "end": "0x1419",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1420",
                      "end": "0x1429",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4058",
                      "end": "0x4060",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".malloc",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10c0",
                      "end": "0x133d",
                      "size": 637,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x142c",
                      "end": "0x1439",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "malloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 25
                user? candidates: 8
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : 5759502C7FC31F9EB412DB09AA5625E2DC880A80F87C29699BA1EBB12FB61D44
                    LOAD:0000000000000000 ; Input MD5    : CD413FEC6741DDB6AAEE6E2E4F77999F
                    LOAD:0000000000000000 ; Input CRC32  : 487DD0A1
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\BFS
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'BFS.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 3728h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 718h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 718h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 439h                 ; Size in file image
                    LOAD:0000000000000110                 dq 439h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 144h                 ; Size in file image
                    LOAD:0000000000000148                 dq 144h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DA0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000178                 dq 270h                 ; Size in file image
                    LOAD:0000000000000180                 dq 278h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DB0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DB0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2038h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2038h                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DA0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000300                 dq 260h                 ; Size in file image
                    LOAD:0000000000000308                 dq 260h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 61h, 0BBh, 88h, 0F5h, 6Eh, 0D6h, 0CCh, 39h, 0F8h, 0E2h ; Desc
                    LOAD:0000000000000382                 db 0A0h, 0C9h, 83h, 38h, 84h, 0A2h, 8Ah, 5Dh, 3, 0FDh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 9
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 9, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4C8, 12h, 0, 0, offset dword_0, \ ; "free"
                    LOAD:00000000000003F0                            0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4C8, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4C8, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aGmonStart - offset unk_4C8, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aMalloc - offset unk_4C8, 12h, 0, 0, offset dword_0,\ ; "malloc"
                    LOAD:0000000000000468                            0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aPrintfChk - offset unk_4C8, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498                 Elf64_Sym <offset aItmRegistertmc - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000498                            offset dword_0, 0>
                    LOAD:00000000000004B0                 Elf64_Sym <offset aCxaFinalize - offset unk_4C8, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:00000000000004B0                            offset dword_0, 0>
                    LOAD:00000000000004C8 ; ELF String Table
                    LOAD:00000000000004C8 unk_4C8         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C8                                         ; LOAD:0000000000000408↑o ...
                    LOAD:00000000000004C9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004B0↑o
                    LOAD:00000000000004D8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004E5 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:00000000000004EC aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004EC                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:00000000000004FE aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000503 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:0000000000000514 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000051E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000005B8↓o
                    LOAD:000000000000052A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000005C8↓o
                    LOAD:0000000000000534 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005D8↓o
                    LOAD:000000000000053F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000005E8↓o
                    LOAD:000000000000054B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000054B                                         ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:0000000000000567 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:0000000000000576 aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:0000000000000576                                         ; DATA XREF: LOAD:0000000000000498↑o
                    LOAD:0000000000000590 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000590                 dw 0
                    LOAD:0000000000000592                 dw 2                    ; free@@GLIBC_2.2.5
                    LOAD:0000000000000594                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000596                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:0000000000000598                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000059A                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000059C                 dw 2                    ; malloc@@GLIBC_2.2.5
                    LOAD:000000000000059E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:00000000000005A0                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:00000000000005A2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:00000000000005A4                 dw 0
                    LOAD:00000000000005A6                 dw 0
                    LOAD:00000000000005A8 ; ELF GNU Symbol Version Requirements
                    LOAD:00000000000005A8                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_4C8, 10h, 0> ; "libc.so.6"
                    LOAD:00000000000005B8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4C8, 10h> ; "GLIBC_2.3.4"
                    LOAD:00000000000005C8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4C8, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005D8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4C8, \ ; "GLIBC_2.34"
                    LOAD:00000000000005D8                                10h>
                    LOAD:00000000000005E8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4C8, 0> ; "GLIBC_2.2.5"
                    LOAD:00000000000005F8 ; ELF RELA Relocation Table
                    LOAD:00000000000005F8                 Elf64_Rela <3DA0h, 8, 1420h> ; R_X86_64_RELATIVE +1420h
                    LOAD:0000000000000610                 Elf64_Rela <3DA8h, 8, 13E0h> ; R_X86_64_RELATIVE +13E0h
                    LOAD:0000000000000628                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000640                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000658                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000670                 Elf64_Rela <3FE8h, 500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000688                 Elf64_Rela <3FF0h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:00000000000006A0                 Elf64_Rela <3FF8h, 900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:00000000000006B8 ; ELF JMPREL Relocation Table
                    LOAD:00000000000006B8                 Elf64_Rela <3FB8h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                    LOAD:00000000000006D0                 Elf64_Rela <3FC0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:00000000000006E8                 Elf64_Rela <3FC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT malloc
                    LOAD:0000000000000700                 Elf64_Rela <3FD0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000700 LOAD            ends
                    LOAD:0000000000000700
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j ...
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FA8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FB0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
                    .plt:000000000000105F                 align 20h
                    .plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
                    .plt:000000000000106F                 align 10h
                    .plt:000000000000106F ; } // starts at 1020
                    .plt:000000000000106F _plt            ends
                    .plt:000000000000106F
                    .plt.got:0000000000001070 ; ===========================================================================
                    .plt.got:0000000000001070
                    .plt.got:0000000000001070 ; Segment type: Pure code
                    .plt.got:0000000000001070 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001070 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001070                 assume cs:_plt_got
                    .plt.got:0000000000001070                 ;org 1070h
                    .plt.got:0000000000001070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000107B                 align 20h
                    .plt.got:000000000000107B ; } // starts at 1070
                    .plt.got:000000000000107B _plt_got        ends
                    .plt.got:000000000000107B
                    .plt.sec:0000000000001080 ; ===========================================================================
                    .plt.sec:0000000000001080
                    .plt.sec:0000000000001080 ; Segment type: Pure code
                    .plt.sec:0000000000001080 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001080 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001080                 assume cs:_plt_sec
                    .plt.sec:0000000000001080                 ;org 1080h
                    .plt.sec:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001080 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
                    .plt.sec:000000000000108B                 align 10h
                    .plt.sec:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000109B                 align 20h
                    .plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
                    .plt.sec:00000000000010AB                 align 10h
                    .plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:00000000000010BB                 align 20h
                    .plt.sec:00000000000010BB ; } // starts at 1080
                    .plt.sec:00000000000010BB _plt_sec        ends
                    .plt.sec:00000000000010BB
                    .text:00000000000010C0 ; ===========================================================================
                    .text:00000000000010C0
                    .text:00000000000010C0 ; Segment type: Pure code
                    .text:00000000000010C0 ; Segment permissions: Read/Execute
                    .text:00000000000010C0 _text           segment para public 'CODE' use64
                    .text:00000000000010C0                 assume cs:_text
                    .text:00000000000010C0                 ;org 10C0h
                    .text:00000000000010C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:00000000000010C0
                    .text:00000000000010C0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000010C0
                    .text:00000000000010C0
                    .text:00000000000010C0 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:00000000000010C0                 public main
                    .text:00000000000010C0 main            proc near               ; DATA XREF: _start+18↓o
                    .text:00000000000010C0
                    .text:00000000000010C0 var_158         = xmmword ptr -158h
                    .text:00000000000010C0 var_148         = qword ptr -148h
                    .text:00000000000010C0 var_140         = dword ptr -140h
                    .text:00000000000010C0 var_138         = byte ptr -138h
                    .text:00000000000010C0 var_F8          = dword ptr -0F8h
                    .text:00000000000010C0 var_F4          = qword ptr -0F4h
                    .text:00000000000010C0 var_DC          = dword ptr -0DCh
                    .text:00000000000010C0 var_D0          = qword ptr -0D0h
                    .text:00000000000010C0 var_C0          = dword ptr -0C0h
                    .text:00000000000010C0 var_AC          = dword ptr -0ACh
                    .text:00000000000010C0 var_A0          = dword ptr -0A0h
                    .text:00000000000010C0 var_84          = dword ptr -84h
                    .text:00000000000010C0 var_74          = dword ptr -74h
                    .text:00000000000010C0 var_64          = dword ptr -64h
                    .text:00000000000010C0 var_5C          = dword ptr -5Ch
                    .text:00000000000010C0 var_54          = dword ptr -54h
                    .text:00000000000010C0 var_3C          = dword ptr -3Ch
                    .text:00000000000010C0 var_30          = qword ptr -30h
                    .text:00000000000010C0
                    .text:00000000000010C0 ; __unwind {
                    .text:00000000000010C0                 endbr64
                    .text:00000000000010C4                 push    r14
                    .text:00000000000010C6                 mov     ecx, 18h
                    .text:00000000000010CB                 pcmpeqd xmm0, xmm0
                    .text:00000000000010CF                 push    r13
                    .text:00000000000010D1                 push    r12
                    .text:00000000000010D3                 push    rbp
                    .text:00000000000010D4                 push    rbx
                    .text:00000000000010D5                 sub     rsp, 130h
                    .text:00000000000010DC                 mov     rax, fs:28h
                    .text:00000000000010E5                 mov     [rsp+158h+var_30], rax
                    .text:00000000000010ED                 xor     eax, eax
                    .text:00000000000010EF                 lea     r13, [rsp+158h+var_F8]
                    .text:00000000000010F4                 mov     [rsp+158h+var_140], 0FFFFFFFFh
                    .text:00000000000010FC                 mov     rdi, r13
                    .text:00000000000010FF                 movaps  [rsp+158h+var_158], xmm0
                    .text:0000000000001103                 mov     [rsp+158h+var_148], 0FFFFFFFFFFFFFFFFh
                    .text:000000000000110C                 rep stosq
                    .text:000000000000110F                 mov     [rsp+158h+var_DC], 1
                    .text:0000000000001117                 mov     rax, 100000001h
                    .text:0000000000001121                 mov     [rsp+158h+var_F4], rax
                    .text:0000000000001126                 mov     [rsp+158h+var_D0], rax
                    .text:000000000000112E                 mov     [rsp+158h+var_C0], 1
                    .text:0000000000001139                 mov     [rsp+158h+var_AC], 1
                    .text:0000000000001144                 mov     [rsp+158h+var_A0], 1
                    .text:000000000000114F                 mov     dword ptr [rdi], 0
                    .text:0000000000001155                 mov     edi, 38h ; '8'  ; size
                    .text:000000000000115A                 mov     [rsp+158h+var_84], 1
                    .text:0000000000001165                 mov     [rsp+158h+var_74], 1
                    .text:0000000000001170                 mov     [rsp+158h+var_64], 1
                    .text:000000000000117B                 mov     [rsp+158h+var_5C], 1
                    .text:0000000000001186                 mov     [rsp+158h+var_54], 1
                    .text:0000000000001191                 mov     [rsp+158h+var_3C], 1
                    .text:000000000000119C                 call    _malloc
                    .text:00000000000011A1                 test    rax, rax
                    .text:00000000000011A4                 jz      loc_131B
                    .text:00000000000011AA                 mov     dword ptr [rsp+158h+var_158], 0
                    .text:00000000000011B1                 mov     rdi, rax        ; ptr
                    .text:00000000000011B4                 xor     edx, edx
                    .text:00000000000011B6                 xor     ebp, ebp
                    .text:00000000000011B8                 mov     qword ptr [rax], 0
                    .text:00000000000011BF                 mov     esi, 1
                    .text:00000000000011C4                 xor     eax, eax
                    .text:00000000000011C6                 lea     r12, [rsp+158h+var_138]
                    .text:00000000000011CB                 mov     rbx, rsp
                    .text:00000000000011CE                 xchg    ax, ax
                    .text:00000000000011D0
                    .text:00000000000011D0 loc_11D0:                               ; CODE XREF: main+182↓j
                    .text:00000000000011D0                 lea     rcx, ds:0[rax*8]
                    .text:00000000000011D8                 add     rbp, 1
                    .text:00000000000011DC                 lea     r8, [rbx+rax*4]
                    .text:00000000000011E0                 sub     rcx, rax
                    .text:00000000000011E3                 mov     [r12+rbp*8-8], rax
                    .text:00000000000011E8                 xor     eax, eax
                    .text:00000000000011EA                 lea     rcx, [r13+rcx*4+0]
                    .text:00000000000011EF                 jmp     short loc_11FB
                    .text:00000000000011EF ; ---------------------------------------------------------------------------
                    .text:00000000000011F1                 align 8
                    .text:00000000000011F8
                    .text:00000000000011F8 loc_11F8:                               ; CODE XREF: main+168↓j
                    .text:00000000000011F8                 mov     edx, [rcx+rax*4]
                    .text:00000000000011FB
                    .text:00000000000011FB loc_11FB:                               ; CODE XREF: main+12F↑j
                    .text:00000000000011FB                 test    edx, edx
                    .text:00000000000011FD                 jz      short loc_1220
                    .text:00000000000011FF                 cmp     dword ptr [rbx+rax*4], 0FFFFFFFFh
                    .text:0000000000001203                 jnz     short loc_1220
                    .text:0000000000001205                 mov     edx, [r8]
                    .text:0000000000001208                 mov     [rdi+rsi*8], rax
                    .text:000000000000120C                 add     rsi, 1
                    .text:0000000000001210                 add     edx, 1
                    .text:0000000000001213                 mov     [rbx+rax*4], edx
                    .text:0000000000001216                 db      2Eh
                    .text:0000000000001216                 nop     word ptr [rax+rax+00000000h]
                    .text:0000000000001220
                    .text:0000000000001220 loc_1220:                               ; CODE XREF: main+13D↑j
                    .text:0000000000001220                                         ; main+143↑j
                    .text:0000000000001220                 add     rax, 1
                    .text:0000000000001224                 cmp     rax, 7
                    .text:0000000000001228                 jnz     short loc_11F8
                    .text:000000000000122A                 cmp     rbp, rsi
                    .text:000000000000122D                 jnb     short loc_1248
                    .text:000000000000122F                 mov     rax, [rdi+rbp*8]
                    .text:0000000000001233                 lea     rdx, ds:0[rax*8]
                    .text:000000000000123B                 sub     rdx, rax
                    .text:000000000000123E                 mov     edx, [rsp+rdx*4+158h+var_F8]
                    .text:0000000000001242                 jmp     short loc_11D0
                    .text:0000000000001242 ; ---------------------------------------------------------------------------
                    .text:0000000000001244                 align 8
                    .text:0000000000001248
                    .text:0000000000001248 loc_1248:                               ; CODE XREF: main+16D↑j
                    .text:0000000000001248                 call    _free
                    .text:000000000000124D                 xor     edx, edx
                    .text:000000000000124F                 mov     edi, 1
                    .text:0000000000001254                 xor     eax, eax
                    .text:0000000000001256                 lea     rsi, aBfsOrderFromZu ; "BFS order from %zu: "
                    .text:000000000000125D                 lea     rbp, [rsp+rbp*8+158h+var_140]
                    .text:0000000000001262                 call    ___printf_chk
                    .text:0000000000001267                 lea     r13, aZuS       ; "%zu%s"
                    .text:000000000000126E                 lea     r14, aBfsOrderFromZu+13h ; " "
                    .text:0000000000001275
                    .text:0000000000001275 loc_1275:                               ; CODE XREF: main+256↓j
                    .text:0000000000001275                 mov     rdx, [r12]
                    .text:0000000000001279                 cmp     rbp, r12
                    .text:000000000000127C                 jnz     loc_1300
                    .text:0000000000001282                 lea     rcx, aDistZuZuD+16h ; ""
                    .text:0000000000001289                 mov     rsi, r13
                    .text:000000000000128C                 mov     edi, 1
                    .text:0000000000001291                 xor     eax, eax
                    .text:0000000000001293                 call    ___printf_chk
                    .text:0000000000001298
                    .text:0000000000001298 loc_1298:                               ; CODE XREF: main+273↓j
                    .text:0000000000001298                 lea     rsi, aDistZuZuD+15h ; "\n"
                    .text:000000000000129F                 mov     edi, 1
                    .text:00000000000012A4                 xor     eax, eax
                    .text:00000000000012A6                 xor     ebp, ebp
                    .text:00000000000012A8                 call    ___printf_chk
                    .text:00000000000012AD                 lea     r12, aDistZuZuD ; "dist(%zu -> %zu) = %d\n"
                    .text:00000000000012B4                 nop     dword ptr [rax+00h]
                    .text:00000000000012B8
                    .text:00000000000012B8 loc_12B8:                               ; CODE XREF: main+218↓j
                    .text:00000000000012B8                 mov     r8d, [rbx+rbp*4]
                    .text:00000000000012BC                 mov     rcx, rbp
                    .text:00000000000012BF                 xor     edx, edx
                    .text:00000000000012C1                 mov     rsi, r12
                    .text:00000000000012C4                 mov     edi, 1
                    .text:00000000000012C9                 xor     eax, eax
                    .text:00000000000012CB                 add     rbp, 1
                    .text:00000000000012CF                 call    ___printf_chk
                    .text:00000000000012D4                 cmp     rbp, 7
                    .text:00000000000012D8                 jnz     short loc_12B8
                    .text:00000000000012DA                 mov     rax, [rsp+158h+var_30]
                    .text:00000000000012E2                 sub     rax, fs:28h
                    .text:00000000000012EB                 jnz     short loc_1338
                    .text:00000000000012ED                 add     rsp, 130h
                    .text:00000000000012F4                 xor     eax, eax
                    .text:00000000000012F6                 pop     rbx
                    .text:00000000000012F7                 pop     rbp
                    .text:00000000000012F8                 pop     r12
                    .text:00000000000012FA                 pop     r13
                    .text:00000000000012FC                 pop     r14
                    .text:00000000000012FE                 retn
                    .text:00000000000012FE ; ---------------------------------------------------------------------------
                    .text:00000000000012FF                 align 20h
                    .text:0000000000001300
                    .text:0000000000001300 loc_1300:                               ; CODE XREF: main+1BC↑j
                    .text:0000000000001300                 mov     rcx, r14
                    .text:0000000000001303                 mov     rsi, r13
                    .text:0000000000001306                 mov     edi, 1
                    .text:000000000000130B                 xor     eax, eax
                    .text:000000000000130D                 call    ___printf_chk
                    .text:0000000000001312                 add     r12, 8
                    .text:0000000000001316                 jmp     loc_1275
                    .text:000000000000131B ; ---------------------------------------------------------------------------
                    .text:000000000000131B
                    .text:000000000000131B loc_131B:                               ; CODE XREF: main+E4↑j
                    .text:000000000000131B                 xor     edx, edx
                    .text:000000000000131D                 lea     rsi, aBfsOrderFromZu ; "BFS order from %zu: "
                    .text:0000000000001324                 mov     edi, 1
                    .text:0000000000001329                 xor     eax, eax
                    .text:000000000000132B                 call    ___printf_chk
                    .text:0000000000001330                 mov     rbx, rsp
                    .text:0000000000001333                 jmp     loc_1298
                    .text:0000000000001338 ; ---------------------------------------------------------------------------
                    .text:0000000000001338
                    .text:0000000000001338 loc_1338:                               ; CODE XREF: main+22B↑j
                    .text:0000000000001338                 call    ___stack_chk_fail
                    .text:0000000000001338 ; } // starts at 10C0
                    .text:0000000000001338 main            endp
                    .text:0000000000001338
                    .text:0000000000001338 ; ---------------------------------------------------------------------------
                    .text:000000000000133D                 align 20h
                    .text:0000000000001340
                    .text:0000000000001340 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001340
                    .text:0000000000001340 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001340
                    .text:0000000000001340                 public _start
                    .text:0000000000001340 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001340 ; __unwind {
                    .text:0000000000001340                 endbr64
                    .text:0000000000001344                 xor     ebp, ebp
                    .text:0000000000001346                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001349                 pop     rsi             ; argc
                    .text:000000000000134A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000134D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001351                 push    rax
                    .text:0000000000001352                 push    rsp             ; stack_end
                    .text:0000000000001353                 xor     r8d, r8d        ; fini
                    .text:0000000000001356                 xor     ecx, ecx        ; init
                    .text:0000000000001358                 lea     rdi, main       ; main
                    .text:000000000000135F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001365                 hlt
                    .text:0000000000001365 ; } // starts at 1340
                    .text:0000000000001365 _start          endp
                    .text:0000000000001365
                    .text:0000000000001365 ; ---------------------------------------------------------------------------
                    .text:0000000000001366                 align 10h
                    .text:0000000000001370
                    .text:0000000000001370 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001370
                    .text:0000000000001370
                    .text:0000000000001370 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1407↓p
                    .text:0000000000001370                 lea     rdi, __bss_start
                    .text:0000000000001377                 lea     rax, __bss_start
                    .text:000000000000137E                 cmp     rax, rdi
                    .text:0000000000001381                 jz      short locret_1398
                    .text:0000000000001383                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:000000000000138A                 test    rax, rax
                    .text:000000000000138D                 jz      short locret_1398
                    .text:000000000000138F                 jmp     rax
                    .text:000000000000138F ; ---------------------------------------------------------------------------
                    .text:0000000000001391                 align 8
                    .text:0000000000001398
                    .text:0000000000001398 locret_1398:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:0000000000001398                                         ; deregister_tm_clones+1D↑j
                    .text:0000000000001398                 retn
                    .text:0000000000001398 deregister_tm_clones endp
                    .text:0000000000001398
                    .text:0000000000001398 ; ---------------------------------------------------------------------------
                    .text:0000000000001399                 align 20h
                    .text:00000000000013A0
                    .text:00000000000013A0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000013A0
                    .text:00000000000013A0
                    .text:00000000000013A0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:00000000000013A0                 lea     rdi, __bss_start
                    .text:00000000000013A7                 lea     rsi, __bss_start
                    .text:00000000000013AE                 sub     rsi, rdi
                    .text:00000000000013B1                 mov     rax, rsi
                    .text:00000000000013B4                 shr     rsi, 3Fh
                    .text:00000000000013B8                 sar     rax, 3
                    .text:00000000000013BC                 add     rsi, rax
                    .text:00000000000013BF                 sar     rsi, 1
                    .text:00000000000013C2                 jz      short locret_13D8
                    .text:00000000000013C4                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:00000000000013CB                 test    rax, rax
                    .text:00000000000013CE                 jz      short locret_13D8
                    .text:00000000000013D0                 jmp     rax
                    .text:00000000000013D0 ; ---------------------------------------------------------------------------
                    .text:00000000000013D2                 align 8
                    .text:00000000000013D8
                    .text:00000000000013D8 locret_13D8:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:00000000000013D8                                         ; register_tm_clones+2E↑j
                    .text:00000000000013D8                 retn
                    .text:00000000000013D8 register_tm_clones endp
                    .text:00000000000013D8
                    .text:00000000000013D8 ; ---------------------------------------------------------------------------
                    .text:00000000000013D9                 align 20h
                    .text:00000000000013E0
                    .text:00000000000013E0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000013E0
                    .text:00000000000013E0
                    .text:00000000000013E0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:00000000000013E0                 endbr64
                    .text:00000000000013E4                 cmp     cs:__bss_start, 0
                    .text:00000000000013EB                 jnz     short locret_1418
                    .text:00000000000013ED                 push    rbp
                    .text:00000000000013EE                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:00000000000013F6                 mov     rbp, rsp
                    .text:00000000000013F9                 jz      short loc_1407
                    .text:00000000000013FB                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001402                 call    __cxa_finalize
                    .text:0000000000001407
                    .text:0000000000001407 loc_1407:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001407                 call    deregister_tm_clones
                    .text:000000000000140C                 mov     cs:__bss_start, 1
                    .text:0000000000001413                 pop     rbp
                    .text:0000000000001414                 retn
                    .text:0000000000001414 ; ---------------------------------------------------------------------------
                    .text:0000000000001415                 align 8
                    .text:0000000000001418
                    .text:0000000000001418 locret_1418:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001418                 retn
                    .text:0000000000001418 __do_global_dtors_aux endp
                    .text:0000000000001418
                    .text:0000000000001418 ; ---------------------------------------------------------------------------
                    .text:0000000000001419                 align 20h
                    .text:0000000000001420
                    .text:0000000000001420 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001420
                    .text:0000000000001420
                    .text:0000000000001420 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001420                 endbr64
                    .text:0000000000001424                 jmp     register_tm_clones
                    .text:0000000000001424 frame_dummy     endp
                    .text:0000000000001424
                    .text:0000000000001424 _text           ends
                    .text:0000000000001424
                    LOAD:0000000000001429 ; ===========================================================================
                    LOAD:0000000000001429
                    LOAD:0000000000001429 ; Segment type: Pure code
                    LOAD:0000000000001429 ; Segment permissions: Read/Execute
                    LOAD:0000000000001429 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001429                 assume cs:LOAD
                    LOAD:0000000000001429                 ;org 1429h
                    LOAD:0000000000001429                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001429                 align 4
                    LOAD:0000000000001429 LOAD            ends
                    LOAD:0000000000001429
                    .fini:000000000000142C ; ===========================================================================
                    .fini:000000000000142C
                    .fini:000000000000142C ; Segment type: Pure code
                    .fini:000000000000142C ; Segment permissions: Read/Execute
                    .fini:000000000000142C _fini           segment dword public 'CODE' use64
                    .fini:000000000000142C                 assume cs:_fini
                    .fini:000000000000142C                 ;org 142Ch
                    .fini:000000000000142C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000142C
                    .fini:000000000000142C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000142C
                    .fini:000000000000142C
                    .fini:000000000000142C                 public _term_proc
                    .fini:000000000000142C _term_proc      proc near
                    .fini:000000000000142C                 endbr64                 ; _fini
                    .fini:0000000000001430                 sub     rsp, 8
                    .fini:0000000000001434                 add     rsp, 8
                    .fini:0000000000001438                 retn
                    .fini:0000000000001438 _term_proc      endp
                    .fini:0000000000001438
                    .fini:0000000000001438 _fini           ends
                    .fini:0000000000001438
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 aBfsOrderFromZu db 'BFS order from %zu: ',0
                    .rodata:0000000000002004                                         ; DATA XREF: main+196↑o
                    .rodata:0000000000002004                                         ; main+25D↑o
                    .rodata:0000000000002019 aDistZuZuD      db 'dist(%zu -> %zu) = %d',0Ah,0
                    .rodata:0000000000002019                                         ; DATA XREF: main+1ED↑o
                    .rodata:0000000000002030 aZuS            db '%zu%s',0            ; DATA XREF: main+1A7↑o
                    .rodata:0000000000002030 _rodata         ends
                    .rodata:0000000000002030
                    LOAD:0000000000002036 ; ===========================================================================
                    LOAD:0000000000002036
                    LOAD:0000000000002036 ; Segment type: Pure data
                    LOAD:0000000000002036 ; Segment permissions: Read
                    LOAD:0000000000002036 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000002036                 assume cs:LOAD
                    LOAD:0000000000002036                 ;org 2036h
                    LOAD:0000000000002036                 align 8
                    LOAD:0000000000002036 LOAD            ends
                    LOAD:0000000000002036
                    .eh_frame_hdr:0000000000002038 ; ===========================================================================
                    .eh_frame_hdr:0000000000002038
                    .eh_frame_hdr:0000000000002038 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002038 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002038 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002038                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002038                 ;org 2038h
                    .eh_frame_hdr:0000000000002038 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002039                 db  1Bh
                    .eh_frame_hdr:000000000000203A                 db    3
                    .eh_frame_hdr:000000000000203B                 db  3Bh ; ;
                    .eh_frame_hdr:000000000000203C                 db  34h ; 4
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:0000000000002040                 db    5
                    .eh_frame_hdr:0000000000002041                 db    0
                    .eh_frame_hdr:0000000000002042                 db    0
                    .eh_frame_hdr:0000000000002043                 db    0
                    .eh_frame_hdr:0000000000002044                 db 0E8h
                    .eh_frame_hdr:0000000000002045                 db 0EFh
                    .eh_frame_hdr:0000000000002046                 db 0FFh
                    .eh_frame_hdr:0000000000002047                 db 0FFh
                    .eh_frame_hdr:0000000000002048                 db  68h ; h
                    .eh_frame_hdr:0000000000002049                 db    0
                    .eh_frame_hdr:000000000000204A                 db    0
                    .eh_frame_hdr:000000000000204B                 db    0
                    .eh_frame_hdr:000000000000204C                 db  38h ; 8
                    .eh_frame_hdr:000000000000204D                 db 0F0h
                    .eh_frame_hdr:000000000000204E                 db 0FFh
                    .eh_frame_hdr:000000000000204F                 db 0FFh
                    .eh_frame_hdr:0000000000002050                 db  90h
                    .eh_frame_hdr:0000000000002051                 db    0
                    .eh_frame_hdr:0000000000002052                 db    0
                    .eh_frame_hdr:0000000000002053                 db    0
                    .eh_frame_hdr:0000000000002054                 db  48h ; H
                    .eh_frame_hdr:0000000000002055                 db 0F0h
                    .eh_frame_hdr:0000000000002056                 db 0FFh
                    .eh_frame_hdr:0000000000002057                 db 0FFh
                    .eh_frame_hdr:0000000000002058                 db 0A8h
                    .eh_frame_hdr:0000000000002059                 db    0
                    .eh_frame_hdr:000000000000205A                 db    0
                    .eh_frame_hdr:000000000000205B                 db    0
                    .eh_frame_hdr:000000000000205C                 db  88h
                    .eh_frame_hdr:000000000000205D                 db 0F0h
                    .eh_frame_hdr:000000000000205E                 db 0FFh
                    .eh_frame_hdr:000000000000205F                 db 0FFh
                    .eh_frame_hdr:0000000000002060                 db 0C0h
                    .eh_frame_hdr:0000000000002061                 db    0
                    .eh_frame_hdr:0000000000002062                 db    0
                    .eh_frame_hdr:0000000000002063                 db    0
                    .eh_frame_hdr:0000000000002064                 db    8
                    .eh_frame_hdr:0000000000002065                 db 0F3h
                    .eh_frame_hdr:0000000000002066                 db 0FFh
                    .eh_frame_hdr:0000000000002067                 db 0FFh
                    .eh_frame_hdr:0000000000002068                 db  50h ; P
                    .eh_frame_hdr:0000000000002069                 db    0
                    .eh_frame_hdr:000000000000206A                 db    0
                    .eh_frame_hdr:000000000000206B                 db    0
                    .eh_frame_hdr:000000000000206B _eh_frame_hdr   ends
                    .eh_frame_hdr:000000000000206B
                    LOAD:000000000000206C ; ===========================================================================
                    LOAD:000000000000206C
                    LOAD:000000000000206C ; Segment type: Pure data
                    LOAD:000000000000206C ; Segment permissions: Read
                    LOAD:000000000000206C LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000206C                 assume cs:LOAD
                    LOAD:000000000000206C                 ;org 206Ch
                    LOAD:000000000000206C                 align 10h
                    LOAD:000000000000206C LOAD            ends
                    LOAD:000000000000206C
                    .eh_frame:0000000000002070 ; ===========================================================================
                    .eh_frame:0000000000002070
                    .eh_frame:0000000000002070 ; Segment type: Pure data
                    .eh_frame:0000000000002070 ; Segment permissions: Read
                    .eh_frame:0000000000002070 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002070                 assume cs:_eh_frame
                    .eh_frame:0000000000002070                 ;org 2070h
                    .eh_frame:0000000000002070                 db  14h
                    .eh_frame:0000000000002071                 db    0
                    .eh_frame:0000000000002072                 db    0
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db    0
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db    1
                    .eh_frame:0000000000002079                 db  7Ah ; z
                    .eh_frame:000000000000207A                 db  52h ; R
                    .eh_frame:000000000000207B                 db    0
                    .eh_frame:000000000000207C                 db    1
                    .eh_frame:000000000000207D                 db  78h ; x
                    .eh_frame:000000000000207E                 db  10h
                    .eh_frame:000000000000207F                 db    1
                    .eh_frame:0000000000002080                 db  1Bh
                    .eh_frame:0000000000002081                 db  0Ch
                    .eh_frame:0000000000002082                 db    7
                    .eh_frame:0000000000002083                 db    8
                    .eh_frame:0000000000002084                 db  90h
                    .eh_frame:0000000000002085                 db    1
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db  14h
                    .eh_frame:0000000000002089                 db    0
                    .eh_frame:000000000000208A                 db    0
                    .eh_frame:000000000000208B                 db    0
                    .eh_frame:000000000000208C                 db  1Ch
                    .eh_frame:000000000000208D                 db    0
                    .eh_frame:000000000000208E                 db    0
                    .eh_frame:000000000000208F                 db    0
                    .eh_frame:0000000000002090                 db 0B0h
                    .eh_frame:0000000000002091                 db 0F2h
                    .eh_frame:0000000000002092                 db 0FFh
                    .eh_frame:0000000000002093                 db 0FFh
                    .eh_frame:0000000000002094                 db  26h ; &
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db    0
                    .eh_frame:0000000000002099                 db  44h ; D
                    .eh_frame:000000000000209A                 db    7
                    .eh_frame:000000000000209B                 db  10h
                    .eh_frame:000000000000209C                 db    0
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db  24h ; $
                    .eh_frame:00000000000020A1                 db    0
                    .eh_frame:00000000000020A2                 db    0
                    .eh_frame:00000000000020A3                 db    0
                    .eh_frame:00000000000020A4                 db  34h ; 4
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db  78h ; x
                    .eh_frame:00000000000020A9                 db 0EFh
                    .eh_frame:00000000000020AA                 db 0FFh
                    .eh_frame:00000000000020AB                 db 0FFh
                    .eh_frame:00000000000020AC                 db  50h ; P
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db    0
                    .eh_frame:00000000000020B1                 db  0Eh
                    .eh_frame:00000000000020B2                 db  10h
                    .eh_frame:00000000000020B3                 db  46h ; F
                    .eh_frame:00000000000020B4                 db  0Eh
                    .eh_frame:00000000000020B5                 db  18h
                    .eh_frame:00000000000020B6                 db  4Ah ; J
                    .eh_frame:00000000000020B7                 db  0Fh
                    .eh_frame:00000000000020B8                 db  0Bh
                    .eh_frame:00000000000020B9                 db  77h ; w
                    .eh_frame:00000000000020BA                 db    8
                    .eh_frame:00000000000020BB                 db  80h
                    .eh_frame:00000000000020BC                 db    0
                    .eh_frame:00000000000020BD                 db  3Fh ; ?
                    .eh_frame:00000000000020BE                 db  1Ah
                    .eh_frame:00000000000020BF                 db  3Ah ; :
                    .eh_frame:00000000000020C0                 db  2Ah ; *
                    .eh_frame:00000000000020C1                 db  33h ; 3
                    .eh_frame:00000000000020C2                 db  24h ; $
                    .eh_frame:00000000000020C3                 db  22h ; "
                    .eh_frame:00000000000020C4                 db    0
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  14h
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db  5Ch ; \
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db 0A0h
                    .eh_frame:00000000000020D1                 db 0EFh
                    .eh_frame:00000000000020D2                 db 0FFh
                    .eh_frame:00000000000020D3                 db 0FFh
                    .eh_frame:00000000000020D4                 db  10h
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db    0
                    .eh_frame:00000000000020D9                 db    0
                    .eh_frame:00000000000020DA                 db    0
                    .eh_frame:00000000000020DB                 db    0
                    .eh_frame:00000000000020DC                 db    0
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db  14h
                    .eh_frame:00000000000020E1                 db    0
                    .eh_frame:00000000000020E2                 db    0
                    .eh_frame:00000000000020E3                 db    0
                    .eh_frame:00000000000020E4                 db  74h ; t
                    .eh_frame:00000000000020E5                 db    0
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db  98h
                    .eh_frame:00000000000020E9                 db 0EFh
                    .eh_frame:00000000000020EA                 db 0FFh
                    .eh_frame:00000000000020EB                 db 0FFh
                    .eh_frame:00000000000020EC                 db  40h ; @
                    .eh_frame:00000000000020ED                 db    0
                    .eh_frame:00000000000020EE                 db    0
                    .eh_frame:00000000000020EF                 db    0
                    .eh_frame:00000000000020F0                 db    0
                    .eh_frame:00000000000020F1                 db    0
                    .eh_frame:00000000000020F2                 db    0
                    .eh_frame:00000000000020F3                 db    0
                    .eh_frame:00000000000020F4                 db    0
                    .eh_frame:00000000000020F5                 db    0
                    .eh_frame:00000000000020F6                 db    0
                    .eh_frame:00000000000020F7                 db    0
                    .eh_frame:00000000000020F8                 db  44h ; D
                    .eh_frame:00000000000020F9                 db    0
                    .eh_frame:00000000000020FA                 db    0
                    .eh_frame:00000000000020FB                 db    0
                    .eh_frame:00000000000020FC                 db  8Ch
                    .eh_frame:00000000000020FD                 db    0
                    .eh_frame:00000000000020FE                 db    0
                    .eh_frame:00000000000020FF                 db    0
                    .eh_frame:0000000000002100                 db 0C0h
                    .eh_frame:0000000000002101                 db 0EFh
                    .eh_frame:0000000000002102                 db 0FFh
                    .eh_frame:0000000000002103                 db 0FFh
                    .eh_frame:0000000000002104                 db  7Dh ; }
                    .eh_frame:0000000000002105                 db    2
                    .eh_frame:0000000000002106                 db    0
                    .eh_frame:0000000000002107                 db    0
                    .eh_frame:0000000000002108                 db    0
                    .eh_frame:0000000000002109                 db  46h ; F
                    .eh_frame:000000000000210A                 db  0Eh
                    .eh_frame:000000000000210B                 db  10h
                    .eh_frame:000000000000210C                 db  8Eh
                    .eh_frame:000000000000210D                 db    2
                    .eh_frame:000000000000210E                 db  4Bh ; K
                    .eh_frame:000000000000210F                 db  0Eh
                    .eh_frame:0000000000002110                 db  18h
                    .eh_frame:0000000000002111                 db  8Dh
                    .eh_frame:0000000000002112                 db    3
                    .eh_frame:0000000000002113                 db  42h ; B
                    .eh_frame:0000000000002114                 db  0Eh
                    .eh_frame:0000000000002115                 db  20h
                    .eh_frame:0000000000002116                 db  8Ch
                    .eh_frame:0000000000002117                 db    4
                    .eh_frame:0000000000002118                 db  41h ; A
                    .eh_frame:0000000000002119                 db  0Eh
                    .eh_frame:000000000000211A                 db  28h ; (
                    .eh_frame:000000000000211B                 db  86h
                    .eh_frame:000000000000211C                 db    5
                    .eh_frame:000000000000211D                 db  41h ; A
                    .eh_frame:000000000000211E                 db  0Eh
                    .eh_frame:000000000000211F                 db  30h ; 0
                    .eh_frame:0000000000002120                 db  83h
                    .eh_frame:0000000000002121                 db    6
                    .eh_frame:0000000000002122                 db  47h ; G
                    .eh_frame:0000000000002123                 db  0Eh
                    .eh_frame:0000000000002124                 db 0E0h
                    .eh_frame:0000000000002125                 db    2
                    .eh_frame:0000000000002126                 db    3
                    .eh_frame:0000000000002127                 db  18h
                    .eh_frame:0000000000002128                 db    2
                    .eh_frame:0000000000002129                 db  0Ah
                    .eh_frame:000000000000212A                 db  0Eh
                    .eh_frame:000000000000212B                 db  30h ; 0
                    .eh_frame:000000000000212C                 db  43h ; C
                    .eh_frame:000000000000212D                 db  0Eh
                    .eh_frame:000000000000212E                 db  28h ; (
                    .eh_frame:000000000000212F                 db  41h ; A
                    .eh_frame:0000000000002130                 db  0Eh
                    .eh_frame:0000000000002131                 db  20h
                    .eh_frame:0000000000002132                 db  42h ; B
                    .eh_frame:0000000000002133                 db  0Eh
                    .eh_frame:0000000000002134                 db  18h
                    .eh_frame:0000000000002135                 db  42h ; B
                    .eh_frame:0000000000002136                 db  0Eh
                    .eh_frame:0000000000002137                 db  10h
                    .eh_frame:0000000000002138                 db  42h ; B
                    .eh_frame:0000000000002139                 db  0Eh
                    .eh_frame:000000000000213A                 db    8
                    .eh_frame:000000000000213B                 db  42h ; B
                    .eh_frame:000000000000213C                 db  0Bh
                    .eh_frame:000000000000213D                 db    0
                    .eh_frame:000000000000213E                 db    0
                    .eh_frame:000000000000213F                 db    0
                    .eh_frame:0000000000002140 __FRAME_END__   db    0
                    .eh_frame:0000000000002141                 db    0
                    .eh_frame:0000000000002142                 db    0
                    .eh_frame:0000000000002143                 db    0
                    .eh_frame:0000000000002143 _eh_frame       ends
                    .eh_frame:0000000000002143
                    .init_array:0000000000003DA0 ; ELF Initialization Function Table
                    .init_array:0000000000003DA0 ; ===========================================================================
                    .init_array:0000000000003DA0
                    .init_array:0000000000003DA0 ; Segment type: Pure data
                    .init_array:0000000000003DA0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DA0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DA0                 assume cs:_init_array
                    .init_array:0000000000003DA0                 ;org 3DA0h
                    .init_array:0000000000003DA0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DA0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DA0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DA0 _init_array     ends
                    .init_array:0000000000003DA0
                    .fini_array:0000000000003DA8 ; ELF Termination Function Table
                    .fini_array:0000000000003DA8 ; ===========================================================================
                    .fini_array:0000000000003DA8
                    .fini_array:0000000000003DA8 ; Segment type: Pure data
                    .fini_array:0000000000003DA8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DA8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DA8                 assume cs:_fini_array
                    .fini_array:0000000000003DA8                 ;org 3DA8h
                    .fini_array:0000000000003DA8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DA8 _fini_array     ends
                    .fini_array:0000000000003DA8
                    LOAD:0000000000003DB0 ; ELF Dynamic Information
                    LOAD:0000000000003DB0 ; ===========================================================================
                    LOAD:0000000000003DB0
                    LOAD:0000000000003DB0 ; Segment type: Pure data
                    LOAD:0000000000003DB0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DB0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DB0                 assume cs:LOAD
                    LOAD:0000000000003DB0                 ;org 3DB0h
                    LOAD:0000000000003DB0 _DYNAMIC        Elf64_Dyn <1, 4Ch>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DB0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DB0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DC0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Dh, 142Ch>  ; DT_FINI
                    LOAD:0000000000003DE0                 Elf64_Dyn <19h, 3DA0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003DF0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E00                 Elf64_Dyn <1Ah, 3DA8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E20                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E30                 Elf64_Dyn <5, 4C8h>     ; DT_STRTAB
                    LOAD:0000000000003E40                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <0Ah, 0C8h>   ; DT_STRSZ
                    LOAD:0000000000003E60                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E70                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E80                 Elf64_Dyn <3, 3FA0h>    ; DT_PLTGOT
                    LOAD:0000000000003E90                 Elf64_Dyn <2, 60h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EA0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EB0                 Elf64_Dyn <17h, 6B8h>   ; DT_JMPREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <7, 5F8h>     ; DT_RELA
                    LOAD:0000000000003ED0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EE0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003EF0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F00                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFEh, 5A8h> ; DT_VERNEED
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFF0h, 590h> ; DT_VERSYM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F50                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F60                 db    0
                    LOAD:0000000000003F61                 db    0
                    LOAD:0000000000003F62                 db    0
                    LOAD:0000000000003F63                 db    0
                    LOAD:0000000000003F64                 db    0
                    LOAD:0000000000003F65                 db    0
                    LOAD:0000000000003F66                 db    0
                    LOAD:0000000000003F67                 db    0
                    LOAD:0000000000003F68                 db    0
                    LOAD:0000000000003F69                 db    0
                    LOAD:0000000000003F6A                 db    0
                    LOAD:0000000000003F6B                 db    0
                    LOAD:0000000000003F6C                 db    0
                    LOAD:0000000000003F6D                 db    0
                    LOAD:0000000000003F6E                 db    0
                    LOAD:0000000000003F6F                 db    0
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003F9F LOAD            ends
                    LOAD:0000000000003F9F
                    .got:0000000000003FA0 ; ===========================================================================
                    .got:0000000000003FA0
                    .got:0000000000003FA0 ; Segment type: Pure data
                    .got:0000000000003FA0 ; Segment permissions: Read/Write
                    .got:0000000000003FA0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FA0                 assume cs:_got
                    .got:0000000000003FA0                 ;org 3FA0h
                    .got:0000000000003FA0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FA8 qword_3FA8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FB0 qword_3FB0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FB8 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
                    .got:0000000000003FC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC0                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; void free(void *ptr)
                    extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
                    extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
                    extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004028                 extrn __libc_start_main:near
                    extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004030                 extrn __stack_chk_fail:near
                    extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004038 ; void *malloc(size_t size)
                    extern:0000000000004038                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:malloc_ptr↑o
                    extern:0000000000004040                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004040                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004048 ; int __cxa_finalize(void *)
                    extern:0000000000004048                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004048                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004050                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004058                 extrn __gmon_start__:near ; weak
                    extern:0000000000004058                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004058                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004060                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004060                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004060
                    extern:0000000000004060
                    extern:0000000000004060                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x10C0
                    ; Intent: breadth-first search on a fixed 7-node graph and print order/distances from source 0 (confidence=0.85). Evidence: stack-built 7x7 adjacency matrix, queue via malloc/free, distance array with -1 sentinel and __printf_chk outputs.
                    ; Preconditions: none
                    ; Postconditions: prints BFS order and dist(0 -> v) for v in [0,6]
                    
                    @.str_bfs = private unnamed_addr constant [21 x i8] c"BFS order from %zu: \00", align 1
                    @.str_zus = private unnamed_addr constant [6 x i8] c"%zu%s\00", align 1
                    @.str_space = private unnamed_addr constant [2 x i8] c" \00", align 1
                    @.str_empty = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
                    @.str_nl = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
                    @.str_dist = private unnamed_addr constant [23 x i8] c"dist(%zu -> %zu) = %d\0A\00", align 1
                    
                    ; Only the needed extern declarations:
                    declare noalias i8* @malloc(i64)
                    declare void @free(i8*)
                    declare i32 @__printf_chk(i32, i8*, ...)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    ; locals
                    %adj = alloca [7 x [7 x i32]], align 16
                    %dist = alloca [7 x i32], align 16
                    %order = alloca [7 x i64], align 16
                    %head = alloca i64, align 8
                    %tail = alloca i64, align 8
                    %ordcnt = alloca i64, align 8
                    
                    ; zero adjacency
                    store [7 x [7 x i32]] zeroinitializer, [7 x [7 x i32]]* %adj, align 16
                    
                    ; set specific edges (nonzero means edge)
                    %r0 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 0
                    %r1 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 1
                    %r2 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 2
                    %r3 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 3
                    %r4 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 4
                    %r5 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 5
                    %r6 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 6
                    
                    ; row 0: col 1,2,6 = 1
                    %r0c1 = getelementptr inbounds [7 x i32], [7 x i32]* %r0, i64 0, i64 1
                    %r0c2 = getelementptr inbounds [7 x i32], [7 x i32]* %r0, i64 0, i64 2
                    %r0c6 = getelementptr inbounds [7 x i32], [7 x i32]* %r0, i64 0, i64 6
                    store i32 1, i32* %r0c1, align 4
                    store i32 1, i32* %r0c2, align 4
                    store i32 1, i32* %r0c6, align 4
                    
                    ; row 1: col 0,1,6 = 1
                    %r1c0 = getelementptr inbounds [7 x i32], [7 x i32]* %r1, i64 0, i64 0
                    %r1c1 = getelementptr inbounds [7 x i32], [7 x i32]* %r1, i64 0, i64 1
                    %r1c6 = getelementptr inbounds [7 x i32], [7 x i32]* %r1, i64 0, i64 6
                    store i32 1, i32* %r1c0, align 4
                    store i32 1, i32* %r1c1, align 4
                    store i32 1, i32* %r1c6, align 4
                    
                    ; row 2: col 5 = 1
                    %r2c5 = getelementptr inbounds [7 x i32], [7 x i32]* %r2, i64 0, i64 5
                    store i32 1, i32* %r2c5, align 4
                    
                    ; row 3: col 1 = 1
                    %r3c1 = getelementptr inbounds [7 x i32], [7 x i32]* %r3, i64 0, i64 1
                    store i32 1, i32* %r3c1, align 4
                    
                    ; row 4: col 1,5 = 1
                    %r4c1 = getelementptr inbounds [7 x i32], [7 x i32]* %r4, i64 0, i64 1
                    %r4c5 = getelementptr inbounds [7 x i32], [7 x i32]* %r4, i64 0, i64 5
                    store i32 1, i32* %r4c1, align 4
                    store i32 1, i32* %r4c5, align 4
                    
                    ; row 5: col 2,4,6 = 1
                    %r5c2 = getelementptr inbounds [7 x i32], [7 x i32]* %r5, i64 0, i64 2
                    %r5c4 = getelementptr inbounds [7 x i32], [7 x i32]* %r5, i64 0, i64 4
                    %r5c6 = getelementptr inbounds [7 x i32], [7 x i32]* %r5, i64 0, i64 6
                    store i32 1, i32* %r5c2, align 4
                    store i32 1, i32* %r5c4, align 4
                    store i32 1, i32* %r5c6, align 4
                    
                    ; row 6: col 5 = 1
                    %r6c5 = getelementptr inbounds [7 x i32], [7 x i32]* %r6, i64 0, i64 5
                    store i32 1, i32* %r6c5, align 4
                    
                    ; initialize dist[] = -1
                    br label %init_dist
                    
                    init_dist:
                    %i0 = phi i64 [ 0, %entry ], [ %i1, %init_dist.body ]
                    %done_init = icmp eq i64 %i0, 7
                    br i1 %done_init, label %after_init_dist, label %init_dist.body
                    
                    init_dist.body:
                    %dptr = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %i0
                    store i32 -1, i32* %dptr, align 4
                    %i1 = add i64 %i0, 1
                    br label %init_dist
                    
                    after_init_dist:
                    ; allocate queue of 7 x i64
                    %qraw = call noalias i8* @malloc(i64 56)
                    %isnull = icmp eq i8* %qraw, null
                    br i1 %isnull, label %malloc_fail, label %malloc_ok
                    
                    malloc_ok:
                    %queue = bitcast i8* %qraw to i64*
                    ; queue[0] = 0, head=0, tail=1, ordcnt=0, dist[0]=0
                    store i64 0, i64* %queue, align 8
                    store i64 0, i64* %head, align 8
                    store i64 1, i64* %tail, align 8
                    store i64 0, i64* %ordcnt, align 8
                    %dist0 = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 0
                    store i32 0, i32* %dist0, align 4
                    br label %bfs.cond
                    
                    bfs.cond:
                    %h = load i64, i64* %head, align 8
                    %t = load i64, i64* %tail, align 8
                    %has = icmp ult i64 %h, %t
                    br i1 %has, label %bfs.pop, label %bfs.done
                    
                    bfs.pop:
                    %qhe = getelementptr inbounds i64, i64* %queue, i64 %h
                    %u = load i64, i64* %qhe, align 8
                    %h.next = add i64 %h, 1
                    store i64 %h.next, i64* %head, align 8
                    ; du = dist[u]
                    %du.ptr = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %u
                    %du = load i32, i32* %du.ptr, align 4
                    ; order[ordcnt++] = u
                    %oc = load i64, i64* %ordcnt, align 8
                    %ord.el = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 %oc
                    store i64 %u, i64* %ord.el, align 8
                    %oc.next = add i64 %oc, 1
                    store i64 %oc.next, i64* %ordcnt, align 8
                    br label %v.loop
                    
                    v.loop:
                    %v = phi i64 [ 0, %bfs.pop ], [ %v.next, %v.nextbb ]
                    %v.cont = icmp slt i64 %v, 7
                    br i1 %v.cont, label %v.body, label %bfs.cond
                    
                    v.body:
                    ; if adj[u][v] != 0
                    %row.u = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 %u
                    %cell = getelementptr inbounds [7 x i32], [7 x i32]* %row.u, i64 0, i64 %v
                    %aval = load i32, i32* %cell, align 4
                    %nz = icmp ne i32 %aval, 0
                    br i1 %nz, label %check.unvis, label %v.nextbb
                    
                    check.unvis:
                    %d.v.ptr = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %v
                    %d.v = load i32, i32* %d.v.ptr, align 4
                    %is.unvis = icmp eq i32 %d.v, -1
                    br i1 %is.unvis, label %enqueue, label %v.nextbb
                    
                    enqueue:
                    %t.cur = load i64, i64* %tail, align 8
                    %q.dest = getelementptr inbounds i64, i64* %queue, i64 %t.cur
                    store i64 %v, i64* %q.dest, align 8
                    %t.new = add i64 %t.cur, 1
                    store i64 %t.new, i64* %tail, align 8
                    %du.plus = add i32 %du, 1
                    store i32 %du.plus, i32* %d.v.ptr, align 4
                    br label %v.nextbb
                    
                    v.nextbb:
                    %v.next = add i64 %v, 1
                    br label %v.loop
                    
                    bfs.done:
                    call void @free(i8* %qraw)
                    ; print header
                    %bfsfmt = getelementptr inbounds [21 x i8], [21 x i8]* @.str_bfs, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %bfsfmt, i64 0)
                    ; print order
                    br label %print.order
                    
                    print.order:
                    %pi = phi i64 [ 0, %bfs.done ], [ %pi.next, %print.order.body ]
                    %oc.cur = load i64, i64* %ordcnt, align 8
                    %more = icmp ult i64 %pi, %oc.cur
                    br i1 %more, label %print.order.body, label %after.order
                    
                    print.order.body:
                    %ord.ptr = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 %pi
                    %oval = load i64, i64* %ord.ptr, align 8
                    %pi1 = add i64 %pi, 1
                    %islast = icmp eq i64 %pi1, %oc.cur
                    %spacep = getelementptr inbounds [2 x i8], [2 x i8]* @.str_space, i64 0, i64 0
                    %emptyp = getelementptr inbounds [1 x i8], [1 x i8]* @.str_empty, i64 0, i64 0
                    %suf = select i1 %islast, i8* %emptyp, i8* %spacep
                    %zusfmt = getelementptr inbounds [6 x i8], [6 x i8]* @.str_zus, i64 0, i64 0
                    %_ = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %zusfmt, i64 %oval, i8* %suf)
                    %pi.next = add i64 %pi, 1
                    br label %print.order
                    
                    after.order:
                    %nl = getelementptr inbounds [2 x i8], [2 x i8]* @.str_nl, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nl)
                    br label %dist.start
                    
                    malloc_fail:
                    ; header + newline, then distances (no traversal)
                    %bfsfmt.fail = getelementptr inbounds [21 x i8], [21 x i8]* @.str_bfs, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %bfsfmt.fail, i64 0)
                    %nl2 = getelementptr inbounds [2 x i8], [2 x i8]* @.str_nl, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nl2)
                    br label %dist.start
                    
                    dist.start:
                    br label %dist.loop
                    
                    dist.loop:
                    %j = phi i64 [ 0, %dist.start ], [ %j.next, %dist.body ]
                    %j.done = icmp eq i64 %j, 7
                    br i1 %j.done, label %ret, label %dist.body
                    
                    dist.body:
                    %dj.ptr = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %j
                    %dj = load i32, i32* %dj.ptr, align 4
                    %distfmt = getelementptr inbounds [23 x i8], [23 x i8]* @.str_dist, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %distfmt, i64 0, i64 %j, i32 %dj)
                    %j.next = add i64 %j, 1
                    br label %dist.loop
                    
                    ret:
                    ret i32 0
                    }
                    ```
                    
        - binarysearch
            - ida 함수 리스트
                
                ```python
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "binarysearch",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x11b0",
                      "end": "0x11d6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x11e0",
                      "end": "0x1209",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x1210",
                      "end": "0x1249",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1250",
                      "end": "0x1289",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1290",
                      "end": "0x1299",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x11a8",
                      "size": 296,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x129c",
                      "end": "0x12a9",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 19
                user? candidates: 6
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : A7C57623E81F542AAE0275C087CB8465DA11555124C768E12D6AB34DCBB814E6
                    LOAD:0000000000000000 ; Input MD5    : FE6B40B48AB4308ED932E402A7B4FFBF
                    LOAD:0000000000000000 ; Input CRC32  : E8683EBC
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\binarysearch
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'binarysearch.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 36D8h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 6A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 6A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 2A9h                 ; Size in file image
                    LOAD:0000000000000110                 dq 2A9h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 130h                 ; Size in file image
                    LOAD:0000000000000148                 dq 130h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DB0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000178                 dq 260h                 ; Size in file image
                    LOAD:0000000000000180                 dq 268h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DC0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DC0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2030h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2030h                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DB0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000300                 dq 250h                 ; Size in file image
                    LOAD:0000000000000308                 dq 250h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 2Fh, 0B3h, 0EDh, 0C8h, 82h, 0E8h, 1Ch, 0AEh, 42h, 0DEh ; Desc
                    LOAD:0000000000000382                 db 5Bh, 89h, 0EDh, 0BAh, 88h, 80h, 0ECh, 3Ah, 0BDh, 8Eh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 7
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 7, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aLibcStartMain - offset unk_498, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:00000000000003F0                            offset dword_0, 0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aItmDeregistert - offset unk_498, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aStackChkFail - offset unk_498, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aGmonStart - offset unk_498, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aPrintfChk - offset unk_498, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aItmRegistertmc - offset unk_498, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aCxaFinalize - offset unk_498, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498 ; ELF String Table
                    LOAD:0000000000000498 unk_498         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000498                                         ; LOAD:0000000000000408↑o ...
                    LOAD:0000000000000499 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004A8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:00000000000004B5 aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004B5                                         ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000004D8 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000568↓o
                    LOAD:00000000000004E2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000578↓o
                    LOAD:00000000000004EE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000588↓o
                    LOAD:00000000000004FA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000598↓o
                    LOAD:0000000000000504 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000050F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000050F                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000053A aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:000000000000053A                                         ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000554 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000554                 dw 0
                    LOAD:0000000000000556                 dw 2                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000558                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:000000000000055A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000055C                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000055E                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:0000000000000560                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:0000000000000562                 dw 5                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:0000000000000564                 dw 0
                    LOAD:0000000000000566                 dw 0
                    LOAD:0000000000000568 ; ELF GNU Symbol Version Requirements
                    LOAD:0000000000000568                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_498, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000578                 Elf64_Vernaux <9691A75h, 0, 5, offset aGlibc225 - offset unk_498, 10h> ; "GLIBC_2.2.5"
                    LOAD:0000000000000588                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset unk_498, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000598                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_498, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005A8                 Elf64_Vernaux <69691B4h, 0, 2, offset aGlibc234_0 - offset unk_498, 0> ; "GLIBC_2.34"
                    LOAD:00000000000005B8 ; ELF RELA Relocation Table
                    LOAD:00000000000005B8                 Elf64_Rela <3DB0h, 8, 1290h> ; R_X86_64_RELATIVE +1290h
                    LOAD:00000000000005D0                 Elf64_Rela <3DB8h, 8, 1250h> ; R_X86_64_RELATIVE +1250h
                    LOAD:00000000000005E8                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000600                 Elf64_Rela <3FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000618                 Elf64_Rela <3FE0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000630                 Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000648                 Elf64_Rela <3FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000660                 Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000678 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000678                 Elf64_Rela <3FC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000690                 Elf64_Rela <3FD0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000690 LOAD            ends
                    LOAD:0000000000000690
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FB8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FC0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:000000000000104F ; } // starts at 1020
                    .plt:000000000000104F _plt            ends
                    .plt:000000000000104F
                    .plt.got:0000000000001050 ; ===========================================================================
                    .plt.got:0000000000001050
                    .plt.got:0000000000001050 ; Segment type: Pure code
                    .plt.got:0000000000001050 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001050 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001050                 assume cs:_plt_got
                    .plt.got:0000000000001050                 ;org 1050h
                    .plt.got:0000000000001050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001050 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000105B                 align 20h
                    .plt.got:000000000000105B ; } // starts at 1050
                    .plt.got:000000000000105B _plt_got        ends
                    .plt.got:000000000000105B
                    .plt.sec:0000000000001060 ; ===========================================================================
                    .plt.sec:0000000000001060
                    .plt.sec:0000000000001060 ; Segment type: Pure code
                    .plt.sec:0000000000001060 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001060 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001060                 assume cs:_plt_sec
                    .plt.sec:0000000000001060                 ;org 1060h
                    .plt.sec:0000000000001060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001060 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000106B                 align 10h
                    .plt.sec:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:000000000000107B                 align 20h
                    .plt.sec:000000000000107B ; } // starts at 1060
                    .plt.sec:000000000000107B _plt_sec        ends
                    .plt.sec:000000000000107B
                    .text:0000000000001080 ; ===========================================================================
                    .text:0000000000001080
                    .text:0000000000001080 ; Segment type: Pure code
                    .text:0000000000001080 ; Segment permissions: Read/Execute
                    .text:0000000000001080 _text           segment para public 'CODE' use64
                    .text:0000000000001080                 assume cs:_text
                    .text:0000000000001080                 ;org 1080h
                    .text:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001080
                    .text:0000000000001080 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001080
                    .text:0000000000001080
                    .text:0000000000001080 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001080                 public main
                    .text:0000000000001080 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001080
                    .text:0000000000001080 var_64          = byte ptr -64h
                    .text:0000000000001080 var_60          = qword ptr -60h
                    .text:0000000000001080 var_58          = qword ptr -58h
                    .text:0000000000001080 var_50          = qword ptr -50h
                    .text:0000000000001080 var_48          = qword ptr -48h
                    .text:0000000000001080 var_40          = qword ptr -40h
                    .text:0000000000001080 var_38          = dword ptr -38h
                    .text:0000000000001080 var_30          = qword ptr -30h
                    .text:0000000000001080
                    .text:0000000000001080 ; __unwind {
                    .text:0000000000001080                 endbr64
                    .text:0000000000001084                 push    r13
                    .text:0000000000001086                 mov     r8d, 2
                    .text:000000000000108C                 push    r12
                    .text:000000000000108E                 lea     r12, aKeyDNotFound ; "key %d -> not found\n"
                    .text:0000000000001095                 push    rbp
                    .text:0000000000001096                 lea     rbp, aKeyDIndexLd ; "key %d -> index %ld\n"
                    .text:000000000000109D                 push    rbx
                    .text:000000000000109E                 sub     rsp, 48h
                    .text:00000000000010A2                 mov     rax, fs:28h
                    .text:00000000000010AB                 mov     [rsp+68h+var_30], rax
                    .text:00000000000010B0                 xor     eax, eax
                    .text:00000000000010B2                 mov     [rsp+68h+var_38], 0Ch
                    .text:00000000000010BA                 lea     r13, [rsp+68h+var_64]
                    .text:00000000000010BF                 mov     rax, 200000000h
                    .text:00000000000010C9                 mov     [rsp+68h+var_50], rax
                    .text:00000000000010CE                 lea     rbx, [rsp+68h+var_58]
                    .text:00000000000010D3                 mov     rax, 300000002h
                    .text:00000000000010DD                 mov     [rsp+68h+var_48], rax
                    .text:00000000000010E2                 mov     rax, 900000007h
                    .text:00000000000010EC                 mov     [rsp+68h+var_40], rax
                    .text:00000000000010F1                 mov     rax, 0FFFFFFFB00000005h
                    .text:00000000000010FB                 mov     [rsp+68h+var_58], 0FFFFFFFFFFFFFFFBh
                    .text:0000000000001104                 mov     [rsp+68h+var_60], rax
                    .text:0000000000001109
                    .text:0000000000001109 loc_1109:                               ; CODE XREF: main+DF↓j
                    .text:0000000000001109                 mov     edx, 9
                    .text:000000000000110E                 xor     ecx, ecx
                    .text:0000000000001110                 jmp     short loc_112E
                    .text:0000000000001110 ; ---------------------------------------------------------------------------
                    .text:0000000000001112                 align 8
                    .text:0000000000001118
                    .text:0000000000001118 loc_1118:                               ; CODE XREF: main+B1↓j
                    .text:0000000000001118                 mov     rax, rdx
                    .text:000000000000111B                 sub     rax, rcx
                    .text:000000000000111E                 shr     rax, 1
                    .text:0000000000001121                 add     rax, rcx
                    .text:0000000000001124                 cmp     dword ptr [rsp+rax*4+68h+var_58], r8d
                    .text:0000000000001129                 jl      short loc_1168
                    .text:000000000000112B                 mov     rdx, rax
                    .text:000000000000112E
                    .text:000000000000112E loc_112E:                               ; CODE XREF: main+90↑j
                    .text:000000000000112E                                         ; main+EC↓j
                    .text:000000000000112E                 cmp     rdx, rcx
                    .text:0000000000001131                 ja      short loc_1118
                    .text:0000000000001133                 mov     edx, r8d
                    .text:0000000000001136                 cmp     rcx, 8
                    .text:000000000000113A                 ja      short loc_116E
                    .text:000000000000113C                 cmp     dword ptr [rsp+rcx*4+68h+var_58], r8d
                    .text:0000000000001141                 jnz     short loc_116E
                    .text:0000000000001143                 mov     rsi, rbp
                    .text:0000000000001146                 mov     edi, 1
                    .text:000000000000114B                 xor     eax, eax
                    .text:000000000000114D                 add     r13, 4
                    .text:0000000000001151                 call    ___printf_chk
                    .text:0000000000001156                 cmp     rbx, r13
                    .text:0000000000001159                 jz      short loc_1186
                    .text:000000000000115B
                    .text:000000000000115B loc_115B:                               ; CODE XREF: main+104↓j
                    .text:000000000000115B                 mov     r8d, [r13+0]
                    .text:000000000000115F                 jmp     short loc_1109
                    .text:000000000000115F ; ---------------------------------------------------------------------------
                    .text:0000000000001161                 align 8
                    .text:0000000000001168
                    .text:0000000000001168 loc_1168:                               ; CODE XREF: main+A9↑j
                    .text:0000000000001168                 lea     rcx, [rax+1]
                    .text:000000000000116C                 jmp     short loc_112E
                    .text:000000000000116E ; ---------------------------------------------------------------------------
                    .text:000000000000116E
                    .text:000000000000116E loc_116E:                               ; CODE XREF: main+BA↑j
                    .text:000000000000116E                                         ; main+C1↑j
                    .text:000000000000116E                 mov     rsi, r12
                    .text:0000000000001171                 mov     edi, 1
                    .text:0000000000001176                 xor     eax, eax
                    .text:0000000000001178                 add     r13, 4
                    .text:000000000000117C                 call    ___printf_chk
                    .text:0000000000001181                 cmp     rbx, r13
                    .text:0000000000001184                 jnz     short loc_115B
                    .text:0000000000001186
                    .text:0000000000001186 loc_1186:                               ; CODE XREF: main+D9↑j
                    .text:0000000000001186                 mov     rax, [rsp+68h+var_30]
                    .text:000000000000118B                 sub     rax, fs:28h
                    .text:0000000000001194                 jnz     short loc_11A3
                    .text:0000000000001196                 add     rsp, 48h
                    .text:000000000000119A                 xor     eax, eax
                    .text:000000000000119C                 pop     rbx
                    .text:000000000000119D                 pop     rbp
                    .text:000000000000119E                 pop     r12
                    .text:00000000000011A0                 pop     r13
                    .text:00000000000011A2                 retn
                    .text:00000000000011A3 ; ---------------------------------------------------------------------------
                    .text:00000000000011A3
                    .text:00000000000011A3 loc_11A3:                               ; CODE XREF: main+114↑j
                    .text:00000000000011A3                 call    ___stack_chk_fail
                    .text:00000000000011A3 ; } // starts at 1080
                    .text:00000000000011A3 main            endp
                    .text:00000000000011A3
                    .text:00000000000011A3 ; ---------------------------------------------------------------------------
                    .text:00000000000011A8                 align 10h
                    .text:00000000000011B0
                    .text:00000000000011B0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011B0
                    .text:00000000000011B0 ; Attributes: noreturn fuzzy-sp
                    .text:00000000000011B0
                    .text:00000000000011B0                 public _start
                    .text:00000000000011B0 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:00000000000011B0 ; __unwind {
                    .text:00000000000011B0                 endbr64
                    .text:00000000000011B4                 xor     ebp, ebp
                    .text:00000000000011B6                 mov     r9, rdx         ; rtld_fini
                    .text:00000000000011B9                 pop     rsi             ; argc
                    .text:00000000000011BA                 mov     rdx, rsp        ; ubp_av
                    .text:00000000000011BD                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:00000000000011C1                 push    rax
                    .text:00000000000011C2                 push    rsp             ; stack_end
                    .text:00000000000011C3                 xor     r8d, r8d        ; fini
                    .text:00000000000011C6                 xor     ecx, ecx        ; init
                    .text:00000000000011C8                 lea     rdi, main       ; main
                    .text:00000000000011CF                 call    cs:__libc_start_main_ptr
                    .text:00000000000011D5                 hlt
                    .text:00000000000011D5 ; } // starts at 11B0
                    .text:00000000000011D5 _start          endp
                    .text:00000000000011D5
                    .text:00000000000011D5 ; ---------------------------------------------------------------------------
                    .text:00000000000011D6                 align 20h
                    .text:00000000000011E0
                    .text:00000000000011E0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011E0
                    .text:00000000000011E0
                    .text:00000000000011E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1277↓p
                    .text:00000000000011E0                 lea     rdi, __bss_start
                    .text:00000000000011E7                 lea     rax, __bss_start
                    .text:00000000000011EE                 cmp     rax, rdi
                    .text:00000000000011F1                 jz      short locret_1208
                    .text:00000000000011F3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:00000000000011FA                 test    rax, rax
                    .text:00000000000011FD                 jz      short locret_1208
                    .text:00000000000011FF                 jmp     rax
                    .text:00000000000011FF ; ---------------------------------------------------------------------------
                    .text:0000000000001201                 align 8
                    .text:0000000000001208
                    .text:0000000000001208 locret_1208:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:0000000000001208                                         ; deregister_tm_clones+1D↑j
                    .text:0000000000001208                 retn
                    .text:0000000000001208 deregister_tm_clones endp
                    .text:0000000000001208
                    .text:0000000000001208 ; ---------------------------------------------------------------------------
                    .text:0000000000001209                 align 10h
                    .text:0000000000001210
                    .text:0000000000001210 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001210
                    .text:0000000000001210
                    .text:0000000000001210 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:0000000000001210                 lea     rdi, __bss_start
                    .text:0000000000001217                 lea     rsi, __bss_start
                    .text:000000000000121E                 sub     rsi, rdi
                    .text:0000000000001221                 mov     rax, rsi
                    .text:0000000000001224                 shr     rsi, 3Fh
                    .text:0000000000001228                 sar     rax, 3
                    .text:000000000000122C                 add     rsi, rax
                    .text:000000000000122F                 sar     rsi, 1
                    .text:0000000000001232                 jz      short locret_1248
                    .text:0000000000001234                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:000000000000123B                 test    rax, rax
                    .text:000000000000123E                 jz      short locret_1248
                    .text:0000000000001240                 jmp     rax
                    .text:0000000000001240 ; ---------------------------------------------------------------------------
                    .text:0000000000001242                 align 8
                    .text:0000000000001248
                    .text:0000000000001248 locret_1248:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:0000000000001248                                         ; register_tm_clones+2E↑j
                    .text:0000000000001248                 retn
                    .text:0000000000001248 register_tm_clones endp
                    .text:0000000000001248
                    .text:0000000000001248 ; ---------------------------------------------------------------------------
                    .text:0000000000001249                 align 10h
                    .text:0000000000001250
                    .text:0000000000001250 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001250
                    .text:0000000000001250
                    .text:0000000000001250 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:0000000000001250                 endbr64
                    .text:0000000000001254                 cmp     cs:__bss_start, 0
                    .text:000000000000125B                 jnz     short locret_1288
                    .text:000000000000125D                 push    rbp
                    .text:000000000000125E                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001266                 mov     rbp, rsp
                    .text:0000000000001269                 jz      short loc_1277
                    .text:000000000000126B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001272                 call    __cxa_finalize
                    .text:0000000000001277
                    .text:0000000000001277 loc_1277:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001277                 call    deregister_tm_clones
                    .text:000000000000127C                 mov     cs:__bss_start, 1
                    .text:0000000000001283                 pop     rbp
                    .text:0000000000001284                 retn
                    .text:0000000000001284 ; ---------------------------------------------------------------------------
                    .text:0000000000001285                 align 8
                    .text:0000000000001288
                    .text:0000000000001288 locret_1288:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001288                 retn
                    .text:0000000000001288 __do_global_dtors_aux endp
                    .text:0000000000001288
                    .text:0000000000001288 ; ---------------------------------------------------------------------------
                    .text:0000000000001289                 align 10h
                    .text:0000000000001290
                    .text:0000000000001290 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001290
                    .text:0000000000001290
                    .text:0000000000001290 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001290                 endbr64
                    .text:0000000000001294                 jmp     register_tm_clones
                    .text:0000000000001294 frame_dummy     endp
                    .text:0000000000001294
                    .text:0000000000001294 _text           ends
                    .text:0000000000001294
                    LOAD:0000000000001299 ; ===========================================================================
                    LOAD:0000000000001299
                    LOAD:0000000000001299 ; Segment type: Pure code
                    LOAD:0000000000001299 ; Segment permissions: Read/Execute
                    LOAD:0000000000001299 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001299                 assume cs:LOAD
                    LOAD:0000000000001299                 ;org 1299h
                    LOAD:0000000000001299                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001299                 align 4
                    LOAD:0000000000001299 LOAD            ends
                    LOAD:0000000000001299
                    .fini:000000000000129C ; ===========================================================================
                    .fini:000000000000129C
                    .fini:000000000000129C ; Segment type: Pure code
                    .fini:000000000000129C ; Segment permissions: Read/Execute
                    .fini:000000000000129C _fini           segment dword public 'CODE' use64
                    .fini:000000000000129C                 assume cs:_fini
                    .fini:000000000000129C                 ;org 129Ch
                    .fini:000000000000129C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000129C
                    .fini:000000000000129C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000129C
                    .fini:000000000000129C
                    .fini:000000000000129C                 public _term_proc
                    .fini:000000000000129C _term_proc      proc near
                    .fini:000000000000129C                 endbr64                 ; _fini
                    .fini:00000000000012A0                 sub     rsp, 8
                    .fini:00000000000012A4                 add     rsp, 8
                    .fini:00000000000012A8                 retn
                    .fini:00000000000012A8 _term_proc      endp
                    .fini:00000000000012A8
                    .fini:00000000000012A8 _fini           ends
                    .fini:00000000000012A8
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 aKeyDIndexLd    db 'key %d -> index %ld',0Ah,0
                    .rodata:0000000000002004                                         ; DATA XREF: main+16↑o
                    .rodata:0000000000002019 aKeyDNotFound   db 'key %d -> not found',0Ah,0
                    .rodata:0000000000002019                                         ; DATA XREF: main+E↑o
                    .rodata:0000000000002019 _rodata         ends
                    .rodata:0000000000002019
                    LOAD:000000000000202E ; ===========================================================================
                    LOAD:000000000000202E
                    LOAD:000000000000202E ; Segment type: Pure data
                    LOAD:000000000000202E ; Segment permissions: Read
                    LOAD:000000000000202E LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000202E                 assume cs:LOAD
                    LOAD:000000000000202E                 ;org 202Eh
                    LOAD:000000000000202E                 align 10h
                    LOAD:000000000000202E LOAD            ends
                    LOAD:000000000000202E
                    .eh_frame_hdr:0000000000002030 ; ===========================================================================
                    .eh_frame_hdr:0000000000002030
                    .eh_frame_hdr:0000000000002030 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002030 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002030 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002030                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002030                 ;org 2030h
                    .eh_frame_hdr:0000000000002030 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002031                 db  1Bh
                    .eh_frame_hdr:0000000000002032                 db    3
                    .eh_frame_hdr:0000000000002033                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002034                 db  34h ; 4
                    .eh_frame_hdr:0000000000002035                 db    0
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db    5
                    .eh_frame_hdr:0000000000002039                 db    0
                    .eh_frame_hdr:000000000000203A                 db    0
                    .eh_frame_hdr:000000000000203B                 db    0
                    .eh_frame_hdr:000000000000203C                 db 0F0h
                    .eh_frame_hdr:000000000000203D                 db 0EFh
                    .eh_frame_hdr:000000000000203E                 db 0FFh
                    .eh_frame_hdr:000000000000203F                 db 0FFh
                    .eh_frame_hdr:0000000000002040                 db  68h ; h
                    .eh_frame_hdr:0000000000002041                 db    0
                    .eh_frame_hdr:0000000000002042                 db    0
                    .eh_frame_hdr:0000000000002043                 db    0
                    .eh_frame_hdr:0000000000002044                 db  20h
                    .eh_frame_hdr:0000000000002045                 db 0F0h
                    .eh_frame_hdr:0000000000002046                 db 0FFh
                    .eh_frame_hdr:0000000000002047                 db 0FFh
                    .eh_frame_hdr:0000000000002048                 db  90h
                    .eh_frame_hdr:0000000000002049                 db    0
                    .eh_frame_hdr:000000000000204A                 db    0
                    .eh_frame_hdr:000000000000204B                 db    0
                    .eh_frame_hdr:000000000000204C                 db  30h ; 0
                    .eh_frame_hdr:000000000000204D                 db 0F0h
                    .eh_frame_hdr:000000000000204E                 db 0FFh
                    .eh_frame_hdr:000000000000204F                 db 0FFh
                    .eh_frame_hdr:0000000000002050                 db 0A8h
                    .eh_frame_hdr:0000000000002051                 db    0
                    .eh_frame_hdr:0000000000002052                 db    0
                    .eh_frame_hdr:0000000000002053                 db    0
                    .eh_frame_hdr:0000000000002054                 db  50h ; P
                    .eh_frame_hdr:0000000000002055                 db 0F0h
                    .eh_frame_hdr:0000000000002056                 db 0FFh
                    .eh_frame_hdr:0000000000002057                 db 0FFh
                    .eh_frame_hdr:0000000000002058                 db 0C0h
                    .eh_frame_hdr:0000000000002059                 db    0
                    .eh_frame_hdr:000000000000205A                 db    0
                    .eh_frame_hdr:000000000000205B                 db    0
                    .eh_frame_hdr:000000000000205C                 db  80h
                    .eh_frame_hdr:000000000000205D                 db 0F1h
                    .eh_frame_hdr:000000000000205E                 db 0FFh
                    .eh_frame_hdr:000000000000205F                 db 0FFh
                    .eh_frame_hdr:0000000000002060                 db  50h ; P
                    .eh_frame_hdr:0000000000002061                 db    0
                    .eh_frame_hdr:0000000000002062                 db    0
                    .eh_frame_hdr:0000000000002063                 db    0
                    .eh_frame_hdr:0000000000002063 _eh_frame_hdr   ends
                    .eh_frame_hdr:0000000000002063
                    LOAD:0000000000002064 ; ===========================================================================
                    LOAD:0000000000002064
                    LOAD:0000000000002064 ; Segment type: Pure data
                    LOAD:0000000000002064 ; Segment permissions: Read
                    LOAD:0000000000002064 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000002064                 assume cs:LOAD
                    LOAD:0000000000002064                 ;org 2064h
                    LOAD:0000000000002064                 align 8
                    LOAD:0000000000002064 LOAD            ends
                    LOAD:0000000000002064
                    .eh_frame:0000000000002068 ; ===========================================================================
                    .eh_frame:0000000000002068
                    .eh_frame:0000000000002068 ; Segment type: Pure data
                    .eh_frame:0000000000002068 ; Segment permissions: Read
                    .eh_frame:0000000000002068 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002068                 assume cs:_eh_frame
                    .eh_frame:0000000000002068                 ;org 2068h
                    .eh_frame:0000000000002068                 db  14h
                    .eh_frame:0000000000002069                 db    0
                    .eh_frame:000000000000206A                 db    0
                    .eh_frame:000000000000206B                 db    0
                    .eh_frame:000000000000206C                 db    0
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db    1
                    .eh_frame:0000000000002071                 db  7Ah ; z
                    .eh_frame:0000000000002072                 db  52h ; R
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db    1
                    .eh_frame:0000000000002075                 db  78h ; x
                    .eh_frame:0000000000002076                 db  10h
                    .eh_frame:0000000000002077                 db    1
                    .eh_frame:0000000000002078                 db  1Bh
                    .eh_frame:0000000000002079                 db  0Ch
                    .eh_frame:000000000000207A                 db    7
                    .eh_frame:000000000000207B                 db    8
                    .eh_frame:000000000000207C                 db  90h
                    .eh_frame:000000000000207D                 db    1
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db  14h
                    .eh_frame:0000000000002081                 db    0
                    .eh_frame:0000000000002082                 db    0
                    .eh_frame:0000000000002083                 db    0
                    .eh_frame:0000000000002084                 db  1Ch
                    .eh_frame:0000000000002085                 db    0
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db  28h ; (
                    .eh_frame:0000000000002089                 db 0F1h
                    .eh_frame:000000000000208A                 db 0FFh
                    .eh_frame:000000000000208B                 db 0FFh
                    .eh_frame:000000000000208C                 db  26h ; &
                    .eh_frame:000000000000208D                 db    0
                    .eh_frame:000000000000208E                 db    0
                    .eh_frame:000000000000208F                 db    0
                    .eh_frame:0000000000002090                 db    0
                    .eh_frame:0000000000002091                 db  44h ; D
                    .eh_frame:0000000000002092                 db    7
                    .eh_frame:0000000000002093                 db  10h
                    .eh_frame:0000000000002094                 db    0
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db  24h ; $
                    .eh_frame:0000000000002099                 db    0
                    .eh_frame:000000000000209A                 db    0
                    .eh_frame:000000000000209B                 db    0
                    .eh_frame:000000000000209C                 db  34h ; 4
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db  80h
                    .eh_frame:00000000000020A1                 db 0EFh
                    .eh_frame:00000000000020A2                 db 0FFh
                    .eh_frame:00000000000020A3                 db 0FFh
                    .eh_frame:00000000000020A4                 db  30h ; 0
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db    0
                    .eh_frame:00000000000020A9                 db  0Eh
                    .eh_frame:00000000000020AA                 db  10h
                    .eh_frame:00000000000020AB                 db  46h ; F
                    .eh_frame:00000000000020AC                 db  0Eh
                    .eh_frame:00000000000020AD                 db  18h
                    .eh_frame:00000000000020AE                 db  4Ah ; J
                    .eh_frame:00000000000020AF                 db  0Fh
                    .eh_frame:00000000000020B0                 db  0Bh
                    .eh_frame:00000000000020B1                 db  77h ; w
                    .eh_frame:00000000000020B2                 db    8
                    .eh_frame:00000000000020B3                 db  80h
                    .eh_frame:00000000000020B4                 db    0
                    .eh_frame:00000000000020B5                 db  3Fh ; ?
                    .eh_frame:00000000000020B6                 db  1Ah
                    .eh_frame:00000000000020B7                 db  3Ah ; :
                    .eh_frame:00000000000020B8                 db  2Ah ; *
                    .eh_frame:00000000000020B9                 db  33h ; 3
                    .eh_frame:00000000000020BA                 db  24h ; $
                    .eh_frame:00000000000020BB                 db  22h ; "
                    .eh_frame:00000000000020BC                 db    0
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db  14h
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db  5Ch ; \
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  88h
                    .eh_frame:00000000000020C9                 db 0EFh
                    .eh_frame:00000000000020CA                 db 0FFh
                    .eh_frame:00000000000020CB                 db 0FFh
                    .eh_frame:00000000000020CC                 db  10h
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db    0
                    .eh_frame:00000000000020D1                 db    0
                    .eh_frame:00000000000020D2                 db    0
                    .eh_frame:00000000000020D3                 db    0
                    .eh_frame:00000000000020D4                 db    0
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db  14h
                    .eh_frame:00000000000020D9                 db    0
                    .eh_frame:00000000000020DA                 db    0
                    .eh_frame:00000000000020DB                 db    0
                    .eh_frame:00000000000020DC                 db  74h ; t
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db  80h
                    .eh_frame:00000000000020E1                 db 0EFh
                    .eh_frame:00000000000020E2                 db 0FFh
                    .eh_frame:00000000000020E3                 db 0FFh
                    .eh_frame:00000000000020E4                 db  20h
                    .eh_frame:00000000000020E5                 db    0
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db    0
                    .eh_frame:00000000000020E9                 db    0
                    .eh_frame:00000000000020EA                 db    0
                    .eh_frame:00000000000020EB                 db    0
                    .eh_frame:00000000000020EC                 db    0
                    .eh_frame:00000000000020ED                 db    0
                    .eh_frame:00000000000020EE                 db    0
                    .eh_frame:00000000000020EF                 db    0
                    .eh_frame:00000000000020F0                 db  38h ; 8
                    .eh_frame:00000000000020F1                 db    0
                    .eh_frame:00000000000020F2                 db    0
                    .eh_frame:00000000000020F3                 db    0
                    .eh_frame:00000000000020F4                 db  8Ch
                    .eh_frame:00000000000020F5                 db    0
                    .eh_frame:00000000000020F6                 db    0
                    .eh_frame:00000000000020F7                 db    0
                    .eh_frame:00000000000020F8                 db  88h
                    .eh_frame:00000000000020F9                 db 0EFh
                    .eh_frame:00000000000020FA                 db 0FFh
                    .eh_frame:00000000000020FB                 db 0FFh
                    .eh_frame:00000000000020FC                 db  28h ; (
                    .eh_frame:00000000000020FD                 db    1
                    .eh_frame:00000000000020FE                 db    0
                    .eh_frame:00000000000020FF                 db    0
                    .eh_frame:0000000000002100                 db    0
                    .eh_frame:0000000000002101                 db  46h ; F
                    .eh_frame:0000000000002102                 db  0Eh
                    .eh_frame:0000000000002103                 db  10h
                    .eh_frame:0000000000002104                 db  8Dh
                    .eh_frame:0000000000002105                 db    2
                    .eh_frame:0000000000002106                 db  48h ; H
                    .eh_frame:0000000000002107                 db  0Eh
                    .eh_frame:0000000000002108                 db  18h
                    .eh_frame:0000000000002109                 db  8Ch
                    .eh_frame:000000000000210A                 db    3
                    .eh_frame:000000000000210B                 db  48h ; H
                    .eh_frame:000000000000210C                 db  0Eh
                    .eh_frame:000000000000210D                 db  20h
                    .eh_frame:000000000000210E                 db  86h
                    .eh_frame:000000000000210F                 db    4
                    .eh_frame:0000000000002110                 db  48h ; H
                    .eh_frame:0000000000002111                 db  0Eh
                    .eh_frame:0000000000002112                 db  28h ; (
                    .eh_frame:0000000000002113                 db  83h
                    .eh_frame:0000000000002114                 db    5
                    .eh_frame:0000000000002115                 db  44h ; D
                    .eh_frame:0000000000002116                 db  0Eh
                    .eh_frame:0000000000002117                 db  70h ; p
                    .eh_frame:0000000000002118                 db    2
                    .eh_frame:0000000000002119                 db 0F8h
                    .eh_frame:000000000000211A                 db  0Ah
                    .eh_frame:000000000000211B                 db  0Eh
                    .eh_frame:000000000000211C                 db  28h ; (
                    .eh_frame:000000000000211D                 db  43h ; C
                    .eh_frame:000000000000211E                 db  0Eh
                    .eh_frame:000000000000211F                 db  20h
                    .eh_frame:0000000000002120                 db  41h ; A
                    .eh_frame:0000000000002121                 db  0Eh
                    .eh_frame:0000000000002122                 db  18h
                    .eh_frame:0000000000002123                 db  42h ; B
                    .eh_frame:0000000000002124                 db  0Eh
                    .eh_frame:0000000000002125                 db  10h
                    .eh_frame:0000000000002126                 db  42h ; B
                    .eh_frame:0000000000002127                 db  0Eh
                    .eh_frame:0000000000002128                 db    8
                    .eh_frame:0000000000002129                 db  41h ; A
                    .eh_frame:000000000000212A                 db  0Bh
                    .eh_frame:000000000000212B                 db    0
                    .eh_frame:000000000000212C __FRAME_END__   db    0
                    .eh_frame:000000000000212D                 db    0
                    .eh_frame:000000000000212E                 db    0
                    .eh_frame:000000000000212F                 db    0
                    .eh_frame:000000000000212F _eh_frame       ends
                    .eh_frame:000000000000212F
                    .init_array:0000000000003DB0 ; ELF Initialization Function Table
                    .init_array:0000000000003DB0 ; ===========================================================================
                    .init_array:0000000000003DB0
                    .init_array:0000000000003DB0 ; Segment type: Pure data
                    .init_array:0000000000003DB0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DB0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DB0                 assume cs:_init_array
                    .init_array:0000000000003DB0                 ;org 3DB0h
                    .init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DB0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DB0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DB0 _init_array     ends
                    .init_array:0000000000003DB0
                    .fini_array:0000000000003DB8 ; ELF Termination Function Table
                    .fini_array:0000000000003DB8 ; ===========================================================================
                    .fini_array:0000000000003DB8
                    .fini_array:0000000000003DB8 ; Segment type: Pure data
                    .fini_array:0000000000003DB8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DB8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DB8                 assume cs:_fini_array
                    .fini_array:0000000000003DB8                 ;org 3DB8h
                    .fini_array:0000000000003DB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DB8 _fini_array     ends
                    .fini_array:0000000000003DB8
                    LOAD:0000000000003DC0 ; ELF Dynamic Information
                    LOAD:0000000000003DC0 ; ===========================================================================
                    LOAD:0000000000003DC0
                    LOAD:0000000000003DC0 ; Segment type: Pure data
                    LOAD:0000000000003DC0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DC0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DC0                 assume cs:LOAD
                    LOAD:0000000000003DC0                 ;org 3DC0h
                    LOAD:0000000000003DC0 _DYNAMIC        Elf64_Dyn <1, 40h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DC0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DC0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DE0                 Elf64_Dyn <0Dh, 129Ch>  ; DT_FINI
                    LOAD:0000000000003DF0                 Elf64_Dyn <19h, 3DB0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ah, 3DB8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E20                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E30                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E40                 Elf64_Dyn <5, 498h>     ; DT_STRTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E60                 Elf64_Dyn <0Ah, 0BCh>   ; DT_STRSZ
                    LOAD:0000000000003E70                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E80                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E90                 Elf64_Dyn <3, 3FB0h>    ; DT_PLTGOT
                    LOAD:0000000000003EA0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EB0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <17h, 678h>   ; DT_JMPREL
                    LOAD:0000000000003ED0                 Elf64_Dyn <7, 5B8h>     ; DT_RELA
                    LOAD:0000000000003EE0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EF0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003F00                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFEh, 568h> ; DT_VERNEED
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF0h, 554h> ; DT_VERSYM
                    LOAD:0000000000003F50                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F60                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003FA0                 db    0
                    LOAD:0000000000003FA1                 db    0
                    LOAD:0000000000003FA2                 db    0
                    LOAD:0000000000003FA3                 db    0
                    LOAD:0000000000003FA4                 db    0
                    LOAD:0000000000003FA5                 db    0
                    LOAD:0000000000003FA6                 db    0
                    LOAD:0000000000003FA7                 db    0
                    LOAD:0000000000003FA8                 db    0
                    LOAD:0000000000003FA9                 db    0
                    LOAD:0000000000003FAA                 db    0
                    LOAD:0000000000003FAB                 db    0
                    LOAD:0000000000003FAC                 db    0
                    LOAD:0000000000003FAD                 db    0
                    LOAD:0000000000003FAE                 db    0
                    LOAD:0000000000003FAF                 db    0
                    LOAD:0000000000003FAF LOAD            ends
                    LOAD:0000000000003FAF
                    .got:0000000000003FB0 ; ===========================================================================
                    .got:0000000000003FB0
                    .got:0000000000003FB0 ; Segment type: Pure data
                    .got:0000000000003FB0 ; Segment permissions: Read/Write
                    .got:0000000000003FB0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FB0                 assume cs:_got
                    .got:0000000000003FB0                 ;org 3FB0h
                    .got:0000000000003FB0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FB8 qword_3FB8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FC0 qword_3FC0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC8                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004020                 extrn __libc_start_main:near
                    extern:0000000000004020                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004020                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004028                 extrn __stack_chk_fail:near
                    extern:0000000000004028                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004028                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004030                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004038 ; int __cxa_finalize(void *)
                    extern:0000000000004038                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004038                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004040                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004040                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004048                 extrn __gmon_start__:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004048                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004050                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004050
                    extern:0000000000004050
                    extern:0000000000004050                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x1080
                    ; Intent: Print binary-search results for three keys (2, 5, -5) in a fixed sorted array using a lower_bound loop (confidence=0.95). Evidence: hi/lo loop with mid=(hi-lo)/2+lo and post-check arr[lo]==key; stack-initialized sorted ints -5,-1,0,2,2,3,7,9,12.
                    
                    ; Preconditions: None
                    ; Postconditions: Writes three lines to stdout.
                    
                    @.str_found = private unnamed_addr constant [21 x i8] c"key %d -> index %ld\0A\00"
                    @.str_nf = private unnamed_addr constant [21 x i8] c"key %d -> not found\0A\00"
                    @arr = private unnamed_addr constant [9 x i32] [i32 -5, i32 -1, i32 0, i32 2, i32 2, i32 3, i32 7, i32 9, i32 12]
                    @keys = private unnamed_addr constant [3 x i32] [i32 2, i32 5, i32 -5]
                    
                    ; Only the needed extern declarations:
                    declare i32 @__printf_chk(i32, i8*, ...)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    br label %loop.hdr
                    
                    loop.hdr:
                    %i = phi i32 [ 0, %entry ], [ %i.next, %loop.latch ]
                    %cmp = icmp slt i32 %i, 3
                    br i1 %cmp, label %loop.body, label %exit
                    
                    loop.body:
                    %i64 = sext i32 %i to i64
                    %kptr = getelementptr inbounds [3 x i32], [3 x i32]* @keys, i64 0, i64 %i64
                    %key = load i32, i32* %kptr, align 4
                    br label %bs.head
                    
                    bs.head:
                    %lo = phi i64 [ 0, %loop.body ], [ %lo.next, %bs.upd ]
                    %hi = phi i64 [ 9, %loop.body ], [ %hi.next, %bs.upd ]
                    %cond = icmp ugt i64 %hi, %lo
                    br i1 %cond, label %bs.calc, label %bs.done
                    
                    bs.calc:
                    %diff = sub i64 %hi, %lo
                    %half = lshr i64 %diff, 1
                    %mid = add i64 %half, %lo
                    %aptr = getelementptr inbounds [9 x i32], [9 x i32]* @arr, i64 0, i64 %mid
                    %aval = load i32, i32* %aptr, align 4
                    %lt = icmp slt i32 %aval, %key
                    br i1 %lt, label %bs.setlo, label %bs.sethi
                    
                    bs.setlo:
                    %lo.inc = add i64 %mid, 1
                    br label %bs.upd
                    
                    bs.sethi:
                    br label %bs.upd
                    
                    bs.upd:
                    %lo.next = phi i64 [ %lo.inc, %bs.setlo ], [ %lo, %bs.sethi ]
                    %hi.next = phi i64 [ %hi, %bs.setlo ], [ %mid, %bs.sethi ]
                    br label %bs.head
                    
                    bs.done:
                    ; final lower_bound index is %lo
                    %oob = icmp ugt i64 %lo, 8
                    br i1 %oob, label %notfound, label %check.eq
                    
                    check.eq:
                    %aptr2 = getelementptr inbounds [9 x i32], [9 x i32]* @arr, i64 0, i64 %lo
                    %aval2 = load i32, i32* %aptr2, align 4
                    %eq = icmp eq i32 %aval2, %key
                    br i1 %eq, label %found, label %notfound
                    
                    found:
                    %fmtF = getelementptr inbounds [21 x i8], [21 x i8]* @.str_found, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmtF, i32 %key, i64 %lo)
                    br label %loop.latch
                    
                    notfound:
                    %fmtN = getelementptr inbounds [21 x i8], [21 x i8]* @.str_nf, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmtN, i32 %key)
                    br label %loop.latch
                    
                    loop.latch:
                    %i.next = add i32 %i, 1
                    br label %loop.hdr
                    
                    exit:
                    ret i32 0
                    }
                    ```
                    
        - bubblesort
            - ida 함수 리스트
                
                ```python
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "bubblesort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1190",
                      "end": "0x11b6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x11c0",
                      "end": "0x11e9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x11f0",
                      "end": "0x1229",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1230",
                      "end": "0x1269",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1270",
                      "end": "0x1279",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x118d",
                      "size": 269,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x127c",
                      "end": "0x1289",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 19
                user? candidates: 6
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : D37E393B4BFE49B42E1D2D071D7FA1981653A136E2462866747AD054082411AC
                    LOAD:0000000000000000 ; Input MD5    : 464A715AFF6FBDC7D81B960E25B8E9F2
                    LOAD:0000000000000000 ; Input CRC32  : D3FCA199
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\bubblesort
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'bubblesort.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 36D8h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 6A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 6A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 289h                 ; Size in file image
                    LOAD:0000000000000110                 dq 289h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 100h                 ; Size in file image
                    LOAD:0000000000000148                 dq 100h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DB0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000178                 dq 260h                 ; Size in file image
                    LOAD:0000000000000180                 dq 268h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DC0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DC0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 200Ch                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 200Ch                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DB0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000300                 dq 250h                 ; Size in file image
                    LOAD:0000000000000308                 dq 250h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 7, 8, 84h, 7Fh, 0F8h, 0B1h, 80h, 4Fh, 59h, 0EDh, 36h ; Desc
                    LOAD:0000000000000383                 db 0FCh, 76h, 38h, 6Ah, 0F9h, 0F3h, 0BAh, 4Fh, 58h
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 7
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 7, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aLibcStartMain - offset unk_498, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:00000000000003F0                            offset dword_0, 0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aItmDeregistert - offset unk_498, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aStackChkFail - offset unk_498, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aGmonStart - offset unk_498, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aPrintfChk - offset unk_498, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aItmRegistertmc - offset unk_498, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aCxaFinalize - offset unk_498, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498 ; ELF String Table
                    LOAD:0000000000000498 unk_498         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000498                                         ; LOAD:0000000000000408↑o ...
                    LOAD:0000000000000499 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004A8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:00000000000004B5 aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004B5                                         ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000004D8 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000568↓o
                    LOAD:00000000000004E2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000578↓o
                    LOAD:00000000000004EE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000588↓o
                    LOAD:00000000000004FA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000598↓o
                    LOAD:0000000000000504 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000050F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000050F                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000053A aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:000000000000053A                                         ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000554 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000554                 dw 0
                    LOAD:0000000000000556                 dw 2                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000558                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:000000000000055A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000055C                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000055E                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:0000000000000560                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:0000000000000562                 dw 5                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:0000000000000564                 dw 0
                    LOAD:0000000000000566                 dw 0
                    LOAD:0000000000000568 ; ELF GNU Symbol Version Requirements
                    LOAD:0000000000000568                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_498, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000578                 Elf64_Vernaux <9691A75h, 0, 5, offset aGlibc225 - offset unk_498, 10h> ; "GLIBC_2.2.5"
                    LOAD:0000000000000588                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset unk_498, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000598                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_498, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005A8                 Elf64_Vernaux <69691B4h, 0, 2, offset aGlibc234_0 - offset unk_498, 0> ; "GLIBC_2.34"
                    LOAD:00000000000005B8 ; ELF RELA Relocation Table
                    LOAD:00000000000005B8                 Elf64_Rela <3DB0h, 8, 1270h> ; R_X86_64_RELATIVE +1270h
                    LOAD:00000000000005D0                 Elf64_Rela <3DB8h, 8, 1230h> ; R_X86_64_RELATIVE +1230h
                    LOAD:00000000000005E8                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000600                 Elf64_Rela <3FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000618                 Elf64_Rela <3FE0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000630                 Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000648                 Elf64_Rela <3FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000660                 Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000678 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000678                 Elf64_Rela <3FC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000690                 Elf64_Rela <3FD0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000690 LOAD            ends
                    LOAD:0000000000000690
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FB8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FC0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:000000000000104F ; } // starts at 1020
                    .plt:000000000000104F _plt            ends
                    .plt:000000000000104F
                    .plt.got:0000000000001050 ; ===========================================================================
                    .plt.got:0000000000001050
                    .plt.got:0000000000001050 ; Segment type: Pure code
                    .plt.got:0000000000001050 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001050 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001050                 assume cs:_plt_got
                    .plt.got:0000000000001050                 ;org 1050h
                    .plt.got:0000000000001050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001050 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000105B                 align 20h
                    .plt.got:000000000000105B ; } // starts at 1050
                    .plt.got:000000000000105B _plt_got        ends
                    .plt.got:000000000000105B
                    .plt.sec:0000000000001060 ; ===========================================================================
                    .plt.sec:0000000000001060
                    .plt.sec:0000000000001060 ; Segment type: Pure code
                    .plt.sec:0000000000001060 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001060 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001060                 assume cs:_plt_sec
                    .plt.sec:0000000000001060                 ;org 1060h
                    .plt.sec:0000000000001060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001060 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000106B                 align 10h
                    .plt.sec:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:000000000000107B                 align 20h
                    .plt.sec:000000000000107B ; } // starts at 1060
                    .plt.sec:000000000000107B _plt_sec        ends
                    .plt.sec:000000000000107B
                    .text:0000000000001080 ; ===========================================================================
                    .text:0000000000001080
                    .text:0000000000001080 ; Segment type: Pure code
                    .text:0000000000001080 ; Segment permissions: Read/Execute
                    .text:0000000000001080 _text           segment para public 'CODE' use64
                    .text:0000000000001080                 assume cs:_text
                    .text:0000000000001080                 ;org 1080h
                    .text:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001080
                    .text:0000000000001080 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001080
                    .text:0000000000001080
                    .text:0000000000001080 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001080                 public main
                    .text:0000000000001080 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001080
                    .text:0000000000001080 var_48          = dword ptr -48h
                    .text:0000000000001080 var_44          = byte ptr -44h
                    .text:0000000000001080 var_40          = qword ptr -40h
                    .text:0000000000001080 var_38          = qword ptr -38h
                    .text:0000000000001080 var_30          = qword ptr -30h
                    .text:0000000000001080 var_28          = qword ptr -28h
                    .text:0000000000001080 var_20          = qword ptr -20h
                    .text:0000000000001080
                    .text:0000000000001080 ; __unwind {
                    .text:0000000000001080                 endbr64
                    .text:0000000000001084                 push    r12
                    .text:0000000000001086                 mov     ecx, 9
                    .text:000000000000108B                 mov     edi, 0Ah
                    .text:0000000000001090                 push    rbp
                    .text:0000000000001091                 push    rbx
                    .text:0000000000001092                 sub     rsp, 30h
                    .text:0000000000001096                 mov     rax, fs:28h
                    .text:000000000000109F                 mov     [rsp+48h+var_20], rax
                    .text:00000000000010A4                 mov     rax, 100000009h
                    .text:00000000000010AE                 lea     r9, [rsp+48h+var_44]
                    .text:00000000000010B3                 mov     [rsp+48h+var_28], 4
                    .text:00000000000010BC                 mov     [rsp], rax
                    .text:00000000000010C0                 mov     rax, 300000005h
                    .text:00000000000010CA                 mov     [rsp+48h+var_40], rax
                    .text:00000000000010CF                 mov     rax, 200000007h
                    .text:00000000000010D9                 mov     [rsp+48h+var_38], rax
                    .text:00000000000010DE                 mov     rax, 600000008h
                    .text:00000000000010E8                 mov     [rsp+48h+var_30], rax
                    .text:00000000000010ED                 nop     dword ptr [rax]
                    .text:00000000000010F0
                    .text:00000000000010F0 loc_10F0:                               ; CODE XREF: main+A9↓j
                    .text:00000000000010F0                 mov     rax, r9
                    .text:00000000000010F3                 xor     r8d, r8d
                    .text:00000000000010F6                 mov     edx, 1
                    .text:00000000000010FB                 jmp     short loc_1106
                    .text:00000000000010FB ; ---------------------------------------------------------------------------
                    .text:00000000000010FD                 align 20h
                    .text:0000000000001100
                    .text:0000000000001100 loc_1100:                               ; CODE XREF: main+9B↓j
                    .text:0000000000001100                 mov     ecx, [rax]
                    .text:0000000000001102                 add     rax, 4
                    .text:0000000000001106
                    .text:0000000000001106 loc_1106:                               ; CODE XREF: main+7B↑j
                    .text:0000000000001106                 mov     esi, [rax]
                    .text:0000000000001108                 cmp     esi, ecx
                    .text:000000000000110A                 jge     short loc_1114
                    .text:000000000000110C                 mov     [rax-4], esi
                    .text:000000000000110F                 mov     r8, rdx
                    .text:0000000000001112                 mov     [rax], ecx
                    .text:0000000000001114
                    .text:0000000000001114 loc_1114:                               ; CODE XREF: main+8A↑j
                    .text:0000000000001114                 add     rdx, 1
                    .text:0000000000001118                 cmp     rdx, rdi
                    .text:000000000000111B                 jb      short loc_1100
                    .text:000000000000111D                 mov     ecx, [rsp+48h+var_48]
                    .text:0000000000001120                 cmp     r8, 1
                    .text:0000000000001124                 jbe     short loc_1130
                    .text:0000000000001126                 mov     rdi, r8
                    .text:0000000000001129                 jmp     short loc_10F0
                    .text:0000000000001129 ; ---------------------------------------------------------------------------
                    .text:000000000000112B                 align 10h
                    .text:0000000000001130
                    .text:0000000000001130 loc_1130:                               ; CODE XREF: main+A4↑j
                    .text:0000000000001130                 mov     rbx, rsp
                    .text:0000000000001133                 lea     r12, [rsp+48h+var_20]
                    .text:0000000000001138                 lea     rbp, unk_2004
                    .text:000000000000113F                 nop
                    .text:0000000000001140
                    .text:0000000000001140 loc_1140:                               ; CODE XREF: main+D8↓j
                    .text:0000000000001140                 mov     edx, [rbx]
                    .text:0000000000001142                 mov     rsi, rbp
                    .text:0000000000001145                 mov     edi, 1
                    .text:000000000000114A                 xor     eax, eax
                    .text:000000000000114C                 add     rbx, 4
                    .text:0000000000001150                 call    ___printf_chk
                    .text:0000000000001155                 cmp     rbx, r12
                    .text:0000000000001158                 jnz     short loc_1140
                    .text:000000000000115A                 xor     eax, eax
                    .text:000000000000115C                 lea     rsi, unk_2008
                    .text:0000000000001163                 mov     edi, 1
                    .text:0000000000001168                 call    ___printf_chk
                    .text:000000000000116D                 mov     rax, [rsp+48h+var_20]
                    .text:0000000000001172                 sub     rax, fs:28h
                    .text:000000000000117B                 jnz     short loc_1188
                    .text:000000000000117D                 add     rsp, 30h
                    .text:0000000000001181                 xor     eax, eax
                    .text:0000000000001183                 pop     rbx
                    .text:0000000000001184                 pop     rbp
                    .text:0000000000001185                 pop     r12
                    .text:0000000000001187                 retn
                    .text:0000000000001188 ; ---------------------------------------------------------------------------
                    .text:0000000000001188
                    .text:0000000000001188 loc_1188:                               ; CODE XREF: main+FB↑j
                    .text:0000000000001188                 call    ___stack_chk_fail
                    .text:0000000000001188 ; } // starts at 1080
                    .text:0000000000001188 main            endp
                    .text:0000000000001188
                    .text:0000000000001188 ; ---------------------------------------------------------------------------
                    .text:000000000000118D                 align 10h
                    .text:0000000000001190
                    .text:0000000000001190 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001190
                    .text:0000000000001190 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001190
                    .text:0000000000001190                 public _start
                    .text:0000000000001190 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001190 ; __unwind {
                    .text:0000000000001190                 endbr64
                    .text:0000000000001194                 xor     ebp, ebp
                    .text:0000000000001196                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001199                 pop     rsi             ; argc
                    .text:000000000000119A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000119D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:00000000000011A1                 push    rax
                    .text:00000000000011A2                 push    rsp             ; stack_end
                    .text:00000000000011A3                 xor     r8d, r8d        ; fini
                    .text:00000000000011A6                 xor     ecx, ecx        ; init
                    .text:00000000000011A8                 lea     rdi, main       ; main
                    .text:00000000000011AF                 call    cs:__libc_start_main_ptr
                    .text:00000000000011B5                 hlt
                    .text:00000000000011B5 ; } // starts at 1190
                    .text:00000000000011B5 _start          endp
                    .text:00000000000011B5
                    .text:00000000000011B5 ; ---------------------------------------------------------------------------
                    .text:00000000000011B6                 align 20h
                    .text:00000000000011C0
                    .text:00000000000011C0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011C0
                    .text:00000000000011C0
                    .text:00000000000011C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1257↓p
                    .text:00000000000011C0                 lea     rdi, __bss_start
                    .text:00000000000011C7                 lea     rax, __bss_start
                    .text:00000000000011CE                 cmp     rax, rdi
                    .text:00000000000011D1                 jz      short locret_11E8
                    .text:00000000000011D3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:00000000000011DA                 test    rax, rax
                    .text:00000000000011DD                 jz      short locret_11E8
                    .text:00000000000011DF                 jmp     rax
                    .text:00000000000011DF ; ---------------------------------------------------------------------------
                    .text:00000000000011E1                 align 8
                    .text:00000000000011E8
                    .text:00000000000011E8 locret_11E8:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:00000000000011E8                                         ; deregister_tm_clones+1D↑j
                    .text:00000000000011E8                 retn
                    .text:00000000000011E8 deregister_tm_clones endp
                    .text:00000000000011E8
                    .text:00000000000011E8 ; ---------------------------------------------------------------------------
                    .text:00000000000011E9                 align 10h
                    .text:00000000000011F0
                    .text:00000000000011F0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011F0
                    .text:00000000000011F0
                    .text:00000000000011F0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:00000000000011F0                 lea     rdi, __bss_start
                    .text:00000000000011F7                 lea     rsi, __bss_start
                    .text:00000000000011FE                 sub     rsi, rdi
                    .text:0000000000001201                 mov     rax, rsi
                    .text:0000000000001204                 shr     rsi, 3Fh
                    .text:0000000000001208                 sar     rax, 3
                    .text:000000000000120C                 add     rsi, rax
                    .text:000000000000120F                 sar     rsi, 1
                    .text:0000000000001212                 jz      short locret_1228
                    .text:0000000000001214                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:000000000000121B                 test    rax, rax
                    .text:000000000000121E                 jz      short locret_1228
                    .text:0000000000001220                 jmp     rax
                    .text:0000000000001220 ; ---------------------------------------------------------------------------
                    .text:0000000000001222                 align 8
                    .text:0000000000001228
                    .text:0000000000001228 locret_1228:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:0000000000001228                                         ; register_tm_clones+2E↑j
                    .text:0000000000001228                 retn
                    .text:0000000000001228 register_tm_clones endp
                    .text:0000000000001228
                    .text:0000000000001228 ; ---------------------------------------------------------------------------
                    .text:0000000000001229                 align 10h
                    .text:0000000000001230
                    .text:0000000000001230 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001230
                    .text:0000000000001230
                    .text:0000000000001230 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:0000000000001230                 endbr64
                    .text:0000000000001234                 cmp     cs:__bss_start, 0
                    .text:000000000000123B                 jnz     short locret_1268
                    .text:000000000000123D                 push    rbp
                    .text:000000000000123E                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001246                 mov     rbp, rsp
                    .text:0000000000001249                 jz      short loc_1257
                    .text:000000000000124B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001252                 call    __cxa_finalize
                    .text:0000000000001257
                    .text:0000000000001257 loc_1257:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001257                 call    deregister_tm_clones
                    .text:000000000000125C                 mov     cs:__bss_start, 1
                    .text:0000000000001263                 pop     rbp
                    .text:0000000000001264                 retn
                    .text:0000000000001264 ; ---------------------------------------------------------------------------
                    .text:0000000000001265                 align 8
                    .text:0000000000001268
                    .text:0000000000001268 locret_1268:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001268                 retn
                    .text:0000000000001268 __do_global_dtors_aux endp
                    .text:0000000000001268
                    .text:0000000000001268 ; ---------------------------------------------------------------------------
                    .text:0000000000001269                 align 10h
                    .text:0000000000001270
                    .text:0000000000001270 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001270
                    .text:0000000000001270
                    .text:0000000000001270 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001270                 endbr64
                    .text:0000000000001274                 jmp     register_tm_clones
                    .text:0000000000001274 frame_dummy     endp
                    .text:0000000000001274
                    .text:0000000000001274 _text           ends
                    .text:0000000000001274
                    LOAD:0000000000001279 ; ===========================================================================
                    LOAD:0000000000001279
                    LOAD:0000000000001279 ; Segment type: Pure code
                    LOAD:0000000000001279 ; Segment permissions: Read/Execute
                    LOAD:0000000000001279 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001279                 assume cs:LOAD
                    LOAD:0000000000001279                 ;org 1279h
                    LOAD:0000000000001279                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001279                 align 4
                    LOAD:0000000000001279 LOAD            ends
                    LOAD:0000000000001279
                    .fini:000000000000127C ; ===========================================================================
                    .fini:000000000000127C
                    .fini:000000000000127C ; Segment type: Pure code
                    .fini:000000000000127C ; Segment permissions: Read/Execute
                    .fini:000000000000127C _fini           segment dword public 'CODE' use64
                    .fini:000000000000127C                 assume cs:_fini
                    .fini:000000000000127C                 ;org 127Ch
                    .fini:000000000000127C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000127C
                    .fini:000000000000127C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000127C
                    .fini:000000000000127C
                    .fini:000000000000127C                 public _term_proc
                    .fini:000000000000127C _term_proc      proc near
                    .fini:000000000000127C                 endbr64                 ; _fini
                    .fini:0000000000001280                 sub     rsp, 8
                    .fini:0000000000001284                 add     rsp, 8
                    .fini:0000000000001288                 retn
                    .fini:0000000000001288 _term_proc      endp
                    .fini:0000000000001288
                    .fini:0000000000001288 _fini           ends
                    .fini:0000000000001288
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 unk_2004        db  25h ; %             ; DATA XREF: main+B8↑o
                    .rodata:0000000000002005                 db  64h ; d
                    .rodata:0000000000002006                 db  20h
                    .rodata:0000000000002007                 db    0
                    .rodata:0000000000002008 unk_2008        db  0Ah                 ; DATA XREF: main+DC↑o
                    .rodata:0000000000002009                 db    0
                    .rodata:0000000000002009 _rodata         ends
                    .rodata:0000000000002009
                    LOAD:000000000000200A ; ===========================================================================
                    LOAD:000000000000200A
                    LOAD:000000000000200A ; Segment type: Pure data
                    LOAD:000000000000200A ; Segment permissions: Read
                    LOAD:000000000000200A LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000200A                 assume cs:LOAD
                    LOAD:000000000000200A                 ;org 200Ah
                    LOAD:000000000000200A                 align 4
                    LOAD:000000000000200A LOAD            ends
                    LOAD:000000000000200A
                    .eh_frame_hdr:000000000000200C ; ===========================================================================
                    .eh_frame_hdr:000000000000200C
                    .eh_frame_hdr:000000000000200C ; Segment type: Pure data
                    .eh_frame_hdr:000000000000200C ; Segment permissions: Read
                    .eh_frame_hdr:000000000000200C _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:000000000000200C                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:000000000000200C                 ;org 200Ch
                    .eh_frame_hdr:000000000000200C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:000000000000200D                 db  1Bh
                    .eh_frame_hdr:000000000000200E                 db    3
                    .eh_frame_hdr:000000000000200F                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002010                 db  30h ; 0
                    .eh_frame_hdr:0000000000002011                 db    0
                    .eh_frame_hdr:0000000000002012                 db    0
                    .eh_frame_hdr:0000000000002013                 db    0
                    .eh_frame_hdr:0000000000002014                 db    5
                    .eh_frame_hdr:0000000000002015                 db    0
                    .eh_frame_hdr:0000000000002016                 db    0
                    .eh_frame_hdr:0000000000002017                 db    0
                    .eh_frame_hdr:0000000000002018                 db  14h
                    .eh_frame_hdr:0000000000002019                 db 0F0h
                    .eh_frame_hdr:000000000000201A                 db 0FFh
                    .eh_frame_hdr:000000000000201B                 db 0FFh
                    .eh_frame_hdr:000000000000201C                 db  64h ; d
                    .eh_frame_hdr:000000000000201D                 db    0
                    .eh_frame_hdr:000000000000201E                 db    0
                    .eh_frame_hdr:000000000000201F                 db    0
                    .eh_frame_hdr:0000000000002020                 db  44h ; D
                    .eh_frame_hdr:0000000000002021                 db 0F0h
                    .eh_frame_hdr:0000000000002022                 db 0FFh
                    .eh_frame_hdr:0000000000002023                 db 0FFh
                    .eh_frame_hdr:0000000000002024                 db  8Ch
                    .eh_frame_hdr:0000000000002025                 db    0
                    .eh_frame_hdr:0000000000002026                 db    0
                    .eh_frame_hdr:0000000000002027                 db    0
                    .eh_frame_hdr:0000000000002028                 db  54h ; T
                    .eh_frame_hdr:0000000000002029                 db 0F0h
                    .eh_frame_hdr:000000000000202A                 db 0FFh
                    .eh_frame_hdr:000000000000202B                 db 0FFh
                    .eh_frame_hdr:000000000000202C                 db 0A4h
                    .eh_frame_hdr:000000000000202D                 db    0
                    .eh_frame_hdr:000000000000202E                 db    0
                    .eh_frame_hdr:000000000000202F                 db    0
                    .eh_frame_hdr:0000000000002030                 db  74h ; t
                    .eh_frame_hdr:0000000000002031                 db 0F0h
                    .eh_frame_hdr:0000000000002032                 db 0FFh
                    .eh_frame_hdr:0000000000002033                 db 0FFh
                    .eh_frame_hdr:0000000000002034                 db 0BCh
                    .eh_frame_hdr:0000000000002035                 db    0
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db  84h
                    .eh_frame_hdr:0000000000002039                 db 0F1h
                    .eh_frame_hdr:000000000000203A                 db 0FFh
                    .eh_frame_hdr:000000000000203B                 db 0FFh
                    .eh_frame_hdr:000000000000203C                 db  4Ch ; L
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:000000000000203F _eh_frame_hdr   ends
                    .eh_frame_hdr:000000000000203F
                    .eh_frame:0000000000002040 ; ===========================================================================
                    .eh_frame:0000000000002040
                    .eh_frame:0000000000002040 ; Segment type: Pure data
                    .eh_frame:0000000000002040 ; Segment permissions: Read
                    .eh_frame:0000000000002040 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002040                 assume cs:_eh_frame
                    .eh_frame:0000000000002040                 ;org 2040h
                    .eh_frame:0000000000002040                 db  14h
                    .eh_frame:0000000000002041                 db    0
                    .eh_frame:0000000000002042                 db    0
                    .eh_frame:0000000000002043                 db    0
                    .eh_frame:0000000000002044                 db    0
                    .eh_frame:0000000000002045                 db    0
                    .eh_frame:0000000000002046                 db    0
                    .eh_frame:0000000000002047                 db    0
                    .eh_frame:0000000000002048                 db    1
                    .eh_frame:0000000000002049                 db  7Ah ; z
                    .eh_frame:000000000000204A                 db  52h ; R
                    .eh_frame:000000000000204B                 db    0
                    .eh_frame:000000000000204C                 db    1
                    .eh_frame:000000000000204D                 db  78h ; x
                    .eh_frame:000000000000204E                 db  10h
                    .eh_frame:000000000000204F                 db    1
                    .eh_frame:0000000000002050                 db  1Bh
                    .eh_frame:0000000000002051                 db  0Ch
                    .eh_frame:0000000000002052                 db    7
                    .eh_frame:0000000000002053                 db    8
                    .eh_frame:0000000000002054                 db  90h
                    .eh_frame:0000000000002055                 db    1
                    .eh_frame:0000000000002056                 db    0
                    .eh_frame:0000000000002057                 db    0
                    .eh_frame:0000000000002058                 db  14h
                    .eh_frame:0000000000002059                 db    0
                    .eh_frame:000000000000205A                 db    0
                    .eh_frame:000000000000205B                 db    0
                    .eh_frame:000000000000205C                 db  1Ch
                    .eh_frame:000000000000205D                 db    0
                    .eh_frame:000000000000205E                 db    0
                    .eh_frame:000000000000205F                 db    0
                    .eh_frame:0000000000002060                 db  30h ; 0
                    .eh_frame:0000000000002061                 db 0F1h
                    .eh_frame:0000000000002062                 db 0FFh
                    .eh_frame:0000000000002063                 db 0FFh
                    .eh_frame:0000000000002064                 db  26h ; &
                    .eh_frame:0000000000002065                 db    0
                    .eh_frame:0000000000002066                 db    0
                    .eh_frame:0000000000002067                 db    0
                    .eh_frame:0000000000002068                 db    0
                    .eh_frame:0000000000002069                 db  44h ; D
                    .eh_frame:000000000000206A                 db    7
                    .eh_frame:000000000000206B                 db  10h
                    .eh_frame:000000000000206C                 db    0
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db  24h ; $
                    .eh_frame:0000000000002071                 db    0
                    .eh_frame:0000000000002072                 db    0
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db  34h ; 4
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db 0A8h
                    .eh_frame:0000000000002079                 db 0EFh
                    .eh_frame:000000000000207A                 db 0FFh
                    .eh_frame:000000000000207B                 db 0FFh
                    .eh_frame:000000000000207C                 db  30h ; 0
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db    0
                    .eh_frame:0000000000002081                 db  0Eh
                    .eh_frame:0000000000002082                 db  10h
                    .eh_frame:0000000000002083                 db  46h ; F
                    .eh_frame:0000000000002084                 db  0Eh
                    .eh_frame:0000000000002085                 db  18h
                    .eh_frame:0000000000002086                 db  4Ah ; J
                    .eh_frame:0000000000002087                 db  0Fh
                    .eh_frame:0000000000002088                 db  0Bh
                    .eh_frame:0000000000002089                 db  77h ; w
                    .eh_frame:000000000000208A                 db    8
                    .eh_frame:000000000000208B                 db  80h
                    .eh_frame:000000000000208C                 db    0
                    .eh_frame:000000000000208D                 db  3Fh ; ?
                    .eh_frame:000000000000208E                 db  1Ah
                    .eh_frame:000000000000208F                 db  3Ah ; :
                    .eh_frame:0000000000002090                 db  2Ah ; *
                    .eh_frame:0000000000002091                 db  33h ; 3
                    .eh_frame:0000000000002092                 db  24h ; $
                    .eh_frame:0000000000002093                 db  22h ; "
                    .eh_frame:0000000000002094                 db    0
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db  14h
                    .eh_frame:0000000000002099                 db    0
                    .eh_frame:000000000000209A                 db    0
                    .eh_frame:000000000000209B                 db    0
                    .eh_frame:000000000000209C                 db  5Ch ; \
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db 0B0h
                    .eh_frame:00000000000020A1                 db 0EFh
                    .eh_frame:00000000000020A2                 db 0FFh
                    .eh_frame:00000000000020A3                 db 0FFh
                    .eh_frame:00000000000020A4                 db  10h
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db    0
                    .eh_frame:00000000000020A9                 db    0
                    .eh_frame:00000000000020AA                 db    0
                    .eh_frame:00000000000020AB                 db    0
                    .eh_frame:00000000000020AC                 db    0
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db  14h
                    .eh_frame:00000000000020B1                 db    0
                    .eh_frame:00000000000020B2                 db    0
                    .eh_frame:00000000000020B3                 db    0
                    .eh_frame:00000000000020B4                 db  74h ; t
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db 0A8h
                    .eh_frame:00000000000020B9                 db 0EFh
                    .eh_frame:00000000000020BA                 db 0FFh
                    .eh_frame:00000000000020BB                 db 0FFh
                    .eh_frame:00000000000020BC                 db  20h
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db    0
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db    0
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  30h ; 0
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db  8Ch
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db 0B0h
                    .eh_frame:00000000000020D1                 db 0EFh
                    .eh_frame:00000000000020D2                 db 0FFh
                    .eh_frame:00000000000020D3                 db 0FFh
                    .eh_frame:00000000000020D4                 db  0Dh
                    .eh_frame:00000000000020D5                 db    1
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db    0
                    .eh_frame:00000000000020D9                 db  46h ; F
                    .eh_frame:00000000000020DA                 db  0Eh
                    .eh_frame:00000000000020DB                 db  10h
                    .eh_frame:00000000000020DC                 db  8Ch
                    .eh_frame:00000000000020DD                 db    2
                    .eh_frame:00000000000020DE                 db  4Bh ; K
                    .eh_frame:00000000000020DF                 db  0Eh
                    .eh_frame:00000000000020E0                 db  18h
                    .eh_frame:00000000000020E1                 db  86h
                    .eh_frame:00000000000020E2                 db    3
                    .eh_frame:00000000000020E3                 db  41h ; A
                    .eh_frame:00000000000020E4                 db  0Eh
                    .eh_frame:00000000000020E5                 db  20h
                    .eh_frame:00000000000020E6                 db  83h
                    .eh_frame:00000000000020E7                 db    4
                    .eh_frame:00000000000020E8                 db  44h ; D
                    .eh_frame:00000000000020E9                 db  0Eh
                    .eh_frame:00000000000020EA                 db  50h ; P
                    .eh_frame:00000000000020EB                 db    2
                    .eh_frame:00000000000020EC                 db 0EBh
                    .eh_frame:00000000000020ED                 db  0Ah
                    .eh_frame:00000000000020EE                 db  0Eh
                    .eh_frame:00000000000020EF                 db  20h
                    .eh_frame:00000000000020F0                 db  43h ; C
                    .eh_frame:00000000000020F1                 db  0Eh
                    .eh_frame:00000000000020F2                 db  18h
                    .eh_frame:00000000000020F3                 db  41h ; A
                    .eh_frame:00000000000020F4                 db  0Eh
                    .eh_frame:00000000000020F5                 db  10h
                    .eh_frame:00000000000020F6                 db  42h ; B
                    .eh_frame:00000000000020F7                 db  0Eh
                    .eh_frame:00000000000020F8                 db    8
                    .eh_frame:00000000000020F9                 db  41h ; A
                    .eh_frame:00000000000020FA                 db  0Bh
                    .eh_frame:00000000000020FB                 db    0
                    .eh_frame:00000000000020FC __FRAME_END__   db    0
                    .eh_frame:00000000000020FD                 db    0
                    .eh_frame:00000000000020FE                 db    0
                    .eh_frame:00000000000020FF                 db    0
                    .eh_frame:00000000000020FF _eh_frame       ends
                    .eh_frame:00000000000020FF
                    .init_array:0000000000003DB0 ; ELF Initialization Function Table
                    .init_array:0000000000003DB0 ; ===========================================================================
                    .init_array:0000000000003DB0
                    .init_array:0000000000003DB0 ; Segment type: Pure data
                    .init_array:0000000000003DB0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DB0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DB0                 assume cs:_init_array
                    .init_array:0000000000003DB0                 ;org 3DB0h
                    .init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DB0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DB0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DB0 _init_array     ends
                    .init_array:0000000000003DB0
                    .fini_array:0000000000003DB8 ; ELF Termination Function Table
                    .fini_array:0000000000003DB8 ; ===========================================================================
                    .fini_array:0000000000003DB8
                    .fini_array:0000000000003DB8 ; Segment type: Pure data
                    .fini_array:0000000000003DB8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DB8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DB8                 assume cs:_fini_array
                    .fini_array:0000000000003DB8                 ;org 3DB8h
                    .fini_array:0000000000003DB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DB8 _fini_array     ends
                    .fini_array:0000000000003DB8
                    LOAD:0000000000003DC0 ; ELF Dynamic Information
                    LOAD:0000000000003DC0 ; ===========================================================================
                    LOAD:0000000000003DC0
                    LOAD:0000000000003DC0 ; Segment type: Pure data
                    LOAD:0000000000003DC0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DC0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DC0                 assume cs:LOAD
                    LOAD:0000000000003DC0                 ;org 3DC0h
                    LOAD:0000000000003DC0 _DYNAMIC        Elf64_Dyn <1, 40h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DC0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DC0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DE0                 Elf64_Dyn <0Dh, 127Ch>  ; DT_FINI
                    LOAD:0000000000003DF0                 Elf64_Dyn <19h, 3DB0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ah, 3DB8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E20                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E30                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E40                 Elf64_Dyn <5, 498h>     ; DT_STRTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E60                 Elf64_Dyn <0Ah, 0BCh>   ; DT_STRSZ
                    LOAD:0000000000003E70                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E80                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E90                 Elf64_Dyn <3, 3FB0h>    ; DT_PLTGOT
                    LOAD:0000000000003EA0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EB0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <17h, 678h>   ; DT_JMPREL
                    LOAD:0000000000003ED0                 Elf64_Dyn <7, 5B8h>     ; DT_RELA
                    LOAD:0000000000003EE0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EF0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003F00                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFEh, 568h> ; DT_VERNEED
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF0h, 554h> ; DT_VERSYM
                    LOAD:0000000000003F50                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F60                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003FA0                 db    0
                    LOAD:0000000000003FA1                 db    0
                    LOAD:0000000000003FA2                 db    0
                    LOAD:0000000000003FA3                 db    0
                    LOAD:0000000000003FA4                 db    0
                    LOAD:0000000000003FA5                 db    0
                    LOAD:0000000000003FA6                 db    0
                    LOAD:0000000000003FA7                 db    0
                    LOAD:0000000000003FA8                 db    0
                    LOAD:0000000000003FA9                 db    0
                    LOAD:0000000000003FAA                 db    0
                    LOAD:0000000000003FAB                 db    0
                    LOAD:0000000000003FAC                 db    0
                    LOAD:0000000000003FAD                 db    0
                    LOAD:0000000000003FAE                 db    0
                    LOAD:0000000000003FAF                 db    0
                    LOAD:0000000000003FAF LOAD            ends
                    LOAD:0000000000003FAF
                    .got:0000000000003FB0 ; ===========================================================================
                    .got:0000000000003FB0
                    .got:0000000000003FB0 ; Segment type: Pure data
                    .got:0000000000003FB0 ; Segment permissions: Read/Write
                    .got:0000000000003FB0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FB0                 assume cs:_got
                    .got:0000000000003FB0                 ;org 3FB0h
                    .got:0000000000003FB0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FB8 qword_3FB8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FC0 qword_3FC0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC8                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004020                 extrn __libc_start_main:near
                    extern:0000000000004020                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004020                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004028                 extrn __stack_chk_fail:near
                    extern:0000000000004028                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004028                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004030                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004038 ; int __cxa_finalize(void *)
                    extern:0000000000004038                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004038                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004040                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004040                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004048                 extrn __gmon_start__:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004048                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004050                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004050
                    extern:0000000000004050
                    extern:0000000000004050                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x0000000000001080
                    ; Intent: Bubble-sort 10 fixed ints and print them (confidence=0.95). Evidence: adjacent swaps with last-swap boundary; printing with "%d " then newline.
                    ; Preconditions: None
                    ; Postconditions: Prints the sorted sequence in ascending order.
                    
                    @.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1
                    @.nl = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
                    
                    ; Only the needed extern declarations:
                    declare i32 @__printf_chk(i32, i8*, ...)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    %arr = alloca [10 x i32], align 16
                    ; initialize array: [9,1,5,3,7,2,8,6,4,0]
                    %p0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
                    store i32 9, i32* %p0, align 4
                    %p1 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 1
                    store i32 1, i32* %p1, align 4
                    %p2 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 2
                    store i32 5, i32* %p2, align 4
                    %p3 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 3
                    store i32 3, i32* %p3, align 4
                    %p4 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 4
                    store i32 7, i32* %p4, align 4
                    %p5 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 5
                    store i32 2, i32* %p5, align 4
                    %p6 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 6
                    store i32 8, i32* %p6, align 4
                    %p7 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 7
                    store i32 6, i32* %p7, align 4
                    %p8 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 8
                    store i32 4, i32* %p8, align 4
                    %p9 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 9
                    store i32 0, i32* %p9, align 4
                    br label %outer.cond
                    
                    outer.cond: ; preds = %outer.next, %entry
                    %limit = phi i32 [ 10, %entry ], [ %last.exit, %outer.next ]
                    ; left := arr[0]
                    %p0.ld = load i32, i32* %p0, align 4
                    br label %inner.cond
                    
                    inner.cond: ; preds = %inner.cont, %outer.cond
                    %i = phi i32 [ 1, %outer.cond ], [ %i.next, %inner.cont ]
                    %left = phi i32 [ %p0.ld, %outer.cond ], [ %left.next, %inner.cont ]
                    %last = phi i32 [ 0, %outer.cond ], [ %last.next, %inner.cont ]
                    %cmp.i = icmp slt i32 %i, %limit
                    br i1 %cmp.i, label %inner.body, label %after.inner
                    
                    inner.body: ; preds = %inner.cond
                    %i64 = zext i32 %i to i64
                    %pi = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %i64
                    %right = load i32, i32* %pi, align 4
                    %lt = icmp slt i32 %right, %left
                    br i1 %lt, label %swap, label %noswap
                    
                    swap: ; preds = %inner.body
                    %i.minus1 = add i32 %i, -1
                    %i.minus1.64 = zext i32 %i.minus1 to i64
                    %pim1 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %i.minus1.64
                    store i32 %right, i32* %pim1, align 4
                    store i32 %left, i32* %pi, align 4
                    br label %inner.cont
                    
                    noswap: ; preds = %inner.body
                    br label %inner.cont
                    
                    inner.cont: ; preds = %noswap, %swap
                    %left.next = phi i32 [ %left, %swap ], [ %right, %noswap ]
                    %last.updated = phi i32 [ %i, %swap ], [ %last, %noswap ]
                    %i.next = add i32 %i, 1
                    %last.next = %last.updated
                    br label %inner.cond
                    
                    after.inner: ; preds = %inner.cond
                    %last.exit = %last
                    %le1 = icmp ule i32 %last.exit, 1
                    br i1 %le1, label %print, label %outer.next
                    
                    outer.next: ; preds = %after.inner
                    br label %outer.cond
                    
                    print: ; preds = %after.inner
                    br label %print.loop
                    
                    print.loop: ; preds = %print.loop, %print
                    %k = phi i32 [ 0, %print ], [ %k.next, %print.loop ]
                    %k64 = zext i32 %k to i64
                    %pk = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 %k64
                    %val = load i32, i32* %pk, align 4
                    %fmt = getelementptr inbounds [4 x i8], [4 x i8]* @.str, i64 0, i64 0
                    %call = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt, i32 %val)
                    %k.next = add i32 %k, 1
                    %cont = icmp slt i32 %k.next, 10
                    br i1 %cont, label %print.loop, label %print.after
                    
                    print.after: ; preds = %print.loop
                    %nlp = getelementptr inbounds [2 x i8], [2 x i8]* @.nl, i64 0, i64 0
                    %call2 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nlp)
                    ret i32 0
                    }
                    ```
                    
        - DFS
            - ida 함수 리스트
                
                ```python
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "DFS",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1390",
                      "end": "0x13b6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x13c0",
                      "end": "0x13e9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x13f0",
                      "end": "0x1429",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1430",
                      "end": "0x1469",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1470",
                      "end": "0x1479",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4060",
                      "end": "0x4068",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1070",
                      "start": "0x1070",
                      "end": "0x107f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".calloc",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".malloc",
                      "start": "0x10c0",
                      "end": "0x10cb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10d0",
                      "end": "0x10db",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10e0",
                      "end": "0x1383",
                      "size": 675,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x147c",
                      "end": "0x1489",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "calloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "malloc",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4050",
                      "end": "0x4058",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 28
                user? candidates: 9
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : 79EADBA808659D076BF459442468AADB4B99753108F925239867D9CF228F3998
                    LOAD:0000000000000000 ; Input MD5    : 27CE306554E928EC2DE3AEA8ABC6835C
                    LOAD:0000000000000000 ; Input CRC32  : 3752F76B
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\DFS
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'DFS.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 3750h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 750h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 750h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 489h                 ; Size in file image
                    LOAD:0000000000000110                 dq 489h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 134h                 ; Size in file image
                    LOAD:0000000000000148                 dq 134h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2D98h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3D98h                ; Physical address
                    LOAD:0000000000000178                 dq 278h                 ; Size in file image
                    LOAD:0000000000000180                 dq 280h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DA8h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DA8h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2024h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2024h                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2D98h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3D98h                ; Physical address
                    LOAD:0000000000000300                 dq 268h                 ; Size in file image
                    LOAD:0000000000000308                 dq 268h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 1, 0A2h, 8Fh, 84h, 62h, 0D6h, 0FBh, 0C3h, 0AAh, 26h ; Desc
                    LOAD:0000000000000382                 db 4Eh, 0F2h, 0D4h, 9Bh, 0EBh, 59h, 0BAh, 43h, 8Dh, 8Bh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 0Ah
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 0Ah, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4E0, 12h, 0, 0, offset dword_0, \ ; "free"
                    LOAD:00000000000003F0                            0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4E0, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4E0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4E0, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aCalloc - offset unk_4E0, 12h, 0, 0, offset dword_0,\ ; "calloc"
                    LOAD:0000000000000450                            0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aGmonStart - offset unk_4E0, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aMalloc - offset unk_4E0, 12h, 0, 0, offset dword_0,\ ; "malloc"
                    LOAD:0000000000000480                            0>
                    LOAD:0000000000000498                 Elf64_Sym <offset aPrintfChk - offset unk_4E0, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000498                            offset dword_0, 0>
                    LOAD:00000000000004B0                 Elf64_Sym <offset aItmRegistertmc - offset unk_4E0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:00000000000004B0                            offset dword_0, 0>
                    LOAD:00000000000004C8                 Elf64_Sym <offset aCxaFinalize - offset unk_4E0, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:00000000000004C8                            offset dword_0, 0>
                    LOAD:00000000000004E0 ; ELF String Table
                    LOAD:00000000000004E0 unk_4E0         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004E0                                         ; LOAD:0000000000000408↑o ...
                    LOAD:00000000000004E1 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004C8↑o
                    LOAD:00000000000004F0 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000498↑o
                    LOAD:00000000000004FD aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:0000000000000504 aLibcStartMain  db '__libc_start_main',0
                    LOAD:0000000000000504                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:0000000000000516 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:000000000000051B aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000052C aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:0000000000000533 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005C8↓o
                    LOAD:000000000000053D aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000005D8↓o
                    LOAD:0000000000000549 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000005E8↓o
                    LOAD:0000000000000553 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005F8↓o
                    LOAD:000000000000055E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000608↓o
                    LOAD:000000000000056A aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000056A                                         ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:0000000000000586 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000595 aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:0000000000000595                                         ; DATA XREF: LOAD:00000000000004B0↑o
                    LOAD:00000000000005AF                 align 10h
                    LOAD:00000000000005B0 ; ELF GNU Symbol Version Table
                    LOAD:00000000000005B0                 dw 0
                    LOAD:00000000000005B2                 dw 2                    ; free@@GLIBC_2.2.5
                    LOAD:00000000000005B4                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:00000000000005B6                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:00000000000005B8                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:00000000000005BA                 dw 2                    ; calloc@@GLIBC_2.2.5
                    LOAD:00000000000005BC                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:00000000000005BE                 dw 2                    ; malloc@@GLIBC_2.2.5
                    LOAD:00000000000005C0                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:00000000000005C2                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:00000000000005C4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:00000000000005C6                 dw 0
                    LOAD:00000000000005C8 ; ELF GNU Symbol Version Requirements
                    LOAD:00000000000005C8                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_4E0, 10h, 0> ; "libc.so.6"
                    LOAD:00000000000005D8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4E0, 10h> ; "GLIBC_2.3.4"
                    LOAD:00000000000005E8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4E0, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005F8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4E0, \ ; "GLIBC_2.34"
                    LOAD:00000000000005F8                                10h>
                    LOAD:0000000000000608                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4E0, 0> ; "GLIBC_2.2.5"
                    LOAD:0000000000000618 ; ELF RELA Relocation Table
                    LOAD:0000000000000618                 Elf64_Rela <3D98h, 8, 1470h> ; R_X86_64_RELATIVE +1470h
                    LOAD:0000000000000630                 Elf64_Rela <3DA0h, 8, 1430h> ; R_X86_64_RELATIVE +1430h
                    LOAD:0000000000000648                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000660                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000678                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000690                 Elf64_Rela <3FE8h, 600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:00000000000006A8                 Elf64_Rela <3FF0h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:00000000000006C0                 Elf64_Rela <3FF8h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:00000000000006D8 ; ELF JMPREL Relocation Table
                    LOAD:00000000000006D8                 Elf64_Rela <3FB0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                    LOAD:00000000000006F0                 Elf64_Rela <3FB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000708                 Elf64_Rela <3FC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT calloc
                    LOAD:0000000000000720                 Elf64_Rela <3FC8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT malloc
                    LOAD:0000000000000738                 Elf64_Rela <3FD0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000738 LOAD            ends
                    LOAD:0000000000000738
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j ...
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FA0
                    .plt:0000000000001026                 bnd jmp cs:qword_3FA8
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
                    .plt:000000000000105F                 align 20h
                    .plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
                    .plt:000000000000106F                 align 10h
                    .plt:0000000000001070 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1070]
                    .plt:000000000000107F                 align 20h
                    .plt:000000000000107F ; } // starts at 1020
                    .plt:000000000000107F _plt            ends
                    .plt:000000000000107F
                    .plt.got:0000000000001080 ; ===========================================================================
                    .plt.got:0000000000001080
                    .plt.got:0000000000001080 ; Segment type: Pure code
                    .plt.got:0000000000001080 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001080 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001080                 assume cs:_plt_got
                    .plt.got:0000000000001080                 ;org 1080h
                    .plt.got:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001080 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000108B                 align 10h
                    .plt.got:000000000000108B ; } // starts at 1080
                    .plt.got:000000000000108B _plt_got        ends
                    .plt.got:000000000000108B
                    .plt.sec:0000000000001090 ; ===========================================================================
                    .plt.sec:0000000000001090
                    .plt.sec:0000000000001090 ; Segment type: Pure code
                    .plt.sec:0000000000001090 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001090 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001090                 assume cs:_plt_sec
                    .plt.sec:0000000000001090                 ;org 1090h
                    .plt.sec:0000000000001090                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
                    .plt.sec:000000000000109B                 align 20h
                    .plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:00000000000010AB                 align 10h
                    .plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION _calloc]
                    .plt.sec:00000000000010BB                 align 20h
                    .plt.sec:00000000000010C0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
                    .plt.sec:00000000000010CB                 align 10h
                    .plt.sec:00000000000010D0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:00000000000010DB                 align 20h
                    .plt.sec:00000000000010DB ; } // starts at 1090
                    .plt.sec:00000000000010DB _plt_sec        ends
                    .plt.sec:00000000000010DB
                    .text:00000000000010E0 ; ===========================================================================
                    .text:00000000000010E0
                    .text:00000000000010E0 ; Segment type: Pure code
                    .text:00000000000010E0 ; Segment permissions: Read/Execute
                    .text:00000000000010E0 _text           segment para public 'CODE' use64
                    .text:00000000000010E0                 assume cs:_text
                    .text:00000000000010E0                 ;org 10E0h
                    .text:00000000000010E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:00000000000010E0
                    .text:00000000000010E0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000010E0
                    .text:00000000000010E0
                    .text:00000000000010E0 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:00000000000010E0                 public main
                    .text:00000000000010E0 main            proc near               ; DATA XREF: _start+18↓o
                    .text:00000000000010E0
                    .text:00000000000010E0 var_148         = qword ptr -148h
                    .text:00000000000010E0 var_108         = byte ptr -108h
                    .text:00000000000010E0 var_104         = qword ptr -104h
                    .text:00000000000010E0 var_EC          = dword ptr -0ECh
                    .text:00000000000010E0 var_E0          = qword ptr -0E0h
                    .text:00000000000010E0 var_D0          = dword ptr -0D0h
                    .text:00000000000010E0 var_BC          = dword ptr -0BCh
                    .text:00000000000010E0 var_B0          = dword ptr -0B0h
                    .text:00000000000010E0 var_94          = dword ptr -94h
                    .text:00000000000010E0 var_84          = dword ptr -84h
                    .text:00000000000010E0 var_74          = dword ptr -74h
                    .text:00000000000010E0 var_6C          = dword ptr -6Ch
                    .text:00000000000010E0 var_64          = dword ptr -64h
                    .text:00000000000010E0 var_4C          = dword ptr -4Ch
                    .text:00000000000010E0 var_40          = qword ptr -40h
                    .text:00000000000010E0
                    .text:00000000000010E0 ; __unwind {
                    .text:00000000000010E0                 endbr64
                    .text:00000000000010E4                 push    r15
                    .text:00000000000010E6                 mov     ecx, 18h
                    .text:00000000000010EB                 mov     esi, 1          ; size
                    .text:00000000000010F0                 push    r14
                    .text:00000000000010F2                 push    r13
                    .text:00000000000010F4                 push    r12
                    .text:00000000000010F6                 push    rbp
                    .text:00000000000010F7                 push    rbx
                    .text:00000000000010F8                 sub     rsp, 118h
                    .text:00000000000010FF                 mov     rax, fs:28h
                    .text:0000000000001108                 mov     [rsp+148h+var_40], rax
                    .text:0000000000001110                 xor     eax, eax
                    .text:0000000000001112                 lea     r13, [rsp+148h+var_108]
                    .text:0000000000001117                 mov     rdi, r13
                    .text:000000000000111A                 rep stosq
                    .text:000000000000111D                 mov     [rsp+148h+var_EC], 1
                    .text:0000000000001125                 mov     rax, 100000001h
                    .text:000000000000112F                 mov     [rsp+148h+var_104], rax
                    .text:0000000000001134                 mov     [rsp+148h+var_E0], rax
                    .text:0000000000001139                 mov     [rsp+148h+var_D0], 1
                    .text:0000000000001141                 mov     [rsp+148h+var_BC], 1
                    .text:000000000000114C                 mov     [rsp+148h+var_B0], 1
                    .text:0000000000001157                 mov     dword ptr [rdi], 0
                    .text:000000000000115D                 mov     edi, 1Ch        ; nmemb
                    .text:0000000000001162                 mov     [rsp+148h+var_94], 1
                    .text:000000000000116D                 mov     [rsp+148h+var_84], 1
                    .text:0000000000001178                 mov     [rsp+148h+var_74], 1
                    .text:0000000000001183                 mov     [rsp+148h+var_6C], 1
                    .text:000000000000118E                 mov     [rsp+148h+var_64], 1
                    .text:0000000000001199                 mov     [rsp+148h+var_4C], 1
                    .text:00000000000011A4                 call    _calloc
                    .text:00000000000011A9                 mov     esi, 1          ; size
                    .text:00000000000011AE                 mov     edi, 38h ; '8'  ; nmemb
                    .text:00000000000011B3                 mov     r14, rax
                    .text:00000000000011B6                 call    _calloc
                    .text:00000000000011BB                 mov     edi, 38h ; '8'  ; size
                    .text:00000000000011C0                 mov     r15, rax
                    .text:00000000000011C3                 call    _malloc
                    .text:00000000000011C8                 test    r14, r14
                    .text:00000000000011CB                 mov     r12, rax
                    .text:00000000000011CE                 setz    al
                    .text:00000000000011D1                 test    r15, r15
                    .text:00000000000011D4                 setz    dl
                    .text:00000000000011D7                 or      al, dl
                    .text:00000000000011D9                 jnz     loc_134C
                    .text:00000000000011DF                 test    r12, r12
                    .text:00000000000011E2                 jz      loc_134C
                    .text:00000000000011E8                 mov     qword ptr [r12], 0
                    .text:00000000000011F0                 xor     esi, esi
                    .text:00000000000011F2                 mov     ebp, 1
                    .text:00000000000011F7                 mov     ebx, 1
                    .text:00000000000011FC                 mov     dword ptr [r14], 1
                    .text:0000000000001203                 mov     [rsp+148h+var_148], 0
                    .text:000000000000120B                 nop     dword ptr [rax+rax+00h]
                    .text:0000000000001210
                    .text:0000000000001210 loc_1210:                               ; CODE XREF: main+183↓j
                    .text:0000000000001210                 lea     rcx, ds:0[rsi*8]
                    .text:0000000000001218                 lea     rdi, [r15+rcx]
                    .text:000000000000121C                 mov     rax, [rdi]
                    .text:000000000000121F                 cmp     rax, 6
                    .text:0000000000001223                 ja      short loc_1265
                    .text:0000000000001225                 sub     rcx, rsi
                    .text:0000000000001228                 lea     rdx, [r14+rax*4]
                    .text:000000000000122C                 lea     rcx, [r13+rcx*4+0]
                    .text:0000000000001231                 nop     dword ptr [rax+00000000h]
                    .text:0000000000001238
                    .text:0000000000001238 loc_1238:                               ; CODE XREF: main+173↓j
                    .text:0000000000001238                 mov     r8d, [rcx+rax*4]
                    .text:000000000000123C                 test    r8d, r8d
                    .text:000000000000123F                 jz      short loc_1247
                    .text:0000000000001241                 mov     esi, [rdx]
                    .text:0000000000001243                 test    esi, esi
                    .text:0000000000001245                 jz      short loc_1270
                    .text:0000000000001247
                    .text:0000000000001247 loc_1247:                               ; CODE XREF: main+15F↑j
                    .text:0000000000001247                 add     rax, 1
                    .text:000000000000124B                 add     rdx, 4
                    .text:000000000000124F                 cmp     rax, 7
                    .text:0000000000001253                 jnz     short loc_1238
                    .text:0000000000001255
                    .text:0000000000001255 loc_1255:                               ; CODE XREF: main+18B↓j
                    .text:0000000000001255                 sub     rbx, 1
                    .text:0000000000001259                 test    rbx, rbx
                    .text:000000000000125C                 jz      short loc_1292
                    .text:000000000000125E
                    .text:000000000000125E loc_125E:                               ; CODE XREF: main+189↓j
                    .text:000000000000125E                                         ; main+1B0↓j
                    .text:000000000000125E                 mov     rsi, [r12+rbx*8-8]
                    .text:0000000000001263                 jmp     short loc_1210
                    .text:0000000000001265 ; ---------------------------------------------------------------------------
                    .text:0000000000001265
                    .text:0000000000001265 loc_1265:                               ; CODE XREF: main+143↑j
                    .text:0000000000001265                 cmp     rax, 7
                    .text:0000000000001269                 jnz     short loc_125E
                    .text:000000000000126B                 jmp     short loc_1255
                    .text:000000000000126B ; ---------------------------------------------------------------------------
                    .text:000000000000126D                 align 10h
                    .text:0000000000001270
                    .text:0000000000001270 loc_1270:                               ; CODE XREF: main+165↑j
                    .text:0000000000001270                 mov     [r12+rbx*8], rax
                    .text:0000000000001274                 lea     rcx, [rax+1]
                    .text:0000000000001278                 add     rbx, 1
                    .text:000000000000127C                 mov     [rsp+rbp*8+148h+var_148], rax
                    .text:0000000000001280                 add     rbp, 1
                    .text:0000000000001284                 mov     [rdi], rcx
                    .text:0000000000001287                 mov     dword ptr [rdx], 1
                    .text:000000000000128D                 test    rbx, rbx
                    .text:0000000000001290                 jnz     short loc_125E
                    .text:0000000000001292
                    .text:0000000000001292 loc_1292:                               ; CODE XREF: main+17C↑j
                    .text:0000000000001292                 mov     rdi, r14        ; ptr
                    .text:0000000000001295                 call    _free
                    .text:000000000000129A                 mov     rdi, r15        ; ptr
                    .text:000000000000129D                 call    _free
                    .text:00000000000012A2                 mov     rdi, r12        ; ptr
                    .text:00000000000012A5                 call    _free
                    .text:00000000000012AA                 xor     edx, edx
                    .text:00000000000012AC                 xor     eax, eax
                    .text:00000000000012AE                 lea     rsi, aDfsPreorderFro ; "DFS preorder from %zu: "
                    .text:00000000000012B5                 mov     edi, 1
                    .text:00000000000012BA                 call    ___printf_chk
                    .text:00000000000012BF                 test    rbp, rbp
                    .text:00000000000012C2                 jz      short loc_12F9
                    .text:00000000000012C4                 mov     r12, rsp
                    .text:00000000000012C7                 lea     r13, aZuS       ; "%zu%s"
                    .text:00000000000012CE                 lea     r14, aDfsPreorderFro+16h ; " "
                    .text:00000000000012D5
                    .text:00000000000012D5 loc_12D5:                               ; CODE XREF: main+26A↓j
                    .text:00000000000012D5                 add     rbx, 1
                    .text:00000000000012D9                 mov     rdx, [r12+rbx*8-8]
                    .text:00000000000012DE                 cmp     rbx, rbp
                    .text:00000000000012E1                 jnz     short loc_1338
                    .text:00000000000012E3                 lea     rcx, asc_201C+1 ; ""
                    .text:00000000000012EA                 mov     rsi, r13
                    .text:00000000000012ED                 mov     edi, 1
                    .text:00000000000012F2                 xor     eax, eax
                    .text:00000000000012F4                 call    ___printf_chk
                    .text:00000000000012F9
                    .text:00000000000012F9 loc_12F9:                               ; CODE XREF: main+1E2↑j
                    .text:00000000000012F9                                         ; main+299↓j
                    .text:00000000000012F9                 xor     eax, eax
                    .text:00000000000012FB                 lea     rsi, asc_201C   ; "\n"
                    .text:0000000000001302                 mov     edi, 1
                    .text:0000000000001307                 call    ___printf_chk
                    .text:000000000000130C                 mov     rax, [rsp+148h+var_40]
                    .text:0000000000001314                 sub     rax, fs:28h
                    .text:000000000000131D                 jnz     short loc_137E
                    .text:000000000000131F                 add     rsp, 118h
                    .text:0000000000001326                 xor     eax, eax
                    .text:0000000000001328                 pop     rbx
                    .text:0000000000001329                 pop     rbp
                    .text:000000000000132A                 pop     r12
                    .text:000000000000132C                 pop     r13
                    .text:000000000000132E                 pop     r14
                    .text:0000000000001330                 pop     r15
                    .text:0000000000001332                 retn
                    .text:0000000000001332 ; ---------------------------------------------------------------------------
                    .text:0000000000001333                 align 8
                    .text:0000000000001338
                    .text:0000000000001338 loc_1338:                               ; CODE XREF: main+201↑j
                    .text:0000000000001338                 mov     rcx, r14
                    .text:000000000000133B                 mov     rsi, r13
                    .text:000000000000133E                 mov     edi, 1
                    .text:0000000000001343                 xor     eax, eax
                    .text:0000000000001345                 call    ___printf_chk
                    .text:000000000000134A                 jmp     short loc_12D5
                    .text:000000000000134C ; ---------------------------------------------------------------------------
                    .text:000000000000134C
                    .text:000000000000134C loc_134C:                               ; CODE XREF: main+F9↑j
                    .text:000000000000134C                                         ; main+102↑j
                    .text:000000000000134C                 mov     rdi, r14        ; ptr
                    .text:000000000000134F                 call    _free
                    .text:0000000000001354                 mov     rdi, r15        ; ptr
                    .text:0000000000001357                 call    _free
                    .text:000000000000135C                 mov     rdi, r12        ; ptr
                    .text:000000000000135F                 call    _free
                    .text:0000000000001364                 xor     edx, edx
                    .text:0000000000001366                 lea     rsi, aDfsPreorderFro ; "DFS preorder from %zu: "
                    .text:000000000000136D                 xor     eax, eax
                    .text:000000000000136F                 mov     edi, 1
                    .text:0000000000001374                 call    ___printf_chk
                    .text:0000000000001379                 jmp     loc_12F9
                    .text:000000000000137E ; ---------------------------------------------------------------------------
                    .text:000000000000137E
                    .text:000000000000137E loc_137E:                               ; CODE XREF: main+23D↑j
                    .text:000000000000137E                 call    ___stack_chk_fail
                    .text:000000000000137E ; } // starts at 10E0
                    .text:000000000000137E main            endp
                    .text:000000000000137E
                    .text:000000000000137E ; ---------------------------------------------------------------------------
                    .text:0000000000001383                 align 10h
                    .text:0000000000001390
                    .text:0000000000001390 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001390
                    .text:0000000000001390 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001390
                    .text:0000000000001390                 public _start
                    .text:0000000000001390 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001390 ; __unwind {
                    .text:0000000000001390                 endbr64
                    .text:0000000000001394                 xor     ebp, ebp
                    .text:0000000000001396                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001399                 pop     rsi             ; argc
                    .text:000000000000139A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000139D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:00000000000013A1                 push    rax
                    .text:00000000000013A2                 push    rsp             ; stack_end
                    .text:00000000000013A3                 xor     r8d, r8d        ; fini
                    .text:00000000000013A6                 xor     ecx, ecx        ; init
                    .text:00000000000013A8                 lea     rdi, main       ; main
                    .text:00000000000013AF                 call    cs:__libc_start_main_ptr
                    .text:00000000000013B5                 hlt
                    .text:00000000000013B5 ; } // starts at 1390
                    .text:00000000000013B5 _start          endp
                    .text:00000000000013B5
                    .text:00000000000013B5 ; ---------------------------------------------------------------------------
                    .text:00000000000013B6                 align 20h
                    .text:00000000000013C0
                    .text:00000000000013C0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000013C0
                    .text:00000000000013C0
                    .text:00000000000013C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1457↓p
                    .text:00000000000013C0                 lea     rdi, __bss_start
                    .text:00000000000013C7                 lea     rax, __bss_start
                    .text:00000000000013CE                 cmp     rax, rdi
                    .text:00000000000013D1                 jz      short locret_13E8
                    .text:00000000000013D3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:00000000000013DA                 test    rax, rax
                    .text:00000000000013DD                 jz      short locret_13E8
                    .text:00000000000013DF                 jmp     rax
                    .text:00000000000013DF ; ---------------------------------------------------------------------------
                    .text:00000000000013E1                 align 8
                    .text:00000000000013E8
                    .text:00000000000013E8 locret_13E8:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:00000000000013E8                                         ; deregister_tm_clones+1D↑j
                    .text:00000000000013E8                 retn
                    .text:00000000000013E8 deregister_tm_clones endp
                    .text:00000000000013E8
                    .text:00000000000013E8 ; ---------------------------------------------------------------------------
                    .text:00000000000013E9                 align 10h
                    .text:00000000000013F0
                    .text:00000000000013F0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000013F0
                    .text:00000000000013F0
                    .text:00000000000013F0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:00000000000013F0                 lea     rdi, __bss_start
                    .text:00000000000013F7                 lea     rsi, __bss_start
                    .text:00000000000013FE                 sub     rsi, rdi
                    .text:0000000000001401                 mov     rax, rsi
                    .text:0000000000001404                 shr     rsi, 3Fh
                    .text:0000000000001408                 sar     rax, 3
                    .text:000000000000140C                 add     rsi, rax
                    .text:000000000000140F                 sar     rsi, 1
                    .text:0000000000001412                 jz      short locret_1428
                    .text:0000000000001414                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:000000000000141B                 test    rax, rax
                    .text:000000000000141E                 jz      short locret_1428
                    .text:0000000000001420                 jmp     rax
                    .text:0000000000001420 ; ---------------------------------------------------------------------------
                    .text:0000000000001422                 align 8
                    .text:0000000000001428
                    .text:0000000000001428 locret_1428:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:0000000000001428                                         ; register_tm_clones+2E↑j
                    .text:0000000000001428                 retn
                    .text:0000000000001428 register_tm_clones endp
                    .text:0000000000001428
                    .text:0000000000001428 ; ---------------------------------------------------------------------------
                    .text:0000000000001429                 align 10h
                    .text:0000000000001430
                    .text:0000000000001430 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001430
                    .text:0000000000001430
                    .text:0000000000001430 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:0000000000001430                 endbr64
                    .text:0000000000001434                 cmp     cs:__bss_start, 0
                    .text:000000000000143B                 jnz     short locret_1468
                    .text:000000000000143D                 push    rbp
                    .text:000000000000143E                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001446                 mov     rbp, rsp
                    .text:0000000000001449                 jz      short loc_1457
                    .text:000000000000144B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001452                 call    __cxa_finalize
                    .text:0000000000001457
                    .text:0000000000001457 loc_1457:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001457                 call    deregister_tm_clones
                    .text:000000000000145C                 mov     cs:__bss_start, 1
                    .text:0000000000001463                 pop     rbp
                    .text:0000000000001464                 retn
                    .text:0000000000001464 ; ---------------------------------------------------------------------------
                    .text:0000000000001465                 align 8
                    .text:0000000000001468
                    .text:0000000000001468 locret_1468:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001468                 retn
                    .text:0000000000001468 __do_global_dtors_aux endp
                    .text:0000000000001468
                    .text:0000000000001468 ; ---------------------------------------------------------------------------
                    .text:0000000000001469                 align 10h
                    .text:0000000000001470
                    .text:0000000000001470 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001470
                    .text:0000000000001470
                    .text:0000000000001470 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001470                 endbr64
                    .text:0000000000001474                 jmp     register_tm_clones
                    .text:0000000000001474 frame_dummy     endp
                    .text:0000000000001474
                    .text:0000000000001474 _text           ends
                    .text:0000000000001474
                    LOAD:0000000000001479 ; ===========================================================================
                    LOAD:0000000000001479
                    LOAD:0000000000001479 ; Segment type: Pure code
                    LOAD:0000000000001479 ; Segment permissions: Read/Execute
                    LOAD:0000000000001479 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001479                 assume cs:LOAD
                    LOAD:0000000000001479                 ;org 1479h
                    LOAD:0000000000001479                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001479                 align 4
                    LOAD:0000000000001479 LOAD            ends
                    LOAD:0000000000001479
                    .fini:000000000000147C ; ===========================================================================
                    .fini:000000000000147C
                    .fini:000000000000147C ; Segment type: Pure code
                    .fini:000000000000147C ; Segment permissions: Read/Execute
                    .fini:000000000000147C _fini           segment dword public 'CODE' use64
                    .fini:000000000000147C                 assume cs:_fini
                    .fini:000000000000147C                 ;org 147Ch
                    .fini:000000000000147C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000147C
                    .fini:000000000000147C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000147C
                    .fini:000000000000147C
                    .fini:000000000000147C                 public _term_proc
                    .fini:000000000000147C _term_proc      proc near
                    .fini:000000000000147C                 endbr64                 ; _fini
                    .fini:0000000000001480                 sub     rsp, 8
                    .fini:0000000000001484                 add     rsp, 8
                    .fini:0000000000001488                 retn
                    .fini:0000000000001488 _term_proc      endp
                    .fini:0000000000001488
                    .fini:0000000000001488 _fini           ends
                    .fini:0000000000001488
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 aDfsPreorderFro db 'DFS preorder from %zu: ',0
                    .rodata:0000000000002004                                         ; DATA XREF: main+1CE↑o
                    .rodata:0000000000002004                                         ; main+286↑o
                    .rodata:000000000000201C asc_201C        db 0Ah,0                ; DATA XREF: main+21B↑o
                    .rodata:000000000000201C                                         ; main+203↑o
                    .rodata:000000000000201E aZuS            db '%zu%s',0            ; DATA XREF: main+1E7↑o
                    .rodata:000000000000201E _rodata         ends
                    .rodata:000000000000201E
                    .eh_frame_hdr:0000000000002024 ; ===========================================================================
                    .eh_frame_hdr:0000000000002024
                    .eh_frame_hdr:0000000000002024 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002024 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002024 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002024                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002024                 ;org 2024h
                    .eh_frame_hdr:0000000000002024 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002025                 db  1Bh
                    .eh_frame_hdr:0000000000002026                 db    3
                    .eh_frame_hdr:0000000000002027                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002028                 db  30h ; 0
                    .eh_frame_hdr:0000000000002029                 db    0
                    .eh_frame_hdr:000000000000202A                 db    0
                    .eh_frame_hdr:000000000000202B                 db    0
                    .eh_frame_hdr:000000000000202C                 db    5
                    .eh_frame_hdr:000000000000202D                 db    0
                    .eh_frame_hdr:000000000000202E                 db    0
                    .eh_frame_hdr:000000000000202F                 db    0
                    .eh_frame_hdr:0000000000002030                 db 0FCh
                    .eh_frame_hdr:0000000000002031                 db 0EFh
                    .eh_frame_hdr:0000000000002032                 db 0FFh
                    .eh_frame_hdr:0000000000002033                 db 0FFh
                    .eh_frame_hdr:0000000000002034                 db  64h ; d
                    .eh_frame_hdr:0000000000002035                 db    0
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db  5Ch ; \
                    .eh_frame_hdr:0000000000002039                 db 0F0h
                    .eh_frame_hdr:000000000000203A                 db 0FFh
                    .eh_frame_hdr:000000000000203B                 db 0FFh
                    .eh_frame_hdr:000000000000203C                 db  8Ch
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:0000000000002040                 db  6Ch ; l
                    .eh_frame_hdr:0000000000002041                 db 0F0h
                    .eh_frame_hdr:0000000000002042                 db 0FFh
                    .eh_frame_hdr:0000000000002043                 db 0FFh
                    .eh_frame_hdr:0000000000002044                 db 0A4h
                    .eh_frame_hdr:0000000000002045                 db    0
                    .eh_frame_hdr:0000000000002046                 db    0
                    .eh_frame_hdr:0000000000002047                 db    0
                    .eh_frame_hdr:0000000000002048                 db 0BCh
                    .eh_frame_hdr:0000000000002049                 db 0F0h
                    .eh_frame_hdr:000000000000204A                 db 0FFh
                    .eh_frame_hdr:000000000000204B                 db 0FFh
                    .eh_frame_hdr:000000000000204C                 db 0BCh
                    .eh_frame_hdr:000000000000204D                 db    0
                    .eh_frame_hdr:000000000000204E                 db    0
                    .eh_frame_hdr:000000000000204F                 db    0
                    .eh_frame_hdr:0000000000002050                 db  6Ch ; l
                    .eh_frame_hdr:0000000000002051                 db 0F3h
                    .eh_frame_hdr:0000000000002052                 db 0FFh
                    .eh_frame_hdr:0000000000002053                 db 0FFh
                    .eh_frame_hdr:0000000000002054                 db  4Ch ; L
                    .eh_frame_hdr:0000000000002055                 db    0
                    .eh_frame_hdr:0000000000002056                 db    0
                    .eh_frame_hdr:0000000000002057                 db    0
                    .eh_frame_hdr:0000000000002057 _eh_frame_hdr   ends
                    .eh_frame_hdr:0000000000002057
                    .eh_frame:0000000000002058 ; ===========================================================================
                    .eh_frame:0000000000002058
                    .eh_frame:0000000000002058 ; Segment type: Pure data
                    .eh_frame:0000000000002058 ; Segment permissions: Read
                    .eh_frame:0000000000002058 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002058                 assume cs:_eh_frame
                    .eh_frame:0000000000002058                 ;org 2058h
                    .eh_frame:0000000000002058                 db  14h
                    .eh_frame:0000000000002059                 db    0
                    .eh_frame:000000000000205A                 db    0
                    .eh_frame:000000000000205B                 db    0
                    .eh_frame:000000000000205C                 db    0
                    .eh_frame:000000000000205D                 db    0
                    .eh_frame:000000000000205E                 db    0
                    .eh_frame:000000000000205F                 db    0
                    .eh_frame:0000000000002060                 db    1
                    .eh_frame:0000000000002061                 db  7Ah ; z
                    .eh_frame:0000000000002062                 db  52h ; R
                    .eh_frame:0000000000002063                 db    0
                    .eh_frame:0000000000002064                 db    1
                    .eh_frame:0000000000002065                 db  78h ; x
                    .eh_frame:0000000000002066                 db  10h
                    .eh_frame:0000000000002067                 db    1
                    .eh_frame:0000000000002068                 db  1Bh
                    .eh_frame:0000000000002069                 db  0Ch
                    .eh_frame:000000000000206A                 db    7
                    .eh_frame:000000000000206B                 db    8
                    .eh_frame:000000000000206C                 db  90h
                    .eh_frame:000000000000206D                 db    1
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db  14h
                    .eh_frame:0000000000002071                 db    0
                    .eh_frame:0000000000002072                 db    0
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db  1Ch
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db  18h
                    .eh_frame:0000000000002079                 db 0F3h
                    .eh_frame:000000000000207A                 db 0FFh
                    .eh_frame:000000000000207B                 db 0FFh
                    .eh_frame:000000000000207C                 db  26h ; &
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db    0
                    .eh_frame:0000000000002081                 db  44h ; D
                    .eh_frame:0000000000002082                 db    7
                    .eh_frame:0000000000002083                 db  10h
                    .eh_frame:0000000000002084                 db    0
                    .eh_frame:0000000000002085                 db    0
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db  24h ; $
                    .eh_frame:0000000000002089                 db    0
                    .eh_frame:000000000000208A                 db    0
                    .eh_frame:000000000000208B                 db    0
                    .eh_frame:000000000000208C                 db  34h ; 4
                    .eh_frame:000000000000208D                 db    0
                    .eh_frame:000000000000208E                 db    0
                    .eh_frame:000000000000208F                 db    0
                    .eh_frame:0000000000002090                 db  90h
                    .eh_frame:0000000000002091                 db 0EFh
                    .eh_frame:0000000000002092                 db 0FFh
                    .eh_frame:0000000000002093                 db 0FFh
                    .eh_frame:0000000000002094                 db  60h ; `
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db    0
                    .eh_frame:0000000000002099                 db  0Eh
                    .eh_frame:000000000000209A                 db  10h
                    .eh_frame:000000000000209B                 db  46h ; F
                    .eh_frame:000000000000209C                 db  0Eh
                    .eh_frame:000000000000209D                 db  18h
                    .eh_frame:000000000000209E                 db  4Ah ; J
                    .eh_frame:000000000000209F                 db  0Fh
                    .eh_frame:00000000000020A0                 db  0Bh
                    .eh_frame:00000000000020A1                 db  77h ; w
                    .eh_frame:00000000000020A2                 db    8
                    .eh_frame:00000000000020A3                 db  80h
                    .eh_frame:00000000000020A4                 db    0
                    .eh_frame:00000000000020A5                 db  3Fh ; ?
                    .eh_frame:00000000000020A6                 db  1Ah
                    .eh_frame:00000000000020A7                 db  3Ah ; :
                    .eh_frame:00000000000020A8                 db  2Ah ; *
                    .eh_frame:00000000000020A9                 db  33h ; 3
                    .eh_frame:00000000000020AA                 db  24h ; $
                    .eh_frame:00000000000020AB                 db  22h ; "
                    .eh_frame:00000000000020AC                 db    0
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db  14h
                    .eh_frame:00000000000020B1                 db    0
                    .eh_frame:00000000000020B2                 db    0
                    .eh_frame:00000000000020B3                 db    0
                    .eh_frame:00000000000020B4                 db  5Ch ; \
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db 0C8h
                    .eh_frame:00000000000020B9                 db 0EFh
                    .eh_frame:00000000000020BA                 db 0FFh
                    .eh_frame:00000000000020BB                 db 0FFh
                    .eh_frame:00000000000020BC                 db  10h
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db    0
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db    0
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  14h
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db  74h ; t
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db 0C0h
                    .eh_frame:00000000000020D1                 db 0EFh
                    .eh_frame:00000000000020D2                 db 0FFh
                    .eh_frame:00000000000020D3                 db 0FFh
                    .eh_frame:00000000000020D4                 db  50h ; P
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db    0
                    .eh_frame:00000000000020D9                 db    0
                    .eh_frame:00000000000020DA                 db    0
                    .eh_frame:00000000000020DB                 db    0
                    .eh_frame:00000000000020DC                 db    0
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db  4Ch ; L
                    .eh_frame:00000000000020E1                 db    0
                    .eh_frame:00000000000020E2                 db    0
                    .eh_frame:00000000000020E3                 db    0
                    .eh_frame:00000000000020E4                 db  8Ch
                    .eh_frame:00000000000020E5                 db    0
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db 0F8h
                    .eh_frame:00000000000020E9                 db 0EFh
                    .eh_frame:00000000000020EA                 db 0FFh
                    .eh_frame:00000000000020EB                 db 0FFh
                    .eh_frame:00000000000020EC                 db 0A3h
                    .eh_frame:00000000000020ED                 db    2
                    .eh_frame:00000000000020EE                 db    0
                    .eh_frame:00000000000020EF                 db    0
                    .eh_frame:00000000000020F0                 db    0
                    .eh_frame:00000000000020F1                 db  46h ; F
                    .eh_frame:00000000000020F2                 db  0Eh
                    .eh_frame:00000000000020F3                 db  10h
                    .eh_frame:00000000000020F4                 db  8Fh
                    .eh_frame:00000000000020F5                 db    2
                    .eh_frame:00000000000020F6                 db  4Ch ; L
                    .eh_frame:00000000000020F7                 db  0Eh
                    .eh_frame:00000000000020F8                 db  18h
                    .eh_frame:00000000000020F9                 db  8Eh
                    .eh_frame:00000000000020FA                 db    3
                    .eh_frame:00000000000020FB                 db  42h ; B
                    .eh_frame:00000000000020FC                 db  0Eh
                    .eh_frame:00000000000020FD                 db  20h
                    .eh_frame:00000000000020FE                 db  8Dh
                    .eh_frame:00000000000020FF                 db    4
                    .eh_frame:0000000000002100                 db  42h ; B
                    .eh_frame:0000000000002101                 db  0Eh
                    .eh_frame:0000000000002102                 db  28h ; (
                    .eh_frame:0000000000002103                 db  8Ch
                    .eh_frame:0000000000002104                 db    5
                    .eh_frame:0000000000002105                 db  41h ; A
                    .eh_frame:0000000000002106                 db  0Eh
                    .eh_frame:0000000000002107                 db  30h ; 0
                    .eh_frame:0000000000002108                 db  86h
                    .eh_frame:0000000000002109                 db    6
                    .eh_frame:000000000000210A                 db  41h ; A
                    .eh_frame:000000000000210B                 db  0Eh
                    .eh_frame:000000000000210C                 db  38h ; 8
                    .eh_frame:000000000000210D                 db  83h
                    .eh_frame:000000000000210E                 db    7
                    .eh_frame:000000000000210F                 db  47h ; G
                    .eh_frame:0000000000002110                 db  0Eh
                    .eh_frame:0000000000002111                 db 0D0h
                    .eh_frame:0000000000002112                 db    2
                    .eh_frame:0000000000002113                 db    3
                    .eh_frame:0000000000002114                 db  27h ; '
                    .eh_frame:0000000000002115                 db    2
                    .eh_frame:0000000000002116                 db  0Ah
                    .eh_frame:0000000000002117                 db  0Eh
                    .eh_frame:0000000000002118                 db  38h ; 8
                    .eh_frame:0000000000002119                 db  43h ; C
                    .eh_frame:000000000000211A                 db  0Eh
                    .eh_frame:000000000000211B                 db  30h ; 0
                    .eh_frame:000000000000211C                 db  41h ; A
                    .eh_frame:000000000000211D                 db  0Eh
                    .eh_frame:000000000000211E                 db  28h ; (
                    .eh_frame:000000000000211F                 db  42h ; B
                    .eh_frame:0000000000002120                 db  0Eh
                    .eh_frame:0000000000002121                 db  20h
                    .eh_frame:0000000000002122                 db  42h ; B
                    .eh_frame:0000000000002123                 db  0Eh
                    .eh_frame:0000000000002124                 db  18h
                    .eh_frame:0000000000002125                 db  42h ; B
                    .eh_frame:0000000000002126                 db  0Eh
                    .eh_frame:0000000000002127                 db  10h
                    .eh_frame:0000000000002128                 db  42h ; B
                    .eh_frame:0000000000002129                 db  0Eh
                    .eh_frame:000000000000212A                 db    8
                    .eh_frame:000000000000212B                 db  46h ; F
                    .eh_frame:000000000000212C                 db  0Bh
                    .eh_frame:000000000000212D                 db    0
                    .eh_frame:000000000000212E                 db    0
                    .eh_frame:000000000000212F                 db    0
                    .eh_frame:0000000000002130 __FRAME_END__   db    0
                    .eh_frame:0000000000002131                 db    0
                    .eh_frame:0000000000002132                 db    0
                    .eh_frame:0000000000002133                 db    0
                    .eh_frame:0000000000002133 _eh_frame       ends
                    .eh_frame:0000000000002133
                    .init_array:0000000000003D98 ; ELF Initialization Function Table
                    .init_array:0000000000003D98 ; ===========================================================================
                    .init_array:0000000000003D98
                    .init_array:0000000000003D98 ; Segment type: Pure data
                    .init_array:0000000000003D98 ; Segment permissions: Read/Write
                    .init_array:0000000000003D98 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003D98                 assume cs:_init_array
                    .init_array:0000000000003D98                 ;org 3D98h
                    .init_array:0000000000003D98 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003D98                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003D98                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003D98 _init_array     ends
                    .init_array:0000000000003D98
                    .fini_array:0000000000003DA0 ; ELF Termination Function Table
                    .fini_array:0000000000003DA0 ; ===========================================================================
                    .fini_array:0000000000003DA0
                    .fini_array:0000000000003DA0 ; Segment type: Pure data
                    .fini_array:0000000000003DA0 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DA0 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DA0                 assume cs:_fini_array
                    .fini_array:0000000000003DA0                 ;org 3DA0h
                    .fini_array:0000000000003DA0 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DA0 _fini_array     ends
                    .fini_array:0000000000003DA0
                    LOAD:0000000000003DA8 ; ELF Dynamic Information
                    LOAD:0000000000003DA8 ; ===========================================================================
                    LOAD:0000000000003DA8
                    LOAD:0000000000003DA8 ; Segment type: Pure data
                    LOAD:0000000000003DA8 ; Segment permissions: Read/Write
                    LOAD:0000000000003DA8 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DA8                 assume cs:LOAD
                    LOAD:0000000000003DA8                 ;org 3DA8h
                    LOAD:0000000000003DA8 _DYNAMIC        Elf64_Dyn <1, 53h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DA8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DA8                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DB8                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DC8                 Elf64_Dyn <0Dh, 147Ch>  ; DT_FINI
                    LOAD:0000000000003DD8                 Elf64_Dyn <19h, 3D98h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003DE8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003DF8                 Elf64_Dyn <1Ah, 3DA0h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E08                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E18                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E28                 Elf64_Dyn <5, 4E0h>     ; DT_STRTAB
                    LOAD:0000000000003E38                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E48                 Elf64_Dyn <0Ah, 0CFh>   ; DT_STRSZ
                    LOAD:0000000000003E58                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E68                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E78                 Elf64_Dyn <3, 3F98h>    ; DT_PLTGOT
                    LOAD:0000000000003E88                 Elf64_Dyn <2, 78h>      ; DT_PLTRELSZ
                    LOAD:0000000000003E98                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EA8                 Elf64_Dyn <17h, 6D8h>   ; DT_JMPREL
                    LOAD:0000000000003EB8                 Elf64_Dyn <7, 618h>     ; DT_RELA
                    LOAD:0000000000003EC8                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003ED8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003EE8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003EF8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F08                 Elf64_Dyn <6FFFFFFEh, 5C8h> ; DT_VERNEED
                    LOAD:0000000000003F18                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F28                 Elf64_Dyn <6FFFFFF0h, 5B0h> ; DT_VERSYM
                    LOAD:0000000000003F38                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F48                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F58                 db    0
                    LOAD:0000000000003F59                 db    0
                    LOAD:0000000000003F5A                 db    0
                    LOAD:0000000000003F5B                 db    0
                    LOAD:0000000000003F5C                 db    0
                    LOAD:0000000000003F5D                 db    0
                    LOAD:0000000000003F5E                 db    0
                    LOAD:0000000000003F5F                 db    0
                    LOAD:0000000000003F60                 db    0
                    LOAD:0000000000003F61                 db    0
                    LOAD:0000000000003F62                 db    0
                    LOAD:0000000000003F63                 db    0
                    LOAD:0000000000003F64                 db    0
                    LOAD:0000000000003F65                 db    0
                    LOAD:0000000000003F66                 db    0
                    LOAD:0000000000003F67                 db    0
                    LOAD:0000000000003F68                 db    0
                    LOAD:0000000000003F69                 db    0
                    LOAD:0000000000003F6A                 db    0
                    LOAD:0000000000003F6B                 db    0
                    LOAD:0000000000003F6C                 db    0
                    LOAD:0000000000003F6D                 db    0
                    LOAD:0000000000003F6E                 db    0
                    LOAD:0000000000003F6F                 db    0
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F97 LOAD            ends
                    LOAD:0000000000003F97
                    .got:0000000000003F98 ; ===========================================================================
                    .got:0000000000003F98
                    .got:0000000000003F98 ; Segment type: Pure data
                    .got:0000000000003F98 ; Segment permissions: Read/Write
                    .got:0000000000003F98 _got            segment qword public 'DATA' use64
                    .got:0000000000003F98                 assume cs:_got
                    .got:0000000000003F98                 ;org 3F98h
                    .got:0000000000003F98 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FA0 qword_3FA0      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FA8 qword_3FA8      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FB0 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
                    .got:0000000000003FB8 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FB8                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FC0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc+4↑r
                    .got:0000000000003FC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; void free(void *ptr)
                    extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
                    extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
                    extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004028                 extrn __libc_start_main:near
                    extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004030                 extrn __stack_chk_fail:near
                    extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004038 ; void *calloc(size_t nmemb, size_t size)
                    extern:0000000000004038                 extrn calloc:near       ; CODE XREF: _calloc+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:calloc_ptr↑o
                    extern:0000000000004040 ; void *malloc(size_t size)
                    extern:0000000000004040                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
                    extern:0000000000004040                                         ; DATA XREF: .got:malloc_ptr↑o
                    extern:0000000000004048                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004048                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004050 ; int __cxa_finalize(void *)
                    extern:0000000000004050                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004050                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004050                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004058                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004058                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004060                 extrn __gmon_start__:near ; weak
                    extern:0000000000004060                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004060                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004068                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004068                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004068
                    extern:0000000000004068
                    extern:0000000000004068                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x10E0
                    ; Intent: Print DFS preorder of a fixed 7-node graph starting from 0 (confidence=0.90). Evidence: printf strings and adjacency/visited/stack loops.
                    ; Preconditions: None
                    ; Postconditions: Writes traversal to stdout and returns 0
                    
                    @G = private unnamed_addr constant [7 x [7 x i32]] [
                    [7 x i32] [i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0],
                    [7 x i32] [i32 1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0],
                    [7 x i32] [i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0],
                    [7 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0],
                    [7 x i32] [i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0],
                    [7 x i32] [i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1],
                    [7 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0]
                    ], align 16
                    
                    @.str0 = private unnamed_addr constant [24 x i8] c"DFS preorder from %zu: \00", align 1
                    @.str1 = private unnamed_addr constant [6 x i8] c"%zu%s\00", align 1
                    @.sp = private unnamed_addr constant [2 x i8] c" \00", align 1
                    @.nl = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
                    @.empty = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
                    
                    ; Only the needed extern declarations:
                    declare i32 @__printf_chk(i32, i8*, ...)
                    declare noalias i8* @calloc(i64, i64)
                    declare noalias i8* @malloc(i64)
                    declare void @free(i8*)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    %res = alloca [7 x i64], align 8
                    %nres = alloca i64, align 8
                    store i64 0, i64* %nres, align 8
                    
                    %vraw = call noalias i8* @calloc(i64 28, i64 1)
                    %nxtraw = call noalias i8* @calloc(i64 56, i64 1)
                    %stkraw = call noalias i8* @malloc(i64 56)
                    
                    %vnull = icmp eq i8* %vraw, null
                    %nnull = icmp eq i8* %nxtraw, null
                    %snull = icmp eq i8* %stkraw, null
                    %tmp.or = or i1 %vnull, %nnull
                    %anynull = or i1 %tmp.or, %snull
                    br i1 %anynull, label %fail, label %init_ok
                    
                    init_ok:
                    %visited = bitcast i8* %vraw to i32*
                    %next = bitcast i8* %nxtraw to i64*
                    %stack = bitcast i8* %stkraw to i64*
                    
                    ; visited[0] = 1
                    %v0ptr = getelementptr inbounds i32, i32* %visited, i64 0
                    store i32 1, i32* %v0ptr, align 4
                    
                    ; initial state: curr=0, t=1
                    br label %outer
                    
                    outer: ; preds = %init_ok, %after_pop, %back_from_push, %scan_inc, %parent_no_pop
                    %curr = phi i64 [ 0, %init_ok ], [ %curr.pop, %after_pop ], [ %curr.push, %back_from_push ], [ %curr.keep, %scan_inc ], [ %curr.par, %parent_no_pop ]
                    %t = phi i64 [ 1, %init_ok ], [ %t.dec, %after_pop ], [ %t.inc, %back_from_push ], [ %t, %scan_inc ], [ %t, %parent_no_pop ]
                    %nptr.curr = getelementptr inbounds i64, i64* %next, i64 %curr
                    %a = load i64, i64* %nptr.curr, align 8
                    %a_gt6 = icmp ugt i64 %a, 6
                    br i1 %a_gt6, label %gt6, label %scan
                    
                    scan: ; preds = %outer, %scan_inc
                    %curr.keep = phi i64 [ %curr, %outer ], [ %curr.keep, %scan_inc ]
                    %nptr.scan = phi i64* [ %nptr.curr, %outer ], [ %nptr.scan, %scan_inc ]
                    %a.scan = phi i64 [ %a, %outer ], [ %a.next, %scan_inc ]
                    
                    %rowptr = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* @G, i64 0, i64 %curr.keep
                    %cellptr = getelementptr inbounds [7 x i32], [7 x i32]* %rowptr, i64 0, i64 %a.scan
                    %edge = load i32, i32* %cellptr, align 4
                    %has_edge = icmp ne i32 %edge, 0
                    br i1 %has_edge, label %check_visit, label %scan_inc
                    
                    check_visit: ; preds = %scan
                    %v.aptr = getelementptr inbounds i32, i32* %visited, i64 %a.scan
                    %vaval = load i32, i32* %v.aptr, align 4
                    %not_visited = icmp eq i32 %vaval, 0
                    br i1 %not_visited, label %push_neighbor, label %scan_inc
                    
                    scan_inc: ; preds = %check_visit, %scan
                    %a.plus = phi i64 [ %a.scan, %scan ], [ %a.scan, %check_visit ]
                    %a.next = add i64 %a.plus, 1
                    store i64 %a.next, i64* %nptr.scan, align 8
                    br label %scan
                    
                    push_neighbor: ; preds = %check_visit
                    ; stack[t] = a
                    %st.ptr = getelementptr inbounds i64, i64* %stack, i64 %t
                    store i64 %a.scan, i64* %st.ptr, align 8
                    %t.inc = add i64 %t, 1
                    
                    ; res[nres] = a ; nres++
                    %nold = load i64, i64* %nres, align 8
                    %resp = getelementptr inbounds [7 x i64], [7 x i64]* %res, i64 0, i64 %nold
                    store i64 %a.scan, i64* %resp, align 8
                    %nnew = add i64 %nold, 1
                    store i64 %nnew, i64* %nres, align 8
                    
                    ; next[curr] = a+1
                    %a.p1 = add i64 %a.scan, 1
                    store i64 %a.p1, i64* %nptr.curr, align 8
                    
                    ; visited[a] = 1
                    store i32 1, i32* %v.aptr, align 4
                    
                    ; curr = a
                    %curr.push = %a.scan
                    br label %back_from_push
                    
                    back_from_push: ; preds = %push_neighbor
                    br label %outer
                    
                    gt6: ; preds = %outer
                    %a.eq7 = icmp eq i64 %a, 7
                    br i1 %a.eq7, label %pop, label %parent_no_pop
                    
                    pop: ; preds = %gt6
                    %t.dec = sub i64 %t, 1
                    %t.zero = icmp eq i64 %t.dec, 0
                    br i1 %t.zero, label %done, label %load_parent
                    
                    load_parent: ; preds = %pop
                    %idx.par = sub i64 %t.dec, 1
                    %par.ptr = getelementptr inbounds i64, i64* %stack, i64 %idx.par
                    %curr.pop = load i64, i64* %par.ptr, align 8
                    br label %after_pop
                    
                    after_pop: ; preds = %load_parent
                    br label %outer
                    
                    parent_no_pop: ; preds = %gt6
                    %idx.par2 = sub i64 %t, 1
                    %par.ptr2 = getelementptr inbounds i64, i64* %stack, i64 %idx.par2
                    %curr.par = load i64, i64* %par.ptr2, align 8
                    br label %outer
                    
                    done: ; preds = %pop
                    ; free in success path
                    call void @free(i8* %vraw)
                    call void @free(i8* %nxtraw)
                    call void @free(i8* %stkraw)
                    br label %print
                    
                    fail: ; preds = %entry
                    ; free even if NULL (no-op), then print header + newline
                    call void @free(i8* %vraw)
                    call void @free(i8* %nxtraw)
                    call void @free(i8* %stkraw)
                    store i64 0, i64* %nres, align 8
                    br label %print
                    
                    print: ; preds = %done, %fail
                    %fmt0.p = getelementptr inbounds [24 x i8], [24 x i8]* @.str0, i64 0, i64 0
                    %call0 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt0.p, i64 0)
                    
                    %nval = load i64, i64* %nres, align 8
                    %hasnone = icmp eq i64 %nval, 0
                    br i1 %hasnone, label %print_nl, label %loop_init
                    
                    loop_init:
                    %last = add i64 %nval, -1
                    br label %loop_hdr
                    
                    loop_hdr: ; preds = %loop_body, %loop_init
                    %i = phi i64 [ 0, %loop_init ], [ %i.next, %loop_body ]
                    %cont = icmp ult i64 %i, %nval
                    br i1 %cont, label %loop_body, label %print_nl
                    
                    loop_body: ; preds = %loop_hdr
                    %elem.p = getelementptr inbounds [7 x i64], [7 x i64]* @res, i64 0, i64 %i
                    %elem = load i64, i64* %elem.p, align 8
                    %islast = icmp eq i64 %i, %last
                    %space.p = getelementptr inbounds [2 x i8], [2 x i8]* @.sp, i64 0, i64 0
                    %empty.p = getelementptr inbounds [1 x i8], [1 x i8]* @.empty, i64 0, i64 0
                    %sep = select i1 %islast, i8* %empty.p, i8* %space.p
                    %fmt1.p = getelementptr inbounds [6 x i8], [6 x i8]* @.str1, i64 0, i64 0
                    %call1 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt1.p, i64 %elem, i8* %sep)
                    %i.next = add i64 %i, 1
                    br label %loop_hdr
                    
                    print_nl: ; preds = %loop_hdr, %print, %loop_init
                    %nl.p = getelementptr inbounds [2 x i8], [2 x i8]* @.nl, i64 0, i64 0
                    %call2 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nl.p)
                    ret i32 0
                    }
                    ```
                    
        - dijkstra
            - ida 함수 리스트
                
                ```notion
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "dijkstra",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1430",
                      "end": "0x1456",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x1460",
                      "end": "0x1489",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x1490",
                      "end": "0x14c9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x14d0",
                      "end": "0x1509",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1510",
                      "end": "0x1519",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4058",
                      "end": "0x4060",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".calloc",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10c0",
                      "end": "0x142c",
                      "size": 876,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x151c",
                      "end": "0x1529",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "calloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 25
                user? candidates: 8
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : D22273D46B9FE78F4DD7AAEF3EB82D56AD0F4BD13D19F866CA1DD63F81B0211A
                    LOAD:0000000000000000 ; Input MD5    : E7C8CB8C96989DCA423B149D23F5B255
                    LOAD:0000000000000000 ; Input CRC32  : 257D90C3
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\dijkstra
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'dijkstra.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 3728h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 718h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 718h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 529h                 ; Size in file image
                    LOAD:0000000000000110                 dq 529h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 18Ch                 ; Size in file image
                    LOAD:0000000000000148                 dq 18Ch                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DA0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000178                 dq 270h                 ; Size in file image
                    LOAD:0000000000000180                 dq 278h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DB0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DB0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2080h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2080h                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DA0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000300                 dq 260h                 ; Size in file image
                    LOAD:0000000000000308                 dq 260h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 0E6h, 0B2h, 0D1h, 2Eh, 12h, 7Ah, 9Dh, 2Dh, 0FCh, 9Ah ; Desc
                    LOAD:0000000000000382                 db 65h, 4Dh, 0EAh, 0C1h, 0C6h, 7Bh, 2 dup(97h), 53h, 0A1h
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 9
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 9, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4C8, 12h, 0, 0, offset dword_0, \ ; "free"
                    LOAD:00000000000003F0                            0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4C8, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4C8, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aCalloc - offset unk_4C8, 12h, 0, 0, offset dword_0,\ ; "calloc"
                    LOAD:0000000000000450                            0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aGmonStart - offset unk_4C8, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aPrintfChk - offset unk_4C8, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498                 Elf64_Sym <offset aItmRegistertmc - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000498                            offset dword_0, 0>
                    LOAD:00000000000004B0                 Elf64_Sym <offset aCxaFinalize - offset unk_4C8, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:00000000000004B0                            offset dword_0, 0>
                    LOAD:00000000000004C8 ; ELF String Table
                    LOAD:00000000000004C8 unk_4C8         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C8                                         ; LOAD:0000000000000408↑o ...
                    LOAD:00000000000004C9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004B0↑o
                    LOAD:00000000000004D8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004E5 aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004E5                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:00000000000004F7 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004FC aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000050D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:0000000000000514 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000051E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000005B8↓o
                    LOAD:000000000000052A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000005C8↓o
                    LOAD:0000000000000534 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005D8↓o
                    LOAD:000000000000053F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000005E8↓o
                    LOAD:000000000000054B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000054B                                         ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:0000000000000567 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000576 aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:0000000000000576                                         ; DATA XREF: LOAD:0000000000000498↑o
                    LOAD:0000000000000590 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000590                 dw 0
                    LOAD:0000000000000592                 dw 2                    ; free@@GLIBC_2.2.5
                    LOAD:0000000000000594                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000596                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:0000000000000598                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000059A                 dw 2                    ; calloc@@GLIBC_2.2.5
                    LOAD:000000000000059C                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000059E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:00000000000005A0                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:00000000000005A2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:00000000000005A4                 dw 0
                    LOAD:00000000000005A6                 dw 0
                    LOAD:00000000000005A8 ; ELF GNU Symbol Version Requirements
                    LOAD:00000000000005A8                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_4C8, 10h, 0> ; "libc.so.6"
                    LOAD:00000000000005B8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4C8, 10h> ; "GLIBC_2.3.4"
                    LOAD:00000000000005C8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4C8, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005D8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4C8, \ ; "GLIBC_2.34"
                    LOAD:00000000000005D8                                10h>
                    LOAD:00000000000005E8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4C8, 0> ; "GLIBC_2.2.5"
                    LOAD:00000000000005F8 ; ELF RELA Relocation Table
                    LOAD:00000000000005F8                 Elf64_Rela <3DA0h, 8, 1510h> ; R_X86_64_RELATIVE +1510h
                    LOAD:0000000000000610                 Elf64_Rela <3DA8h, 8, 14D0h> ; R_X86_64_RELATIVE +14D0h
                    LOAD:0000000000000628                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000640                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000658                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000670                 Elf64_Rela <3FE8h, 600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000688                 Elf64_Rela <3FF0h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:00000000000006A0                 Elf64_Rela <3FF8h, 900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:00000000000006B8 ; ELF JMPREL Relocation Table
                    LOAD:00000000000006B8                 Elf64_Rela <3FB8h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                    LOAD:00000000000006D0                 Elf64_Rela <3FC0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:00000000000006E8                 Elf64_Rela <3FC8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT calloc
                    LOAD:0000000000000700                 Elf64_Rela <3FD0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000700 LOAD            ends
                    LOAD:0000000000000700
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j ...
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FA8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FB0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
                    .plt:000000000000105F                 align 20h
                    .plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
                    .plt:000000000000106F                 align 10h
                    .plt:000000000000106F ; } // starts at 1020
                    .plt:000000000000106F _plt            ends
                    .plt:000000000000106F
                    .plt.got:0000000000001070 ; ===========================================================================
                    .plt.got:0000000000001070
                    .plt.got:0000000000001070 ; Segment type: Pure code
                    .plt.got:0000000000001070 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001070 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001070                 assume cs:_plt_got
                    .plt.got:0000000000001070                 ;org 1070h
                    .plt.got:0000000000001070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000107B                 align 20h
                    .plt.got:000000000000107B ; } // starts at 1070
                    .plt.got:000000000000107B _plt_got        ends
                    .plt.got:000000000000107B
                    .plt.sec:0000000000001080 ; ===========================================================================
                    .plt.sec:0000000000001080
                    .plt.sec:0000000000001080 ; Segment type: Pure code
                    .plt.sec:0000000000001080 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001080 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001080                 assume cs:_plt_sec
                    .plt.sec:0000000000001080                 ;org 1080h
                    .plt.sec:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001080 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
                    .plt.sec:000000000000108B                 align 10h
                    .plt.sec:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000109B                 align 20h
                    .plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _calloc]
                    .plt.sec:00000000000010AB                 align 10h
                    .plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:00000000000010BB                 align 20h
                    .plt.sec:00000000000010BB ; } // starts at 1080
                    .plt.sec:00000000000010BB _plt_sec        ends
                    .plt.sec:00000000000010BB
                    .text:00000000000010C0 ; ===========================================================================
                    .text:00000000000010C0
                    .text:00000000000010C0 ; Segment type: Pure code
                    .text:00000000000010C0 ; Segment permissions: Read/Execute
                    .text:00000000000010C0 _text           segment para public 'CODE' use64
                    .text:00000000000010C0                 assume cs:_text
                    .text:00000000000010C0                 ;org 10C0h
                    .text:00000000000010C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:00000000000010C0
                    .text:00000000000010C0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000010C0
                    .text:00000000000010C0
                    .text:00000000000010C0 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:00000000000010C0                 public main
                    .text:00000000000010C0 main            proc near               ; DATA XREF: _start+18↓o
                    .text:00000000000010C0
                    .text:00000000000010C0 var_138         = xmmword ptr -138h
                    .text:00000000000010C0 var_128         = qword ptr -128h
                    .text:00000000000010C0 var_118         = xmmword ptr -118h
                    .text:00000000000010C0 var_108         = qword ptr -108h
                    .text:00000000000010C0 var_100         = byte ptr -100h
                    .text:00000000000010C0 var_F8          = byte ptr -0F8h
                    .text:00000000000010C0 var_C8          = qword ptr -0C8h
                    .text:00000000000010C0 var_C0          = qword ptr -0C0h
                    .text:00000000000010C0 var_B8          = xmmword ptr -0B8h
                    .text:00000000000010C0 var_A8          = xmmword ptr -0A8h
                    .text:00000000000010C0 var_98          = xmmword ptr -98h
                    .text:00000000000010C0 var_88          = xmmword ptr -88h
                    .text:00000000000010C0 var_78          = xmmword ptr -78h
                    .text:00000000000010C0 var_68          = xmmword ptr -68h
                    .text:00000000000010C0 var_58          = xmmword ptr -58h
                    .text:00000000000010C0 var_48          = qword ptr -48h
                    .text:00000000000010C0 var_40          = qword ptr -40h
                    .text:00000000000010C0 var_30          = qword ptr -30h
                    .text:00000000000010C0
                    .text:00000000000010C0 ; __unwind {
                    .text:00000000000010C0                 endbr64
                    .text:00000000000010C4                 push    r14
                    .text:00000000000010C6                 pcmpeqd xmm0, xmm0
                    .text:00000000000010CA                 mov     esi, 1          ; size
                    .text:00000000000010CF                 mov     edi, 18h        ; nmemb
                    .text:00000000000010D4                 push    r13
                    .text:00000000000010D6                 push    r12
                    .text:00000000000010D8                 push    rbp
                    .text:00000000000010D9                 push    rbx
                    .text:00000000000010DA                 sub     rsp, 110h
                    .text:00000000000010E1                 mov     rax, fs:28h
                    .text:00000000000010EA                 mov     [rsp+138h+var_30], rax
                    .text:00000000000010F2                 xor     eax, eax
                    .text:00000000000010F4                 movaps  [rsp+138h+var_98], xmm0
                    .text:00000000000010FC                 mov     rax, 700000000h
                    .text:0000000000001106                 mov     [rsp+138h+var_C8], rax
                    .text:000000000000110B                 mov     rax, 0A00000009h
                    .text:0000000000001115                 mov     [rsp+138h+var_C0], rax
                    .text:000000000000111A                 mov     rax, 0B00000000h
                    .text:0000000000001124                 mov     qword ptr [rsp+138h+var_98+8], rax
                    .text:000000000000112C                 mov     rax, 0F0000000Ah
                    .text:0000000000001136                 movaps  [rsp+138h+var_88], xmm0
                    .text:000000000000113E                 mov     qword ptr [rsp+138h+var_88+8], rax
                    .text:0000000000001146                 mov     rax, 900000000h
                    .text:0000000000001150                 movaps  [rsp+138h+var_78], xmm0
                    .text:0000000000001158                 movaps  [rsp+138h+var_B8], xmm0
                    .text:0000000000001160                 movaps  [rsp+138h+var_A8], xmm0
                    .text:0000000000001168                 movaps  [rsp+138h+var_68], xmm0
                    .text:0000000000001170                 movaps  [rsp+138h+var_58], xmm0
                    .text:0000000000001178                 mov     [rsp+138h+var_48], 0FFFFFFFFFFFFFFFFh
                    .text:0000000000001184                 mov     qword ptr [rsp+138h+var_B8+8], 7
                    .text:0000000000001190                 mov     dword ptr [rsp+138h+var_98], 9
                    .text:000000000000119B                 mov     dword ptr [rsp+138h+var_A8+4], 0Fh
                    .text:00000000000011A6                 mov     qword ptr [rsp+138h+var_78], 0Bh
                    .text:00000000000011B2                 mov     dword ptr [rsp+138h+var_78+8], 6
                    .text:00000000000011BD                 mov     dword ptr [rsp+138h+var_68+0Ch], 6
                    .text:00000000000011C8                 mov     qword ptr [rsp+138h+var_58], rax
                    .text:00000000000011D0                 mov     [rsp+138h+var_40], 9
                    .text:00000000000011DC                 call    _calloc
                    .text:00000000000011E1                 test    rax, rax
                    .text:00000000000011E4                 jz      loc_141F
                    .text:00000000000011EA                 mov     rdi, rax        ; ptr
                    .text:00000000000011ED                 pcmpeqd xmm0, xmm0
                    .text:00000000000011F1                 mov     r10d, 6
                    .text:00000000000011F7                 mov     rbx, rsp
                    .text:00000000000011FA                 movdqa  xmm1, cs:xmmword_2070
                    .text:0000000000001202                 movaps  [rsp+138h+var_118], xmm0
                    .text:0000000000001207                 lea     r11, [rsp+138h+var_C8]
                    .text:000000000000120C                 mov     rax, 3F3F3F3F3F3F3F3Fh
                    .text:0000000000001216                 mov     [rsp+138h+var_128], rax
                    .text:000000000000121B                 movaps  [rsp+138h+var_138], xmm1
                    .text:000000000000121F                 mov     [rsp+138h+var_108], 0FFFFFFFFFFFFFFFFh
                    .text:0000000000001228                 mov     dword ptr [rsp+138h+var_138], 0
                    .text:000000000000122F                 nop
                    .text:0000000000001230
                    .text:0000000000001230 loc_1230:                               ; CODE XREF: main+1FE↓j
                    .text:0000000000001230                 mov     esi, 6
                    .text:0000000000001235                 mov     ecx, 3F3F3F3Fh
                    .text:000000000000123A                 xor     edx, edx
                    .text:000000000000123C                 nop     dword ptr [rax+00h]
                    .text:0000000000001240
                    .text:0000000000001240 loc_1240:                               ; CODE XREF: main+19D↓j
                    .text:0000000000001240                 mov     r9d, [rdi+rdx*4]
                    .text:0000000000001244                 test    r9d, r9d
                    .text:0000000000001247                 jnz     short loc_1255
                    .text:0000000000001249                 mov     eax, [rbx+rdx*4]
                    .text:000000000000124C                 cmp     eax, ecx
                    .text:000000000000124E                 jge     short loc_1255
                    .text:0000000000001250                 mov     ecx, eax
                    .text:0000000000001252                 mov     rsi, rdx
                    .text:0000000000001255
                    .text:0000000000001255 loc_1255:                               ; CODE XREF: main+187↑j
                    .text:0000000000001255                                         ; main+18E↑j
                    .text:0000000000001255                 add     rdx, 1
                    .text:0000000000001259                 cmp     rdx, 6
                    .text:000000000000125D                 jnz     short loc_1240
                    .text:000000000000125F                 cmp     rsi, 6
                    .text:0000000000001263                 jz      short loc_12C4
                    .text:0000000000001265                 mov     dword ptr [rdi+rsi*4], 1
                    .text:000000000000126C                 lea     rax, [rsi+rsi*2]
                    .text:0000000000001270                 lea     r9, ds:0[rsi*4]
                    .text:0000000000001278                 xor     edx, edx
                    .text:000000000000127A                 lea     rax, [r11+rax*8]
                    .text:000000000000127E                 xchg    ax, ax
                    .text:0000000000001280
                    .text:0000000000001280 loc_1280:                               ; CODE XREF: main+1F8↓j
                    .text:0000000000001280                 mov     ecx, [rax+rdx*4]
                    .text:0000000000001283                 test    ecx, ecx
                    .text:0000000000001285                 js      short loc_12B0
                    .text:0000000000001287                 mov     r8d, [rdi+rdx*4]
                    .text:000000000000128B                 test    r8d, r8d
                    .text:000000000000128E                 jnz     short loc_12B0
                    .text:0000000000001290                 mov     r8d, dword ptr [rsp+r9+138h+var_138]
                    .text:0000000000001294                 cmp     r8d, 3F3F3F3Fh
                    .text:000000000000129B                 jz      short loc_12B0
                    .text:000000000000129D                 add     ecx, r8d
                    .text:00000000000012A0                 cmp     ecx, [rbx+rdx*4]
                    .text:00000000000012A3                 jge     short loc_12B0
                    .text:00000000000012A5                 mov     [rbx+rdx*4], ecx
                    .text:00000000000012A8                 mov     dword ptr [rsp+rdx*4+138h+var_118], esi
                    .text:00000000000012AC                 nop     dword ptr [rax+00h]
                    .text:00000000000012B0
                    .text:00000000000012B0 loc_12B0:                               ; CODE XREF: main+1C5↑j
                    .text:00000000000012B0                                         ; main+1CE↑j ...
                    .text:00000000000012B0                 add     rdx, 1
                    .text:00000000000012B4                 cmp     rdx, 6
                    .text:00000000000012B8                 jnz     short loc_1280
                    .text:00000000000012BA                 sub     r10, 1
                    .text:00000000000012BE                 jnz     loc_1230
                    .text:00000000000012C4
                    .text:00000000000012C4 loc_12C4:                               ; CODE XREF: main+1A3↑j
                    .text:00000000000012C4                 call    _free
                    .text:00000000000012C9
                    .text:00000000000012C9 loc_12C9:                               ; CODE XREF: main+362↓j
                    .text:00000000000012C9                 xor     ebp, ebp
                    .text:00000000000012CB                 lea     r13, aDistZuZuD ; "dist(%zu -> %zu) = %d\n"
                    .text:00000000000012D2                 lea     r12, aDistZuZuInf ; "dist(%zu -> %zu) = INF\n"
                    .text:00000000000012D9                 jmp     short loc_12F9
                    .text:00000000000012D9 ; ---------------------------------------------------------------------------
                    .text:00000000000012DB                 align 20h
                    .text:00000000000012E0
                    .text:00000000000012E0 loc_12E0:                               ; CODE XREF: main+249↓j
                    .text:00000000000012E0                 mov     rsi, r12
                    .text:00000000000012E3                 mov     edi, 1
                    .text:00000000000012E8                 xor     eax, eax
                    .text:00000000000012EA                 add     rbp, 1
                    .text:00000000000012EE                 call    ___printf_chk
                    .text:00000000000012F3                 cmp     rbp, 6
                    .text:00000000000012F7                 jz      short loc_1324
                    .text:00000000000012F9
                    .text:00000000000012F9 loc_12F9:                               ; CODE XREF: main+219↑j
                    .text:00000000000012F9                                         ; main+262↓j
                    .text:00000000000012F9                 mov     r8d, [rbx+rbp*4]
                    .text:00000000000012FD                 mov     rcx, rbp
                    .text:0000000000001300                 xor     edx, edx
                    .text:0000000000001302                 cmp     r8d, 3F3F3F3Eh
                    .text:0000000000001309                 jg      short loc_12E0
                    .text:000000000000130B                 mov     rsi, r13
                    .text:000000000000130E                 mov     edi, 1
                    .text:0000000000001313                 xor     eax, eax
                    .text:0000000000001315                 add     rbp, 1
                    .text:0000000000001319                 call    ___printf_chk
                    .text:000000000000131E                 cmp     rbp, 6
                    .text:0000000000001322                 jnz     short loc_12F9
                    .text:0000000000001324
                    .text:0000000000001324 loc_1324:                               ; CODE XREF: main+237↑j
                    .text:0000000000001324                 cmp     dword ptr [rsp+138h+var_128+4], 3F3F3F3Eh
                    .text:000000000000132C                 jg      loc_1403
                    .text:0000000000001332                 mov     edx, 5
                    .text:0000000000001337                 xor     eax, eax
                    .text:0000000000001339                 lea     rbx, [rsp+138h+var_F8]
                    .text:000000000000133E                 xchg    ax, ax
                    .text:0000000000001340
                    .text:0000000000001340 loc_1340:                               ; CODE XREF: main+297↓j
                    .text:0000000000001340                 movsxd  r12, edx
                    .text:0000000000001343                 mov     rbp, rax
                    .text:0000000000001346                 add     rax, 1
                    .text:000000000000134A                 mov     edx, dword ptr [rsp+r12*4+138h+var_118]
                    .text:000000000000134F                 mov     [rbx+rax*8-8], r12
                    .text:0000000000001354                 cmp     edx, 0FFFFFFFFh
                    .text:0000000000001357                 jnz     short loc_1340
                    .text:0000000000001359                 mov     ecx, 5
                    .text:000000000000135E                 xor     edx, edx
                    .text:0000000000001360                 lea     rsi, aPathZuZu  ; "path %zu -> %zu:"
                    .text:0000000000001367                 xor     eax, eax
                    .text:0000000000001369                 mov     edi, 1
                    .text:000000000000136E                 lea     rbx, [rbx+rbp*8-8]
                    .text:0000000000001373                 lea     rbp, [rsp+138h+var_100]
                    .text:0000000000001378                 call    ___printf_chk
                    .text:000000000000137D                 lea     r13, aZuS       ; " %zu%s"
                    .text:0000000000001384                 lea     r14, asc_205D   ; " ->"
                    .text:000000000000138B                 cmp     rbp, rbx
                    .text:000000000000138E                 jz      short loc_13B2
                    .text:0000000000001390
                    .text:0000000000001390 loc_1390:                               ; CODE XREF: main+2F0↓j
                    .text:0000000000001390                 mov     rdx, r12
                    .text:0000000000001393                 mov     rcx, r14
                    .text:0000000000001396                 mov     rsi, r13
                    .text:0000000000001399                 mov     edi, 1
                    .text:000000000000139E                 xor     eax, eax
                    .text:00000000000013A0                 sub     rbx, 8
                    .text:00000000000013A4                 call    ___printf_chk
                    .text:00000000000013A9                 mov     r12, [rbx+8]
                    .text:00000000000013AD                 cmp     rbp, rbx
                    .text:00000000000013B0                 jnz     short loc_1390
                    .text:00000000000013B2
                    .text:00000000000013B2 loc_13B2:                               ; CODE XREF: main+2CE↑j
                    .text:00000000000013B2                 mov     rsi, r13
                    .text:00000000000013B5                 mov     edi, 1
                    .text:00000000000013BA                 mov     rdx, r12
                    .text:00000000000013BD                 xor     eax, eax
                    .text:00000000000013BF                 lea     rcx, aDistZuZuInf+17h ; ""
                    .text:00000000000013C6                 call    ___printf_chk
                    .text:00000000000013CB                 lea     rsi, aDistZuZuInf+16h ; "\n"
                    .text:00000000000013D2                 mov     edi, 1
                    .text:00000000000013D7                 xor     eax, eax
                    .text:00000000000013D9                 call    ___printf_chk
                    .text:00000000000013DE
                    .text:00000000000013DE loc_13DE:                               ; CODE XREF: main+35D↓j
                    .text:00000000000013DE                 mov     rax, [rsp+138h+var_30]
                    .text:00000000000013E6                 sub     rax, fs:28h
                    .text:00000000000013EF                 jnz     short loc_1427
                    .text:00000000000013F1                 add     rsp, 110h
                    .text:00000000000013F8                 xor     eax, eax
                    .text:00000000000013FA                 pop     rbx
                    .text:00000000000013FB                 pop     rbp
                    .text:00000000000013FC                 pop     r12
                    .text:00000000000013FE                 pop     r13
                    .text:0000000000001400                 pop     r14
                    .text:0000000000001402                 retn
                    .text:0000000000001403 ; ---------------------------------------------------------------------------
                    .text:0000000000001403
                    .text:0000000000001403 loc_1403:                               ; CODE XREF: main+26C↑j
                    .text:0000000000001403                 mov     ecx, 5
                    .text:0000000000001408                 xor     edx, edx
                    .text:000000000000140A                 lea     rsi, aNoPathFromZuTo ; "no path from %zu to %zu\n"
                    .text:0000000000001411                 xor     eax, eax
                    .text:0000000000001413                 mov     edi, 1
                    .text:0000000000001418                 call    ___printf_chk
                    .text:000000000000141D                 jmp     short loc_13DE
                    .text:000000000000141F ; ---------------------------------------------------------------------------
                    .text:000000000000141F
                    .text:000000000000141F loc_141F:                               ; CODE XREF: main+124↑j
                    .text:000000000000141F                 mov     rbx, rsp
                    .text:0000000000001422                 jmp     loc_12C9
                    .text:0000000000001427 ; ---------------------------------------------------------------------------
                    .text:0000000000001427
                    .text:0000000000001427 loc_1427:                               ; CODE XREF: main+32F↑j
                    .text:0000000000001427                 call    ___stack_chk_fail
                    .text:0000000000001427 ; } // starts at 10C0
                    .text:0000000000001427 main            endp
                    .text:0000000000001427
                    .text:0000000000001427 ; ---------------------------------------------------------------------------
                    .text:000000000000142C                 align 10h
                    .text:0000000000001430
                    .text:0000000000001430 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001430
                    .text:0000000000001430 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001430
                    .text:0000000000001430                 public _start
                    .text:0000000000001430 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001430 ; __unwind {
                    .text:0000000000001430                 endbr64
                    .text:0000000000001434                 xor     ebp, ebp
                    .text:0000000000001436                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001439                 pop     rsi             ; argc
                    .text:000000000000143A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000143D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001441                 push    rax
                    .text:0000000000001442                 push    rsp             ; stack_end
                    .text:0000000000001443                 xor     r8d, r8d        ; fini
                    .text:0000000000001446                 xor     ecx, ecx        ; init
                    .text:0000000000001448                 lea     rdi, main       ; main
                    .text:000000000000144F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001455                 hlt
                    .text:0000000000001455 ; } // starts at 1430
                    .text:0000000000001455 _start          endp
                    .text:0000000000001455
                    .text:0000000000001455 ; ---------------------------------------------------------------------------
                    .text:0000000000001456                 align 20h
                    .text:0000000000001460
                    .text:0000000000001460 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001460
                    .text:0000000000001460
                    .text:0000000000001460 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_14F7↓p
                    .text:0000000000001460                 lea     rdi, __bss_start
                    .text:0000000000001467                 lea     rax, __bss_start
                    .text:000000000000146E                 cmp     rax, rdi
                    .text:0000000000001471                 jz      short locret_1488
                    .text:0000000000001473                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:000000000000147A                 test    rax, rax
                    .text:000000000000147D                 jz      short locret_1488
                    .text:000000000000147F                 jmp     rax
                    .text:000000000000147F ; ---------------------------------------------------------------------------
                    .text:0000000000001481                 align 8
                    .text:0000000000001488
                    .text:0000000000001488 locret_1488:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:0000000000001488                                         ; deregister_tm_clones+1D↑j
                    .text:0000000000001488                 retn
                    .text:0000000000001488 deregister_tm_clones endp
                    .text:0000000000001488
                    .text:0000000000001488 ; ---------------------------------------------------------------------------
                    .text:0000000000001489                 align 10h
                    .text:0000000000001490
                    .text:0000000000001490 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001490
                    .text:0000000000001490
                    .text:0000000000001490 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:0000000000001490                 lea     rdi, __bss_start
                    .text:0000000000001497                 lea     rsi, __bss_start
                    .text:000000000000149E                 sub     rsi, rdi
                    .text:00000000000014A1                 mov     rax, rsi
                    .text:00000000000014A4                 shr     rsi, 3Fh
                    .text:00000000000014A8                 sar     rax, 3
                    .text:00000000000014AC                 add     rsi, rax
                    .text:00000000000014AF                 sar     rsi, 1
                    .text:00000000000014B2                 jz      short locret_14C8
                    .text:00000000000014B4                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:00000000000014BB                 test    rax, rax
                    .text:00000000000014BE                 jz      short locret_14C8
                    .text:00000000000014C0                 jmp     rax
                    .text:00000000000014C0 ; ---------------------------------------------------------------------------
                    .text:00000000000014C2                 align 8
                    .text:00000000000014C8
                    .text:00000000000014C8 locret_14C8:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:00000000000014C8                                         ; register_tm_clones+2E↑j
                    .text:00000000000014C8                 retn
                    .text:00000000000014C8 register_tm_clones endp
                    .text:00000000000014C8
                    .text:00000000000014C8 ; ---------------------------------------------------------------------------
                    .text:00000000000014C9                 align 10h
                    .text:00000000000014D0
                    .text:00000000000014D0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000014D0
                    .text:00000000000014D0
                    .text:00000000000014D0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:00000000000014D0                 endbr64
                    .text:00000000000014D4                 cmp     cs:__bss_start, 0
                    .text:00000000000014DB                 jnz     short locret_1508
                    .text:00000000000014DD                 push    rbp
                    .text:00000000000014DE                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:00000000000014E6                 mov     rbp, rsp
                    .text:00000000000014E9                 jz      short loc_14F7
                    .text:00000000000014EB                 mov     rdi, cs:__dso_handle ; void *
                    .text:00000000000014F2                 call    __cxa_finalize
                    .text:00000000000014F7
                    .text:00000000000014F7 loc_14F7:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:00000000000014F7                 call    deregister_tm_clones
                    .text:00000000000014FC                 mov     cs:__bss_start, 1
                    .text:0000000000001503                 pop     rbp
                    .text:0000000000001504                 retn
                    .text:0000000000001504 ; ---------------------------------------------------------------------------
                    .text:0000000000001505                 align 8
                    .text:0000000000001508
                    .text:0000000000001508 locret_1508:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001508                 retn
                    .text:0000000000001508 __do_global_dtors_aux endp
                    .text:0000000000001508
                    .text:0000000000001508 ; ---------------------------------------------------------------------------
                    .text:0000000000001509                 align 10h
                    .text:0000000000001510
                    .text:0000000000001510 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001510
                    .text:0000000000001510
                    .text:0000000000001510 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001510                 endbr64
                    .text:0000000000001514                 jmp     register_tm_clones
                    .text:0000000000001514 frame_dummy     endp
                    .text:0000000000001514
                    .text:0000000000001514 _text           ends
                    .text:0000000000001514
                    LOAD:0000000000001519 ; ===========================================================================
                    LOAD:0000000000001519
                    LOAD:0000000000001519 ; Segment type: Pure code
                    LOAD:0000000000001519 ; Segment permissions: Read/Execute
                    LOAD:0000000000001519 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001519                 assume cs:LOAD
                    LOAD:0000000000001519                 ;org 1519h
                    LOAD:0000000000001519                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001519                 align 4
                    LOAD:0000000000001519 LOAD            ends
                    LOAD:0000000000001519
                    .fini:000000000000151C ; ===========================================================================
                    .fini:000000000000151C
                    .fini:000000000000151C ; Segment type: Pure code
                    .fini:000000000000151C ; Segment permissions: Read/Execute
                    .fini:000000000000151C _fini           segment dword public 'CODE' use64
                    .fini:000000000000151C                 assume cs:_fini
                    .fini:000000000000151C                 ;org 151Ch
                    .fini:000000000000151C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000151C
                    .fini:000000000000151C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000151C
                    .fini:000000000000151C
                    .fini:000000000000151C                 public _term_proc
                    .fini:000000000000151C _term_proc      proc near
                    .fini:000000000000151C                 endbr64                 ; _fini
                    .fini:0000000000001520                 sub     rsp, 8
                    .fini:0000000000001524                 add     rsp, 8
                    .fini:0000000000001528                 retn
                    .fini:0000000000001528 _term_proc      endp
                    .fini:0000000000001528
                    .fini:0000000000001528 _fini           ends
                    .fini:0000000000001528
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment para public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 aDistZuZuInf    db 'dist(%zu -> %zu) = INF',0Ah,0
                    .rodata:0000000000002004                                         ; DATA XREF: main+212↑o
                    .rodata:000000000000201C aDistZuZuD      db 'dist(%zu -> %zu) = %d',0Ah,0
                    .rodata:000000000000201C                                         ; DATA XREF: main+20B↑o
                    .rodata:0000000000002033 aNoPathFromZuTo db 'no path from %zu to %zu',0Ah,0
                    .rodata:0000000000002033                                         ; DATA XREF: main+34A↑o
                    .rodata:000000000000204C aPathZuZu       db 'path %zu -> %zu:',0 ; DATA XREF: main+2A0↑o
                    .rodata:000000000000205D asc_205D        db ' ->',0              ; DATA XREF: main+2C4↑o
                    .rodata:0000000000002061 aZuS            db ' %zu%s',0           ; DATA XREF: main+2BD↑o
                    .rodata:0000000000002068                 align 10h
                    .rodata:0000000000002070 xmmword_2070    xmmword 3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3Fh
                    .rodata:0000000000002070                                         ; DATA XREF: main+13A↑r
                    .rodata:0000000000002070 _rodata         ends
                    .rodata:0000000000002070
                    .eh_frame_hdr:0000000000002080 ; ===========================================================================
                    .eh_frame_hdr:0000000000002080
                    .eh_frame_hdr:0000000000002080 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002080 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002080 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002080                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002080                 ;org 2080h
                    .eh_frame_hdr:0000000000002080 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002081                 db  1Bh
                    .eh_frame_hdr:0000000000002082                 db    3
                    .eh_frame_hdr:0000000000002083                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002084                 db  34h ; 4
                    .eh_frame_hdr:0000000000002085                 db    0
                    .eh_frame_hdr:0000000000002086                 db    0
                    .eh_frame_hdr:0000000000002087                 db    0
                    .eh_frame_hdr:0000000000002088                 db    5
                    .eh_frame_hdr:0000000000002089                 db    0
                    .eh_frame_hdr:000000000000208A                 db    0
                    .eh_frame_hdr:000000000000208B                 db    0
                    .eh_frame_hdr:000000000000208C                 db 0A0h
                    .eh_frame_hdr:000000000000208D                 db 0EFh
                    .eh_frame_hdr:000000000000208E                 db 0FFh
                    .eh_frame_hdr:000000000000208F                 db 0FFh
                    .eh_frame_hdr:0000000000002090                 db  68h ; h
                    .eh_frame_hdr:0000000000002091                 db    0
                    .eh_frame_hdr:0000000000002092                 db    0
                    .eh_frame_hdr:0000000000002093                 db    0
                    .eh_frame_hdr:0000000000002094                 db 0F0h
                    .eh_frame_hdr:0000000000002095                 db 0EFh
                    .eh_frame_hdr:0000000000002096                 db 0FFh
                    .eh_frame_hdr:0000000000002097                 db 0FFh
                    .eh_frame_hdr:0000000000002098                 db  90h
                    .eh_frame_hdr:0000000000002099                 db    0
                    .eh_frame_hdr:000000000000209A                 db    0
                    .eh_frame_hdr:000000000000209B                 db    0
                    .eh_frame_hdr:000000000000209C                 db    0
                    .eh_frame_hdr:000000000000209D                 db 0F0h
                    .eh_frame_hdr:000000000000209E                 db 0FFh
                    .eh_frame_hdr:000000000000209F                 db 0FFh
                    .eh_frame_hdr:00000000000020A0                 db 0A8h
                    .eh_frame_hdr:00000000000020A1                 db    0
                    .eh_frame_hdr:00000000000020A2                 db    0
                    .eh_frame_hdr:00000000000020A3                 db    0
                    .eh_frame_hdr:00000000000020A4                 db  40h ; @
                    .eh_frame_hdr:00000000000020A5                 db 0F0h
                    .eh_frame_hdr:00000000000020A6                 db 0FFh
                    .eh_frame_hdr:00000000000020A7                 db 0FFh
                    .eh_frame_hdr:00000000000020A8                 db 0C0h
                    .eh_frame_hdr:00000000000020A9                 db    0
                    .eh_frame_hdr:00000000000020AA                 db    0
                    .eh_frame_hdr:00000000000020AB                 db    0
                    .eh_frame_hdr:00000000000020AC                 db 0B0h
                    .eh_frame_hdr:00000000000020AD                 db 0F3h
                    .eh_frame_hdr:00000000000020AE                 db 0FFh
                    .eh_frame_hdr:00000000000020AF                 db 0FFh
                    .eh_frame_hdr:00000000000020B0                 db  50h ; P
                    .eh_frame_hdr:00000000000020B1                 db    0
                    .eh_frame_hdr:00000000000020B2                 db    0
                    .eh_frame_hdr:00000000000020B3                 db    0
                    .eh_frame_hdr:00000000000020B3 _eh_frame_hdr   ends
                    .eh_frame_hdr:00000000000020B3
                    LOAD:00000000000020B4 ; ===========================================================================
                    LOAD:00000000000020B4
                    LOAD:00000000000020B4 ; Segment type: Pure data
                    LOAD:00000000000020B4 ; Segment permissions: Read
                    LOAD:00000000000020B4 LOAD            segment mempage public 'DATA' use64
                    LOAD:00000000000020B4                 assume cs:LOAD
                    LOAD:00000000000020B4                 ;org 20B4h
                    LOAD:00000000000020B4                 align 8
                    LOAD:00000000000020B4 LOAD            ends
                    LOAD:00000000000020B4
                    .eh_frame:00000000000020B8 ; ===========================================================================
                    .eh_frame:00000000000020B8
                    .eh_frame:00000000000020B8 ; Segment type: Pure data
                    .eh_frame:00000000000020B8 ; Segment permissions: Read
                    .eh_frame:00000000000020B8 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:00000000000020B8                 assume cs:_eh_frame
                    .eh_frame:00000000000020B8                 ;org 20B8h
                    .eh_frame:00000000000020B8                 db  14h
                    .eh_frame:00000000000020B9                 db    0
                    .eh_frame:00000000000020BA                 db    0
                    .eh_frame:00000000000020BB                 db    0
                    .eh_frame:00000000000020BC                 db    0
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db    1
                    .eh_frame:00000000000020C1                 db  7Ah ; z
                    .eh_frame:00000000000020C2                 db  52h ; R
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db    1
                    .eh_frame:00000000000020C5                 db  78h ; x
                    .eh_frame:00000000000020C6                 db  10h
                    .eh_frame:00000000000020C7                 db    1
                    .eh_frame:00000000000020C8                 db  1Bh
                    .eh_frame:00000000000020C9                 db  0Ch
                    .eh_frame:00000000000020CA                 db    7
                    .eh_frame:00000000000020CB                 db    8
                    .eh_frame:00000000000020CC                 db  90h
                    .eh_frame:00000000000020CD                 db    1
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db  14h
                    .eh_frame:00000000000020D1                 db    0
                    .eh_frame:00000000000020D2                 db    0
                    .eh_frame:00000000000020D3                 db    0
                    .eh_frame:00000000000020D4                 db  1Ch
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db  58h ; X
                    .eh_frame:00000000000020D9                 db 0F3h
                    .eh_frame:00000000000020DA                 db 0FFh
                    .eh_frame:00000000000020DB                 db 0FFh
                    .eh_frame:00000000000020DC                 db  26h ; &
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db    0
                    .eh_frame:00000000000020E1                 db  44h ; D
                    .eh_frame:00000000000020E2                 db    7
                    .eh_frame:00000000000020E3                 db  10h
                    .eh_frame:00000000000020E4                 db    0
                    .eh_frame:00000000000020E5                 db    0
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db  24h ; $
                    .eh_frame:00000000000020E9                 db    0
                    .eh_frame:00000000000020EA                 db    0
                    .eh_frame:00000000000020EB                 db    0
                    .eh_frame:00000000000020EC                 db  34h ; 4
                    .eh_frame:00000000000020ED                 db    0
                    .eh_frame:00000000000020EE                 db    0
                    .eh_frame:00000000000020EF                 db    0
                    .eh_frame:00000000000020F0                 db  30h ; 0
                    .eh_frame:00000000000020F1                 db 0EFh
                    .eh_frame:00000000000020F2                 db 0FFh
                    .eh_frame:00000000000020F3                 db 0FFh
                    .eh_frame:00000000000020F4                 db  50h ; P
                    .eh_frame:00000000000020F5                 db    0
                    .eh_frame:00000000000020F6                 db    0
                    .eh_frame:00000000000020F7                 db    0
                    .eh_frame:00000000000020F8                 db    0
                    .eh_frame:00000000000020F9                 db  0Eh
                    .eh_frame:00000000000020FA                 db  10h
                    .eh_frame:00000000000020FB                 db  46h ; F
                    .eh_frame:00000000000020FC                 db  0Eh
                    .eh_frame:00000000000020FD                 db  18h
                    .eh_frame:00000000000020FE                 db  4Ah ; J
                    .eh_frame:00000000000020FF                 db  0Fh
                    .eh_frame:0000000000002100                 db  0Bh
                    .eh_frame:0000000000002101                 db  77h ; w
                    .eh_frame:0000000000002102                 db    8
                    .eh_frame:0000000000002103                 db  80h
                    .eh_frame:0000000000002104                 db    0
                    .eh_frame:0000000000002105                 db  3Fh ; ?
                    .eh_frame:0000000000002106                 db  1Ah
                    .eh_frame:0000000000002107                 db  3Ah ; :
                    .eh_frame:0000000000002108                 db  2Ah ; *
                    .eh_frame:0000000000002109                 db  33h ; 3
                    .eh_frame:000000000000210A                 db  24h ; $
                    .eh_frame:000000000000210B                 db  22h ; "
                    .eh_frame:000000000000210C                 db    0
                    .eh_frame:000000000000210D                 db    0
                    .eh_frame:000000000000210E                 db    0
                    .eh_frame:000000000000210F                 db    0
                    .eh_frame:0000000000002110                 db  14h
                    .eh_frame:0000000000002111                 db    0
                    .eh_frame:0000000000002112                 db    0
                    .eh_frame:0000000000002113                 db    0
                    .eh_frame:0000000000002114                 db  5Ch ; \
                    .eh_frame:0000000000002115                 db    0
                    .eh_frame:0000000000002116                 db    0
                    .eh_frame:0000000000002117                 db    0
                    .eh_frame:0000000000002118                 db  58h ; X
                    .eh_frame:0000000000002119                 db 0EFh
                    .eh_frame:000000000000211A                 db 0FFh
                    .eh_frame:000000000000211B                 db 0FFh
                    .eh_frame:000000000000211C                 db  10h
                    .eh_frame:000000000000211D                 db    0
                    .eh_frame:000000000000211E                 db    0
                    .eh_frame:000000000000211F                 db    0
                    .eh_frame:0000000000002120                 db    0
                    .eh_frame:0000000000002121                 db    0
                    .eh_frame:0000000000002122                 db    0
                    .eh_frame:0000000000002123                 db    0
                    .eh_frame:0000000000002124                 db    0
                    .eh_frame:0000000000002125                 db    0
                    .eh_frame:0000000000002126                 db    0
                    .eh_frame:0000000000002127                 db    0
                    .eh_frame:0000000000002128                 db  14h
                    .eh_frame:0000000000002129                 db    0
                    .eh_frame:000000000000212A                 db    0
                    .eh_frame:000000000000212B                 db    0
                    .eh_frame:000000000000212C                 db  74h ; t
                    .eh_frame:000000000000212D                 db    0
                    .eh_frame:000000000000212E                 db    0
                    .eh_frame:000000000000212F                 db    0
                    .eh_frame:0000000000002130                 db  50h ; P
                    .eh_frame:0000000000002131                 db 0EFh
                    .eh_frame:0000000000002132                 db 0FFh
                    .eh_frame:0000000000002133                 db 0FFh
                    .eh_frame:0000000000002134                 db  40h ; @
                    .eh_frame:0000000000002135                 db    0
                    .eh_frame:0000000000002136                 db    0
                    .eh_frame:0000000000002137                 db    0
                    .eh_frame:0000000000002138                 db    0
                    .eh_frame:0000000000002139                 db    0
                    .eh_frame:000000000000213A                 db    0
                    .eh_frame:000000000000213B                 db    0
                    .eh_frame:000000000000213C                 db    0
                    .eh_frame:000000000000213D                 db    0
                    .eh_frame:000000000000213E                 db    0
                    .eh_frame:000000000000213F                 db    0
                    .eh_frame:0000000000002140                 db  44h ; D
                    .eh_frame:0000000000002141                 db    0
                    .eh_frame:0000000000002142                 db    0
                    .eh_frame:0000000000002143                 db    0
                    .eh_frame:0000000000002144                 db  8Ch
                    .eh_frame:0000000000002145                 db    0
                    .eh_frame:0000000000002146                 db    0
                    .eh_frame:0000000000002147                 db    0
                    .eh_frame:0000000000002148                 db  78h ; x
                    .eh_frame:0000000000002149                 db 0EFh
                    .eh_frame:000000000000214A                 db 0FFh
                    .eh_frame:000000000000214B                 db 0FFh
                    .eh_frame:000000000000214C                 db  6Ch ; l
                    .eh_frame:000000000000214D                 db    3
                    .eh_frame:000000000000214E                 db    0
                    .eh_frame:000000000000214F                 db    0
                    .eh_frame:0000000000002150                 db    0
                    .eh_frame:0000000000002151                 db  46h ; F
                    .eh_frame:0000000000002152                 db  0Eh
                    .eh_frame:0000000000002153                 db  10h
                    .eh_frame:0000000000002154                 db  8Eh
                    .eh_frame:0000000000002155                 db    2
                    .eh_frame:0000000000002156                 db  50h ; P
                    .eh_frame:0000000000002157                 db  0Eh
                    .eh_frame:0000000000002158                 db  18h
                    .eh_frame:0000000000002159                 db  8Dh
                    .eh_frame:000000000000215A                 db    3
                    .eh_frame:000000000000215B                 db  42h ; B
                    .eh_frame:000000000000215C                 db  0Eh
                    .eh_frame:000000000000215D                 db  20h
                    .eh_frame:000000000000215E                 db  8Ch
                    .eh_frame:000000000000215F                 db    4
                    .eh_frame:0000000000002160                 db  41h ; A
                    .eh_frame:0000000000002161                 db  0Eh
                    .eh_frame:0000000000002162                 db  28h ; (
                    .eh_frame:0000000000002163                 db  86h
                    .eh_frame:0000000000002164                 db    5
                    .eh_frame:0000000000002165                 db  41h ; A
                    .eh_frame:0000000000002166                 db  0Eh
                    .eh_frame:0000000000002167                 db  30h ; 0
                    .eh_frame:0000000000002168                 db  83h
                    .eh_frame:0000000000002169                 db    6
                    .eh_frame:000000000000216A                 db  47h ; G
                    .eh_frame:000000000000216B                 db  0Eh
                    .eh_frame:000000000000216C                 db 0C0h
                    .eh_frame:000000000000216D                 db    2
                    .eh_frame:000000000000216E                 db    3
                    .eh_frame:000000000000216F                 db  17h
                    .eh_frame:0000000000002170                 db    3
                    .eh_frame:0000000000002171                 db  0Ah
                    .eh_frame:0000000000002172                 db  0Eh
                    .eh_frame:0000000000002173                 db  30h ; 0
                    .eh_frame:0000000000002174                 db  43h ; C
                    .eh_frame:0000000000002175                 db  0Eh
                    .eh_frame:0000000000002176                 db  28h ; (
                    .eh_frame:0000000000002177                 db  41h ; A
                    .eh_frame:0000000000002178                 db  0Eh
                    .eh_frame:0000000000002179                 db  20h
                    .eh_frame:000000000000217A                 db  42h ; B
                    .eh_frame:000000000000217B                 db  0Eh
                    .eh_frame:000000000000217C                 db  18h
                    .eh_frame:000000000000217D                 db  42h ; B
                    .eh_frame:000000000000217E                 db  0Eh
                    .eh_frame:000000000000217F                 db  10h
                    .eh_frame:0000000000002180                 db  42h ; B
                    .eh_frame:0000000000002181                 db  0Eh
                    .eh_frame:0000000000002182                 db    8
                    .eh_frame:0000000000002183                 db  41h ; A
                    .eh_frame:0000000000002184                 db  0Bh
                    .eh_frame:0000000000002185                 db    0
                    .eh_frame:0000000000002186                 db    0
                    .eh_frame:0000000000002187                 db    0
                    .eh_frame:0000000000002188 __FRAME_END__   db    0
                    .eh_frame:0000000000002189                 db    0
                    .eh_frame:000000000000218A                 db    0
                    .eh_frame:000000000000218B                 db    0
                    .eh_frame:000000000000218B _eh_frame       ends
                    .eh_frame:000000000000218B
                    .init_array:0000000000003DA0 ; ELF Initialization Function Table
                    .init_array:0000000000003DA0 ; ===========================================================================
                    .init_array:0000000000003DA0
                    .init_array:0000000000003DA0 ; Segment type: Pure data
                    .init_array:0000000000003DA0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DA0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DA0                 assume cs:_init_array
                    .init_array:0000000000003DA0                 ;org 3DA0h
                    .init_array:0000000000003DA0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DA0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DA0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DA0 _init_array     ends
                    .init_array:0000000000003DA0
                    .fini_array:0000000000003DA8 ; ELF Termination Function Table
                    .fini_array:0000000000003DA8 ; ===========================================================================
                    .fini_array:0000000000003DA8
                    .fini_array:0000000000003DA8 ; Segment type: Pure data
                    .fini_array:0000000000003DA8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DA8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DA8                 assume cs:_fini_array
                    .fini_array:0000000000003DA8                 ;org 3DA8h
                    .fini_array:0000000000003DA8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DA8 _fini_array     ends
                    .fini_array:0000000000003DA8
                    LOAD:0000000000003DB0 ; ELF Dynamic Information
                    LOAD:0000000000003DB0 ; ===========================================================================
                    LOAD:0000000000003DB0
                    LOAD:0000000000003DB0 ; Segment type: Pure data
                    LOAD:0000000000003DB0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DB0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DB0                 assume cs:LOAD
                    LOAD:0000000000003DB0                 ;org 3DB0h
                    LOAD:0000000000003DB0 _DYNAMIC        Elf64_Dyn <1, 4Ch>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DB0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DB0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DC0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Dh, 151Ch>  ; DT_FINI
                    LOAD:0000000000003DE0                 Elf64_Dyn <19h, 3DA0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003DF0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E00                 Elf64_Dyn <1Ah, 3DA8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E20                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E30                 Elf64_Dyn <5, 4C8h>     ; DT_STRTAB
                    LOAD:0000000000003E40                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <0Ah, 0C8h>   ; DT_STRSZ
                    LOAD:0000000000003E60                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E70                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E80                 Elf64_Dyn <3, 3FA0h>    ; DT_PLTGOT
                    LOAD:0000000000003E90                 Elf64_Dyn <2, 60h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EA0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EB0                 Elf64_Dyn <17h, 6B8h>   ; DT_JMPREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <7, 5F8h>     ; DT_RELA
                    LOAD:0000000000003ED0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EE0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003EF0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F00                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFEh, 5A8h> ; DT_VERNEED
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFF0h, 590h> ; DT_VERSYM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F50                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F60                 db    0
                    LOAD:0000000000003F61                 db    0
                    LOAD:0000000000003F62                 db    0
                    LOAD:0000000000003F63                 db    0
                    LOAD:0000000000003F64                 db    0
                    LOAD:0000000000003F65                 db    0
                    LOAD:0000000000003F66                 db    0
                    LOAD:0000000000003F67                 db    0
                    LOAD:0000000000003F68                 db    0
                    LOAD:0000000000003F69                 db    0
                    LOAD:0000000000003F6A                 db    0
                    LOAD:0000000000003F6B                 db    0
                    LOAD:0000000000003F6C                 db    0
                    LOAD:0000000000003F6D                 db    0
                    LOAD:0000000000003F6E                 db    0
                    LOAD:0000000000003F6F                 db    0
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003F9F LOAD            ends
                    LOAD:0000000000003F9F
                    .got:0000000000003FA0 ; ===========================================================================
                    .got:0000000000003FA0
                    .got:0000000000003FA0 ; Segment type: Pure data
                    .got:0000000000003FA0 ; Segment permissions: Read/Write
                    .got:0000000000003FA0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FA0                 assume cs:_got
                    .got:0000000000003FA0                 ;org 3FA0h
                    .got:0000000000003FA0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FA8 qword_3FA8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FB0 qword_3FB0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FB8 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
                    .got:0000000000003FC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC0                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FC8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; void free(void *ptr)
                    extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
                    extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
                    extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004028                 extrn __libc_start_main:near
                    extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004030                 extrn __stack_chk_fail:near
                    extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004038 ; void *calloc(size_t nmemb, size_t size)
                    extern:0000000000004038                 extrn calloc:near       ; CODE XREF: _calloc+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:calloc_ptr↑o
                    extern:0000000000004040                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004040                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004048 ; int __cxa_finalize(void *)
                    extern:0000000000004048                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004048                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004050                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004058                 extrn __gmon_start__:near ; weak
                    extern:0000000000004058                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004058                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004060                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004060                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004060
                    extern:0000000000004060
                    extern:0000000000004060                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x00000000000010C0
                    ; Intent: Dijkstra shortest paths on a fixed 6-node graph; print dist(0→i) and path 0→5 (confidence=0.95). Evidence: 0x3F3F3F3F INF sentinel; min-unvisited selection/relax loops.
                    ; Preconditions: Graph is encoded as a 6x6 adjacency matrix with -1 for no edge, 0 on diagonals.
                    ; Postconditions: Prints distances and either the path 0→5 or "no path" message.
                    
                    @adj = internal constant [6 x [6 x i32]] [
                    [6 x i32] [i32 0, i32 7, i32 9, i32 10, i32 -1, i32 -1],
                    [6 x i32] [i32 7, i32 0, i32 -1, i32 15, i32 -1, i32 -1],
                    [6 x i32] [i32 9, i32 -1, i32 0, i32 11, i32 -1, i32 -1],
                    [6 x i32] [i32 10, i32 15, i32 11, i32 0, i32 6, i32 -1],
                    [6 x i32] [i32 -1, i32 -1, i32 -1, i32 6, i32 0, i32 9],
                    [6 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 9, i32 0]
                    ]
                    
                    @.fmt_dist_inf = internal constant [24 x i8] c"dist(%zu -> %zu) = INF\0A\00"
                    @.fmt_dist_d = internal constant [23 x i8] c"dist(%zu -> %zu) = %d\0A\00"
                    @.fmt_no_path = internal constant [25 x i8] c"no path from %zu to %zu\0A\00"
                    @.fmt_path_hdr = internal constant [17 x i8] c"path %zu -> %zu:\00"
                    @.fmt_node_sep = internal constant [7 x i8] c" %zu%s\00"
                    @.arrow = internal constant [4 x i8] c" ->\00"
                    @.empty = internal constant [1 x i8] c"\00"
                    @.nl = internal constant [2 x i8] c"\0A\00"
                    
                    ; Only the needed extern declarations:
                    declare i8* @calloc(i64, i64)
                    declare void @free(i8*)
                    declare i32 @__printf_chk(i32, i8*, ...)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    %dist = alloca [6 x i32], align 16
                    %prev = alloca [6 x i32], align 16
                    %path = alloca [6 x i64], align 16
                    
                    ; Conservative repair: initialize dist/prev even if calloc fails.
                    br label %init_loop
                    
                    init_loop: ; i in [0..6)
                    %i = phi i64 [ 0, %entry ], [ %i.next, %init_loop.body ]
                    %cmp.i = icmp ult i64 %i, 6
                    br i1 %cmp.i, label %init_loop.body, label %after_init
                    
                    init_loop.body:
                    %dist.gep = getelementptr inbounds [6 x i32], [6 x i32]* %dist, i64 0, i64 %i
                    store i32 1061109567, i32* %dist.gep, align 4 ; INF = 0x3F3F3F3F
                    %prev.gep = getelementptr inbounds [6 x i32], [6 x i32]* %prev, i64 0, i64 %i
                    store i32 -1, i32* %prev.gep, align 4
                    %i.next = add nuw nsw i64 %i, 1
                    br label %init_loop
                    
                    after_init:
                    ; dist[0] = 0
                    %dist0 = getelementptr inbounds [6 x i32], [6 x i32]* %dist, i64 0, i64 0
                    store i32 0, i32* %dist0, align 4
                    
                    ; visited = calloc(24,1) -> 6 * sizeof(i32)
                    %vis.raw = call i8* @calloc(i64 24, i64 1)
                    %vis.null = icmp eq i8* %vis.raw, null
                    br i1 %vis.null, label %skip_dijk, label %have_vis
                    
                    have_vis:
                    %vis = bitcast i8* %vis.raw to i32*
                    
                    ; outer iteration t=0..5
                    br label %outer.loop
                    
                    outer.loop:
                    %t = phi i64 [ 0, %have_vis ], [ %t.next, %outer.after ]
                    %t.cmp = icmp ult i64 %t, 6
                    br i1 %t.cmp, label %select.min, label %after_outer
                    
                    select.min:
                    ; min = INF, u = -1
                    %min = alloca i32, align 4
                    store i32 1061109567, i32* %min, align 4
                    %u = alloca i32, align 4
                    store i32 -1, i32* %u, align 4
                    
                    br label %sel.loop
                    
                    sel.loop:
                    %j = phi i64 [ 0, %select.min ], [ %j.next, %sel.loop ]
                    %j.cmp = icmp ult i64 %j, 6
                    br i1 %j.cmp, label %sel.body, label %sel.done
                    
                    sel.body:
                    ; if visited[j]==0 and dist[j] < min -> update
                    %vis.j.ptr = getelementptr inbounds i32, i32* %vis, i64 %j
                    %vis.j = load i32, i32* %vis.j.ptr, align 4
                    %is.unvisited = icmp eq i32 %vis.j, 0
                    br i1 %is.unvisited, label %check.min, label %sel.inc
                    
                    check.min:
                    %dj.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %dist, i64 0, i64 %j
                    %dj = load i32, i32* %dj.ptr, align 4
                    %curmin = load i32, i32* %min, align 4
                    %lt = icmp slt i32 %dj, %curmin
                    br i1 %lt, label %update.min, label %sel.inc
                    
                    update.min:
                    store i32 %dj, i32* %min, align 4
                    %j.trunc = trunc i64 %j to i32
                    store i32 %j.trunc, i32* %u, align 4
                    br label %sel.inc
                    
                    sel.inc:
                    %j.next = add nuw nsw i64 %j, 1
                    br label %sel.loop
                    
                    sel.done:
                    %u.val = load i32, i32* %u, align 4
                    %u.neg = icmp slt i32 %u.val, 0
                    br i1 %u.neg, label %after_outer, label %relax
                    
                    relax:
                    ; visited[u] = 1
                    %u.idx = sext i32 %u.val to i64
                    %vis.u.ptr = getelementptr inbounds i32, i32* %vis, i64 %u.idx
                    store i32 1, i32* %vis.u.ptr, align 4
                    
                    ; du = dist[u]
                    %du.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %dist, i64 0, i64 %u.idx
                    %du = load i32, i32* %du.ptr, align 4
                    %du.is.inf = icmp eq i32 %du, 1061109567
                    br i1 %du.is.inf, label %outer.after, label %relax.loop
                    
                    relax.loop:
                    %k = phi i64 [ 0, %relax ], [ %k.next, %relax.loop ]
                    %k.cmp = icmp ult i64 %k, 6
                    br i1 %k.cmp, label %relax.body, label %outer.after
                    
                    relax.body:
                    ; w = adj[u][k]
                    %row.ptr = getelementptr inbounds [6 x [6 x i32]], [6 x [6 x i32]]* @adj, i64 0, i64 %u.idx
                    %w.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %row.ptr, i64 0, i64 %k
                    %w = load i32, i32* %w.ptr, align 4
                    %w.neg = icmp slt i32 %w, 0
                    br i1 %w.neg, label %relax.inc, label %chk.unvisited2
                    
                    chk.unvisited2:
                    %vis.k.ptr = getelementptr inbounds i32, i32* %vis, i64 %k
                    %vis.k = load i32, i32* %vis.k.ptr, align 4
                    %k.unvisited = icmp eq i32 %vis.k, 0
                    br i1 %k.unvisited, label %try.update, label %relax.inc
                    
                    try.update:
                    %cand = add nsw i32 %du, %w
                    %dk.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %dist, i64 0, i64 %k
                    %dk = load i32, i32* %dk.ptr, align 4
                    %improve = icmp slt i32 %cand, %dk
                    br i1 %improve, label %do.update, label %relax.inc
                    
                    do.update:
                    store i32 %cand, i32* %dk.ptr, align 4
                    %prev.k.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %prev, i64 0, i64 %k
                    %u32 = trunc i64 %u.idx to i32
                    store i32 %u32, i32* %prev.k.ptr, align 4
                    br label %relax.inc
                    
                    relax.inc:
                    %k.next = add nuw nsw i64 %k, 1
                    br label %relax.loop
                    
                    outer.after:
                    %t.next = add nuw nsw i64 %t, 1
                    br label %outer.loop
                    
                    after_outer:
                    ; free(visited)
                    call void @free(i8* %vis.raw)
                    br label %skip_dijk
                    
                    skip_dijk:
                    ; Print distances
                    br label %print.loop
                    
                    print.loop:
                    %pi = phi i64 [ 0, %skip_dijk ], [ %pi.next, %print.loop ]
                    %pi.cmp = icmp ult i64 %pi, 6
                    br i1 %pi.cmp, label %print.body, label %after_print
                    
                    print.body:
                    %di.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %dist, i64 0, i64 %pi
                    %di = load i32, i32* %di.ptr, align 4
                    %is.inf = icmp eq i32 %di, 1061109567
                    %fmt.inf.ptr = getelementptr inbounds [24 x i8], [24 x i8]* @.fmt_dist_inf, i64 0, i64 0
                    %fmt.d.ptr = getelementptr inbounds [23 x i8], [23 x i8]* @.fmt_dist_d, i64 0, i64 0
                    %dst.z = trunc i64 %pi to i64
                    %src.z = zext i32 0 to i64
                    br i1 %is.inf, label %do_inf, label %do_num
                    
                    do_inf:
                    %call.inf = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.inf.ptr, i64 %src.z, i64 %dst.z)
                    br label %print.inc
                    
                    do_num:
                    %di.ext = sext i32 %di to i32
                    %call.num = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.d.ptr, i64 %src.z, i64 %dst.z, i32 %di.ext)
                    br label %print.inc
                    
                    print.inc:
                    %pi.next = add nuw nsw i64 %pi, 1
                    br label %print.loop
                    
                    after_print:
                    ; If dist[5] is INF -> "no path", else print path
                    %d5.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %dist, i64 0, i64 5
                    %d5 = load i32, i32* %d5.ptr, align 4
                    %d5.inf = icmp eq i32 %d5, 1061109567
                    br i1 %d5.inf, label %no_path, label %have_path
                    
                    no_path:
                    %fmt.np = getelementptr inbounds [25 x i8], [25 x i8]* @.fmt_no_path, i64 0, i64 0
                    %call.np = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.np, i64 0, i64 5)
                    br label %ret0
                    
                    have_path:
                    ; Build path by following prev from 5 back to -1
                    %cnt = alloca i64, align 8
                    store i64 0, i64* %cnt, align 8
                    %v.cur = alloca i32, align 4
                    store i32 5, i32* %v.cur, align 4
                    br label %path.build
                    
                    path.build:
                    %v = load i32, i32* %v.cur, align 4
                    %cnt.val = load i64, i64* %cnt, align 8
                    ; path[cnt] = v
                    %path.slot = getelementptr inbounds [6 x i64], [6 x i64]* %path, i64 0, i64 %cnt.val
                    %v.z = sext i32 %v to i64
                    store i64 %v.z, i64* %path.slot, align 8
                    ; cnt++
                    %cnt.next = add nuw nsw i64 %cnt.val, 1
                    store i64 %cnt.next, i64* %cnt, align 8
                    ; v = prev[v]
                    %pv.ptr = getelementptr inbounds [6 x i32], [6 x i32]* %prev, i64 0, i64 %v.z
                    %pv = load i32, i32* %pv.ptr, align 4
                    store i32 %pv, i32* %v.cur, align 4
                    %done = icmp eq i32 %pv, -1
                    br i1 %done, label %path.header, label %path.build
                    
                    path.header:
                    ; print "path 0 -> 5:"
                    %fmt.ph = getelementptr inbounds [17 x i8], [17 x i8]* @.fmt_path_hdr, i64 0, i64 0
                    %call.h = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.ph, i64 0, i64 5)
                    ; iterate i = cnt-1 .. 0
                    %cnt.fin = load i64, i64* %cnt, align 8
                    %i.start = add i64 %cnt.fin, -1
                    br label %path.print
                    
                    path.print:
                    %idx = phi i64 [ %i.start, %path.header ], [ %idx.next, %path.print ]
                    %cond = icmp sge i64 %idx, 0
                    br i1 %cond, label %path.body, label %path.done
                    
                    path.body:
                    %node.ptr = getelementptr inbounds [6 x i64], [6 x i64]* %path, i64 0, i64 %idx
                    %node = load i64, i64* %node.ptr, align 8
                    ; choose arrow or empty based on idx != 0
                    %is.last = icmp eq i64 %idx, 0
                    %arrow.sel = select i1 %is.last, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.empty, i64 0, i64 0),
                    i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.arrow, i64 0, i64 0)
                    %fmt.ns = getelementptr inbounds [7 x i8], [7 x i8]* @.fmt_node_sep, i64 0, i64 0
                    %call.nd = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.ns, i64 %node, i8* %arrow.sel)
                    %idx.next = add nsw i64 %idx, -1
                    br label %path.print
                    
                    path.done:
                    ; print newline
                    %nl.ptr = getelementptr inbounds [2 x i8], [2 x i8]* @.nl, i64 0, i64 0
                    %call.nl = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nl.ptr)
                    br label %ret0
                    
                    ret0:
                    ret i32 0
                    }
                    ```
                    
        - insertionsort
            - ida 함수 리스트
                
                ```notion
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "insertionsort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x11a0",
                      "end": "0x11c6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x11d0",
                      "end": "0x11f9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x1200",
                      "end": "0x1239",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1240",
                      "end": "0x1279",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1280",
                      "end": "0x1289",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x1196",
                      "size": 278,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x128c",
                      "end": "0x1299",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 19
                user? candidates: 6
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : F9B836A1B6BB45730035C18FC96914D8841BD38FC503EA730EC53D30A0CEECC5
                    LOAD:0000000000000000 ; Input MD5    : DFCADCFBC45430D3A569A252F4B2D55D
                    LOAD:0000000000000000 ; Input CRC32  : 0A4DF0F9
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\insertionsort
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'insertionsort.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 36D8h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 6A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 6A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 299h                 ; Size in file image
                    LOAD:0000000000000110                 dq 299h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 100h                 ; Size in file image
                    LOAD:0000000000000148                 dq 100h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DB0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000178                 dq 260h                 ; Size in file image
                    LOAD:0000000000000180                 dq 268h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DC0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DC0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 200Ch                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 200Ch                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DB0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000300                 dq 250h                 ; Size in file image
                    LOAD:0000000000000308                 dq 250h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 0A4h, 35h, 94h, 8Ah, 7Dh, 0DAh, 5Ah, 2Dh, 0B9h, 0CAh ; Desc
                    LOAD:0000000000000382                 db 3Eh, 5Dh, 8Ah, 3Eh, 64h, 0D2h, 96h, 5Fh, 8Fh, 0D3h
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 7
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 7, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aLibcStartMain - offset unk_498, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:00000000000003F0                            offset dword_0, 0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aItmDeregistert - offset unk_498, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aStackChkFail - offset unk_498, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aGmonStart - offset unk_498, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aPrintfChk - offset unk_498, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aItmRegistertmc - offset unk_498, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aCxaFinalize - offset unk_498, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498 ; ELF String Table
                    LOAD:0000000000000498 unk_498         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000498                                         ; LOAD:0000000000000408↑o ...
                    LOAD:0000000000000499 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004A8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:00000000000004B5 aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004B5                                         ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000004D8 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000568↓o
                    LOAD:00000000000004E2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000578↓o
                    LOAD:00000000000004EE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000588↓o
                    LOAD:00000000000004FA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000598↓o
                    LOAD:0000000000000504 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000050F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000050F                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000053A aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:000000000000053A                                         ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000554 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000554                 dw 0
                    LOAD:0000000000000556                 dw 2                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000558                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:000000000000055A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000055C                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000055E                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:0000000000000560                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:0000000000000562                 dw 5                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:0000000000000564                 dw 0
                    LOAD:0000000000000566                 dw 0
                    LOAD:0000000000000568 ; ELF GNU Symbol Version Requirements
                    LOAD:0000000000000568                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_498, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000578                 Elf64_Vernaux <9691A75h, 0, 5, offset aGlibc225 - offset unk_498, 10h> ; "GLIBC_2.2.5"
                    LOAD:0000000000000588                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset unk_498, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000598                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_498, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005A8                 Elf64_Vernaux <69691B4h, 0, 2, offset aGlibc234_0 - offset unk_498, 0> ; "GLIBC_2.34"
                    LOAD:00000000000005B8 ; ELF RELA Relocation Table
                    LOAD:00000000000005B8                 Elf64_Rela <3DB0h, 8, 1280h> ; R_X86_64_RELATIVE +1280h
                    LOAD:00000000000005D0                 Elf64_Rela <3DB8h, 8, 1240h> ; R_X86_64_RELATIVE +1240h
                    LOAD:00000000000005E8                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000600                 Elf64_Rela <3FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000618                 Elf64_Rela <3FE0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000630                 Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000648                 Elf64_Rela <3FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000660                 Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000678 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000678                 Elf64_Rela <3FC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000690                 Elf64_Rela <3FD0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000690 LOAD            ends
                    LOAD:0000000000000690
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FB8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FC0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:000000000000104F ; } // starts at 1020
                    .plt:000000000000104F _plt            ends
                    .plt:000000000000104F
                    .plt.got:0000000000001050 ; ===========================================================================
                    .plt.got:0000000000001050
                    .plt.got:0000000000001050 ; Segment type: Pure code
                    .plt.got:0000000000001050 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001050 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001050                 assume cs:_plt_got
                    .plt.got:0000000000001050                 ;org 1050h
                    .plt.got:0000000000001050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001050 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000105B                 align 20h
                    .plt.got:000000000000105B ; } // starts at 1050
                    .plt.got:000000000000105B _plt_got        ends
                    .plt.got:000000000000105B
                    .plt.sec:0000000000001060 ; ===========================================================================
                    .plt.sec:0000000000001060
                    .plt.sec:0000000000001060 ; Segment type: Pure code
                    .plt.sec:0000000000001060 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001060 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001060                 assume cs:_plt_sec
                    .plt.sec:0000000000001060                 ;org 1060h
                    .plt.sec:0000000000001060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001060 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000106B                 align 10h
                    .plt.sec:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:000000000000107B                 align 20h
                    .plt.sec:000000000000107B ; } // starts at 1060
                    .plt.sec:000000000000107B _plt_sec        ends
                    .plt.sec:000000000000107B
                    .text:0000000000001080 ; ===========================================================================
                    .text:0000000000001080
                    .text:0000000000001080 ; Segment type: Pure code
                    .text:0000000000001080 ; Segment permissions: Read/Execute
                    .text:0000000000001080 _text           segment para public 'CODE' use64
                    .text:0000000000001080                 assume cs:_text
                    .text:0000000000001080                 ;org 1080h
                    .text:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001080
                    .text:0000000000001080 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001080
                    .text:0000000000001080
                    .text:0000000000001080 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001080                 public main
                    .text:0000000000001080 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001080
                    .text:0000000000001080 var_44          = byte ptr -44h
                    .text:0000000000001080 var_40          = qword ptr -40h
                    .text:0000000000001080 var_38          = qword ptr -38h
                    .text:0000000000001080 var_30          = qword ptr -30h
                    .text:0000000000001080 var_28          = qword ptr -28h
                    .text:0000000000001080 var_20          = qword ptr -20h
                    .text:0000000000001080
                    .text:0000000000001080 ; __unwind {
                    .text:0000000000001080                 endbr64
                    .text:0000000000001084                 push    r12
                    .text:0000000000001086                 mov     edx, 9
                    .text:000000000000108B                 mov     r9d, 1
                    .text:0000000000001091                 push    rbp
                    .text:0000000000001092                 push    rbx
                    .text:0000000000001093                 sub     rsp, 30h
                    .text:0000000000001097                 mov     rax, fs:28h
                    .text:00000000000010A0                 mov     [rsp+48h+var_20], rax
                    .text:00000000000010A5                 mov     rax, 100000009h
                    .text:00000000000010AF                 lea     r8, [rsp+48h+var_44]
                    .text:00000000000010B4                 mov     rcx, rsp
                    .text:00000000000010B7                 mov     [rsp+48h+var_28], 4
                    .text:00000000000010C0                 mov     [rsp], rax
                    .text:00000000000010C4                 mov     rax, 300000005h
                    .text:00000000000010CE                 mov     [rsp+48h+var_40], rax
                    .text:00000000000010D3                 mov     rax, 200000007h
                    .text:00000000000010DD                 mov     [rsp+48h+var_38], rax
                    .text:00000000000010E2                 mov     rax, 600000008h
                    .text:00000000000010EC                 mov     [rsp+48h+var_30], rax
                    .text:00000000000010F1                 nop     dword ptr [rax+00000000h]
                    .text:00000000000010F8
                    .text:00000000000010F8 loc_10F8:                               ; CODE XREF: main+B3↓j
                    .text:00000000000010F8                 mov     esi, [r8]
                    .text:00000000000010FB                 mov     rbp, rcx
                    .text:00000000000010FE                 mov     rax, r8
                    .text:0000000000001101                 jmp     short loc_110B
                    .text:0000000000001101 ; ---------------------------------------------------------------------------
                    .text:0000000000001103                 align 8
                    .text:0000000000001108
                    .text:0000000000001108 loc_1108:                               ; CODE XREF: main+9B↓j
                    .text:0000000000001108                 mov     edx, [rax-4]
                    .text:000000000000110B
                    .text:000000000000110B loc_110B:                               ; CODE XREF: main+81↑j
                    .text:000000000000110B                 mov     rdi, rax
                    .text:000000000000110E                 cmp     esi, edx
                    .text:0000000000001110                 jge     short loc_1120
                    .text:0000000000001112                 mov     [rax], edx
                    .text:0000000000001114                 sub     rax, 4
                    .text:0000000000001118                 cmp     rax, rcx
                    .text:000000000000111B                 jnz     short loc_1108
                    .text:000000000000111D                 mov     rdi, rcx
                    .text:0000000000001120
                    .text:0000000000001120 loc_1120:                               ; CODE XREF: main+90↑j
                    .text:0000000000001120                 add     r9, 1
                    .text:0000000000001124                 mov     [rdi], esi
                    .text:0000000000001126                 cmp     r9, 0Ah
                    .text:000000000000112A                 jz      short loc_1138
                    .text:000000000000112C                 mov     edx, [r8]
                    .text:000000000000112F                 add     r8, 4
                    .text:0000000000001133                 jmp     short loc_10F8
                    .text:0000000000001133 ; ---------------------------------------------------------------------------
                    .text:0000000000001135                 align 8
                    .text:0000000000001138
                    .text:0000000000001138 loc_1138:                               ; CODE XREF: main+AA↑j
                    .text:0000000000001138                 lea     rbx, [rcx+28h]
                    .text:000000000000113C                 lea     r12, unk_2004
                    .text:0000000000001143                 nop     dword ptr [rax+rax+00h]
                    .text:0000000000001148
                    .text:0000000000001148 loc_1148:                               ; CODE XREF: main+E1↓j
                    .text:0000000000001148                 mov     edx, [rbp+0]
                    .text:000000000000114B                 mov     rsi, r12
                    .text:000000000000114E                 mov     edi, 1
                    .text:0000000000001153                 xor     eax, eax
                    .text:0000000000001155                 add     rbp, 4
                    .text:0000000000001159                 call    ___printf_chk
                    .text:000000000000115E                 cmp     rbx, rbp
                    .text:0000000000001161                 jnz     short loc_1148
                    .text:0000000000001163                 xor     eax, eax
                    .text:0000000000001165                 lea     rsi, unk_2008
                    .text:000000000000116C                 mov     edi, 1
                    .text:0000000000001171                 call    ___printf_chk
                    .text:0000000000001176                 mov     rax, [rsp+48h+var_20]
                    .text:000000000000117B                 sub     rax, fs:28h
                    .text:0000000000001184                 jnz     short loc_1191
                    .text:0000000000001186                 add     rsp, 30h
                    .text:000000000000118A                 xor     eax, eax
                    .text:000000000000118C                 pop     rbx
                    .text:000000000000118D                 pop     rbp
                    .text:000000000000118E                 pop     r12
                    .text:0000000000001190                 retn
                    .text:0000000000001191 ; ---------------------------------------------------------------------------
                    .text:0000000000001191
                    .text:0000000000001191 loc_1191:                               ; CODE XREF: main+104↑j
                    .text:0000000000001191                 call    ___stack_chk_fail
                    .text:0000000000001191 ; } // starts at 1080
                    .text:0000000000001191 main            endp
                    .text:0000000000001191
                    .text:0000000000001191 ; ---------------------------------------------------------------------------
                    .text:0000000000001196                 align 20h
                    .text:00000000000011A0
                    .text:00000000000011A0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011A0
                    .text:00000000000011A0 ; Attributes: noreturn fuzzy-sp
                    .text:00000000000011A0
                    .text:00000000000011A0                 public _start
                    .text:00000000000011A0 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:00000000000011A0 ; __unwind {
                    .text:00000000000011A0                 endbr64
                    .text:00000000000011A4                 xor     ebp, ebp
                    .text:00000000000011A6                 mov     r9, rdx         ; rtld_fini
                    .text:00000000000011A9                 pop     rsi             ; argc
                    .text:00000000000011AA                 mov     rdx, rsp        ; ubp_av
                    .text:00000000000011AD                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:00000000000011B1                 push    rax
                    .text:00000000000011B2                 push    rsp             ; stack_end
                    .text:00000000000011B3                 xor     r8d, r8d        ; fini
                    .text:00000000000011B6                 xor     ecx, ecx        ; init
                    .text:00000000000011B8                 lea     rdi, main       ; main
                    .text:00000000000011BF                 call    cs:__libc_start_main_ptr
                    .text:00000000000011C5                 hlt
                    .text:00000000000011C5 ; } // starts at 11A0
                    .text:00000000000011C5 _start          endp
                    .text:00000000000011C5
                    .text:00000000000011C5 ; ---------------------------------------------------------------------------
                    .text:00000000000011C6                 align 10h
                    .text:00000000000011D0
                    .text:00000000000011D0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011D0
                    .text:00000000000011D0
                    .text:00000000000011D0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1267↓p
                    .text:00000000000011D0                 lea     rdi, __bss_start
                    .text:00000000000011D7                 lea     rax, __bss_start
                    .text:00000000000011DE                 cmp     rax, rdi
                    .text:00000000000011E1                 jz      short locret_11F8
                    .text:00000000000011E3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:00000000000011EA                 test    rax, rax
                    .text:00000000000011ED                 jz      short locret_11F8
                    .text:00000000000011EF                 jmp     rax
                    .text:00000000000011EF ; ---------------------------------------------------------------------------
                    .text:00000000000011F1                 align 8
                    .text:00000000000011F8
                    .text:00000000000011F8 locret_11F8:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:00000000000011F8                                         ; deregister_tm_clones+1D↑j
                    .text:00000000000011F8                 retn
                    .text:00000000000011F8 deregister_tm_clones endp
                    .text:00000000000011F8
                    .text:00000000000011F8 ; ---------------------------------------------------------------------------
                    .text:00000000000011F9                 align 20h
                    .text:0000000000001200
                    .text:0000000000001200 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001200
                    .text:0000000000001200
                    .text:0000000000001200 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:0000000000001200                 lea     rdi, __bss_start
                    .text:0000000000001207                 lea     rsi, __bss_start
                    .text:000000000000120E                 sub     rsi, rdi
                    .text:0000000000001211                 mov     rax, rsi
                    .text:0000000000001214                 shr     rsi, 3Fh
                    .text:0000000000001218                 sar     rax, 3
                    .text:000000000000121C                 add     rsi, rax
                    .text:000000000000121F                 sar     rsi, 1
                    .text:0000000000001222                 jz      short locret_1238
                    .text:0000000000001224                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:000000000000122B                 test    rax, rax
                    .text:000000000000122E                 jz      short locret_1238
                    .text:0000000000001230                 jmp     rax
                    .text:0000000000001230 ; ---------------------------------------------------------------------------
                    .text:0000000000001232                 align 8
                    .text:0000000000001238
                    .text:0000000000001238 locret_1238:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:0000000000001238                                         ; register_tm_clones+2E↑j
                    .text:0000000000001238                 retn
                    .text:0000000000001238 register_tm_clones endp
                    .text:0000000000001238
                    .text:0000000000001238 ; ---------------------------------------------------------------------------
                    .text:0000000000001239                 align 20h
                    .text:0000000000001240
                    .text:0000000000001240 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001240
                    .text:0000000000001240
                    .text:0000000000001240 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:0000000000001240                 endbr64
                    .text:0000000000001244                 cmp     cs:__bss_start, 0
                    .text:000000000000124B                 jnz     short locret_1278
                    .text:000000000000124D                 push    rbp
                    .text:000000000000124E                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001256                 mov     rbp, rsp
                    .text:0000000000001259                 jz      short loc_1267
                    .text:000000000000125B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001262                 call    __cxa_finalize
                    .text:0000000000001267
                    .text:0000000000001267 loc_1267:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001267                 call    deregister_tm_clones
                    .text:000000000000126C                 mov     cs:__bss_start, 1
                    .text:0000000000001273                 pop     rbp
                    .text:0000000000001274                 retn
                    .text:0000000000001274 ; ---------------------------------------------------------------------------
                    .text:0000000000001275                 align 8
                    .text:0000000000001278
                    .text:0000000000001278 locret_1278:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001278                 retn
                    .text:0000000000001278 __do_global_dtors_aux endp
                    .text:0000000000001278
                    .text:0000000000001278 ; ---------------------------------------------------------------------------
                    .text:0000000000001279                 align 20h
                    .text:0000000000001280
                    .text:0000000000001280 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001280
                    .text:0000000000001280
                    .text:0000000000001280 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001280                 endbr64
                    .text:0000000000001284                 jmp     register_tm_clones
                    .text:0000000000001284 frame_dummy     endp
                    .text:0000000000001284
                    .text:0000000000001284 _text           ends
                    .text:0000000000001284
                    LOAD:0000000000001289 ; ===========================================================================
                    LOAD:0000000000001289
                    LOAD:0000000000001289 ; Segment type: Pure code
                    LOAD:0000000000001289 ; Segment permissions: Read/Execute
                    LOAD:0000000000001289 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001289                 assume cs:LOAD
                    LOAD:0000000000001289                 ;org 1289h
                    LOAD:0000000000001289                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001289                 align 4
                    LOAD:0000000000001289 LOAD            ends
                    LOAD:0000000000001289
                    .fini:000000000000128C ; ===========================================================================
                    .fini:000000000000128C
                    .fini:000000000000128C ; Segment type: Pure code
                    .fini:000000000000128C ; Segment permissions: Read/Execute
                    .fini:000000000000128C _fini           segment dword public 'CODE' use64
                    .fini:000000000000128C                 assume cs:_fini
                    .fini:000000000000128C                 ;org 128Ch
                    .fini:000000000000128C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000128C
                    .fini:000000000000128C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000128C
                    .fini:000000000000128C
                    .fini:000000000000128C                 public _term_proc
                    .fini:000000000000128C _term_proc      proc near
                    .fini:000000000000128C                 endbr64                 ; _fini
                    .fini:0000000000001290                 sub     rsp, 8
                    .fini:0000000000001294                 add     rsp, 8
                    .fini:0000000000001298                 retn
                    .fini:0000000000001298 _term_proc      endp
                    .fini:0000000000001298
                    .fini:0000000000001298 _fini           ends
                    .fini:0000000000001298
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 unk_2004        db  25h ; %             ; DATA XREF: main+BC↑o
                    .rodata:0000000000002005                 db  64h ; d
                    .rodata:0000000000002006                 db  20h
                    .rodata:0000000000002007                 db    0
                    .rodata:0000000000002008 unk_2008        db  0Ah                 ; DATA XREF: main+E5↑o
                    .rodata:0000000000002009                 db    0
                    .rodata:0000000000002009 _rodata         ends
                    .rodata:0000000000002009
                    LOAD:000000000000200A ; ===========================================================================
                    LOAD:000000000000200A
                    LOAD:000000000000200A ; Segment type: Pure data
                    LOAD:000000000000200A ; Segment permissions: Read
                    LOAD:000000000000200A LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000200A                 assume cs:LOAD
                    LOAD:000000000000200A                 ;org 200Ah
                    LOAD:000000000000200A                 align 4
                    LOAD:000000000000200A LOAD            ends
                    LOAD:000000000000200A
                    .eh_frame_hdr:000000000000200C ; ===========================================================================
                    .eh_frame_hdr:000000000000200C
                    .eh_frame_hdr:000000000000200C ; Segment type: Pure data
                    .eh_frame_hdr:000000000000200C ; Segment permissions: Read
                    .eh_frame_hdr:000000000000200C _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:000000000000200C                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:000000000000200C                 ;org 200Ch
                    .eh_frame_hdr:000000000000200C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:000000000000200D                 db  1Bh
                    .eh_frame_hdr:000000000000200E                 db    3
                    .eh_frame_hdr:000000000000200F                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002010                 db  30h ; 0
                    .eh_frame_hdr:0000000000002011                 db    0
                    .eh_frame_hdr:0000000000002012                 db    0
                    .eh_frame_hdr:0000000000002013                 db    0
                    .eh_frame_hdr:0000000000002014                 db    5
                    .eh_frame_hdr:0000000000002015                 db    0
                    .eh_frame_hdr:0000000000002016                 db    0
                    .eh_frame_hdr:0000000000002017                 db    0
                    .eh_frame_hdr:0000000000002018                 db  14h
                    .eh_frame_hdr:0000000000002019                 db 0F0h
                    .eh_frame_hdr:000000000000201A                 db 0FFh
                    .eh_frame_hdr:000000000000201B                 db 0FFh
                    .eh_frame_hdr:000000000000201C                 db  64h ; d
                    .eh_frame_hdr:000000000000201D                 db    0
                    .eh_frame_hdr:000000000000201E                 db    0
                    .eh_frame_hdr:000000000000201F                 db    0
                    .eh_frame_hdr:0000000000002020                 db  44h ; D
                    .eh_frame_hdr:0000000000002021                 db 0F0h
                    .eh_frame_hdr:0000000000002022                 db 0FFh
                    .eh_frame_hdr:0000000000002023                 db 0FFh
                    .eh_frame_hdr:0000000000002024                 db  8Ch
                    .eh_frame_hdr:0000000000002025                 db    0
                    .eh_frame_hdr:0000000000002026                 db    0
                    .eh_frame_hdr:0000000000002027                 db    0
                    .eh_frame_hdr:0000000000002028                 db  54h ; T
                    .eh_frame_hdr:0000000000002029                 db 0F0h
                    .eh_frame_hdr:000000000000202A                 db 0FFh
                    .eh_frame_hdr:000000000000202B                 db 0FFh
                    .eh_frame_hdr:000000000000202C                 db 0A4h
                    .eh_frame_hdr:000000000000202D                 db    0
                    .eh_frame_hdr:000000000000202E                 db    0
                    .eh_frame_hdr:000000000000202F                 db    0
                    .eh_frame_hdr:0000000000002030                 db  74h ; t
                    .eh_frame_hdr:0000000000002031                 db 0F0h
                    .eh_frame_hdr:0000000000002032                 db 0FFh
                    .eh_frame_hdr:0000000000002033                 db 0FFh
                    .eh_frame_hdr:0000000000002034                 db 0BCh
                    .eh_frame_hdr:0000000000002035                 db    0
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db  94h
                    .eh_frame_hdr:0000000000002039                 db 0F1h
                    .eh_frame_hdr:000000000000203A                 db 0FFh
                    .eh_frame_hdr:000000000000203B                 db 0FFh
                    .eh_frame_hdr:000000000000203C                 db  4Ch ; L
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:000000000000203F _eh_frame_hdr   ends
                    .eh_frame_hdr:000000000000203F
                    .eh_frame:0000000000002040 ; ===========================================================================
                    .eh_frame:0000000000002040
                    .eh_frame:0000000000002040 ; Segment type: Pure data
                    .eh_frame:0000000000002040 ; Segment permissions: Read
                    .eh_frame:0000000000002040 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002040                 assume cs:_eh_frame
                    .eh_frame:0000000000002040                 ;org 2040h
                    .eh_frame:0000000000002040                 db  14h
                    .eh_frame:0000000000002041                 db    0
                    .eh_frame:0000000000002042                 db    0
                    .eh_frame:0000000000002043                 db    0
                    .eh_frame:0000000000002044                 db    0
                    .eh_frame:0000000000002045                 db    0
                    .eh_frame:0000000000002046                 db    0
                    .eh_frame:0000000000002047                 db    0
                    .eh_frame:0000000000002048                 db    1
                    .eh_frame:0000000000002049                 db  7Ah ; z
                    .eh_frame:000000000000204A                 db  52h ; R
                    .eh_frame:000000000000204B                 db    0
                    .eh_frame:000000000000204C                 db    1
                    .eh_frame:000000000000204D                 db  78h ; x
                    .eh_frame:000000000000204E                 db  10h
                    .eh_frame:000000000000204F                 db    1
                    .eh_frame:0000000000002050                 db  1Bh
                    .eh_frame:0000000000002051                 db  0Ch
                    .eh_frame:0000000000002052                 db    7
                    .eh_frame:0000000000002053                 db    8
                    .eh_frame:0000000000002054                 db  90h
                    .eh_frame:0000000000002055                 db    1
                    .eh_frame:0000000000002056                 db    0
                    .eh_frame:0000000000002057                 db    0
                    .eh_frame:0000000000002058                 db  14h
                    .eh_frame:0000000000002059                 db    0
                    .eh_frame:000000000000205A                 db    0
                    .eh_frame:000000000000205B                 db    0
                    .eh_frame:000000000000205C                 db  1Ch
                    .eh_frame:000000000000205D                 db    0
                    .eh_frame:000000000000205E                 db    0
                    .eh_frame:000000000000205F                 db    0
                    .eh_frame:0000000000002060                 db  40h ; @
                    .eh_frame:0000000000002061                 db 0F1h
                    .eh_frame:0000000000002062                 db 0FFh
                    .eh_frame:0000000000002063                 db 0FFh
                    .eh_frame:0000000000002064                 db  26h ; &
                    .eh_frame:0000000000002065                 db    0
                    .eh_frame:0000000000002066                 db    0
                    .eh_frame:0000000000002067                 db    0
                    .eh_frame:0000000000002068                 db    0
                    .eh_frame:0000000000002069                 db  44h ; D
                    .eh_frame:000000000000206A                 db    7
                    .eh_frame:000000000000206B                 db  10h
                    .eh_frame:000000000000206C                 db    0
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db  24h ; $
                    .eh_frame:0000000000002071                 db    0
                    .eh_frame:0000000000002072                 db    0
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db  34h ; 4
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db 0A8h
                    .eh_frame:0000000000002079                 db 0EFh
                    .eh_frame:000000000000207A                 db 0FFh
                    .eh_frame:000000000000207B                 db 0FFh
                    .eh_frame:000000000000207C                 db  30h ; 0
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db    0
                    .eh_frame:0000000000002081                 db  0Eh
                    .eh_frame:0000000000002082                 db  10h
                    .eh_frame:0000000000002083                 db  46h ; F
                    .eh_frame:0000000000002084                 db  0Eh
                    .eh_frame:0000000000002085                 db  18h
                    .eh_frame:0000000000002086                 db  4Ah ; J
                    .eh_frame:0000000000002087                 db  0Fh
                    .eh_frame:0000000000002088                 db  0Bh
                    .eh_frame:0000000000002089                 db  77h ; w
                    .eh_frame:000000000000208A                 db    8
                    .eh_frame:000000000000208B                 db  80h
                    .eh_frame:000000000000208C                 db    0
                    .eh_frame:000000000000208D                 db  3Fh ; ?
                    .eh_frame:000000000000208E                 db  1Ah
                    .eh_frame:000000000000208F                 db  3Ah ; :
                    .eh_frame:0000000000002090                 db  2Ah ; *
                    .eh_frame:0000000000002091                 db  33h ; 3
                    .eh_frame:0000000000002092                 db  24h ; $
                    .eh_frame:0000000000002093                 db  22h ; "
                    .eh_frame:0000000000002094                 db    0
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db  14h
                    .eh_frame:0000000000002099                 db    0
                    .eh_frame:000000000000209A                 db    0
                    .eh_frame:000000000000209B                 db    0
                    .eh_frame:000000000000209C                 db  5Ch ; \
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db 0B0h
                    .eh_frame:00000000000020A1                 db 0EFh
                    .eh_frame:00000000000020A2                 db 0FFh
                    .eh_frame:00000000000020A3                 db 0FFh
                    .eh_frame:00000000000020A4                 db  10h
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db    0
                    .eh_frame:00000000000020A9                 db    0
                    .eh_frame:00000000000020AA                 db    0
                    .eh_frame:00000000000020AB                 db    0
                    .eh_frame:00000000000020AC                 db    0
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db  14h
                    .eh_frame:00000000000020B1                 db    0
                    .eh_frame:00000000000020B2                 db    0
                    .eh_frame:00000000000020B3                 db    0
                    .eh_frame:00000000000020B4                 db  74h ; t
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db 0A8h
                    .eh_frame:00000000000020B9                 db 0EFh
                    .eh_frame:00000000000020BA                 db 0FFh
                    .eh_frame:00000000000020BB                 db 0FFh
                    .eh_frame:00000000000020BC                 db  20h
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db    0
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db    0
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  30h ; 0
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db  8Ch
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db 0B0h
                    .eh_frame:00000000000020D1                 db 0EFh
                    .eh_frame:00000000000020D2                 db 0FFh
                    .eh_frame:00000000000020D3                 db 0FFh
                    .eh_frame:00000000000020D4                 db  16h
                    .eh_frame:00000000000020D5                 db    1
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db    0
                    .eh_frame:00000000000020D9                 db  46h ; F
                    .eh_frame:00000000000020DA                 db  0Eh
                    .eh_frame:00000000000020DB                 db  10h
                    .eh_frame:00000000000020DC                 db  8Ch
                    .eh_frame:00000000000020DD                 db    2
                    .eh_frame:00000000000020DE                 db  4Ch ; L
                    .eh_frame:00000000000020DF                 db  0Eh
                    .eh_frame:00000000000020E0                 db  18h
                    .eh_frame:00000000000020E1                 db  86h
                    .eh_frame:00000000000020E2                 db    3
                    .eh_frame:00000000000020E3                 db  41h ; A
                    .eh_frame:00000000000020E4                 db  0Eh
                    .eh_frame:00000000000020E5                 db  20h
                    .eh_frame:00000000000020E6                 db  83h
                    .eh_frame:00000000000020E7                 db    4
                    .eh_frame:00000000000020E8                 db  44h ; D
                    .eh_frame:00000000000020E9                 db  0Eh
                    .eh_frame:00000000000020EA                 db  50h ; P
                    .eh_frame:00000000000020EB                 db    2
                    .eh_frame:00000000000020EC                 db 0F3h
                    .eh_frame:00000000000020ED                 db  0Ah
                    .eh_frame:00000000000020EE                 db  0Eh
                    .eh_frame:00000000000020EF                 db  20h
                    .eh_frame:00000000000020F0                 db  43h ; C
                    .eh_frame:00000000000020F1                 db  0Eh
                    .eh_frame:00000000000020F2                 db  18h
                    .eh_frame:00000000000020F3                 db  41h ; A
                    .eh_frame:00000000000020F4                 db  0Eh
                    .eh_frame:00000000000020F5                 db  10h
                    .eh_frame:00000000000020F6                 db  42h ; B
                    .eh_frame:00000000000020F7                 db  0Eh
                    .eh_frame:00000000000020F8                 db    8
                    .eh_frame:00000000000020F9                 db  41h ; A
                    .eh_frame:00000000000020FA                 db  0Bh
                    .eh_frame:00000000000020FB                 db    0
                    .eh_frame:00000000000020FC __FRAME_END__   db    0
                    .eh_frame:00000000000020FD                 db    0
                    .eh_frame:00000000000020FE                 db    0
                    .eh_frame:00000000000020FF                 db    0
                    .eh_frame:00000000000020FF _eh_frame       ends
                    .eh_frame:00000000000020FF
                    .init_array:0000000000003DB0 ; ELF Initialization Function Table
                    .init_array:0000000000003DB0 ; ===========================================================================
                    .init_array:0000000000003DB0
                    .init_array:0000000000003DB0 ; Segment type: Pure data
                    .init_array:0000000000003DB0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DB0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DB0                 assume cs:_init_array
                    .init_array:0000000000003DB0                 ;org 3DB0h
                    .init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DB0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DB0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DB0 _init_array     ends
                    .init_array:0000000000003DB0
                    .fini_array:0000000000003DB8 ; ELF Termination Function Table
                    .fini_array:0000000000003DB8 ; ===========================================================================
                    .fini_array:0000000000003DB8
                    .fini_array:0000000000003DB8 ; Segment type: Pure data
                    .fini_array:0000000000003DB8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DB8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DB8                 assume cs:_fini_array
                    .fini_array:0000000000003DB8                 ;org 3DB8h
                    .fini_array:0000000000003DB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DB8 _fini_array     ends
                    .fini_array:0000000000003DB8
                    LOAD:0000000000003DC0 ; ELF Dynamic Information
                    LOAD:0000000000003DC0 ; ===========================================================================
                    LOAD:0000000000003DC0
                    LOAD:0000000000003DC0 ; Segment type: Pure data
                    LOAD:0000000000003DC0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DC0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DC0                 assume cs:LOAD
                    LOAD:0000000000003DC0                 ;org 3DC0h
                    LOAD:0000000000003DC0 _DYNAMIC        Elf64_Dyn <1, 40h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DC0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DC0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DE0                 Elf64_Dyn <0Dh, 128Ch>  ; DT_FINI
                    LOAD:0000000000003DF0                 Elf64_Dyn <19h, 3DB0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ah, 3DB8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E20                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E30                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E40                 Elf64_Dyn <5, 498h>     ; DT_STRTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E60                 Elf64_Dyn <0Ah, 0BCh>   ; DT_STRSZ
                    LOAD:0000000000003E70                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E80                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E90                 Elf64_Dyn <3, 3FB0h>    ; DT_PLTGOT
                    LOAD:0000000000003EA0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EB0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <17h, 678h>   ; DT_JMPREL
                    LOAD:0000000000003ED0                 Elf64_Dyn <7, 5B8h>     ; DT_RELA
                    LOAD:0000000000003EE0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EF0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003F00                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFEh, 568h> ; DT_VERNEED
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF0h, 554h> ; DT_VERSYM
                    LOAD:0000000000003F50                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F60                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003FA0                 db    0
                    LOAD:0000000000003FA1                 db    0
                    LOAD:0000000000003FA2                 db    0
                    LOAD:0000000000003FA3                 db    0
                    LOAD:0000000000003FA4                 db    0
                    LOAD:0000000000003FA5                 db    0
                    LOAD:0000000000003FA6                 db    0
                    LOAD:0000000000003FA7                 db    0
                    LOAD:0000000000003FA8                 db    0
                    LOAD:0000000000003FA9                 db    0
                    LOAD:0000000000003FAA                 db    0
                    LOAD:0000000000003FAB                 db    0
                    LOAD:0000000000003FAC                 db    0
                    LOAD:0000000000003FAD                 db    0
                    LOAD:0000000000003FAE                 db    0
                    LOAD:0000000000003FAF                 db    0
                    LOAD:0000000000003FAF LOAD            ends
                    LOAD:0000000000003FAF
                    .got:0000000000003FB0 ; ===========================================================================
                    .got:0000000000003FB0
                    .got:0000000000003FB0 ; Segment type: Pure data
                    .got:0000000000003FB0 ; Segment permissions: Read/Write
                    .got:0000000000003FB0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FB0                 assume cs:_got
                    .got:0000000000003FB0                 ;org 3FB0h
                    .got:0000000000003FB0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FB8 qword_3FB8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FC0 qword_3FC0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC8                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004020                 extrn __libc_start_main:near
                    extern:0000000000004020                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004020                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004028                 extrn __stack_chk_fail:near
                    extern:0000000000004028                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004028                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004030                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004038 ; int __cxa_finalize(void *)
                    extern:0000000000004038                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004038                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004040                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004040                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004048                 extrn __gmon_start__:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004048                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004050                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004050
                    extern:0000000000004050
                    extern:0000000000004050                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x1080
                    ; Intent: insertion sort of 10 signed 32-bit integers and print them (confidence=0.95). Evidence: inner shifting loop with jge-like compare; final loop calling __printf_chk with "%d ".
                    ; Preconditions: none
                    ; Postconditions: prints the sorted sequence followed by a newline.
                    
                    @.str = private unnamed_addr constant [4 x i8] c"%d \00"
                    @.str.nl = private unnamed_addr constant [2 x i8] c"\0A\00"
                    
                    ; Only the needed extern declarations:
                    ; declare i32 @printf(i8*, ...)
                    ; declare i32 @putchar(i32)
                    declare i32 @__printf_chk(i32, i8*, ...)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    ; local array: 10 i32s initialized to {9,1,5,3,7,2,8,6,4,0}
                    %arr = alloca [10 x i32], align 16
                    %base = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
                    store i32 9, i32* %base, align 4
                    %p1 = getelementptr inbounds i32, i32* %base, i64 1
                    store i32 1, i32* %p1, align 4
                    %p2 = getelementptr inbounds i32, i32* %base, i64 2
                    store i32 5, i32* %p2, align 4
                    %p3 = getelementptr inbounds i32, i32* %base, i64 3
                    store i32 3, i32* %p3, align 4
                    %p4 = getelementptr inbounds i32, i32* %base, i64 4
                    store i32 7, i32* %p4, align 4
                    %p5 = getelementptr inbounds i32, i32* %base, i64 5
                    store i32 2, i32* %p5, align 4
                    %p6 = getelementptr inbounds i32, i32* %base, i64 6
                    store i32 8, i32* %p6, align 4
                    %p7 = getelementptr inbounds i32, i32* %base, i64 7
                    store i32 6, i32* %p7, align 4
                    %p8 = getelementptr inbounds i32, i32* %base, i64 8
                    store i32 4, i32* %p8, align 4
                    %p9 = getelementptr inbounds i32, i32* %base, i64 9
                    store i32 0, i32* %p9, align 4
                    br label %outer
                    
                    outer: ; i in [1..9]
                    %i = phi i64 [ 1, %entry ], [ %i.next, %inner.exit ]
                    %done = icmp sgt i64 %i, 9
                    br i1 %done, label %print.init, label %outer.body
                    
                    outer.body:
                    %iptr = getelementptr inbounds i32, i32* %base, i64 %i
                    %key = load i32, i32* %iptr, align 4
                    br label %inner.cond
                    
                    inner.cond:
                    %j = phi i64 [ %i, %outer.body ], [ %j.dec, %inner.shift ]
                    %j.gt0 = icmp sgt i64 %j, 0
                    br i1 %j.gt0, label %inner.cmp, label %inner.exit
                    
                    inner.cmp:
                    %jm1 = add i64 %j, -1
                    %prev.ptr = getelementptr inbounds i32, i32* %base, i64 %jm1
                    %prev = load i32, i32* %prev.ptr, align 4
                    %ge = icmp sge i32 %key, %prev
                    br i1 %ge, label %inner.exit, label %inner.shift
                    
                    inner.shift:
                    %j.ptr = getelementptr inbounds i32, i32* %base, i64 %j
                    store i32 %prev, i32* %j.ptr, align 4
                    %j.dec = add i64 %j, -1
                    br label %inner.cond
                    
                    inner.exit:
                    %j.fin = phi i64 [ %j, %inner.cond ], [ %j, %inner.cmp ]
                    %ins.ptr = getelementptr inbounds i32, i32* %base, i64 %j.fin
                    store i32 %key, i32* %ins.ptr, align 4
                    %i.next = add i64 %i, 1
                    br label %outer
                    
                    print.init:
                    br label %print.loop
                    
                    print.loop:
                    %k = phi i64 [ 0, %print.init ], [ %k.next, %print.loop.body ]
                    %end = icmp eq i64 %k, 10
                    br i1 %end, label %print.done, label %print.loop.body
                    
                    print.loop.body:
                    %elem.ptr = getelementptr inbounds i32, i32* %base, i64 %k
                    %elem = load i32, i32* %elem.ptr, align 4
                    %fmt = getelementptr inbounds [4 x i8], [4 x i8]* @.str, i64 0, i64 0
                    %call = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt, i32 %elem)
                    %k.next = add i64 %k, 1
                    br label %print.loop
                    
                    print.done:
                    %nl = getelementptr inbounds [2 x i8], [2 x i8]* @.str.nl, i64 0, i64 0
                    %call2 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nl)
                    ret i32 0
                    }
                    ```
                    
        - mergesort
            - ida 함수 리스트
                
                ```notion
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "mergesort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1270",
                      "end": "0x1296",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x12a0",
                      "end": "0x12c9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x12d0",
                      "end": "0x1309",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1310",
                      "end": "0x1349",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1350",
                      "end": "0x1359",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4058",
                      "end": "0x4060",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".malloc",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10c0",
                      "end": "0x1268",
                      "size": 424,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x135c",
                      "end": "0x1369",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "malloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 25
                user? candidates: 8
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : D80DDDC1F08128F76058002AB6FE6DBCC92E603D2FED2490FBA1B663F00F3896
                    LOAD:0000000000000000 ; Input MD5    : 5B6BC1D035940BBC4F5C2AE9022DF24E
                    LOAD:0000000000000000 ; Input CRC32  : 8215A285
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\mergesort
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'mergesort.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 3728h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 718h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 718h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 369h                 ; Size in file image
                    LOAD:0000000000000110                 dq 369h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 118h                 ; Size in file image
                    LOAD:0000000000000148                 dq 118h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DA0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000178                 dq 270h                 ; Size in file image
                    LOAD:0000000000000180                 dq 278h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DB0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DB0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 200Ch                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 200Ch                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DA0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000300                 dq 260h                 ; Size in file image
                    LOAD:0000000000000308                 dq 260h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 0Ch, 25h, 6Eh, 1Ah, 2Ch, 18h, 3Ch, 93h, 0CEh, 61h, 8Ch ; Desc
                    LOAD:0000000000000383                 db 0C8h, 0F6h, 48h, 69h, 47h, 0E7h, 3Dh, 0A0h, 0CBh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 9
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 9, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4C8, 12h, 0, 0, offset dword_0, \ ; "free"
                    LOAD:00000000000003F0                            0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4C8, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4C8, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aGmonStart - offset unk_4C8, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aMalloc - offset unk_4C8, 12h, 0, 0, offset dword_0,\ ; "malloc"
                    LOAD:0000000000000468                            0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aPrintfChk - offset unk_4C8, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498                 Elf64_Sym <offset aItmRegistertmc - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000498                            offset dword_0, 0>
                    LOAD:00000000000004B0                 Elf64_Sym <offset aCxaFinalize - offset unk_4C8, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:00000000000004B0                            offset dword_0, 0>
                    LOAD:00000000000004C8 ; ELF String Table
                    LOAD:00000000000004C8 unk_4C8         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C8                                         ; LOAD:0000000000000408↑o ...
                    LOAD:00000000000004C9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004B0↑o
                    LOAD:00000000000004D8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004E5 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:00000000000004EC aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004EC                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:00000000000004FE aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000503 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:0000000000000514 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000051E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000005B8↓o
                    LOAD:000000000000052A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000005C8↓o
                    LOAD:0000000000000534 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005D8↓o
                    LOAD:000000000000053F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000005E8↓o
                    LOAD:000000000000054B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000054B                                         ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:0000000000000567 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:0000000000000576 aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:0000000000000576                                         ; DATA XREF: LOAD:0000000000000498↑o
                    LOAD:0000000000000590 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000590                 dw 0
                    LOAD:0000000000000592                 dw 2                    ; free@@GLIBC_2.2.5
                    LOAD:0000000000000594                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000596                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:0000000000000598                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000059A                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000059C                 dw 2                    ; malloc@@GLIBC_2.2.5
                    LOAD:000000000000059E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:00000000000005A0                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:00000000000005A2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:00000000000005A4                 dw 0
                    LOAD:00000000000005A6                 dw 0
                    LOAD:00000000000005A8 ; ELF GNU Symbol Version Requirements
                    LOAD:00000000000005A8                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_4C8, 10h, 0> ; "libc.so.6"
                    LOAD:00000000000005B8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4C8, 10h> ; "GLIBC_2.3.4"
                    LOAD:00000000000005C8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4C8, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005D8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4C8, \ ; "GLIBC_2.34"
                    LOAD:00000000000005D8                                10h>
                    LOAD:00000000000005E8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4C8, 0> ; "GLIBC_2.2.5"
                    LOAD:00000000000005F8 ; ELF RELA Relocation Table
                    LOAD:00000000000005F8                 Elf64_Rela <3DA0h, 8, 1350h> ; R_X86_64_RELATIVE +1350h
                    LOAD:0000000000000610                 Elf64_Rela <3DA8h, 8, 1310h> ; R_X86_64_RELATIVE +1310h
                    LOAD:0000000000000628                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000640                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000658                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000670                 Elf64_Rela <3FE8h, 500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000688                 Elf64_Rela <3FF0h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:00000000000006A0                 Elf64_Rela <3FF8h, 900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:00000000000006B8 ; ELF JMPREL Relocation Table
                    LOAD:00000000000006B8                 Elf64_Rela <3FB8h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                    LOAD:00000000000006D0                 Elf64_Rela <3FC0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:00000000000006E8                 Elf64_Rela <3FC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT malloc
                    LOAD:0000000000000700                 Elf64_Rela <3FD0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000700 LOAD            ends
                    LOAD:0000000000000700
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j ...
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FA8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FB0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
                    .plt:000000000000105F                 align 20h
                    .plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
                    .plt:000000000000106F                 align 10h
                    .plt:000000000000106F ; } // starts at 1020
                    .plt:000000000000106F _plt            ends
                    .plt:000000000000106F
                    .plt.got:0000000000001070 ; ===========================================================================
                    .plt.got:0000000000001070
                    .plt.got:0000000000001070 ; Segment type: Pure code
                    .plt.got:0000000000001070 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001070 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001070                 assume cs:_plt_got
                    .plt.got:0000000000001070                 ;org 1070h
                    .plt.got:0000000000001070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000107B                 align 20h
                    .plt.got:000000000000107B ; } // starts at 1070
                    .plt.got:000000000000107B _plt_got        ends
                    .plt.got:000000000000107B
                    .plt.sec:0000000000001080 ; ===========================================================================
                    .plt.sec:0000000000001080
                    .plt.sec:0000000000001080 ; Segment type: Pure code
                    .plt.sec:0000000000001080 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001080 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001080                 assume cs:_plt_sec
                    .plt.sec:0000000000001080                 ;org 1080h
                    .plt.sec:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001080 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
                    .plt.sec:000000000000108B                 align 10h
                    .plt.sec:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000109B                 align 20h
                    .plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
                    .plt.sec:00000000000010AB                 align 10h
                    .plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:00000000000010BB                 align 20h
                    .plt.sec:00000000000010BB ; } // starts at 1080
                    .plt.sec:00000000000010BB _plt_sec        ends
                    .plt.sec:00000000000010BB
                    .text:00000000000010C0 ; ===========================================================================
                    .text:00000000000010C0
                    .text:00000000000010C0 ; Segment type: Pure code
                    .text:00000000000010C0 ; Segment permissions: Read/Execute
                    .text:00000000000010C0 _text           segment para public 'CODE' use64
                    .text:00000000000010C0                 assume cs:_text
                    .text:00000000000010C0                 ;org 10C0h
                    .text:00000000000010C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:00000000000010C0
                    .text:00000000000010C0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000010C0
                    .text:00000000000010C0
                    .text:00000000000010C0 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:00000000000010C0                 public main
                    .text:00000000000010C0 main            proc near               ; DATA XREF: _start+18↓o
                    .text:00000000000010C0
                    .text:00000000000010C0 var_68          = qword ptr -68h
                    .text:00000000000010C0 var_60          = qword ptr -60h
                    .text:00000000000010C0 var_58          = qword ptr -58h
                    .text:00000000000010C0 var_50          = qword ptr -50h
                    .text:00000000000010C0 var_48          = qword ptr -48h
                    .text:00000000000010C0 var_40          = qword ptr -40h
                    .text:00000000000010C0
                    .text:00000000000010C0 ; __unwind {
                    .text:00000000000010C0                 endbr64
                    .text:00000000000010C4                 push    r15
                    .text:00000000000010C6                 mov     edi, 28h ; '('  ; size
                    .text:00000000000010CB                 push    r14
                    .text:00000000000010CD                 push    r13
                    .text:00000000000010CF                 push    r12
                    .text:00000000000010D1                 push    rbp
                    .text:00000000000010D2                 push    rbx
                    .text:00000000000010D3                 sub     rsp, 38h
                    .text:00000000000010D7                 mov     rax, fs:28h
                    .text:00000000000010E0                 mov     [rsp+68h+var_40], rax
                    .text:00000000000010E5                 mov     rax, 100000009h
                    .text:00000000000010EF                 mov     [rsp+68h+var_48], 4
                    .text:00000000000010F8                 mov     [rsp+68h+var_68], rax
                    .text:00000000000010FC                 mov     rax, 300000005h
                    .text:0000000000001106                 mov     [rsp+68h+var_60], rax
                    .text:000000000000110B                 mov     rax, 200000007h
                    .text:0000000000001115                 mov     [rsp+68h+var_58], rax
                    .text:000000000000111A                 mov     rax, 600000008h
                    .text:0000000000001124                 mov     [rsp+68h+var_50], rax
                    .text:0000000000001129                 call    _malloc
                    .text:000000000000112E                 test    rax, rax
                    .text:0000000000001131                 jz      loc_125E
                    .text:0000000000001137                 mov     rbx, rsp
                    .text:000000000000113A                 mov     rbp, rax
                    .text:000000000000113D                 mov     r12, rax
                    .text:0000000000001140                 mov     r14d, 4
                    .text:0000000000001146                 mov     r9, rbx
                    .text:0000000000001149                 mov     r13d, 1
                    .text:000000000000114F                 nop
                    .text:0000000000001150
                    .text:0000000000001150 loc_1150:                               ; CODE XREF: main+122↓j
                    .text:0000000000001150                 xor     esi, esi
                    .text:0000000000001152                 nop     word ptr [rax+rax+00h]
                    .text:0000000000001158
                    .text:0000000000001158 loc_1158:                               ; CODE XREF: main+10E↓j
                    .text:0000000000001158                 lea     rax, [rsi+r13]
                    .text:000000000000115C                 mov     r8d, 0Ah
                    .text:0000000000001162                 mov     r10d, 0Ah
                    .text:0000000000001168                 mov     rcx, rsi
                    .text:000000000000116B                 cmp     rax, r8
                    .text:000000000000116E                 lea     rsi, [rax+r13]
                    .text:0000000000001172                 cmovbe  r8, rax
                    .text:0000000000001176                 cmp     rsi, r10
                    .text:0000000000001179                 cmovbe  r10, rsi
                    .text:000000000000117D                 cmp     r10, rcx
                    .text:0000000000001180                 jbe     short loc_11CA
                    .text:0000000000001182                 lea     rax, [r12+rcx*4]
                    .text:0000000000001186                 lea     r15, [r12+r10*4]
                    .text:000000000000118A                 mov     rdx, r8
                    .text:000000000000118D                 jmp     short loc_11B2
                    .text:000000000000118D ; ---------------------------------------------------------------------------
                    .text:000000000000118F                 align 10h
                    .text:0000000000001190
                    .text:0000000000001190 loc_1190:                               ; CODE XREF: main+F5↓j
                    .text:0000000000001190                 mov     r11d, [r9+rcx*4]
                    .text:0000000000001194                 cmp     r10, rdx
                    .text:0000000000001197                 jbe     short loc_11A2
                    .text:0000000000001199                 mov     edi, [r9+rdx*4]
                    .text:000000000000119D                 cmp     edi, r11d
                    .text:00000000000011A0                 jl      short loc_11BB
                    .text:00000000000011A2
                    .text:00000000000011A2 loc_11A2:                               ; CODE XREF: main+D7↑j
                    .text:00000000000011A2                 mov     [rax], r11d
                    .text:00000000000011A5                 add     rax, 4
                    .text:00000000000011A9                 add     rcx, 1
                    .text:00000000000011AD                 cmp     rax, r15
                    .text:00000000000011B0                 jz      short loc_11CA
                    .text:00000000000011B2
                    .text:00000000000011B2 loc_11B2:                               ; CODE XREF: main+CD↑j
                    .text:00000000000011B2                                         ; main+108↓j
                    .text:00000000000011B2                 cmp     r8, rcx
                    .text:00000000000011B5                 ja      short loc_1190
                    .text:00000000000011B7                 mov     edi, [r9+rdx*4]
                    .text:00000000000011BB
                    .text:00000000000011BB loc_11BB:                               ; CODE XREF: main+E0↑j
                    .text:00000000000011BB                 mov     [rax], edi
                    .text:00000000000011BD                 add     rax, 4
                    .text:00000000000011C1                 add     rdx, 1
                    .text:00000000000011C5                 cmp     rax, r15
                    .text:00000000000011C8                 jnz     short loc_11B2
                    .text:00000000000011CA
                    .text:00000000000011CA loc_11CA:                               ; CODE XREF: main+C0↑j
                    .text:00000000000011CA                                         ; main+F0↑j
                    .text:00000000000011CA                 cmp     rsi, 9
                    .text:00000000000011CE                 jbe     short loc_1158
                    .text:00000000000011D0                 add     r13, r13
                    .text:00000000000011D3                 sub     r14d, 1
                    .text:00000000000011D7                 jz      short loc_11E7
                    .text:00000000000011D9                 mov     rax, r9
                    .text:00000000000011DC                 mov     r9, r12
                    .text:00000000000011DF                 mov     r12, rax
                    .text:00000000000011E2                 jmp     loc_1150
                    .text:00000000000011E7 ; ---------------------------------------------------------------------------
                    .text:00000000000011E7
                    .text:00000000000011E7 loc_11E7:                               ; CODE XREF: main+117↑j
                    .text:00000000000011E7                 cmp     r12, rbx
                    .text:00000000000011EA                 jz      short loc_11F9
                    .text:00000000000011EC                 mov     ecx, 0Ah
                    .text:00000000000011F1                 mov     rdi, rbx
                    .text:00000000000011F4                 mov     rsi, r12
                    .text:00000000000011F7                 rep movsd
                    .text:00000000000011F9
                    .text:00000000000011F9 loc_11F9:                               ; CODE XREF: main+12A↑j
                    .text:00000000000011F9                 mov     rdi, rbp        ; ptr
                    .text:00000000000011FC                 call    _free
                    .text:0000000000001201
                    .text:0000000000001201 loc_1201:                               ; CODE XREF: main+1A1↓j
                    .text:0000000000001201                 lea     r12, [rsp+68h+var_40]
                    .text:0000000000001206                 lea     rbp, unk_2004
                    .text:000000000000120D                 nop     dword ptr [rax]
                    .text:0000000000001210
                    .text:0000000000001210 loc_1210:                               ; CODE XREF: main+168↓j
                    .text:0000000000001210                 mov     edx, [rbx]
                    .text:0000000000001212                 mov     rsi, rbp
                    .text:0000000000001215                 mov     edi, 1
                    .text:000000000000121A                 xor     eax, eax
                    .text:000000000000121C                 add     rbx, 4
                    .text:0000000000001220                 call    ___printf_chk
                    .text:0000000000001225                 cmp     r12, rbx
                    .text:0000000000001228                 jnz     short loc_1210
                    .text:000000000000122A                 xor     eax, eax
                    .text:000000000000122C                 lea     rsi, unk_2008
                    .text:0000000000001233                 mov     edi, 1
                    .text:0000000000001238                 call    ___printf_chk
                    .text:000000000000123D                 mov     rax, [rsp+68h+var_40]
                    .text:0000000000001242                 sub     rax, fs:28h
                    .text:000000000000124B                 jnz     short loc_1263
                    .text:000000000000124D                 add     rsp, 38h
                    .text:0000000000001251                 xor     eax, eax
                    .text:0000000000001253                 pop     rbx
                    .text:0000000000001254                 pop     rbp
                    .text:0000000000001255                 pop     r12
                    .text:0000000000001257                 pop     r13
                    .text:0000000000001259                 pop     r14
                    .text:000000000000125B                 pop     r15
                    .text:000000000000125D                 retn
                    .text:000000000000125E ; ---------------------------------------------------------------------------
                    .text:000000000000125E
                    .text:000000000000125E loc_125E:                               ; CODE XREF: main+71↑j
                    .text:000000000000125E                 mov     rbx, rsp
                    .text:0000000000001261                 jmp     short loc_1201
                    .text:0000000000001263 ; ---------------------------------------------------------------------------
                    .text:0000000000001263
                    .text:0000000000001263 loc_1263:                               ; CODE XREF: main+18B↑j
                    .text:0000000000001263                 call    ___stack_chk_fail
                    .text:0000000000001263 ; } // starts at 10C0
                    .text:0000000000001263 main            endp
                    .text:0000000000001263
                    .text:0000000000001263 ; ---------------------------------------------------------------------------
                    .text:0000000000001268                 align 10h
                    .text:0000000000001270
                    .text:0000000000001270 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001270
                    .text:0000000000001270 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001270
                    .text:0000000000001270                 public _start
                    .text:0000000000001270 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001270 ; __unwind {
                    .text:0000000000001270                 endbr64
                    .text:0000000000001274                 xor     ebp, ebp
                    .text:0000000000001276                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001279                 pop     rsi             ; argc
                    .text:000000000000127A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000127D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001281                 push    rax
                    .text:0000000000001282                 push    rsp             ; stack_end
                    .text:0000000000001283                 xor     r8d, r8d        ; fini
                    .text:0000000000001286                 xor     ecx, ecx        ; init
                    .text:0000000000001288                 lea     rdi, main       ; main
                    .text:000000000000128F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001295                 hlt
                    .text:0000000000001295 ; } // starts at 1270
                    .text:0000000000001295 _start          endp
                    .text:0000000000001295
                    .text:0000000000001295 ; ---------------------------------------------------------------------------
                    .text:0000000000001296                 align 20h
                    .text:00000000000012A0
                    .text:00000000000012A0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000012A0
                    .text:00000000000012A0
                    .text:00000000000012A0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1337↓p
                    .text:00000000000012A0                 lea     rdi, __bss_start
                    .text:00000000000012A7                 lea     rax, __bss_start
                    .text:00000000000012AE                 cmp     rax, rdi
                    .text:00000000000012B1                 jz      short locret_12C8
                    .text:00000000000012B3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:00000000000012BA                 test    rax, rax
                    .text:00000000000012BD                 jz      short locret_12C8
                    .text:00000000000012BF                 jmp     rax
                    .text:00000000000012BF ; ---------------------------------------------------------------------------
                    .text:00000000000012C1                 align 8
                    .text:00000000000012C8
                    .text:00000000000012C8 locret_12C8:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:00000000000012C8                                         ; deregister_tm_clones+1D↑j
                    .text:00000000000012C8                 retn
                    .text:00000000000012C8 deregister_tm_clones endp
                    .text:00000000000012C8
                    .text:00000000000012C8 ; ---------------------------------------------------------------------------
                    .text:00000000000012C9                 align 10h
                    .text:00000000000012D0
                    .text:00000000000012D0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000012D0
                    .text:00000000000012D0
                    .text:00000000000012D0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:00000000000012D0                 lea     rdi, __bss_start
                    .text:00000000000012D7                 lea     rsi, __bss_start
                    .text:00000000000012DE                 sub     rsi, rdi
                    .text:00000000000012E1                 mov     rax, rsi
                    .text:00000000000012E4                 shr     rsi, 3Fh
                    .text:00000000000012E8                 sar     rax, 3
                    .text:00000000000012EC                 add     rsi, rax
                    .text:00000000000012EF                 sar     rsi, 1
                    .text:00000000000012F2                 jz      short locret_1308
                    .text:00000000000012F4                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:00000000000012FB                 test    rax, rax
                    .text:00000000000012FE                 jz      short locret_1308
                    .text:0000000000001300                 jmp     rax
                    .text:0000000000001300 ; ---------------------------------------------------------------------------
                    .text:0000000000001302                 align 8
                    .text:0000000000001308
                    .text:0000000000001308 locret_1308:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:0000000000001308                                         ; register_tm_clones+2E↑j
                    .text:0000000000001308                 retn
                    .text:0000000000001308 register_tm_clones endp
                    .text:0000000000001308
                    .text:0000000000001308 ; ---------------------------------------------------------------------------
                    .text:0000000000001309                 align 10h
                    .text:0000000000001310
                    .text:0000000000001310 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001310
                    .text:0000000000001310
                    .text:0000000000001310 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:0000000000001310                 endbr64
                    .text:0000000000001314                 cmp     cs:__bss_start, 0
                    .text:000000000000131B                 jnz     short locret_1348
                    .text:000000000000131D                 push    rbp
                    .text:000000000000131E                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001326                 mov     rbp, rsp
                    .text:0000000000001329                 jz      short loc_1337
                    .text:000000000000132B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001332                 call    __cxa_finalize
                    .text:0000000000001337
                    .text:0000000000001337 loc_1337:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001337                 call    deregister_tm_clones
                    .text:000000000000133C                 mov     cs:__bss_start, 1
                    .text:0000000000001343                 pop     rbp
                    .text:0000000000001344                 retn
                    .text:0000000000001344 ; ---------------------------------------------------------------------------
                    .text:0000000000001345                 align 8
                    .text:0000000000001348
                    .text:0000000000001348 locret_1348:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001348                 retn
                    .text:0000000000001348 __do_global_dtors_aux endp
                    .text:0000000000001348
                    .text:0000000000001348 ; ---------------------------------------------------------------------------
                    .text:0000000000001349                 align 10h
                    .text:0000000000001350
                    .text:0000000000001350 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001350
                    .text:0000000000001350
                    .text:0000000000001350 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001350                 endbr64
                    .text:0000000000001354                 jmp     register_tm_clones
                    .text:0000000000001354 frame_dummy     endp
                    .text:0000000000001354
                    .text:0000000000001354 _text           ends
                    .text:0000000000001354
                    LOAD:0000000000001359 ; ===========================================================================
                    LOAD:0000000000001359
                    LOAD:0000000000001359 ; Segment type: Pure code
                    LOAD:0000000000001359 ; Segment permissions: Read/Execute
                    LOAD:0000000000001359 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001359                 assume cs:LOAD
                    LOAD:0000000000001359                 ;org 1359h
                    LOAD:0000000000001359                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001359                 align 4
                    LOAD:0000000000001359 LOAD            ends
                    LOAD:0000000000001359
                    .fini:000000000000135C ; ===========================================================================
                    .fini:000000000000135C
                    .fini:000000000000135C ; Segment type: Pure code
                    .fini:000000000000135C ; Segment permissions: Read/Execute
                    .fini:000000000000135C _fini           segment dword public 'CODE' use64
                    .fini:000000000000135C                 assume cs:_fini
                    .fini:000000000000135C                 ;org 135Ch
                    .fini:000000000000135C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000135C
                    .fini:000000000000135C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000135C
                    .fini:000000000000135C
                    .fini:000000000000135C                 public _term_proc
                    .fini:000000000000135C _term_proc      proc near
                    .fini:000000000000135C                 endbr64                 ; _fini
                    .fini:0000000000001360                 sub     rsp, 8
                    .fini:0000000000001364                 add     rsp, 8
                    .fini:0000000000001368                 retn
                    .fini:0000000000001368 _term_proc      endp
                    .fini:0000000000001368
                    .fini:0000000000001368 _fini           ends
                    .fini:0000000000001368
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 unk_2004        db  25h ; %             ; DATA XREF: main+146↑o
                    .rodata:0000000000002005                 db  64h ; d
                    .rodata:0000000000002006                 db  20h
                    .rodata:0000000000002007                 db    0
                    .rodata:0000000000002008 unk_2008        db  0Ah                 ; DATA XREF: main+16C↑o
                    .rodata:0000000000002009                 db    0
                    .rodata:0000000000002009 _rodata         ends
                    .rodata:0000000000002009
                    LOAD:000000000000200A ; ===========================================================================
                    LOAD:000000000000200A
                    LOAD:000000000000200A ; Segment type: Pure data
                    LOAD:000000000000200A ; Segment permissions: Read
                    LOAD:000000000000200A LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000200A                 assume cs:LOAD
                    LOAD:000000000000200A                 ;org 200Ah
                    LOAD:000000000000200A                 align 4
                    LOAD:000000000000200A LOAD            ends
                    LOAD:000000000000200A
                    .eh_frame_hdr:000000000000200C ; ===========================================================================
                    .eh_frame_hdr:000000000000200C
                    .eh_frame_hdr:000000000000200C ; Segment type: Pure data
                    .eh_frame_hdr:000000000000200C ; Segment permissions: Read
                    .eh_frame_hdr:000000000000200C _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:000000000000200C                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:000000000000200C                 ;org 200Ch
                    .eh_frame_hdr:000000000000200C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:000000000000200D                 db  1Bh
                    .eh_frame_hdr:000000000000200E                 db    3
                    .eh_frame_hdr:000000000000200F                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002010                 db  30h ; 0
                    .eh_frame_hdr:0000000000002011                 db    0
                    .eh_frame_hdr:0000000000002012                 db    0
                    .eh_frame_hdr:0000000000002013                 db    0
                    .eh_frame_hdr:0000000000002014                 db    5
                    .eh_frame_hdr:0000000000002015                 db    0
                    .eh_frame_hdr:0000000000002016                 db    0
                    .eh_frame_hdr:0000000000002017                 db    0
                    .eh_frame_hdr:0000000000002018                 db  14h
                    .eh_frame_hdr:0000000000002019                 db 0F0h
                    .eh_frame_hdr:000000000000201A                 db 0FFh
                    .eh_frame_hdr:000000000000201B                 db 0FFh
                    .eh_frame_hdr:000000000000201C                 db  64h ; d
                    .eh_frame_hdr:000000000000201D                 db    0
                    .eh_frame_hdr:000000000000201E                 db    0
                    .eh_frame_hdr:000000000000201F                 db    0
                    .eh_frame_hdr:0000000000002020                 db  64h ; d
                    .eh_frame_hdr:0000000000002021                 db 0F0h
                    .eh_frame_hdr:0000000000002022                 db 0FFh
                    .eh_frame_hdr:0000000000002023                 db 0FFh
                    .eh_frame_hdr:0000000000002024                 db  8Ch
                    .eh_frame_hdr:0000000000002025                 db    0
                    .eh_frame_hdr:0000000000002026                 db    0
                    .eh_frame_hdr:0000000000002027                 db    0
                    .eh_frame_hdr:0000000000002028                 db  74h ; t
                    .eh_frame_hdr:0000000000002029                 db 0F0h
                    .eh_frame_hdr:000000000000202A                 db 0FFh
                    .eh_frame_hdr:000000000000202B                 db 0FFh
                    .eh_frame_hdr:000000000000202C                 db 0A4h
                    .eh_frame_hdr:000000000000202D                 db    0
                    .eh_frame_hdr:000000000000202E                 db    0
                    .eh_frame_hdr:000000000000202F                 db    0
                    .eh_frame_hdr:0000000000002030                 db 0B4h
                    .eh_frame_hdr:0000000000002031                 db 0F0h
                    .eh_frame_hdr:0000000000002032                 db 0FFh
                    .eh_frame_hdr:0000000000002033                 db 0FFh
                    .eh_frame_hdr:0000000000002034                 db 0BCh
                    .eh_frame_hdr:0000000000002035                 db    0
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db  64h ; d
                    .eh_frame_hdr:0000000000002039                 db 0F2h
                    .eh_frame_hdr:000000000000203A                 db 0FFh
                    .eh_frame_hdr:000000000000203B                 db 0FFh
                    .eh_frame_hdr:000000000000203C                 db  4Ch ; L
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:000000000000203F _eh_frame_hdr   ends
                    .eh_frame_hdr:000000000000203F
                    .eh_frame:0000000000002040 ; ===========================================================================
                    .eh_frame:0000000000002040
                    .eh_frame:0000000000002040 ; Segment type: Pure data
                    .eh_frame:0000000000002040 ; Segment permissions: Read
                    .eh_frame:0000000000002040 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002040                 assume cs:_eh_frame
                    .eh_frame:0000000000002040                 ;org 2040h
                    .eh_frame:0000000000002040                 db  14h
                    .eh_frame:0000000000002041                 db    0
                    .eh_frame:0000000000002042                 db    0
                    .eh_frame:0000000000002043                 db    0
                    .eh_frame:0000000000002044                 db    0
                    .eh_frame:0000000000002045                 db    0
                    .eh_frame:0000000000002046                 db    0
                    .eh_frame:0000000000002047                 db    0
                    .eh_frame:0000000000002048                 db    1
                    .eh_frame:0000000000002049                 db  7Ah ; z
                    .eh_frame:000000000000204A                 db  52h ; R
                    .eh_frame:000000000000204B                 db    0
                    .eh_frame:000000000000204C                 db    1
                    .eh_frame:000000000000204D                 db  78h ; x
                    .eh_frame:000000000000204E                 db  10h
                    .eh_frame:000000000000204F                 db    1
                    .eh_frame:0000000000002050                 db  1Bh
                    .eh_frame:0000000000002051                 db  0Ch
                    .eh_frame:0000000000002052                 db    7
                    .eh_frame:0000000000002053                 db    8
                    .eh_frame:0000000000002054                 db  90h
                    .eh_frame:0000000000002055                 db    1
                    .eh_frame:0000000000002056                 db    0
                    .eh_frame:0000000000002057                 db    0
                    .eh_frame:0000000000002058                 db  14h
                    .eh_frame:0000000000002059                 db    0
                    .eh_frame:000000000000205A                 db    0
                    .eh_frame:000000000000205B                 db    0
                    .eh_frame:000000000000205C                 db  1Ch
                    .eh_frame:000000000000205D                 db    0
                    .eh_frame:000000000000205E                 db    0
                    .eh_frame:000000000000205F                 db    0
                    .eh_frame:0000000000002060                 db  10h
                    .eh_frame:0000000000002061                 db 0F2h
                    .eh_frame:0000000000002062                 db 0FFh
                    .eh_frame:0000000000002063                 db 0FFh
                    .eh_frame:0000000000002064                 db  26h ; &
                    .eh_frame:0000000000002065                 db    0
                    .eh_frame:0000000000002066                 db    0
                    .eh_frame:0000000000002067                 db    0
                    .eh_frame:0000000000002068                 db    0
                    .eh_frame:0000000000002069                 db  44h ; D
                    .eh_frame:000000000000206A                 db    7
                    .eh_frame:000000000000206B                 db  10h
                    .eh_frame:000000000000206C                 db    0
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db  24h ; $
                    .eh_frame:0000000000002071                 db    0
                    .eh_frame:0000000000002072                 db    0
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db  34h ; 4
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db 0A8h
                    .eh_frame:0000000000002079                 db 0EFh
                    .eh_frame:000000000000207A                 db 0FFh
                    .eh_frame:000000000000207B                 db 0FFh
                    .eh_frame:000000000000207C                 db  50h ; P
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db    0
                    .eh_frame:0000000000002081                 db  0Eh
                    .eh_frame:0000000000002082                 db  10h
                    .eh_frame:0000000000002083                 db  46h ; F
                    .eh_frame:0000000000002084                 db  0Eh
                    .eh_frame:0000000000002085                 db  18h
                    .eh_frame:0000000000002086                 db  4Ah ; J
                    .eh_frame:0000000000002087                 db  0Fh
                    .eh_frame:0000000000002088                 db  0Bh
                    .eh_frame:0000000000002089                 db  77h ; w
                    .eh_frame:000000000000208A                 db    8
                    .eh_frame:000000000000208B                 db  80h
                    .eh_frame:000000000000208C                 db    0
                    .eh_frame:000000000000208D                 db  3Fh ; ?
                    .eh_frame:000000000000208E                 db  1Ah
                    .eh_frame:000000000000208F                 db  3Ah ; :
                    .eh_frame:0000000000002090                 db  2Ah ; *
                    .eh_frame:0000000000002091                 db  33h ; 3
                    .eh_frame:0000000000002092                 db  24h ; $
                    .eh_frame:0000000000002093                 db  22h ; "
                    .eh_frame:0000000000002094                 db    0
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db  14h
                    .eh_frame:0000000000002099                 db    0
                    .eh_frame:000000000000209A                 db    0
                    .eh_frame:000000000000209B                 db    0
                    .eh_frame:000000000000209C                 db  5Ch ; \
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db 0D0h
                    .eh_frame:00000000000020A1                 db 0EFh
                    .eh_frame:00000000000020A2                 db 0FFh
                    .eh_frame:00000000000020A3                 db 0FFh
                    .eh_frame:00000000000020A4                 db  10h
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db    0
                    .eh_frame:00000000000020A9                 db    0
                    .eh_frame:00000000000020AA                 db    0
                    .eh_frame:00000000000020AB                 db    0
                    .eh_frame:00000000000020AC                 db    0
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db  14h
                    .eh_frame:00000000000020B1                 db    0
                    .eh_frame:00000000000020B2                 db    0
                    .eh_frame:00000000000020B3                 db    0
                    .eh_frame:00000000000020B4                 db  74h ; t
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db 0C8h
                    .eh_frame:00000000000020B9                 db 0EFh
                    .eh_frame:00000000000020BA                 db 0FFh
                    .eh_frame:00000000000020BB                 db 0FFh
                    .eh_frame:00000000000020BC                 db  40h ; @
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db    0
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db    0
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  48h ; H
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db  8Ch
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db 0F0h
                    .eh_frame:00000000000020D1                 db 0EFh
                    .eh_frame:00000000000020D2                 db 0FFh
                    .eh_frame:00000000000020D3                 db 0FFh
                    .eh_frame:00000000000020D4                 db 0A8h
                    .eh_frame:00000000000020D5                 db    1
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db    0
                    .eh_frame:00000000000020D9                 db  46h ; F
                    .eh_frame:00000000000020DA                 db  0Eh
                    .eh_frame:00000000000020DB                 db  10h
                    .eh_frame:00000000000020DC                 db  8Fh
                    .eh_frame:00000000000020DD                 db    2
                    .eh_frame:00000000000020DE                 db  47h ; G
                    .eh_frame:00000000000020DF                 db  0Eh
                    .eh_frame:00000000000020E0                 db  18h
                    .eh_frame:00000000000020E1                 db  8Eh
                    .eh_frame:00000000000020E2                 db    3
                    .eh_frame:00000000000020E3                 db  42h ; B
                    .eh_frame:00000000000020E4                 db  0Eh
                    .eh_frame:00000000000020E5                 db  20h
                    .eh_frame:00000000000020E6                 db  8Dh
                    .eh_frame:00000000000020E7                 db    4
                    .eh_frame:00000000000020E8                 db  42h ; B
                    .eh_frame:00000000000020E9                 db  0Eh
                    .eh_frame:00000000000020EA                 db  28h ; (
                    .eh_frame:00000000000020EB                 db  8Ch
                    .eh_frame:00000000000020EC                 db    5
                    .eh_frame:00000000000020ED                 db  41h ; A
                    .eh_frame:00000000000020EE                 db  0Eh
                    .eh_frame:00000000000020EF                 db  30h ; 0
                    .eh_frame:00000000000020F0                 db  86h
                    .eh_frame:00000000000020F1                 db    6
                    .eh_frame:00000000000020F2                 db  41h ; A
                    .eh_frame:00000000000020F3                 db  0Eh
                    .eh_frame:00000000000020F4                 db  38h ; 8
                    .eh_frame:00000000000020F5                 db  83h
                    .eh_frame:00000000000020F6                 db    7
                    .eh_frame:00000000000020F7                 db  44h ; D
                    .eh_frame:00000000000020F8                 db  0Eh
                    .eh_frame:00000000000020F9                 db  70h ; p
                    .eh_frame:00000000000020FA                 db    3
                    .eh_frame:00000000000020FB                 db  7Ah ; z
                    .eh_frame:00000000000020FC                 db    1
                    .eh_frame:00000000000020FD                 db  0Ah
                    .eh_frame:00000000000020FE                 db  0Eh
                    .eh_frame:00000000000020FF                 db  38h ; 8
                    .eh_frame:0000000000002100                 db  43h ; C
                    .eh_frame:0000000000002101                 db  0Eh
                    .eh_frame:0000000000002102                 db  30h ; 0
                    .eh_frame:0000000000002103                 db  41h ; A
                    .eh_frame:0000000000002104                 db  0Eh
                    .eh_frame:0000000000002105                 db  28h ; (
                    .eh_frame:0000000000002106                 db  42h ; B
                    .eh_frame:0000000000002107                 db  0Eh
                    .eh_frame:0000000000002108                 db  20h
                    .eh_frame:0000000000002109                 db  42h ; B
                    .eh_frame:000000000000210A                 db  0Eh
                    .eh_frame:000000000000210B                 db  18h
                    .eh_frame:000000000000210C                 db  42h ; B
                    .eh_frame:000000000000210D                 db  0Eh
                    .eh_frame:000000000000210E                 db  10h
                    .eh_frame:000000000000210F                 db  42h ; B
                    .eh_frame:0000000000002110                 db  0Eh
                    .eh_frame:0000000000002111                 db    8
                    .eh_frame:0000000000002112                 db  41h ; A
                    .eh_frame:0000000000002113                 db  0Bh
                    .eh_frame:0000000000002114 __FRAME_END__   db    0
                    .eh_frame:0000000000002115                 db    0
                    .eh_frame:0000000000002116                 db    0
                    .eh_frame:0000000000002117                 db    0
                    .eh_frame:0000000000002117 _eh_frame       ends
                    .eh_frame:0000000000002117
                    .init_array:0000000000003DA0 ; ELF Initialization Function Table
                    .init_array:0000000000003DA0 ; ===========================================================================
                    .init_array:0000000000003DA0
                    .init_array:0000000000003DA0 ; Segment type: Pure data
                    .init_array:0000000000003DA0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DA0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DA0                 assume cs:_init_array
                    .init_array:0000000000003DA0                 ;org 3DA0h
                    .init_array:0000000000003DA0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DA0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DA0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DA0 _init_array     ends
                    .init_array:0000000000003DA0
                    .fini_array:0000000000003DA8 ; ELF Termination Function Table
                    .fini_array:0000000000003DA8 ; ===========================================================================
                    .fini_array:0000000000003DA8
                    .fini_array:0000000000003DA8 ; Segment type: Pure data
                    .fini_array:0000000000003DA8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DA8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DA8                 assume cs:_fini_array
                    .fini_array:0000000000003DA8                 ;org 3DA8h
                    .fini_array:0000000000003DA8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DA8 _fini_array     ends
                    .fini_array:0000000000003DA8
                    LOAD:0000000000003DB0 ; ELF Dynamic Information
                    LOAD:0000000000003DB0 ; ===========================================================================
                    LOAD:0000000000003DB0
                    LOAD:0000000000003DB0 ; Segment type: Pure data
                    LOAD:0000000000003DB0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DB0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DB0                 assume cs:LOAD
                    LOAD:0000000000003DB0                 ;org 3DB0h
                    LOAD:0000000000003DB0 _DYNAMIC        Elf64_Dyn <1, 4Ch>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DB0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DB0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DC0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Dh, 135Ch>  ; DT_FINI
                    LOAD:0000000000003DE0                 Elf64_Dyn <19h, 3DA0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003DF0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E00                 Elf64_Dyn <1Ah, 3DA8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E20                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E30                 Elf64_Dyn <5, 4C8h>     ; DT_STRTAB
                    LOAD:0000000000003E40                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <0Ah, 0C8h>   ; DT_STRSZ
                    LOAD:0000000000003E60                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E70                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E80                 Elf64_Dyn <3, 3FA0h>    ; DT_PLTGOT
                    LOAD:0000000000003E90                 Elf64_Dyn <2, 60h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EA0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EB0                 Elf64_Dyn <17h, 6B8h>   ; DT_JMPREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <7, 5F8h>     ; DT_RELA
                    LOAD:0000000000003ED0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EE0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003EF0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F00                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFEh, 5A8h> ; DT_VERNEED
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFF0h, 590h> ; DT_VERSYM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F50                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F60                 db    0
                    LOAD:0000000000003F61                 db    0
                    LOAD:0000000000003F62                 db    0
                    LOAD:0000000000003F63                 db    0
                    LOAD:0000000000003F64                 db    0
                    LOAD:0000000000003F65                 db    0
                    LOAD:0000000000003F66                 db    0
                    LOAD:0000000000003F67                 db    0
                    LOAD:0000000000003F68                 db    0
                    LOAD:0000000000003F69                 db    0
                    LOAD:0000000000003F6A                 db    0
                    LOAD:0000000000003F6B                 db    0
                    LOAD:0000000000003F6C                 db    0
                    LOAD:0000000000003F6D                 db    0
                    LOAD:0000000000003F6E                 db    0
                    LOAD:0000000000003F6F                 db    0
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003F9F LOAD            ends
                    LOAD:0000000000003F9F
                    .got:0000000000003FA0 ; ===========================================================================
                    .got:0000000000003FA0
                    .got:0000000000003FA0 ; Segment type: Pure data
                    .got:0000000000003FA0 ; Segment permissions: Read/Write
                    .got:0000000000003FA0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FA0                 assume cs:_got
                    .got:0000000000003FA0                 ;org 3FA0h
                    .got:0000000000003FA0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FA8 qword_3FA8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FB0 qword_3FB0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FB8 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
                    .got:0000000000003FC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC0                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; void free(void *ptr)
                    extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
                    extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
                    extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004028                 extrn __libc_start_main:near
                    extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004030                 extrn __stack_chk_fail:near
                    extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004038 ; void *malloc(size_t size)
                    extern:0000000000004038                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:malloc_ptr↑o
                    extern:0000000000004040                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004040                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004048 ; int __cxa_finalize(void *)
                    extern:0000000000004048                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004048                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004050                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004058                 extrn __gmon_start__:near ; weak
                    extern:0000000000004058                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004058                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004060                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004060                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004060
                    extern:0000000000004060
                    extern:0000000000004060                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x10C0
                    ; Intent: bottom-up merge sort of a fixed 10-int array, then print (confidence=0.95). Evidence: malloc(40), four merge passes (log2(10)), __printf_chk loop over 10 ints.
                    ; Preconditions: None
                    ; Postconditions: Prints the sorted 10 integers followed by a newline; returns 0.
                    
                    @.fmt = private unnamed_addr constant [4 x i8] c"%d \00"
                    @.nl = private unnamed_addr constant [2 x i8] c"\0A\00"
                    @__stack_chk_guard = external global i64
                    
                    ; Only the needed extern declarations:
                    declare i8* @malloc(i64)
                    declare void @free(i8*)
                    declare i32 @__printf_chk(i32, i8*, ...)
                    declare void @__stack_chk_fail()
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    %saved_canary = alloca i64, align 8
                    %arr = alloca [10 x i32], align 16
                    %guard0 = load i64, i64* @__stack_chk_guard, align 8
                    store i64 %guard0, i64* %saved_canary, align 8
                    ; initialize a = {9,1,5,3,7,2,8,6,4,0}
                    %a0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
                    store i32 9, i32* %a0, align 4
                    %a1 = getelementptr inbounds i32, i32* %a0, i64 1
                    store i32 1, i32* %a1, align 4
                    %a2 = getelementptr inbounds i32, i32* %a0, i64 2
                    store i32 5, i32* %a2, align 4
                    %a3 = getelementptr inbounds i32, i32* %a0, i64 3
                    store i32 3, i32* %a3, align 4
                    %a4 = getelementptr inbounds i32, i32* %a0, i64 4
                    store i32 7, i32* %a4, align 4
                    %a5 = getelementptr inbounds i32, i32* %a0, i64 5
                    store i32 2, i32* %a5, align 4
                    %a6 = getelementptr inbounds i32, i32* %a0, i64 6
                    store i32 8, i32* %a6, align 4
                    %a7 = getelementptr inbounds i32, i32* %a0, i64 7
                    store i32 6, i32* %a7, align 4
                    %a8 = getelementptr inbounds i32, i32* %a0, i64 8
                    store i32 4, i32* %a8, align 4
                    %a9 = getelementptr inbounds i32, i32* %a0, i64 9
                    store i32 0, i32* %a9, align 4
                    
                    %tmpraw = call i8* @malloc(i64 40)
                    %isnull = icmp eq i8* %tmpraw, null
                    br i1 %isnull, label %print, label %merge_prep
                    
                    merge_prep:
                    %src0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
                    %dst0 = bitcast i8* %tmpraw to i32*
                    br label %outer_header
                    
                    outer_header:
                    %src = phi i32* [ %src0, %merge_prep ], [ %src_next, %swap ]
                    %dst = phi i32* [ %dst0, %merge_prep ], [ %dst_next, %swap ]
                    %run = phi i32 [ 1, %merge_prep ], [ %run_next, %swap ]
                    %pass = phi i32 [ 4, %merge_prep ], [ %pass_next, %swap ]
                    br label %inner_header
                    
                    inner_header:
                    %i = phi i64 [ 0, %outer_header ], [ %i_next, %inner_after ]
                    %cond = icmp uge i64 %i, 10
                    br i1 %cond, label %after_pass, label %do_merge
                    
                    do_merge:
                    %run64 = sext i32 %run to i64
                    %midtmp = add i64 %i, %run64
                    %mid_sel = icmp ult i64 %midtmp, 10
                    %mid = select i1 %mid_sel, i64 %midtmp, i64 10
                    %tworun = shl i64 %run64, 1
                    %righttmp = add i64 %i, %tworun
                    %right_sel = icmp ult i64 %righttmp, 10
                    %right = select i1 %right_sel, i64 %righttmp, i64 10
                    br label %merge_loop
                    
                    merge_loop:
                    %l = phi i64 [ %i, %do_merge ], [ %l_inc, %take_left ], [ %l_keep_r, %take_right ], [ %l_inc_nc, %take_left_nc ], [ %l_keep_nc, %take_right_nc ]
                    %r = phi i64 [ %mid, %do_merge ], [ %r_keep_l, %take_left ], [ %r_inc, %take_right ], [ %r_keep_nc, %take_left_nc ], [ %r_inc_nc, %take_right_nc ]
                    %out = phi i64 [ %i, %do_merge ], [ %out_inc_l, %take_left ], [ %out_inc_r, %take_right ], [ %out_inc_l_nc, %take_left_nc ], [ %out_inc_r_nc, %take_right_nc ]
                    %done = icmp uge i64 %out, %right
                    br i1 %done, label %inner_after, label %choose
                    
                    choose:
                    %l_lt_mid = icmp ult i64 %l, %mid
                    br i1 %l_lt_mid, label %check_r, label %take_right_nc
                    
                    check_r:
                    %r_ge_right = icmp uge i64 %r, %right
                    br i1 %r_ge_right, label %take_left_nc, label %compare_vals
                    
                    compare_vals:
                    %l_ptr = getelementptr inbounds i32, i32* %src, i64 %l
                    %l_val = load i32, i32* %l_ptr, align 4
                    %r_ptr = getelementptr inbounds i32, i32* %src, i64 %r
                    %r_val = load i32, i32* %r_ptr, align 4
                    %le = icmp sle i32 %l_val, %r_val
                    br i1 %le, label %take_left, label %take_right
                    
                    take_left:
                    %dst_ptr_l = getelementptr inbounds i32, i32* %dst, i64 %out
                    store i32 %l_val, i32* %dst_ptr_l, align 4
                    %out_inc_l = add i64 %out, 1
                    %l_inc = add i64 %l, 1
                    %r_keep_l = %r
                    br label %merge_loop
                    
                    take_right:
                    %dst_ptr_r = getelementptr inbounds i32, i32* %dst, i64 %out
                    store i32 %r_val, i32* %dst_ptr_r, align 4
                    %out_inc_r = add i64 %out, 1
                    %r_inc = add i64 %r, 1
                    %l_keep_r = %l
                    br label %merge_loop
                    
                    ; left-only (right exhausted)
                    take_left_nc:
                    %l_ptr_nc = getelementptr inbounds i32, i32* %src, i64 %l
                    %l_val_nc = load i32, i32* %l_ptr_nc, align 4
                    %dst_ptr_l_nc = getelementptr inbounds i32, i32* %dst, i64 %out
                    store i32 %l_val_nc, i32* %dst_ptr_l_nc, align 4
                    %out_inc_l_nc = add i64 %out, 1
                    %l_inc_nc = add i64 %l, 1
                    %r_keep_nc = %r
                    br label %merge_loop
                    
                    ; right-only (left exhausted)
                    take_right_nc:
                    %r_ptr_nc = getelementptr inbounds i32, i32* %src, i64 %r
                    %r_val_nc = load i32, i32* %r_ptr_nc, align 4
                    %dst_ptr_r_nc = getelementptr inbounds i32, i32* %dst, i64 %out
                    store i32 %r_val_nc, i32* %dst_ptr_r_nc, align 4
                    %out_inc_r_nc = add i64 %out, 1
                    %r_inc_nc = add i64 %r, 1
                    %l_keep_nc = %l
                    br label %merge_loop
                    
                    inner_after:
                    %i_next = %right
                    br label %inner_header
                    
                    after_pass:
                    %run_next = shl i32 %run, 1
                    %pass_next = add i32 %pass, -1
                    %done_passes = icmp eq i32 %pass_next, 0
                    br i1 %done_passes, label %finalize, label %swap
                    
                    swap:
                    %src_next = %dst
                    %dst_next = %src
                    br label %outer_header
                    
                    finalize:
                    %arrptr = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
                    %needcopy = icmp ne i32* %dst, %arrptr
                    br i1 %needcopy, label %copy_loop, label %after_copy
                    
                    copy_loop:
                    %ci = phi i64 [ 0, %finalize ], [ %ci_next, %copy_body ]
                    %cend = icmp uge i64 %ci, 10
                    br i1 %cend, label %copy_done, label %copy_body
                    
                    copy_body:
                    %s_ptr = getelementptr inbounds i32, i32* %dst, i64 %ci
                    %v = load i32, i32* %s_ptr, align 4
                    %d_ptr = getelementptr inbounds i32, i32* %arrptr, i64 %ci
                    store i32 %v, i32* %d_ptr, align 4
                    %ci_next = add i64 %ci, 1
                    br label %copy_loop
                    
                    copy_done:
                    br label %after_copy
                    
                    after_copy:
                    call void @free(i8* %tmpraw)
                    br label %print
                    
                    print:
                    %arrbase = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
                    br label %print_loop
                    
                    print_loop:
                    %k = phi i64 [ 0, %print ], [ %k_next, %print_body ]
                    %pdone = icmp uge i64 %k, 10
                    br i1 %pdone, label %print_nl, label %print_body
                    
                    print_body:
                    %p_ptr = getelementptr inbounds i32, i32* %arrbase, i64 %k
                    %pv = load i32, i32* %p_ptr, align 4
                    %fmtp = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt, i64 0, i64 0
                    %callp = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmtp, i32 %pv)
                    %k_next = add i64 %k, 1
                    br label %print_loop
                    
                    print_nl:
                    %nlp = getelementptr inbounds [2 x i8], [2 x i8]* @.nl, i64 0, i64 0
                    %callnl = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nlp)
                    br label %epilogue
                    
                    epilogue:
                    %guard1 = load i64, i64* @__stack_chk_guard, align 8
                    %saved = load i64, i64* %saved_canary, align 8
                    %ok = icmp eq i64 %saved, %guard1
                    br i1 %ok, label %ret, label %fail
                    
                    fail:
                    call void @__stack_chk_fail()
                    unreachable
                    
                    ret:
                    ret i32 0
                    }
                    ```
                    
        - quicksort
            - ida 함수 리스트
                
                ```notion
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "quicksort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1150",
                      "end": "0x1176",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x1180",
                      "end": "0x11a9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x11b0",
                      "end": "0x11e9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x11f0",
                      "end": "0x1229",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1230",
                      "end": "0x1239",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x114d",
                      "size": 205,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "quick_sort",
                      "start": "0x1240",
                      "end": "0x1330",
                      "size": 240,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x1330",
                      "end": "0x133d",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 20
                user? candidates: 7
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                ["main","quick_sort"]
                ```
                
            - ida 디스어셈블리
                - quick_sort
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : 5BE6E33D227E8E5056EB1A000EF9B0CEA244DBBD57ED0369D934CA6968067EED
                    LOAD:0000000000000000 ; Input MD5    : 1840D5A9C414987C0E57CDA7F9E909E5
                    LOAD:0000000000000000 ; Input CRC32  : 2CA3C2F4
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\quicksort
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'quicksort.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 36F8h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 6A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 6A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 33Dh                 ; Size in file image
                    LOAD:0000000000000110                 dq 33Dh                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 150h                 ; Size in file image
                    LOAD:0000000000000148                 dq 150h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DB0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000178                 dq 260h                 ; Size in file image
                    LOAD:0000000000000180                 dq 268h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DC0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DC0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 200Ch                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 200Ch                ; Physical address
                    LOAD:0000000000000290                 dq 3Ch                  ; Size in file image
                    LOAD:0000000000000298                 dq 3Ch                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DB0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000300                 dq 250h                 ; Size in file image
                    LOAD:0000000000000308                 dq 250h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 0DAh, 0E0h, 8Ch, 27h, 12h, 81h, 91h, 11h, 0A2h, 85h ; Desc
                    LOAD:0000000000000382                 db 0F1h, 68h, 9Ch, 0B7h, 12h, 0EBh, 12h, 0D2h, 88h, 26h
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 7
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 7, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aLibcStartMain - offset unk_498, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:00000000000003F0                            offset dword_0, 0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aItmDeregistert - offset unk_498, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aStackChkFail - offset unk_498, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aGmonStart - offset unk_498, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aPrintfChk - offset unk_498, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aItmRegistertmc - offset unk_498, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aCxaFinalize - offset unk_498, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498 ; ELF String Table
                    LOAD:0000000000000498 unk_498         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000498                                         ; LOAD:0000000000000408↑o ...
                    LOAD:0000000000000499 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004A8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:00000000000004B5 aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004B5                                         ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000004D8 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000568↓o
                    LOAD:00000000000004E2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000578↓o
                    LOAD:00000000000004EE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000588↓o
                    LOAD:00000000000004FA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000598↓o
                    LOAD:0000000000000504 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000050F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000050F                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000053A aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:000000000000053A                                         ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000554 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000554                 dw 0
                    LOAD:0000000000000556                 dw 2                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000558                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:000000000000055A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000055C                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000055E                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:0000000000000560                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:0000000000000562                 dw 5                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:0000000000000564                 dw 0
                    LOAD:0000000000000566                 dw 0
                    LOAD:0000000000000568 ; ELF GNU Symbol Version Requirements
                    LOAD:0000000000000568                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_498, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000578                 Elf64_Vernaux <9691A75h, 0, 5, offset aGlibc225 - offset unk_498, 10h> ; "GLIBC_2.2.5"
                    LOAD:0000000000000588                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset unk_498, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000598                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_498, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005A8                 Elf64_Vernaux <69691B4h, 0, 2, offset aGlibc234_0 - offset unk_498, 0> ; "GLIBC_2.34"
                    LOAD:00000000000005B8 ; ELF RELA Relocation Table
                    LOAD:00000000000005B8                 Elf64_Rela <3DB0h, 8, 1230h> ; R_X86_64_RELATIVE +1230h
                    LOAD:00000000000005D0                 Elf64_Rela <3DB8h, 8, 11F0h> ; R_X86_64_RELATIVE +11F0h
                    LOAD:00000000000005E8                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000600                 Elf64_Rela <3FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000618                 Elf64_Rela <3FE0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000630                 Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000648                 Elf64_Rela <3FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000660                 Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000678 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000678                 Elf64_Rela <3FC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000690                 Elf64_Rela <3FD0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000690 LOAD            ends
                    LOAD:0000000000000690
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FB8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FC0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:000000000000104F ; } // starts at 1020
                    .plt:000000000000104F _plt            ends
                    .plt:000000000000104F
                    .plt.got:0000000000001050 ; ===========================================================================
                    .plt.got:0000000000001050
                    .plt.got:0000000000001050 ; Segment type: Pure code
                    .plt.got:0000000000001050 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001050 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001050                 assume cs:_plt_got
                    .plt.got:0000000000001050                 ;org 1050h
                    .plt.got:0000000000001050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001050 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000105B                 align 20h
                    .plt.got:000000000000105B ; } // starts at 1050
                    .plt.got:000000000000105B _plt_got        ends
                    .plt.got:000000000000105B
                    .plt.sec:0000000000001060 ; ===========================================================================
                    .plt.sec:0000000000001060
                    .plt.sec:0000000000001060 ; Segment type: Pure code
                    .plt.sec:0000000000001060 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001060 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001060                 assume cs:_plt_sec
                    .plt.sec:0000000000001060                 ;org 1060h
                    .plt.sec:0000000000001060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001060 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000106B                 align 10h
                    .plt.sec:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:000000000000107B                 align 20h
                    .plt.sec:000000000000107B ; } // starts at 1060
                    .plt.sec:000000000000107B _plt_sec        ends
                    .plt.sec:000000000000107B
                    .text:0000000000001080 ; ===========================================================================
                    .text:0000000000001080
                    .text:0000000000001080 ; Segment type: Pure code
                    .text:0000000000001080 ; Segment permissions: Read/Execute
                    .text:0000000000001080 _text           segment para public 'CODE' use64
                    .text:0000000000001080                 assume cs:_text
                    .text:0000000000001080                 ;org 1080h
                    .text:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001080
                    .text:0000000000001080 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001080
                    .text:0000000000001080
                    .text:0000000000001080 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001080                 public main
                    .text:0000000000001080 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001080
                    .text:0000000000001080 var_48          = qword ptr -48h
                    .text:0000000000001080 var_40          = qword ptr -40h
                    .text:0000000000001080 var_38          = qword ptr -38h
                    .text:0000000000001080 var_30          = qword ptr -30h
                    .text:0000000000001080 var_28          = qword ptr -28h
                    .text:0000000000001080 var_20          = qword ptr -20h
                    .text:0000000000001080
                    .text:0000000000001080 ; __unwind {
                    .text:0000000000001080                 endbr64
                    .text:0000000000001084                 push    r12
                    .text:0000000000001086                 mov     edx, 9
                    .text:000000000000108B                 xor     esi, esi
                    .text:000000000000108D                 push    rbp
                    .text:000000000000108E                 lea     rbp, unk_2004
                    .text:0000000000001095                 push    rbx
                    .text:0000000000001096                 sub     rsp, 30h
                    .text:000000000000109A                 mov     rax, fs:28h
                    .text:00000000000010A3                 mov     [rsp+48h+var_20], rax
                    .text:00000000000010A8                 mov     rax, 100000009h
                    .text:00000000000010B2                 mov     rbx, rsp
                    .text:00000000000010B5                 lea     r12, [rsp+48h+var_20]
                    .text:00000000000010BA                 mov     [rsp+48h+var_28], 4
                    .text:00000000000010C3                 mov     rdi, rbx
                    .text:00000000000010C6                 mov     [rsp+48h+var_48], rax
                    .text:00000000000010CA                 mov     rax, 300000005h
                    .text:00000000000010D4                 mov     [rsp+48h+var_40], rax
                    .text:00000000000010D9                 mov     rax, 200000007h
                    .text:00000000000010E3                 mov     [rsp+48h+var_38], rax
                    .text:00000000000010E8                 mov     rax, 600000008h
                    .text:00000000000010F2                 mov     [rsp+48h+var_30], rax
                    .text:00000000000010F7                 call    quick_sort
                    .text:00000000000010FC                 nop     dword ptr [rax+00h]
                    .text:0000000000001100
                    .text:0000000000001100 loc_1100:                               ; CODE XREF: main+98↓j
                    .text:0000000000001100                 mov     edx, [rbx]
                    .text:0000000000001102                 mov     rsi, rbp
                    .text:0000000000001105                 mov     edi, 1
                    .text:000000000000110A                 xor     eax, eax
                    .text:000000000000110C                 add     rbx, 4
                    .text:0000000000001110                 call    ___printf_chk
                    .text:0000000000001115                 cmp     rbx, r12
                    .text:0000000000001118                 jnz     short loc_1100
                    .text:000000000000111A                 xor     eax, eax
                    .text:000000000000111C                 lea     rsi, unk_2008
                    .text:0000000000001123                 mov     edi, 1
                    .text:0000000000001128                 call    ___printf_chk
                    .text:000000000000112D                 mov     rax, [rsp+48h+var_20]
                    .text:0000000000001132                 sub     rax, fs:28h
                    .text:000000000000113B                 jnz     short loc_1148
                    .text:000000000000113D                 add     rsp, 30h
                    .text:0000000000001141                 xor     eax, eax
                    .text:0000000000001143                 pop     rbx
                    .text:0000000000001144                 pop     rbp
                    .text:0000000000001145                 pop     r12
                    .text:0000000000001147                 retn
                    .text:0000000000001148 ; ---------------------------------------------------------------------------
                    .text:0000000000001148
                    .text:0000000000001148 loc_1148:                               ; CODE XREF: main+BB↑j
                    .text:0000000000001148                 call    ___stack_chk_fail
                    .text:0000000000001148 ; } // starts at 1080
                    .text:0000000000001148 main            endp
                    .text:0000000000001148
                    .text:0000000000001148 ; ---------------------------------------------------------------------------
                    .text:000000000000114D                 align 10h
                    .text:0000000000001150
                    .text:0000000000001150 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001150
                    .text:0000000000001150 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001150
                    .text:0000000000001150                 public _start
                    .text:0000000000001150 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001150 ; __unwind {
                    .text:0000000000001150                 endbr64
                    .text:0000000000001154                 xor     ebp, ebp
                    .text:0000000000001156                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001159                 pop     rsi             ; argc
                    .text:000000000000115A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000115D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001161                 push    rax
                    .text:0000000000001162                 push    rsp             ; stack_end
                    .text:0000000000001163                 xor     r8d, r8d        ; fini
                    .text:0000000000001166                 xor     ecx, ecx        ; init
                    .text:0000000000001168                 lea     rdi, main       ; main
                    .text:000000000000116F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001175                 hlt
                    .text:0000000000001175 ; } // starts at 1150
                    .text:0000000000001175 _start          endp
                    .text:0000000000001175
                    .text:0000000000001175 ; ---------------------------------------------------------------------------
                    .text:0000000000001176                 align 20h
                    .text:0000000000001180
                    .text:0000000000001180 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001180
                    .text:0000000000001180
                    .text:0000000000001180 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1217↓p
                    .text:0000000000001180                 lea     rdi, __bss_start
                    .text:0000000000001187                 lea     rax, __bss_start
                    .text:000000000000118E                 cmp     rax, rdi
                    .text:0000000000001191                 jz      short locret_11A8
                    .text:0000000000001193                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:000000000000119A                 test    rax, rax
                    .text:000000000000119D                 jz      short locret_11A8
                    .text:000000000000119F                 jmp     rax
                    .text:000000000000119F ; ---------------------------------------------------------------------------
                    .text:00000000000011A1                 align 8
                    .text:00000000000011A8
                    .text:00000000000011A8 locret_11A8:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:00000000000011A8                                         ; deregister_tm_clones+1D↑j
                    .text:00000000000011A8                 retn
                    .text:00000000000011A8 deregister_tm_clones endp
                    .text:00000000000011A8
                    .text:00000000000011A8 ; ---------------------------------------------------------------------------
                    .text:00000000000011A9                 align 10h
                    .text:00000000000011B0
                    .text:00000000000011B0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011B0
                    .text:00000000000011B0
                    .text:00000000000011B0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:00000000000011B0                 lea     rdi, __bss_start
                    .text:00000000000011B7                 lea     rsi, __bss_start
                    .text:00000000000011BE                 sub     rsi, rdi
                    .text:00000000000011C1                 mov     rax, rsi
                    .text:00000000000011C4                 shr     rsi, 3Fh
                    .text:00000000000011C8                 sar     rax, 3
                    .text:00000000000011CC                 add     rsi, rax
                    .text:00000000000011CF                 sar     rsi, 1
                    .text:00000000000011D2                 jz      short locret_11E8
                    .text:00000000000011D4                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:00000000000011DB                 test    rax, rax
                    .text:00000000000011DE                 jz      short locret_11E8
                    .text:00000000000011E0                 jmp     rax
                    .text:00000000000011E0 ; ---------------------------------------------------------------------------
                    .text:00000000000011E2                 align 8
                    .text:00000000000011E8
                    .text:00000000000011E8 locret_11E8:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:00000000000011E8                                         ; register_tm_clones+2E↑j
                    .text:00000000000011E8                 retn
                    .text:00000000000011E8 register_tm_clones endp
                    .text:00000000000011E8
                    .text:00000000000011E8 ; ---------------------------------------------------------------------------
                    .text:00000000000011E9                 align 10h
                    .text:00000000000011F0
                    .text:00000000000011F0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011F0
                    .text:00000000000011F0
                    .text:00000000000011F0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:00000000000011F0                 endbr64
                    .text:00000000000011F4                 cmp     cs:__bss_start, 0
                    .text:00000000000011FB                 jnz     short locret_1228
                    .text:00000000000011FD                 push    rbp
                    .text:00000000000011FE                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001206                 mov     rbp, rsp
                    .text:0000000000001209                 jz      short loc_1217
                    .text:000000000000120B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001212                 call    __cxa_finalize
                    .text:0000000000001217
                    .text:0000000000001217 loc_1217:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001217                 call    deregister_tm_clones
                    .text:000000000000121C                 mov     cs:__bss_start, 1
                    .text:0000000000001223                 pop     rbp
                    .text:0000000000001224                 retn
                    .text:0000000000001224 ; ---------------------------------------------------------------------------
                    .text:0000000000001225                 align 8
                    .text:0000000000001228
                    .text:0000000000001228 locret_1228:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001228                 retn
                    .text:0000000000001228 __do_global_dtors_aux endp
                    .text:0000000000001228
                    .text:0000000000001228 ; ---------------------------------------------------------------------------
                    .text:0000000000001229                 align 10h
                    .text:0000000000001230
                    .text:0000000000001230 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001230
                    .text:0000000000001230
                    .text:0000000000001230 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001230                 endbr64
                    .text:0000000000001234                 jmp     register_tm_clones
                    .text:0000000000001234 frame_dummy     endp
                    .text:0000000000001234
                    .text:0000000000001234 ; ---------------------------------------------------------------------------
                    .text:0000000000001239                 align 20h
                    .text:0000000000001240
                    .text:0000000000001240 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001240
                    .text:0000000000001240
                    .text:0000000000001240 quick_sort      proc near               ; CODE XREF: main+77↑p
                    .text:0000000000001240                                         ; quick_sort+D5↓p ...
                    .text:0000000000001240 ; __unwind {
                    .text:0000000000001240                 cmp     rsi, rdx
                    .text:0000000000001243                 jge     locret_132F
                    .text:0000000000001249                 push    r14
                    .text:000000000000124B                 mov     r14, rdx
                    .text:000000000000124E                 push    r13
                    .text:0000000000001250                 mov     r13, rsi
                    .text:0000000000001253                 push    r12
                    .text:0000000000001255                 push    rbp
                    .text:0000000000001256                 push    rbx
                    .text:0000000000001257                 mov     rbx, rdi
                    .text:000000000000125A
                    .text:000000000000125A loc_125A:                               ; CODE XREF: quick_sort+92↓j
                    .text:000000000000125A                 mov     rax, r14
                    .text:000000000000125D                 mov     rdi, r13
                    .text:0000000000001260                 lea     r8, [r13+1]
                    .text:0000000000001264                 mov     r12, r14
                    .text:0000000000001267                 sub     rax, r13
                    .text:000000000000126A                 sar     rax, 1
                    .text:000000000000126D                 add     rax, r13
                    .text:0000000000001270                 mov     esi, [rbx+rax*4]
                    .text:0000000000001273                 nop     dword ptr [rax+rax+00h]
                    .text:0000000000001278
                    .text:0000000000001278 loc_1278:                               ; CODE XREF: quick_sort+BA↓j
                    .text:0000000000001278                 lea     rax, ds:0[r12*4]
                    .text:0000000000001280                 mov     r9d, [rbx+rdi*4]
                    .text:0000000000001284                 mov     rbp, rdi
                    .text:0000000000001287                 lea     rcx, [rbx+rax]
                    .text:000000000000128B                 mov     edx, [rcx]
                    .text:000000000000128D                 cmp     r9d, esi
                    .text:0000000000001290                 jl      short loc_12F2
                    .text:0000000000001292                 cmp     esi, edx
                    .text:0000000000001294                 jge     short loc_12B1
                    .text:0000000000001296                 lea     rax, [rbx+rax-4]
                    .text:000000000000129B                 nop     dword ptr [rax+rax+00h]
                    .text:00000000000012A0
                    .text:00000000000012A0 loc_12A0:                               ; CODE XREF: quick_sort+6F↓j
                    .text:00000000000012A0                 mov     rcx, rax
                    .text:00000000000012A3                 mov     edx, [rax]
                    .text:00000000000012A5                 sub     rax, 4
                    .text:00000000000012A9                 sub     r12, 1
                    .text:00000000000012AD                 cmp     edx, esi
                    .text:00000000000012AF                 jg      short loc_12A0
                    .text:00000000000012B1
                    .text:00000000000012B1 loc_12B1:                               ; CODE XREF: quick_sort+54↑j
                    .text:00000000000012B1                 cmp     rdi, r12
                    .text:00000000000012B4                 jle     short loc_12E0
                    .text:00000000000012B6
                    .text:00000000000012B6 loc_12B6:                               ; CODE XREF: quick_sort+B0↓j
                    .text:00000000000012B6                 mov     rdx, r12
                    .text:00000000000012B9                 mov     rax, r14
                    .text:00000000000012BC                 sub     rdx, r13
                    .text:00000000000012BF                 sub     rax, rbp
                    .text:00000000000012C2                 cmp     rdx, rax
                    .text:00000000000012C5                 jge     short loc_12FF
                    .text:00000000000012C7                 cmp     r13, r12
                    .text:00000000000012CA                 jl      short loc_1309
                    .text:00000000000012CC                 mov     r13, rbp
                    .text:00000000000012CF
                    .text:00000000000012CF loc_12CF:                               ; CODE XREF: quick_sort+C7↓j
                    .text:00000000000012CF                                         ; quick_sort+DA↓j ...
                    .text:00000000000012CF                 cmp     r14, r13
                    .text:00000000000012D2                 jg      short loc_125A
                    .text:00000000000012D4                 pop     rbx
                    .text:00000000000012D5                 pop     rbp
                    .text:00000000000012D6                 pop     r12
                    .text:00000000000012D8                 pop     r13
                    .text:00000000000012DA                 pop     r14
                    .text:00000000000012DC                 retn
                    .text:00000000000012DC ; ---------------------------------------------------------------------------
                    .text:00000000000012DD                 align 20h
                    .text:00000000000012E0
                    .text:00000000000012E0 loc_12E0:                               ; CODE XREF: quick_sort+74↑j
                    .text:00000000000012E0                 sub     r12, 1
                    .text:00000000000012E4                 mov     [rbx+rdi*4], edx
                    .text:00000000000012E7                 mov     rbp, r8
                    .text:00000000000012EA                 mov     [rcx], r9d
                    .text:00000000000012ED                 cmp     r8, r12
                    .text:00000000000012F0                 jg      short loc_12B6
                    .text:00000000000012F2
                    .text:00000000000012F2 loc_12F2:                               ; CODE XREF: quick_sort+50↑j
                    .text:00000000000012F2                 add     r8, 1
                    .text:00000000000012F6                 add     rdi, 1
                    .text:00000000000012FA                 jmp     loc_1278
                    .text:00000000000012FF ; ---------------------------------------------------------------------------
                    .text:00000000000012FF
                    .text:00000000000012FF loc_12FF:                               ; CODE XREF: quick_sort+85↑j
                    .text:00000000000012FF                 cmp     r14, rbp
                    .text:0000000000001302                 jg      short loc_131C
                    .text:0000000000001304                 mov     r14, r12
                    .text:0000000000001307                 jmp     short loc_12CF
                    .text:0000000000001309 ; ---------------------------------------------------------------------------
                    .text:0000000000001309
                    .text:0000000000001309 loc_1309:                               ; CODE XREF: quick_sort+8A↑j
                    .text:0000000000001309                 mov     rsi, r13
                    .text:000000000000130C                 mov     rdx, r12
                    .text:000000000000130F                 mov     rdi, rbx
                    .text:0000000000001312                 mov     r13, rbp
                    .text:0000000000001315                 call    quick_sort
                    .text:000000000000131A                 jmp     short loc_12CF
                    .text:000000000000131C ; ---------------------------------------------------------------------------
                    .text:000000000000131C
                    .text:000000000000131C loc_131C:                               ; CODE XREF: quick_sort+C2↑j
                    .text:000000000000131C                 mov     rdx, r14
                    .text:000000000000131F                 mov     rsi, rbp
                    .text:0000000000001322                 mov     rdi, rbx
                    .text:0000000000001325                 mov     r14, r12
                    .text:0000000000001328                 call    quick_sort
                    .text:000000000000132D                 jmp     short loc_12CF
                    .text:000000000000132F ; ---------------------------------------------------------------------------
                    .text:000000000000132F
                    .text:000000000000132F locret_132F:                            ; CODE XREF: quick_sort+3↑j
                    .text:000000000000132F                 retn
                    .text:000000000000132F ; } // starts at 1240
                    .text:000000000000132F quick_sort      endp
                    .text:000000000000132F
                    .text:000000000000132F _text           ends
                    .text:000000000000132F
                    .fini:0000000000001330 ; ===========================================================================
                    .fini:0000000000001330
                    .fini:0000000000001330 ; Segment type: Pure code
                    .fini:0000000000001330 ; Segment permissions: Read/Execute
                    .fini:0000000000001330 _fini           segment dword public 'CODE' use64
                    .fini:0000000000001330                 assume cs:_fini
                    .fini:0000000000001330                 ;org 1330h
                    .fini:0000000000001330                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:0000000000001330
                    .fini:0000000000001330 ; =============== S U B R O U T I N E =======================================
                    .fini:0000000000001330
                    .fini:0000000000001330
                    .fini:0000000000001330                 public _term_proc
                    .fini:0000000000001330 _term_proc      proc near
                    .fini:0000000000001330                 endbr64                 ; _fini
                    .fini:0000000000001334                 sub     rsp, 8
                    .fini:0000000000001338                 add     rsp, 8
                    .fini:000000000000133C                 retn
                    .fini:000000000000133C _term_proc      endp
                    .fini:000000000000133C
                    .fini:000000000000133C _fini           ends
                    .fini:000000000000133C
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 unk_2004        db  25h ; %             ; DATA XREF: main+E↑o
                    .rodata:0000000000002005                 db  64h ; d
                    .rodata:0000000000002006                 db  20h
                    .rodata:0000000000002007                 db    0
                    .rodata:0000000000002008 unk_2008        db  0Ah                 ; DATA XREF: main+9C↑o
                    .rodata:0000000000002009                 db    0
                    .rodata:0000000000002009 _rodata         ends
                    .rodata:0000000000002009
                    LOAD:000000000000200A ; ===========================================================================
                    LOAD:000000000000200A
                    LOAD:000000000000200A ; Segment type: Pure data
                    LOAD:000000000000200A ; Segment permissions: Read
                    LOAD:000000000000200A LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000200A                 assume cs:LOAD
                    LOAD:000000000000200A                 ;org 200Ah
                    LOAD:000000000000200A                 align 4
                    LOAD:000000000000200A LOAD            ends
                    LOAD:000000000000200A
                    .eh_frame_hdr:000000000000200C ; ===========================================================================
                    .eh_frame_hdr:000000000000200C
                    .eh_frame_hdr:000000000000200C ; Segment type: Pure data
                    .eh_frame_hdr:000000000000200C ; Segment permissions: Read
                    .eh_frame_hdr:000000000000200C _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:000000000000200C                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:000000000000200C                 ;org 200Ch
                    .eh_frame_hdr:000000000000200C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:000000000000200D                 db  1Bh
                    .eh_frame_hdr:000000000000200E                 db    3
                    .eh_frame_hdr:000000000000200F                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002010                 db  38h ; 8
                    .eh_frame_hdr:0000000000002011                 db    0
                    .eh_frame_hdr:0000000000002012                 db    0
                    .eh_frame_hdr:0000000000002013                 db    0
                    .eh_frame_hdr:0000000000002014                 db    6
                    .eh_frame_hdr:0000000000002015                 db    0
                    .eh_frame_hdr:0000000000002016                 db    0
                    .eh_frame_hdr:0000000000002017                 db    0
                    .eh_frame_hdr:0000000000002018                 db  14h
                    .eh_frame_hdr:0000000000002019                 db 0F0h
                    .eh_frame_hdr:000000000000201A                 db 0FFh
                    .eh_frame_hdr:000000000000201B                 db 0FFh
                    .eh_frame_hdr:000000000000201C                 db  6Ch ; l
                    .eh_frame_hdr:000000000000201D                 db    0
                    .eh_frame_hdr:000000000000201E                 db    0
                    .eh_frame_hdr:000000000000201F                 db    0
                    .eh_frame_hdr:0000000000002020                 db  44h ; D
                    .eh_frame_hdr:0000000000002021                 db 0F0h
                    .eh_frame_hdr:0000000000002022                 db 0FFh
                    .eh_frame_hdr:0000000000002023                 db 0FFh
                    .eh_frame_hdr:0000000000002024                 db  94h
                    .eh_frame_hdr:0000000000002025                 db    0
                    .eh_frame_hdr:0000000000002026                 db    0
                    .eh_frame_hdr:0000000000002027                 db    0
                    .eh_frame_hdr:0000000000002028                 db  54h ; T
                    .eh_frame_hdr:0000000000002029                 db 0F0h
                    .eh_frame_hdr:000000000000202A                 db 0FFh
                    .eh_frame_hdr:000000000000202B                 db 0FFh
                    .eh_frame_hdr:000000000000202C                 db 0ACh
                    .eh_frame_hdr:000000000000202D                 db    0
                    .eh_frame_hdr:000000000000202E                 db    0
                    .eh_frame_hdr:000000000000202F                 db    0
                    .eh_frame_hdr:0000000000002030                 db  74h ; t
                    .eh_frame_hdr:0000000000002031                 db 0F0h
                    .eh_frame_hdr:0000000000002032                 db 0FFh
                    .eh_frame_hdr:0000000000002033                 db 0FFh
                    .eh_frame_hdr:0000000000002034                 db  0Ch
                    .eh_frame_hdr:0000000000002035                 db    1
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db  44h ; D
                    .eh_frame_hdr:0000000000002039                 db 0F1h
                    .eh_frame_hdr:000000000000203A                 db 0FFh
                    .eh_frame_hdr:000000000000203B                 db 0FFh
                    .eh_frame_hdr:000000000000203C                 db  54h ; T
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:0000000000002040                 db  34h ; 4
                    .eh_frame_hdr:0000000000002041                 db 0F2h
                    .eh_frame_hdr:0000000000002042                 db 0FFh
                    .eh_frame_hdr:0000000000002043                 db 0FFh
                    .eh_frame_hdr:0000000000002044                 db 0C4h
                    .eh_frame_hdr:0000000000002045                 db    0
                    .eh_frame_hdr:0000000000002046                 db    0
                    .eh_frame_hdr:0000000000002047                 db    0
                    .eh_frame_hdr:0000000000002047 _eh_frame_hdr   ends
                    .eh_frame_hdr:0000000000002047
                    .eh_frame:0000000000002048 ; ===========================================================================
                    .eh_frame:0000000000002048
                    .eh_frame:0000000000002048 ; Segment type: Pure data
                    .eh_frame:0000000000002048 ; Segment permissions: Read
                    .eh_frame:0000000000002048 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002048                 assume cs:_eh_frame
                    .eh_frame:0000000000002048                 ;org 2048h
                    .eh_frame:0000000000002048                 db  14h
                    .eh_frame:0000000000002049                 db    0
                    .eh_frame:000000000000204A                 db    0
                    .eh_frame:000000000000204B                 db    0
                    .eh_frame:000000000000204C                 db    0
                    .eh_frame:000000000000204D                 db    0
                    .eh_frame:000000000000204E                 db    0
                    .eh_frame:000000000000204F                 db    0
                    .eh_frame:0000000000002050                 db    1
                    .eh_frame:0000000000002051                 db  7Ah ; z
                    .eh_frame:0000000000002052                 db  52h ; R
                    .eh_frame:0000000000002053                 db    0
                    .eh_frame:0000000000002054                 db    1
                    .eh_frame:0000000000002055                 db  78h ; x
                    .eh_frame:0000000000002056                 db  10h
                    .eh_frame:0000000000002057                 db    1
                    .eh_frame:0000000000002058                 db  1Bh
                    .eh_frame:0000000000002059                 db  0Ch
                    .eh_frame:000000000000205A                 db    7
                    .eh_frame:000000000000205B                 db    8
                    .eh_frame:000000000000205C                 db  90h
                    .eh_frame:000000000000205D                 db    1
                    .eh_frame:000000000000205E                 db    0
                    .eh_frame:000000000000205F                 db    0
                    .eh_frame:0000000000002060                 db  14h
                    .eh_frame:0000000000002061                 db    0
                    .eh_frame:0000000000002062                 db    0
                    .eh_frame:0000000000002063                 db    0
                    .eh_frame:0000000000002064                 db  1Ch
                    .eh_frame:0000000000002065                 db    0
                    .eh_frame:0000000000002066                 db    0
                    .eh_frame:0000000000002067                 db    0
                    .eh_frame:0000000000002068                 db 0E8h
                    .eh_frame:0000000000002069                 db 0F0h
                    .eh_frame:000000000000206A                 db 0FFh
                    .eh_frame:000000000000206B                 db 0FFh
                    .eh_frame:000000000000206C                 db  26h ; &
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db    0
                    .eh_frame:0000000000002071                 db  44h ; D
                    .eh_frame:0000000000002072                 db    7
                    .eh_frame:0000000000002073                 db  10h
                    .eh_frame:0000000000002074                 db    0
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db  24h ; $
                    .eh_frame:0000000000002079                 db    0
                    .eh_frame:000000000000207A                 db    0
                    .eh_frame:000000000000207B                 db    0
                    .eh_frame:000000000000207C                 db  34h ; 4
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db 0A0h
                    .eh_frame:0000000000002081                 db 0EFh
                    .eh_frame:0000000000002082                 db 0FFh
                    .eh_frame:0000000000002083                 db 0FFh
                    .eh_frame:0000000000002084                 db  30h ; 0
                    .eh_frame:0000000000002085                 db    0
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db    0
                    .eh_frame:0000000000002089                 db  0Eh
                    .eh_frame:000000000000208A                 db  10h
                    .eh_frame:000000000000208B                 db  46h ; F
                    .eh_frame:000000000000208C                 db  0Eh
                    .eh_frame:000000000000208D                 db  18h
                    .eh_frame:000000000000208E                 db  4Ah ; J
                    .eh_frame:000000000000208F                 db  0Fh
                    .eh_frame:0000000000002090                 db  0Bh
                    .eh_frame:0000000000002091                 db  77h ; w
                    .eh_frame:0000000000002092                 db    8
                    .eh_frame:0000000000002093                 db  80h
                    .eh_frame:0000000000002094                 db    0
                    .eh_frame:0000000000002095                 db  3Fh ; ?
                    .eh_frame:0000000000002096                 db  1Ah
                    .eh_frame:0000000000002097                 db  3Ah ; :
                    .eh_frame:0000000000002098                 db  2Ah ; *
                    .eh_frame:0000000000002099                 db  33h ; 3
                    .eh_frame:000000000000209A                 db  24h ; $
                    .eh_frame:000000000000209B                 db  22h ; "
                    .eh_frame:000000000000209C                 db    0
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db  14h
                    .eh_frame:00000000000020A1                 db    0
                    .eh_frame:00000000000020A2                 db    0
                    .eh_frame:00000000000020A3                 db    0
                    .eh_frame:00000000000020A4                 db  5Ch ; \
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db 0A8h
                    .eh_frame:00000000000020A9                 db 0EFh
                    .eh_frame:00000000000020AA                 db 0FFh
                    .eh_frame:00000000000020AB                 db 0FFh
                    .eh_frame:00000000000020AC                 db  10h
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db    0
                    .eh_frame:00000000000020B1                 db    0
                    .eh_frame:00000000000020B2                 db    0
                    .eh_frame:00000000000020B3                 db    0
                    .eh_frame:00000000000020B4                 db    0
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db  14h
                    .eh_frame:00000000000020B9                 db    0
                    .eh_frame:00000000000020BA                 db    0
                    .eh_frame:00000000000020BB                 db    0
                    .eh_frame:00000000000020BC                 db  74h ; t
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db 0A0h
                    .eh_frame:00000000000020C1                 db 0EFh
                    .eh_frame:00000000000020C2                 db 0FFh
                    .eh_frame:00000000000020C3                 db 0FFh
                    .eh_frame:00000000000020C4                 db  20h
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db    0
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db    0
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db  44h ; D
                    .eh_frame:00000000000020D1                 db    0
                    .eh_frame:00000000000020D2                 db    0
                    .eh_frame:00000000000020D3                 db    0
                    .eh_frame:00000000000020D4                 db  8Ch
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db  68h ; h
                    .eh_frame:00000000000020D9                 db 0F1h
                    .eh_frame:00000000000020DA                 db 0FFh
                    .eh_frame:00000000000020DB                 db 0FFh
                    .eh_frame:00000000000020DC                 db 0F0h
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db    0
                    .eh_frame:00000000000020E1                 db  4Bh ; K
                    .eh_frame:00000000000020E2                 db  0Eh
                    .eh_frame:00000000000020E3                 db  10h
                    .eh_frame:00000000000020E4                 db  8Eh
                    .eh_frame:00000000000020E5                 db    2
                    .eh_frame:00000000000020E6                 db  45h ; E
                    .eh_frame:00000000000020E7                 db  0Eh
                    .eh_frame:00000000000020E8                 db  18h
                    .eh_frame:00000000000020E9                 db  8Dh
                    .eh_frame:00000000000020EA                 db    3
                    .eh_frame:00000000000020EB                 db  45h ; E
                    .eh_frame:00000000000020EC                 db  0Eh
                    .eh_frame:00000000000020ED                 db  20h
                    .eh_frame:00000000000020EE                 db  8Ch
                    .eh_frame:00000000000020EF                 db    4
                    .eh_frame:00000000000020F0                 db  41h ; A
                    .eh_frame:00000000000020F1                 db  0Eh
                    .eh_frame:00000000000020F2                 db  28h ; (
                    .eh_frame:00000000000020F3                 db  86h
                    .eh_frame:00000000000020F4                 db    5
                    .eh_frame:00000000000020F5                 db  41h ; A
                    .eh_frame:00000000000020F6                 db  0Eh
                    .eh_frame:00000000000020F7                 db  30h ; 0
                    .eh_frame:00000000000020F8                 db  83h
                    .eh_frame:00000000000020F9                 db    6
                    .eh_frame:00000000000020FA                 db    2
                    .eh_frame:00000000000020FB                 db  7Eh ; ~
                    .eh_frame:00000000000020FC                 db  0Ah
                    .eh_frame:00000000000020FD                 db  0Eh
                    .eh_frame:00000000000020FE                 db  28h ; (
                    .eh_frame:00000000000020FF                 db  41h ; A
                    .eh_frame:0000000000002100                 db  0Eh
                    .eh_frame:0000000000002101                 db  20h
                    .eh_frame:0000000000002102                 db  42h ; B
                    .eh_frame:0000000000002103                 db  0Eh
                    .eh_frame:0000000000002104                 db  18h
                    .eh_frame:0000000000002105                 db  42h ; B
                    .eh_frame:0000000000002106                 db  0Eh
                    .eh_frame:0000000000002107                 db  10h
                    .eh_frame:0000000000002108                 db  42h ; B
                    .eh_frame:0000000000002109                 db  0Eh
                    .eh_frame:000000000000210A                 db    8
                    .eh_frame:000000000000210B                 db  44h ; D
                    .eh_frame:000000000000210C                 db  0Bh
                    .eh_frame:000000000000210D                 db    2
                    .eh_frame:000000000000210E                 db  4Fh ; O
                    .eh_frame:000000000000210F                 db  0Eh
                    .eh_frame:0000000000002110                 db    8
                    .eh_frame:0000000000002111                 db 0C3h
                    .eh_frame:0000000000002112                 db 0C6h
                    .eh_frame:0000000000002113                 db 0CCh
                    .eh_frame:0000000000002114                 db 0CDh
                    .eh_frame:0000000000002115                 db 0CEh
                    .eh_frame:0000000000002116                 db    0
                    .eh_frame:0000000000002117                 db    0
                    .eh_frame:0000000000002118                 db  30h ; 0
                    .eh_frame:0000000000002119                 db    0
                    .eh_frame:000000000000211A                 db    0
                    .eh_frame:000000000000211B                 db    0
                    .eh_frame:000000000000211C                 db 0D4h
                    .eh_frame:000000000000211D                 db    0
                    .eh_frame:000000000000211E                 db    0
                    .eh_frame:000000000000211F                 db    0
                    .eh_frame:0000000000002120                 db  60h ; `
                    .eh_frame:0000000000002121                 db 0EFh
                    .eh_frame:0000000000002122                 db 0FFh
                    .eh_frame:0000000000002123                 db 0FFh
                    .eh_frame:0000000000002124                 db 0CDh
                    .eh_frame:0000000000002125                 db    0
                    .eh_frame:0000000000002126                 db    0
                    .eh_frame:0000000000002127                 db    0
                    .eh_frame:0000000000002128                 db    0
                    .eh_frame:0000000000002129                 db  46h ; F
                    .eh_frame:000000000000212A                 db  0Eh
                    .eh_frame:000000000000212B                 db  10h
                    .eh_frame:000000000000212C                 db  8Ch
                    .eh_frame:000000000000212D                 db    2
                    .eh_frame:000000000000212E                 db  48h ; H
                    .eh_frame:000000000000212F                 db  0Eh
                    .eh_frame:0000000000002130                 db  18h
                    .eh_frame:0000000000002131                 db  86h
                    .eh_frame:0000000000002132                 db    3
                    .eh_frame:0000000000002133                 db  48h ; H
                    .eh_frame:0000000000002134                 db  0Eh
                    .eh_frame:0000000000002135                 db  20h
                    .eh_frame:0000000000002136                 db  83h
                    .eh_frame:0000000000002137                 db    4
                    .eh_frame:0000000000002138                 db  44h ; D
                    .eh_frame:0000000000002139                 db  0Eh
                    .eh_frame:000000000000213A                 db  50h ; P
                    .eh_frame:000000000000213B                 db    2
                    .eh_frame:000000000000213C                 db 0A7h
                    .eh_frame:000000000000213D                 db  0Ah
                    .eh_frame:000000000000213E                 db  0Eh
                    .eh_frame:000000000000213F                 db  20h
                    .eh_frame:0000000000002140                 db  43h ; C
                    .eh_frame:0000000000002141                 db  0Eh
                    .eh_frame:0000000000002142                 db  18h
                    .eh_frame:0000000000002143                 db  41h ; A
                    .eh_frame:0000000000002144                 db  0Eh
                    .eh_frame:0000000000002145                 db  10h
                    .eh_frame:0000000000002146                 db  42h ; B
                    .eh_frame:0000000000002147                 db  0Eh
                    .eh_frame:0000000000002148                 db    8
                    .eh_frame:0000000000002149                 db  41h ; A
                    .eh_frame:000000000000214A                 db  0Bh
                    .eh_frame:000000000000214B                 db    0
                    .eh_frame:000000000000214C __FRAME_END__   db    0
                    .eh_frame:000000000000214D                 db    0
                    .eh_frame:000000000000214E                 db    0
                    .eh_frame:000000000000214F                 db    0
                    .eh_frame:000000000000214F _eh_frame       ends
                    .eh_frame:000000000000214F
                    .init_array:0000000000003DB0 ; ELF Initialization Function Table
                    .init_array:0000000000003DB0 ; ===========================================================================
                    .init_array:0000000000003DB0
                    .init_array:0000000000003DB0 ; Segment type: Pure data
                    .init_array:0000000000003DB0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DB0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DB0                 assume cs:_init_array
                    .init_array:0000000000003DB0                 ;org 3DB0h
                    .init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DB0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DB0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DB0 _init_array     ends
                    .init_array:0000000000003DB0
                    .fini_array:0000000000003DB8 ; ELF Termination Function Table
                    .fini_array:0000000000003DB8 ; ===========================================================================
                    .fini_array:0000000000003DB8
                    .fini_array:0000000000003DB8 ; Segment type: Pure data
                    .fini_array:0000000000003DB8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DB8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DB8                 assume cs:_fini_array
                    .fini_array:0000000000003DB8                 ;org 3DB8h
                    .fini_array:0000000000003DB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DB8 _fini_array     ends
                    .fini_array:0000000000003DB8
                    LOAD:0000000000003DC0 ; ELF Dynamic Information
                    LOAD:0000000000003DC0 ; ===========================================================================
                    LOAD:0000000000003DC0
                    LOAD:0000000000003DC0 ; Segment type: Pure data
                    LOAD:0000000000003DC0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DC0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DC0                 assume cs:LOAD
                    LOAD:0000000000003DC0                 ;org 3DC0h
                    LOAD:0000000000003DC0 _DYNAMIC        Elf64_Dyn <1, 40h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DC0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DC0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DE0                 Elf64_Dyn <0Dh, 1330h>  ; DT_FINI
                    LOAD:0000000000003DF0                 Elf64_Dyn <19h, 3DB0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ah, 3DB8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E20                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E30                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E40                 Elf64_Dyn <5, 498h>     ; DT_STRTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E60                 Elf64_Dyn <0Ah, 0BCh>   ; DT_STRSZ
                    LOAD:0000000000003E70                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E80                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E90                 Elf64_Dyn <3, 3FB0h>    ; DT_PLTGOT
                    LOAD:0000000000003EA0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EB0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <17h, 678h>   ; DT_JMPREL
                    LOAD:0000000000003ED0                 Elf64_Dyn <7, 5B8h>     ; DT_RELA
                    LOAD:0000000000003EE0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EF0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003F00                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFEh, 568h> ; DT_VERNEED
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF0h, 554h> ; DT_VERSYM
                    LOAD:0000000000003F50                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F60                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003FA0                 db    0
                    LOAD:0000000000003FA1                 db    0
                    LOAD:0000000000003FA2                 db    0
                    LOAD:0000000000003FA3                 db    0
                    LOAD:0000000000003FA4                 db    0
                    LOAD:0000000000003FA5                 db    0
                    LOAD:0000000000003FA6                 db    0
                    LOAD:0000000000003FA7                 db    0
                    LOAD:0000000000003FA8                 db    0
                    LOAD:0000000000003FA9                 db    0
                    LOAD:0000000000003FAA                 db    0
                    LOAD:0000000000003FAB                 db    0
                    LOAD:0000000000003FAC                 db    0
                    LOAD:0000000000003FAD                 db    0
                    LOAD:0000000000003FAE                 db    0
                    LOAD:0000000000003FAF                 db    0
                    LOAD:0000000000003FAF LOAD            ends
                    LOAD:0000000000003FAF
                    .got:0000000000003FB0 ; ===========================================================================
                    .got:0000000000003FB0
                    .got:0000000000003FB0 ; Segment type: Pure data
                    .got:0000000000003FB0 ; Segment permissions: Read/Write
                    .got:0000000000003FB0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FB0                 assume cs:_got
                    .got:0000000000003FB0                 ;org 3FB0h
                    .got:0000000000003FB0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FB8 qword_3FB8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FC0 qword_3FC0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC8                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004020                 extrn __libc_start_main:near
                    extern:0000000000004020                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004020                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004028                 extrn __stack_chk_fail:near
                    extern:0000000000004028                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004028                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004030                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004038 ; int __cxa_finalize(void *)
                    extern:0000000000004038                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004038                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004040                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004040                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004048                 extrn __gmon_start__:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004048                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004050                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004050
                    extern:0000000000004050
                    extern:0000000000004050                 end _start
                    ```
                    
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : 5BE6E33D227E8E5056EB1A000EF9B0CEA244DBBD57ED0369D934CA6968067EED
                    LOAD:0000000000000000 ; Input MD5    : 1840D5A9C414987C0E57CDA7F9E909E5
                    LOAD:0000000000000000 ; Input CRC32  : 2CA3C2F4
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\quicksort
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'quicksort.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 36F8h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 6A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 6A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 33Dh                 ; Size in file image
                    LOAD:0000000000000110                 dq 33Dh                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 150h                 ; Size in file image
                    LOAD:0000000000000148                 dq 150h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DB0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000178                 dq 260h                 ; Size in file image
                    LOAD:0000000000000180                 dq 268h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DC0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DC0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 200Ch                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 200Ch                ; Physical address
                    LOAD:0000000000000290                 dq 3Ch                  ; Size in file image
                    LOAD:0000000000000298                 dq 3Ch                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DB0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000300                 dq 250h                 ; Size in file image
                    LOAD:0000000000000308                 dq 250h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 0DAh, 0E0h, 8Ch, 27h, 12h, 81h, 91h, 11h, 0A2h, 85h ; Desc
                    LOAD:0000000000000382                 db 0F1h, 68h, 9Ch, 0B7h, 12h, 0EBh, 12h, 0D2h, 88h, 26h
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 7
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 7, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aLibcStartMain - offset unk_498, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:00000000000003F0                            offset dword_0, 0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aItmDeregistert - offset unk_498, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aStackChkFail - offset unk_498, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aGmonStart - offset unk_498, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aPrintfChk - offset unk_498, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aItmRegistertmc - offset unk_498, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aCxaFinalize - offset unk_498, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498 ; ELF String Table
                    LOAD:0000000000000498 unk_498         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000498                                         ; LOAD:0000000000000408↑o ...
                    LOAD:0000000000000499 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004A8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:00000000000004B5 aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004B5                                         ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000004D8 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000568↓o
                    LOAD:00000000000004E2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000578↓o
                    LOAD:00000000000004EE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000588↓o
                    LOAD:00000000000004FA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000598↓o
                    LOAD:0000000000000504 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000050F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000050F                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000053A aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:000000000000053A                                         ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000554 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000554                 dw 0
                    LOAD:0000000000000556                 dw 2                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000558                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:000000000000055A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000055C                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000055E                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:0000000000000560                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:0000000000000562                 dw 5                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:0000000000000564                 dw 0
                    LOAD:0000000000000566                 dw 0
                    LOAD:0000000000000568 ; ELF GNU Symbol Version Requirements
                    LOAD:0000000000000568                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_498, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000578                 Elf64_Vernaux <9691A75h, 0, 5, offset aGlibc225 - offset unk_498, 10h> ; "GLIBC_2.2.5"
                    LOAD:0000000000000588                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset unk_498, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000598                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_498, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005A8                 Elf64_Vernaux <69691B4h, 0, 2, offset aGlibc234_0 - offset unk_498, 0> ; "GLIBC_2.34"
                    LOAD:00000000000005B8 ; ELF RELA Relocation Table
                    LOAD:00000000000005B8                 Elf64_Rela <3DB0h, 8, 1230h> ; R_X86_64_RELATIVE +1230h
                    LOAD:00000000000005D0                 Elf64_Rela <3DB8h, 8, 11F0h> ; R_X86_64_RELATIVE +11F0h
                    LOAD:00000000000005E8                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000600                 Elf64_Rela <3FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000618                 Elf64_Rela <3FE0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000630                 Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000648                 Elf64_Rela <3FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000660                 Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000678 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000678                 Elf64_Rela <3FC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000690                 Elf64_Rela <3FD0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000690 LOAD            ends
                    LOAD:0000000000000690
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FB8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FC0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:000000000000104F ; } // starts at 1020
                    .plt:000000000000104F _plt            ends
                    .plt:000000000000104F
                    .plt.got:0000000000001050 ; ===========================================================================
                    .plt.got:0000000000001050
                    .plt.got:0000000000001050 ; Segment type: Pure code
                    .plt.got:0000000000001050 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001050 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001050                 assume cs:_plt_got
                    .plt.got:0000000000001050                 ;org 1050h
                    .plt.got:0000000000001050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001050 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000105B                 align 20h
                    .plt.got:000000000000105B ; } // starts at 1050
                    .plt.got:000000000000105B _plt_got        ends
                    .plt.got:000000000000105B
                    .plt.sec:0000000000001060 ; ===========================================================================
                    .plt.sec:0000000000001060
                    .plt.sec:0000000000001060 ; Segment type: Pure code
                    .plt.sec:0000000000001060 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001060 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001060                 assume cs:_plt_sec
                    .plt.sec:0000000000001060                 ;org 1060h
                    .plt.sec:0000000000001060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001060 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000106B                 align 10h
                    .plt.sec:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:000000000000107B                 align 20h
                    .plt.sec:000000000000107B ; } // starts at 1060
                    .plt.sec:000000000000107B _plt_sec        ends
                    .plt.sec:000000000000107B
                    .text:0000000000001080 ; ===========================================================================
                    .text:0000000000001080
                    .text:0000000000001080 ; Segment type: Pure code
                    .text:0000000000001080 ; Segment permissions: Read/Execute
                    .text:0000000000001080 _text           segment para public 'CODE' use64
                    .text:0000000000001080                 assume cs:_text
                    .text:0000000000001080                 ;org 1080h
                    .text:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001080
                    .text:0000000000001080 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001080
                    .text:0000000000001080
                    .text:0000000000001080 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001080                 public main
                    .text:0000000000001080 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001080
                    .text:0000000000001080 var_48          = qword ptr -48h
                    .text:0000000000001080 var_40          = qword ptr -40h
                    .text:0000000000001080 var_38          = qword ptr -38h
                    .text:0000000000001080 var_30          = qword ptr -30h
                    .text:0000000000001080 var_28          = qword ptr -28h
                    .text:0000000000001080 var_20          = qword ptr -20h
                    .text:0000000000001080
                    .text:0000000000001080 ; __unwind {
                    .text:0000000000001080                 endbr64
                    .text:0000000000001084                 push    r12
                    .text:0000000000001086                 mov     edx, 9
                    .text:000000000000108B                 xor     esi, esi
                    .text:000000000000108D                 push    rbp
                    .text:000000000000108E                 lea     rbp, unk_2004
                    .text:0000000000001095                 push    rbx
                    .text:0000000000001096                 sub     rsp, 30h
                    .text:000000000000109A                 mov     rax, fs:28h
                    .text:00000000000010A3                 mov     [rsp+48h+var_20], rax
                    .text:00000000000010A8                 mov     rax, 100000009h
                    .text:00000000000010B2                 mov     rbx, rsp
                    .text:00000000000010B5                 lea     r12, [rsp+48h+var_20]
                    .text:00000000000010BA                 mov     [rsp+48h+var_28], 4
                    .text:00000000000010C3                 mov     rdi, rbx
                    .text:00000000000010C6                 mov     [rsp+48h+var_48], rax
                    .text:00000000000010CA                 mov     rax, 300000005h
                    .text:00000000000010D4                 mov     [rsp+48h+var_40], rax
                    .text:00000000000010D9                 mov     rax, 200000007h
                    .text:00000000000010E3                 mov     [rsp+48h+var_38], rax
                    .text:00000000000010E8                 mov     rax, 600000008h
                    .text:00000000000010F2                 mov     [rsp+48h+var_30], rax
                    .text:00000000000010F7                 call    quick_sort
                    .text:00000000000010FC                 nop     dword ptr [rax+00h]
                    .text:0000000000001100
                    .text:0000000000001100 loc_1100:                               ; CODE XREF: main+98↓j
                    .text:0000000000001100                 mov     edx, [rbx]
                    .text:0000000000001102                 mov     rsi, rbp
                    .text:0000000000001105                 mov     edi, 1
                    .text:000000000000110A                 xor     eax, eax
                    .text:000000000000110C                 add     rbx, 4
                    .text:0000000000001110                 call    ___printf_chk
                    .text:0000000000001115                 cmp     rbx, r12
                    .text:0000000000001118                 jnz     short loc_1100
                    .text:000000000000111A                 xor     eax, eax
                    .text:000000000000111C                 lea     rsi, unk_2008
                    .text:0000000000001123                 mov     edi, 1
                    .text:0000000000001128                 call    ___printf_chk
                    .text:000000000000112D                 mov     rax, [rsp+48h+var_20]
                    .text:0000000000001132                 sub     rax, fs:28h
                    .text:000000000000113B                 jnz     short loc_1148
                    .text:000000000000113D                 add     rsp, 30h
                    .text:0000000000001141                 xor     eax, eax
                    .text:0000000000001143                 pop     rbx
                    .text:0000000000001144                 pop     rbp
                    .text:0000000000001145                 pop     r12
                    .text:0000000000001147                 retn
                    .text:0000000000001148 ; ---------------------------------------------------------------------------
                    .text:0000000000001148
                    .text:0000000000001148 loc_1148:                               ; CODE XREF: main+BB↑j
                    .text:0000000000001148                 call    ___stack_chk_fail
                    .text:0000000000001148 ; } // starts at 1080
                    .text:0000000000001148 main            endp
                    .text:0000000000001148
                    .text:0000000000001148 ; ---------------------------------------------------------------------------
                    .text:000000000000114D                 align 10h
                    .text:0000000000001150
                    .text:0000000000001150 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001150
                    .text:0000000000001150 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001150
                    .text:0000000000001150                 public _start
                    .text:0000000000001150 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001150 ; __unwind {
                    .text:0000000000001150                 endbr64
                    .text:0000000000001154                 xor     ebp, ebp
                    .text:0000000000001156                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001159                 pop     rsi             ; argc
                    .text:000000000000115A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000115D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001161                 push    rax
                    .text:0000000000001162                 push    rsp             ; stack_end
                    .text:0000000000001163                 xor     r8d, r8d        ; fini
                    .text:0000000000001166                 xor     ecx, ecx        ; init
                    .text:0000000000001168                 lea     rdi, main       ; main
                    .text:000000000000116F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001175                 hlt
                    .text:0000000000001175 ; } // starts at 1150
                    .text:0000000000001175 _start          endp
                    .text:0000000000001175
                    .text:0000000000001175 ; ---------------------------------------------------------------------------
                    .text:0000000000001176                 align 20h
                    .text:0000000000001180
                    .text:0000000000001180 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001180
                    .text:0000000000001180
                    .text:0000000000001180 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1217↓p
                    .text:0000000000001180                 lea     rdi, __bss_start
                    .text:0000000000001187                 lea     rax, __bss_start
                    .text:000000000000118E                 cmp     rax, rdi
                    .text:0000000000001191                 jz      short locret_11A8
                    .text:0000000000001193                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:000000000000119A                 test    rax, rax
                    .text:000000000000119D                 jz      short locret_11A8
                    .text:000000000000119F                 jmp     rax
                    .text:000000000000119F ; ---------------------------------------------------------------------------
                    .text:00000000000011A1                 align 8
                    .text:00000000000011A8
                    .text:00000000000011A8 locret_11A8:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:00000000000011A8                                         ; deregister_tm_clones+1D↑j
                    .text:00000000000011A8                 retn
                    .text:00000000000011A8 deregister_tm_clones endp
                    .text:00000000000011A8
                    .text:00000000000011A8 ; ---------------------------------------------------------------------------
                    .text:00000000000011A9                 align 10h
                    .text:00000000000011B0
                    .text:00000000000011B0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011B0
                    .text:00000000000011B0
                    .text:00000000000011B0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:00000000000011B0                 lea     rdi, __bss_start
                    .text:00000000000011B7                 lea     rsi, __bss_start
                    .text:00000000000011BE                 sub     rsi, rdi
                    .text:00000000000011C1                 mov     rax, rsi
                    .text:00000000000011C4                 shr     rsi, 3Fh
                    .text:00000000000011C8                 sar     rax, 3
                    .text:00000000000011CC                 add     rsi, rax
                    .text:00000000000011CF                 sar     rsi, 1
                    .text:00000000000011D2                 jz      short locret_11E8
                    .text:00000000000011D4                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:00000000000011DB                 test    rax, rax
                    .text:00000000000011DE                 jz      short locret_11E8
                    .text:00000000000011E0                 jmp     rax
                    .text:00000000000011E0 ; ---------------------------------------------------------------------------
                    .text:00000000000011E2                 align 8
                    .text:00000000000011E8
                    .text:00000000000011E8 locret_11E8:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:00000000000011E8                                         ; register_tm_clones+2E↑j
                    .text:00000000000011E8                 retn
                    .text:00000000000011E8 register_tm_clones endp
                    .text:00000000000011E8
                    .text:00000000000011E8 ; ---------------------------------------------------------------------------
                    .text:00000000000011E9                 align 10h
                    .text:00000000000011F0
                    .text:00000000000011F0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011F0
                    .text:00000000000011F0
                    .text:00000000000011F0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:00000000000011F0                 endbr64
                    .text:00000000000011F4                 cmp     cs:__bss_start, 0
                    .text:00000000000011FB                 jnz     short locret_1228
                    .text:00000000000011FD                 push    rbp
                    .text:00000000000011FE                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001206                 mov     rbp, rsp
                    .text:0000000000001209                 jz      short loc_1217
                    .text:000000000000120B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001212                 call    __cxa_finalize
                    .text:0000000000001217
                    .text:0000000000001217 loc_1217:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001217                 call    deregister_tm_clones
                    .text:000000000000121C                 mov     cs:__bss_start, 1
                    .text:0000000000001223                 pop     rbp
                    .text:0000000000001224                 retn
                    .text:0000000000001224 ; ---------------------------------------------------------------------------
                    .text:0000000000001225                 align 8
                    .text:0000000000001228
                    .text:0000000000001228 locret_1228:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001228                 retn
                    .text:0000000000001228 __do_global_dtors_aux endp
                    .text:0000000000001228
                    .text:0000000000001228 ; ---------------------------------------------------------------------------
                    .text:0000000000001229                 align 10h
                    .text:0000000000001230
                    .text:0000000000001230 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001230
                    .text:0000000000001230
                    .text:0000000000001230 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001230                 endbr64
                    .text:0000000000001234                 jmp     register_tm_clones
                    .text:0000000000001234 frame_dummy     endp
                    .text:0000000000001234
                    .text:0000000000001234 ; ---------------------------------------------------------------------------
                    .text:0000000000001239                 align 20h
                    .text:0000000000001240
                    .text:0000000000001240 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001240
                    .text:0000000000001240
                    .text:0000000000001240 quick_sort      proc near               ; CODE XREF: main+77↑p
                    .text:0000000000001240                                         ; quick_sort+D5↓p ...
                    .text:0000000000001240 ; __unwind {
                    .text:0000000000001240                 cmp     rsi, rdx
                    .text:0000000000001243                 jge     locret_132F
                    .text:0000000000001249                 push    r14
                    .text:000000000000124B                 mov     r14, rdx
                    .text:000000000000124E                 push    r13
                    .text:0000000000001250                 mov     r13, rsi
                    .text:0000000000001253                 push    r12
                    .text:0000000000001255                 push    rbp
                    .text:0000000000001256                 push    rbx
                    .text:0000000000001257                 mov     rbx, rdi
                    .text:000000000000125A
                    .text:000000000000125A loc_125A:                               ; CODE XREF: quick_sort+92↓j
                    .text:000000000000125A                 mov     rax, r14
                    .text:000000000000125D                 mov     rdi, r13
                    .text:0000000000001260                 lea     r8, [r13+1]
                    .text:0000000000001264                 mov     r12, r14
                    .text:0000000000001267                 sub     rax, r13
                    .text:000000000000126A                 sar     rax, 1
                    .text:000000000000126D                 add     rax, r13
                    .text:0000000000001270                 mov     esi, [rbx+rax*4]
                    .text:0000000000001273                 nop     dword ptr [rax+rax+00h]
                    .text:0000000000001278
                    .text:0000000000001278 loc_1278:                               ; CODE XREF: quick_sort+BA↓j
                    .text:0000000000001278                 lea     rax, ds:0[r12*4]
                    .text:0000000000001280                 mov     r9d, [rbx+rdi*4]
                    .text:0000000000001284                 mov     rbp, rdi
                    .text:0000000000001287                 lea     rcx, [rbx+rax]
                    .text:000000000000128B                 mov     edx, [rcx]
                    .text:000000000000128D                 cmp     r9d, esi
                    .text:0000000000001290                 jl      short loc_12F2
                    .text:0000000000001292                 cmp     esi, edx
                    .text:0000000000001294                 jge     short loc_12B1
                    .text:0000000000001296                 lea     rax, [rbx+rax-4]
                    .text:000000000000129B                 nop     dword ptr [rax+rax+00h]
                    .text:00000000000012A0
                    .text:00000000000012A0 loc_12A0:                               ; CODE XREF: quick_sort+6F↓j
                    .text:00000000000012A0                 mov     rcx, rax
                    .text:00000000000012A3                 mov     edx, [rax]
                    .text:00000000000012A5                 sub     rax, 4
                    .text:00000000000012A9                 sub     r12, 1
                    .text:00000000000012AD                 cmp     edx, esi
                    .text:00000000000012AF                 jg      short loc_12A0
                    .text:00000000000012B1
                    .text:00000000000012B1 loc_12B1:                               ; CODE XREF: quick_sort+54↑j
                    .text:00000000000012B1                 cmp     rdi, r12
                    .text:00000000000012B4                 jle     short loc_12E0
                    .text:00000000000012B6
                    .text:00000000000012B6 loc_12B6:                               ; CODE XREF: quick_sort+B0↓j
                    .text:00000000000012B6                 mov     rdx, r12
                    .text:00000000000012B9                 mov     rax, r14
                    .text:00000000000012BC                 sub     rdx, r13
                    .text:00000000000012BF                 sub     rax, rbp
                    .text:00000000000012C2                 cmp     rdx, rax
                    .text:00000000000012C5                 jge     short loc_12FF
                    .text:00000000000012C7                 cmp     r13, r12
                    .text:00000000000012CA                 jl      short loc_1309
                    .text:00000000000012CC                 mov     r13, rbp
                    .text:00000000000012CF
                    .text:00000000000012CF loc_12CF:                               ; CODE XREF: quick_sort+C7↓j
                    .text:00000000000012CF                                         ; quick_sort+DA↓j ...
                    .text:00000000000012CF                 cmp     r14, r13
                    .text:00000000000012D2                 jg      short loc_125A
                    .text:00000000000012D4                 pop     rbx
                    .text:00000000000012D5                 pop     rbp
                    .text:00000000000012D6                 pop     r12
                    .text:00000000000012D8                 pop     r13
                    .text:00000000000012DA                 pop     r14
                    .text:00000000000012DC                 retn
                    .text:00000000000012DC ; ---------------------------------------------------------------------------
                    .text:00000000000012DD                 align 20h
                    .text:00000000000012E0
                    .text:00000000000012E0 loc_12E0:                               ; CODE XREF: quick_sort+74↑j
                    .text:00000000000012E0                 sub     r12, 1
                    .text:00000000000012E4                 mov     [rbx+rdi*4], edx
                    .text:00000000000012E7                 mov     rbp, r8
                    .text:00000000000012EA                 mov     [rcx], r9d
                    .text:00000000000012ED                 cmp     r8, r12
                    .text:00000000000012F0                 jg      short loc_12B6
                    .text:00000000000012F2
                    .text:00000000000012F2 loc_12F2:                               ; CODE XREF: quick_sort+50↑j
                    .text:00000000000012F2                 add     r8, 1
                    .text:00000000000012F6                 add     rdi, 1
                    .text:00000000000012FA                 jmp     loc_1278
                    .text:00000000000012FF ; ---------------------------------------------------------------------------
                    .text:00000000000012FF
                    .text:00000000000012FF loc_12FF:                               ; CODE XREF: quick_sort+85↑j
                    .text:00000000000012FF                 cmp     r14, rbp
                    .text:0000000000001302                 jg      short loc_131C
                    .text:0000000000001304                 mov     r14, r12
                    .text:0000000000001307                 jmp     short loc_12CF
                    .text:0000000000001309 ; ---------------------------------------------------------------------------
                    .text:0000000000001309
                    .text:0000000000001309 loc_1309:                               ; CODE XREF: quick_sort+8A↑j
                    .text:0000000000001309                 mov     rsi, r13
                    .text:000000000000130C                 mov     rdx, r12
                    .text:000000000000130F                 mov     rdi, rbx
                    .text:0000000000001312                 mov     r13, rbp
                    .text:0000000000001315                 call    quick_sort
                    .text:000000000000131A                 jmp     short loc_12CF
                    .text:000000000000131C ; ---------------------------------------------------------------------------
                    .text:000000000000131C
                    .text:000000000000131C loc_131C:                               ; CODE XREF: quick_sort+C2↑j
                    .text:000000000000131C                 mov     rdx, r14
                    .text:000000000000131F                 mov     rsi, rbp
                    .text:0000000000001322                 mov     rdi, rbx
                    .text:0000000000001325                 mov     r14, r12
                    .text:0000000000001328                 call    quick_sort
                    .text:000000000000132D                 jmp     short loc_12CF
                    .text:000000000000132F ; ---------------------------------------------------------------------------
                    .text:000000000000132F
                    .text:000000000000132F locret_132F:                            ; CODE XREF: quick_sort+3↑j
                    .text:000000000000132F                 retn
                    .text:000000000000132F ; } // starts at 1240
                    .text:000000000000132F quick_sort      endp
                    .text:000000000000132F
                    .text:000000000000132F _text           ends
                    .text:000000000000132F
                    .fini:0000000000001330 ; ===========================================================================
                    .fini:0000000000001330
                    .fini:0000000000001330 ; Segment type: Pure code
                    .fini:0000000000001330 ; Segment permissions: Read/Execute
                    .fini:0000000000001330 _fini           segment dword public 'CODE' use64
                    .fini:0000000000001330                 assume cs:_fini
                    .fini:0000000000001330                 ;org 1330h
                    .fini:0000000000001330                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:0000000000001330
                    .fini:0000000000001330 ; =============== S U B R O U T I N E =======================================
                    .fini:0000000000001330
                    .fini:0000000000001330
                    .fini:0000000000001330                 public _term_proc
                    .fini:0000000000001330 _term_proc      proc near
                    .fini:0000000000001330                 endbr64                 ; _fini
                    .fini:0000000000001334                 sub     rsp, 8
                    .fini:0000000000001338                 add     rsp, 8
                    .fini:000000000000133C                 retn
                    .fini:000000000000133C _term_proc      endp
                    .fini:000000000000133C
                    .fini:000000000000133C _fini           ends
                    .fini:000000000000133C
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 unk_2004        db  25h ; %             ; DATA XREF: main+E↑o
                    .rodata:0000000000002005                 db  64h ; d
                    .rodata:0000000000002006                 db  20h
                    .rodata:0000000000002007                 db    0
                    .rodata:0000000000002008 unk_2008        db  0Ah                 ; DATA XREF: main+9C↑o
                    .rodata:0000000000002009                 db    0
                    .rodata:0000000000002009 _rodata         ends
                    .rodata:0000000000002009
                    LOAD:000000000000200A ; ===========================================================================
                    LOAD:000000000000200A
                    LOAD:000000000000200A ; Segment type: Pure data
                    LOAD:000000000000200A ; Segment permissions: Read
                    LOAD:000000000000200A LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000200A                 assume cs:LOAD
                    LOAD:000000000000200A                 ;org 200Ah
                    LOAD:000000000000200A                 align 4
                    LOAD:000000000000200A LOAD            ends
                    LOAD:000000000000200A
                    .eh_frame_hdr:000000000000200C ; ===========================================================================
                    .eh_frame_hdr:000000000000200C
                    .eh_frame_hdr:000000000000200C ; Segment type: Pure data
                    .eh_frame_hdr:000000000000200C ; Segment permissions: Read
                    .eh_frame_hdr:000000000000200C _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:000000000000200C                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:000000000000200C                 ;org 200Ch
                    .eh_frame_hdr:000000000000200C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:000000000000200D                 db  1Bh
                    .eh_frame_hdr:000000000000200E                 db    3
                    .eh_frame_hdr:000000000000200F                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002010                 db  38h ; 8
                    .eh_frame_hdr:0000000000002011                 db    0
                    .eh_frame_hdr:0000000000002012                 db    0
                    .eh_frame_hdr:0000000000002013                 db    0
                    .eh_frame_hdr:0000000000002014                 db    6
                    .eh_frame_hdr:0000000000002015                 db    0
                    .eh_frame_hdr:0000000000002016                 db    0
                    .eh_frame_hdr:0000000000002017                 db    0
                    .eh_frame_hdr:0000000000002018                 db  14h
                    .eh_frame_hdr:0000000000002019                 db 0F0h
                    .eh_frame_hdr:000000000000201A                 db 0FFh
                    .eh_frame_hdr:000000000000201B                 db 0FFh
                    .eh_frame_hdr:000000000000201C                 db  6Ch ; l
                    .eh_frame_hdr:000000000000201D                 db    0
                    .eh_frame_hdr:000000000000201E                 db    0
                    .eh_frame_hdr:000000000000201F                 db    0
                    .eh_frame_hdr:0000000000002020                 db  44h ; D
                    .eh_frame_hdr:0000000000002021                 db 0F0h
                    .eh_frame_hdr:0000000000002022                 db 0FFh
                    .eh_frame_hdr:0000000000002023                 db 0FFh
                    .eh_frame_hdr:0000000000002024                 db  94h
                    .eh_frame_hdr:0000000000002025                 db    0
                    .eh_frame_hdr:0000000000002026                 db    0
                    .eh_frame_hdr:0000000000002027                 db    0
                    .eh_frame_hdr:0000000000002028                 db  54h ; T
                    .eh_frame_hdr:0000000000002029                 db 0F0h
                    .eh_frame_hdr:000000000000202A                 db 0FFh
                    .eh_frame_hdr:000000000000202B                 db 0FFh
                    .eh_frame_hdr:000000000000202C                 db 0ACh
                    .eh_frame_hdr:000000000000202D                 db    0
                    .eh_frame_hdr:000000000000202E                 db    0
                    .eh_frame_hdr:000000000000202F                 db    0
                    .eh_frame_hdr:0000000000002030                 db  74h ; t
                    .eh_frame_hdr:0000000000002031                 db 0F0h
                    .eh_frame_hdr:0000000000002032                 db 0FFh
                    .eh_frame_hdr:0000000000002033                 db 0FFh
                    .eh_frame_hdr:0000000000002034                 db  0Ch
                    .eh_frame_hdr:0000000000002035                 db    1
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db  44h ; D
                    .eh_frame_hdr:0000000000002039                 db 0F1h
                    .eh_frame_hdr:000000000000203A                 db 0FFh
                    .eh_frame_hdr:000000000000203B                 db 0FFh
                    .eh_frame_hdr:000000000000203C                 db  54h ; T
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:0000000000002040                 db  34h ; 4
                    .eh_frame_hdr:0000000000002041                 db 0F2h
                    .eh_frame_hdr:0000000000002042                 db 0FFh
                    .eh_frame_hdr:0000000000002043                 db 0FFh
                    .eh_frame_hdr:0000000000002044                 db 0C4h
                    .eh_frame_hdr:0000000000002045                 db    0
                    .eh_frame_hdr:0000000000002046                 db    0
                    .eh_frame_hdr:0000000000002047                 db    0
                    .eh_frame_hdr:0000000000002047 _eh_frame_hdr   ends
                    .eh_frame_hdr:0000000000002047
                    .eh_frame:0000000000002048 ; ===========================================================================
                    .eh_frame:0000000000002048
                    .eh_frame:0000000000002048 ; Segment type: Pure data
                    .eh_frame:0000000000002048 ; Segment permissions: Read
                    .eh_frame:0000000000002048 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002048                 assume cs:_eh_frame
                    .eh_frame:0000000000002048                 ;org 2048h
                    .eh_frame:0000000000002048                 db  14h
                    .eh_frame:0000000000002049                 db    0
                    .eh_frame:000000000000204A                 db    0
                    .eh_frame:000000000000204B                 db    0
                    .eh_frame:000000000000204C                 db    0
                    .eh_frame:000000000000204D                 db    0
                    .eh_frame:000000000000204E                 db    0
                    .eh_frame:000000000000204F                 db    0
                    .eh_frame:0000000000002050                 db    1
                    .eh_frame:0000000000002051                 db  7Ah ; z
                    .eh_frame:0000000000002052                 db  52h ; R
                    .eh_frame:0000000000002053                 db    0
                    .eh_frame:0000000000002054                 db    1
                    .eh_frame:0000000000002055                 db  78h ; x
                    .eh_frame:0000000000002056                 db  10h
                    .eh_frame:0000000000002057                 db    1
                    .eh_frame:0000000000002058                 db  1Bh
                    .eh_frame:0000000000002059                 db  0Ch
                    .eh_frame:000000000000205A                 db    7
                    .eh_frame:000000000000205B                 db    8
                    .eh_frame:000000000000205C                 db  90h
                    .eh_frame:000000000000205D                 db    1
                    .eh_frame:000000000000205E                 db    0
                    .eh_frame:000000000000205F                 db    0
                    .eh_frame:0000000000002060                 db  14h
                    .eh_frame:0000000000002061                 db    0
                    .eh_frame:0000000000002062                 db    0
                    .eh_frame:0000000000002063                 db    0
                    .eh_frame:0000000000002064                 db  1Ch
                    .eh_frame:0000000000002065                 db    0
                    .eh_frame:0000000000002066                 db    0
                    .eh_frame:0000000000002067                 db    0
                    .eh_frame:0000000000002068                 db 0E8h
                    .eh_frame:0000000000002069                 db 0F0h
                    .eh_frame:000000000000206A                 db 0FFh
                    .eh_frame:000000000000206B                 db 0FFh
                    .eh_frame:000000000000206C                 db  26h ; &
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db    0
                    .eh_frame:0000000000002071                 db  44h ; D
                    .eh_frame:0000000000002072                 db    7
                    .eh_frame:0000000000002073                 db  10h
                    .eh_frame:0000000000002074                 db    0
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db  24h ; $
                    .eh_frame:0000000000002079                 db    0
                    .eh_frame:000000000000207A                 db    0
                    .eh_frame:000000000000207B                 db    0
                    .eh_frame:000000000000207C                 db  34h ; 4
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db 0A0h
                    .eh_frame:0000000000002081                 db 0EFh
                    .eh_frame:0000000000002082                 db 0FFh
                    .eh_frame:0000000000002083                 db 0FFh
                    .eh_frame:0000000000002084                 db  30h ; 0
                    .eh_frame:0000000000002085                 db    0
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db    0
                    .eh_frame:0000000000002089                 db  0Eh
                    .eh_frame:000000000000208A                 db  10h
                    .eh_frame:000000000000208B                 db  46h ; F
                    .eh_frame:000000000000208C                 db  0Eh
                    .eh_frame:000000000000208D                 db  18h
                    .eh_frame:000000000000208E                 db  4Ah ; J
                    .eh_frame:000000000000208F                 db  0Fh
                    .eh_frame:0000000000002090                 db  0Bh
                    .eh_frame:0000000000002091                 db  77h ; w
                    .eh_frame:0000000000002092                 db    8
                    .eh_frame:0000000000002093                 db  80h
                    .eh_frame:0000000000002094                 db    0
                    .eh_frame:0000000000002095                 db  3Fh ; ?
                    .eh_frame:0000000000002096                 db  1Ah
                    .eh_frame:0000000000002097                 db  3Ah ; :
                    .eh_frame:0000000000002098                 db  2Ah ; *
                    .eh_frame:0000000000002099                 db  33h ; 3
                    .eh_frame:000000000000209A                 db  24h ; $
                    .eh_frame:000000000000209B                 db  22h ; "
                    .eh_frame:000000000000209C                 db    0
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db  14h
                    .eh_frame:00000000000020A1                 db    0
                    .eh_frame:00000000000020A2                 db    0
                    .eh_frame:00000000000020A3                 db    0
                    .eh_frame:00000000000020A4                 db  5Ch ; \
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db 0A8h
                    .eh_frame:00000000000020A9                 db 0EFh
                    .eh_frame:00000000000020AA                 db 0FFh
                    .eh_frame:00000000000020AB                 db 0FFh
                    .eh_frame:00000000000020AC                 db  10h
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db    0
                    .eh_frame:00000000000020B1                 db    0
                    .eh_frame:00000000000020B2                 db    0
                    .eh_frame:00000000000020B3                 db    0
                    .eh_frame:00000000000020B4                 db    0
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db  14h
                    .eh_frame:00000000000020B9                 db    0
                    .eh_frame:00000000000020BA                 db    0
                    .eh_frame:00000000000020BB                 db    0
                    .eh_frame:00000000000020BC                 db  74h ; t
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db 0A0h
                    .eh_frame:00000000000020C1                 db 0EFh
                    .eh_frame:00000000000020C2                 db 0FFh
                    .eh_frame:00000000000020C3                 db 0FFh
                    .eh_frame:00000000000020C4                 db  20h
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db    0
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db    0
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db  44h ; D
                    .eh_frame:00000000000020D1                 db    0
                    .eh_frame:00000000000020D2                 db    0
                    .eh_frame:00000000000020D3                 db    0
                    .eh_frame:00000000000020D4                 db  8Ch
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db  68h ; h
                    .eh_frame:00000000000020D9                 db 0F1h
                    .eh_frame:00000000000020DA                 db 0FFh
                    .eh_frame:00000000000020DB                 db 0FFh
                    .eh_frame:00000000000020DC                 db 0F0h
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db    0
                    .eh_frame:00000000000020E1                 db  4Bh ; K
                    .eh_frame:00000000000020E2                 db  0Eh
                    .eh_frame:00000000000020E3                 db  10h
                    .eh_frame:00000000000020E4                 db  8Eh
                    .eh_frame:00000000000020E5                 db    2
                    .eh_frame:00000000000020E6                 db  45h ; E
                    .eh_frame:00000000000020E7                 db  0Eh
                    .eh_frame:00000000000020E8                 db  18h
                    .eh_frame:00000000000020E9                 db  8Dh
                    .eh_frame:00000000000020EA                 db    3
                    .eh_frame:00000000000020EB                 db  45h ; E
                    .eh_frame:00000000000020EC                 db  0Eh
                    .eh_frame:00000000000020ED                 db  20h
                    .eh_frame:00000000000020EE                 db  8Ch
                    .eh_frame:00000000000020EF                 db    4
                    .eh_frame:00000000000020F0                 db  41h ; A
                    .eh_frame:00000000000020F1                 db  0Eh
                    .eh_frame:00000000000020F2                 db  28h ; (
                    .eh_frame:00000000000020F3                 db  86h
                    .eh_frame:00000000000020F4                 db    5
                    .eh_frame:00000000000020F5                 db  41h ; A
                    .eh_frame:00000000000020F6                 db  0Eh
                    .eh_frame:00000000000020F7                 db  30h ; 0
                    .eh_frame:00000000000020F8                 db  83h
                    .eh_frame:00000000000020F9                 db    6
                    .eh_frame:00000000000020FA                 db    2
                    .eh_frame:00000000000020FB                 db  7Eh ; ~
                    .eh_frame:00000000000020FC                 db  0Ah
                    .eh_frame:00000000000020FD                 db  0Eh
                    .eh_frame:00000000000020FE                 db  28h ; (
                    .eh_frame:00000000000020FF                 db  41h ; A
                    .eh_frame:0000000000002100                 db  0Eh
                    .eh_frame:0000000000002101                 db  20h
                    .eh_frame:0000000000002102                 db  42h ; B
                    .eh_frame:0000000000002103                 db  0Eh
                    .eh_frame:0000000000002104                 db  18h
                    .eh_frame:0000000000002105                 db  42h ; B
                    .eh_frame:0000000000002106                 db  0Eh
                    .eh_frame:0000000000002107                 db  10h
                    .eh_frame:0000000000002108                 db  42h ; B
                    .eh_frame:0000000000002109                 db  0Eh
                    .eh_frame:000000000000210A                 db    8
                    .eh_frame:000000000000210B                 db  44h ; D
                    .eh_frame:000000000000210C                 db  0Bh
                    .eh_frame:000000000000210D                 db    2
                    .eh_frame:000000000000210E                 db  4Fh ; O
                    .eh_frame:000000000000210F                 db  0Eh
                    .eh_frame:0000000000002110                 db    8
                    .eh_frame:0000000000002111                 db 0C3h
                    .eh_frame:0000000000002112                 db 0C6h
                    .eh_frame:0000000000002113                 db 0CCh
                    .eh_frame:0000000000002114                 db 0CDh
                    .eh_frame:0000000000002115                 db 0CEh
                    .eh_frame:0000000000002116                 db    0
                    .eh_frame:0000000000002117                 db    0
                    .eh_frame:0000000000002118                 db  30h ; 0
                    .eh_frame:0000000000002119                 db    0
                    .eh_frame:000000000000211A                 db    0
                    .eh_frame:000000000000211B                 db    0
                    .eh_frame:000000000000211C                 db 0D4h
                    .eh_frame:000000000000211D                 db    0
                    .eh_frame:000000000000211E                 db    0
                    .eh_frame:000000000000211F                 db    0
                    .eh_frame:0000000000002120                 db  60h ; `
                    .eh_frame:0000000000002121                 db 0EFh
                    .eh_frame:0000000000002122                 db 0FFh
                    .eh_frame:0000000000002123                 db 0FFh
                    .eh_frame:0000000000002124                 db 0CDh
                    .eh_frame:0000000000002125                 db    0
                    .eh_frame:0000000000002126                 db    0
                    .eh_frame:0000000000002127                 db    0
                    .eh_frame:0000000000002128                 db    0
                    .eh_frame:0000000000002129                 db  46h ; F
                    .eh_frame:000000000000212A                 db  0Eh
                    .eh_frame:000000000000212B                 db  10h
                    .eh_frame:000000000000212C                 db  8Ch
                    .eh_frame:000000000000212D                 db    2
                    .eh_frame:000000000000212E                 db  48h ; H
                    .eh_frame:000000000000212F                 db  0Eh
                    .eh_frame:0000000000002130                 db  18h
                    .eh_frame:0000000000002131                 db  86h
                    .eh_frame:0000000000002132                 db    3
                    .eh_frame:0000000000002133                 db  48h ; H
                    .eh_frame:0000000000002134                 db  0Eh
                    .eh_frame:0000000000002135                 db  20h
                    .eh_frame:0000000000002136                 db  83h
                    .eh_frame:0000000000002137                 db    4
                    .eh_frame:0000000000002138                 db  44h ; D
                    .eh_frame:0000000000002139                 db  0Eh
                    .eh_frame:000000000000213A                 db  50h ; P
                    .eh_frame:000000000000213B                 db    2
                    .eh_frame:000000000000213C                 db 0A7h
                    .eh_frame:000000000000213D                 db  0Ah
                    .eh_frame:000000000000213E                 db  0Eh
                    .eh_frame:000000000000213F                 db  20h
                    .eh_frame:0000000000002140                 db  43h ; C
                    .eh_frame:0000000000002141                 db  0Eh
                    .eh_frame:0000000000002142                 db  18h
                    .eh_frame:0000000000002143                 db  41h ; A
                    .eh_frame:0000000000002144                 db  0Eh
                    .eh_frame:0000000000002145                 db  10h
                    .eh_frame:0000000000002146                 db  42h ; B
                    .eh_frame:0000000000002147                 db  0Eh
                    .eh_frame:0000000000002148                 db    8
                    .eh_frame:0000000000002149                 db  41h ; A
                    .eh_frame:000000000000214A                 db  0Bh
                    .eh_frame:000000000000214B                 db    0
                    .eh_frame:000000000000214C __FRAME_END__   db    0
                    .eh_frame:000000000000214D                 db    0
                    .eh_frame:000000000000214E                 db    0
                    .eh_frame:000000000000214F                 db    0
                    .eh_frame:000000000000214F _eh_frame       ends
                    .eh_frame:000000000000214F
                    .init_array:0000000000003DB0 ; ELF Initialization Function Table
                    .init_array:0000000000003DB0 ; ===========================================================================
                    .init_array:0000000000003DB0
                    .init_array:0000000000003DB0 ; Segment type: Pure data
                    .init_array:0000000000003DB0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DB0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DB0                 assume cs:_init_array
                    .init_array:0000000000003DB0                 ;org 3DB0h
                    .init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DB0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DB0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DB0 _init_array     ends
                    .init_array:0000000000003DB0
                    .fini_array:0000000000003DB8 ; ELF Termination Function Table
                    .fini_array:0000000000003DB8 ; ===========================================================================
                    .fini_array:0000000000003DB8
                    .fini_array:0000000000003DB8 ; Segment type: Pure data
                    .fini_array:0000000000003DB8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DB8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DB8                 assume cs:_fini_array
                    .fini_array:0000000000003DB8                 ;org 3DB8h
                    .fini_array:0000000000003DB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DB8 _fini_array     ends
                    .fini_array:0000000000003DB8
                    LOAD:0000000000003DC0 ; ELF Dynamic Information
                    LOAD:0000000000003DC0 ; ===========================================================================
                    LOAD:0000000000003DC0
                    LOAD:0000000000003DC0 ; Segment type: Pure data
                    LOAD:0000000000003DC0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DC0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DC0                 assume cs:LOAD
                    LOAD:0000000000003DC0                 ;org 3DC0h
                    LOAD:0000000000003DC0 _DYNAMIC        Elf64_Dyn <1, 40h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DC0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DC0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DE0                 Elf64_Dyn <0Dh, 1330h>  ; DT_FINI
                    LOAD:0000000000003DF0                 Elf64_Dyn <19h, 3DB0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ah, 3DB8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E20                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E30                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E40                 Elf64_Dyn <5, 498h>     ; DT_STRTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E60                 Elf64_Dyn <0Ah, 0BCh>   ; DT_STRSZ
                    LOAD:0000000000003E70                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E80                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E90                 Elf64_Dyn <3, 3FB0h>    ; DT_PLTGOT
                    LOAD:0000000000003EA0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EB0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <17h, 678h>   ; DT_JMPREL
                    LOAD:0000000000003ED0                 Elf64_Dyn <7, 5B8h>     ; DT_RELA
                    LOAD:0000000000003EE0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EF0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003F00                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFEh, 568h> ; DT_VERNEED
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF0h, 554h> ; DT_VERSYM
                    LOAD:0000000000003F50                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F60                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003FA0                 db    0
                    LOAD:0000000000003FA1                 db    0
                    LOAD:0000000000003FA2                 db    0
                    LOAD:0000000000003FA3                 db    0
                    LOAD:0000000000003FA4                 db    0
                    LOAD:0000000000003FA5                 db    0
                    LOAD:0000000000003FA6                 db    0
                    LOAD:0000000000003FA7                 db    0
                    LOAD:0000000000003FA8                 db    0
                    LOAD:0000000000003FA9                 db    0
                    LOAD:0000000000003FAA                 db    0
                    LOAD:0000000000003FAB                 db    0
                    LOAD:0000000000003FAC                 db    0
                    LOAD:0000000000003FAD                 db    0
                    LOAD:0000000000003FAE                 db    0
                    LOAD:0000000000003FAF                 db    0
                    LOAD:0000000000003FAF LOAD            ends
                    LOAD:0000000000003FAF
                    .got:0000000000003FB0 ; ===========================================================================
                    .got:0000000000003FB0
                    .got:0000000000003FB0 ; Segment type: Pure data
                    .got:0000000000003FB0 ; Segment permissions: Read/Write
                    .got:0000000000003FB0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FB0                 assume cs:_got
                    .got:0000000000003FB0                 ;org 3FB0h
                    .got:0000000000003FB0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FB8 qword_3FB8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FC0 qword_3FC0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC8                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004020                 extrn __libc_start_main:near
                    extern:0000000000004020                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004020                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004028                 extrn __stack_chk_fail:near
                    extern:0000000000004028                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004028                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004030                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004038 ; int __cxa_finalize(void *)
                    extern:0000000000004038                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004038                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004040                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004040                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004048                 extrn __gmon_start__:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004048                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004050                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004050
                    extern:0000000000004050
                    extern:0000000000004050                 end _start
                    ```
                    
            - chatGPT IR
                - quick_sort
                    
                    ```notion
                    ; ModuleID = 'quick_sort'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: quick_sort ; Address: 0x1240
                    ; Intent: in-place quicksort on i32 array (confidence=0.95). Evidence: pivot from middle; two-pointer partition with swap; recurse smaller side.
                    ; Preconditions: %a points to a valid array of at least (%hi+1) i32 elements; 0-based indices; compare signed i32; requires %lo and %hi within array bounds.
                    ; Postconditions: elements in [%lo, %hi] sorted ascending (signed).
                    
                    define dso_local void @quick_sort(i32* %a, i64 %lo, i64 %hi) local_unnamed_addr {
                    entry:
                    %cmp_init = icmp sge i64 %lo, %hi
                    br i1 %cmp_init, label %ret, label %loop
                    
                    loop: ; outer iterative loop over the current [L,H] range
                    %L = phi i64 [ %lo, %entry ], [ %L.next, %decide_after ]
                    %H = phi i64 [ %hi, %entry ], [ %H.next, %decide_after ]
                    ; while (L < H)
                    %cont = icmp slt i64 %L, %H
                    br i1 %cont, label %partition_prep, label %ret
                    
                    partition_prep:
                    ; pivot = a[L + ((H-L)>>1)]
                    %diff = sub i64 %H, %L
                    %half = ashr i64 %diff, 1
                    %mid = add i64 %L, %half
                    %pivot.ptr = getelementptr inbounds i32, i32* %a, i64 %mid
                    %pivot = load i32, i32* %pivot.ptr, align 4
                    br label %part.loop.header
                    
                    part.loop.header:
                    ; i := L, j := H
                    %i.init = phi i64 [ %L, %partition_prep ], [ %i.next, %swap_done ], [ %i.stay, %after_j ]
                    %j.init = phi i64 [ %H, %partition_prep ], [ %j.next, %swap_done ], [ %j.stay, %after_j ]
                    br label %loop_i
                    
                    loop_i: ; while (a[i] < pivot) i++
                    %ai.ptr = getelementptr inbounds i32, i32* %a, i64 %i.init
                    %ai = load i32, i32* %ai.ptr, align 4
                    %cmp_i = icmp slt i32 %ai, %pivot
                    br i1 %cmp_i, label %inc_i, label %after_i
                    
                    inc_i:
                    %i.inc = add i64 %i.init, 1
                    br label %loop_i
                    
                    after_i:
                    ; keep i where a[i] >= pivot (signed)
                    %i.stay = phi i64 [ %i.init, %loop_i ]
                    br label %loop_j
                    
                    loop_j: ; while (pivot < a[j]) j--
                    %aj.ptr = getelementptr inbounds i32, i32* %a, i64 %j.init
                    %aj = load i32, i32* %aj.ptr, align 4
                    %cmp_j = icmp slt i32 %pivot, %aj
                    br i1 %cmp_j, label %dec_j, label %after_j
                    
                    dec_j:
                    %j.dec = add i64 %j.init, -1
                    br label %loop_j
                    
                    after_j:
                    ; keep j where pivot >= a[j] (signed)
                    %j.stay = phi i64 [ %j.init, %loop_j ]
                    ; if (i > j) break
                    %brk = icmp sgt i64 %i.stay, %j.stay
                    br i1 %brk, label %decide, label %do_swap
                    
                    do_swap: ; swap a[i], a[j]; i++, j--
                    %ai.ptr2 = getelementptr inbounds i32, i32* %a, i64 %i.stay
                    %aj.ptr2 = getelementptr inbounds i32, i32* %a, i64 %j.stay
                    %ai2 = load i32, i32* %ai.ptr2, align 4
                    %aj2 = load i32, i32* %aj.ptr2, align 4
                    store i32 %aj2, i32* %ai.ptr2, align 4
                    store i32 %ai2, i32* %aj.ptr2, align 4
                    %i.next = add i64 %i.stay, 1
                    %j.next = add i64 %j.stay, -1
                    br label %swap_done
                    
                    swap_done:
                    br label %part.loop.header
                    
                    decide: ; choose smaller side to recurse; iterate on the other
                    %leftLen = sub i64 %j.stay, %L
                    %rightLen = sub i64 %H, %i.stay
                    %left_ge_right = icmp sge i64 %leftLen, %rightLen
                    br i1 %left_ge_right, label %right_first, label %left_first
                    
                    right_first: ; recurse right if needed; then H = j
                    %need_right = icmp slt i64 %i.stay, %H
                    br i1 %need_right, label %call_right, label %skip_right
                    
                    call_right:
                    call void @quick_sort(i32* %a, i64 %i.stay, i64 %H)
                    br label %skip_right
                    
                    skip_right:
                    ; iterate on left: [L, j]
                    %L.next.rf = %L
                    %H.next.rf = %j.stay
                    br label %decide_after
                    
                    left_first: ; recurse left if needed; then L = i
                    %need_left = icmp slt i64 %L, %j.stay
                    br i1 %need_left, label %call_left, label %skip_left
                    
                    call_left:
                    call void @quick_sort(i32* %a, i64 %L, i64 %j.stay)
                    br label %skip_left
                    
                    skip_left:
                    ; iterate on right: [i, H]
                    %L.next.lf = %i.stay
                    %H.next.lf = %H
                    br label %decide_after
                    
                    decide_after:
                    %L.next = phi i64 [ %L.next.rf, %skip_right ], [ %L.next.lf, %skip_left ]
                    %H.next = phi i64 [ %H.next.rf, %skip_right ], [ %H.next.lf, %skip_left ]
                    br label %loop
                    
                    ret:
                    ret void
                    }
                    ```
                    
                - main
                    
                    ```notion
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x1080
                    ; Intent: initialize a 10-element i32 array, sort it with quick_sort, then print each element ("%d ") and a newline (confidence=0.95). Evidence: stack-constructed array literals; call to quick_sort; looped __printf_chk with "%d " then "\n".
                    ; Preconditions: quick_sort uses 0-based indices [lo..hi] inclusive on an i32 array.
                    ; Postconditions: prints the sorted sequence followed by a newline; returns 0.
                    
                    ; Only the needed extern declarations:
                    declare void @quick_sort(i32* nocapture, i64, i64)
                    declare i32 @__printf_chk(i32, i8*, ...)
                    
                    @.fmt = private unnamed_addr constant [4 x i8] c"%d \00", align 1
                    @.nl = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    ; allocate local array of 10 i32
                    %arr = alloca [10 x i32], align 16
                    %p0 = getelementptr inbounds [10 x i32], [10 x i32]* %arr, i64 0, i64 0
                    store i32 9, i32* %p0, align 16
                    %p1 = getelementptr inbounds i32, i32* %p0, i64 1
                    store i32 1, i32* %p1, align 4
                    %p2 = getelementptr inbounds i32, i32* %p0, i64 2
                    store i32 5, i32* %p2, align 8
                    %p3 = getelementptr inbounds i32, i32* %p0, i64 3
                    store i32 3, i32* %p3, align 4
                    %p4 = getelementptr inbounds i32, i32* %p0, i64 4
                    store i32 7, i32* %p4, align 16
                    %p5 = getelementptr inbounds i32, i32* %p0, i64 5
                    store i32 2, i32* %p5, align 4
                    %p6 = getelementptr inbounds i32, i32* %p0, i64 6
                    store i32 8, i32* %p6, align 8
                    %p7 = getelementptr inbounds i32, i32* %p0, i64 7
                    store i32 6, i32* %p7, align 4
                    %p8 = getelementptr inbounds i32, i32* %p0, i64 8
                    store i32 4, i32* %p8, align 16
                    %p9 = getelementptr inbounds i32, i32* %p0, i64 9
                    store i32 0, i32* %p9, align 4
                    
                    ; quick_sort(arr, 0, 9)
                    call void @quick_sort(i32* %p0, i64 0, i64 9)
                    
                    ; print sorted array: for i=0..9 printf("%d ", arr[i])
                    br label %loop
                    
                    loop:
                    %i = phi i64 [ 0, %entry ], [ %i.next, %loop.inc ]
                    %elt.ptr = getelementptr inbounds i32, i32* %p0, i64 %i
                    %elt = load i32, i32* %elt.ptr, align 4
                    %fmt.ptr = getelementptr inbounds [4 x i8], [4 x i8]* @.fmt, i64 0, i64 0
                    %call = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.ptr, i32 %elt)
                    br label %loop.inc
                    
                    loop.inc:
                    %i.next = add nuw nsw i64 %i, 1
                    %done = icmp eq i64 %i.next, 10
                    br i1 %done, label %after, label %loop
                    
                    after:
                    ; print newline
                    %nl.ptr = getelementptr inbounds [2 x i8], [2 x i8]* @.nl, i64 0, i64 0
                    %call2 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nl.ptr)
                    ret i32 0
                    }
                    ```
                    
        - timsort
            - ida 함수 리스트
                
                ```notion
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "timsort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1210",
                      "end": "0x1236",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x1240",
                      "end": "0x1269",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x1270",
                      "end": "0x12a9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x12b0",
                      "end": "0x12e9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x12f0",
                      "end": "0x12f9",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4068",
                      "end": "0x4070",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1070",
                      "start": "0x1070",
                      "end": "0x107f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1080",
                      "start": "0x1080",
                      "end": "0x108f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__memcpy_chk",
                      "start": "0x10c0",
                      "end": "0x10cb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".memcpy",
                      "start": "0x10d0",
                      "end": "0x10db",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".malloc",
                      "start": "0x10e0",
                      "end": "0x10eb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10f0",
                      "end": "0x10fb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1100",
                      "end": "0x1209",
                      "size": 265,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "timsort.constprop.0",
                      "start": "0x1300",
                      "end": "0x1bc7",
                      "size": 2247,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x1bc8",
                      "end": "0x1bd5",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__memcpy_chk",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "memcpy",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "malloc",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4050",
                      "end": "0x4058",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4058",
                      "end": "0x4060",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 32
                user? candidates: 11
                ```
                
            - chatGPT 함수 리스트
                
                ```notion
                ["main","timsort.constprop.0"]
                ```
                
            - ida 디스어셈블리
                - timsort.constprop.0
                    
                    ```less
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : 7A0DE3A6B2EFC7FEBEB89E67417DE0EC9AED45900400516F42B30356F9532DCF
                    LOAD:0000000000000000 ; Input MD5    : 60C430B9A63E00DE7F0BC657F795A9EE
                    LOAD:0000000000000000 ; Input CRC32  : E84B4E78
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\timsort
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'timsort.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 37B0h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 7A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 7A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 0BD5h                ; Size in file image
                    LOAD:0000000000000110                 dq 0BD5h                ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 180h                 ; Size in file image
                    LOAD:0000000000000148                 dq 180h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2D90h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3D90h                ; Physical address
                    LOAD:0000000000000178                 dq 280h                 ; Size in file image
                    LOAD:0000000000000180                 dq 288h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DA0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DA0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2010h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2010h                ; Physical address
                    LOAD:0000000000000290                 dq 3Ch                  ; Size in file image
                    LOAD:0000000000000298                 dq 3Ch                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2D90h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3D90h                ; Physical address
                    LOAD:0000000000000300                 dq 270h                 ; Size in file image
                    LOAD:0000000000000308                 dq 270h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 83h, 3Fh, 34h, 2Eh, 0DCh, 60h, 80h, 7Ah, 4Bh, 35h, 18h ; Desc
                    LOAD:0000000000000383                 db 0D2h, 7Fh, 60h, 0C7h, 86h, 3Dh, 0FCh, 2Ah, 0FAh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 0Bh
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 0Bh, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4F8, 12h, 0, 0, offset dword_0, \ ; "free"
                    LOAD:00000000000003F0                            0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4F8, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4F8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4F8, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aMemcpyChk - offset unk_4F8, 12h, 0, 0, \ ; "__memcpy_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aGmonStart - offset unk_4F8, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aMemcpy - offset unk_4F8, 12h, 0, 0, offset dword_0,\ ; "memcpy"
                    LOAD:0000000000000480                            0>
                    LOAD:0000000000000498                 Elf64_Sym <offset aMalloc - offset unk_4F8, 12h, 0, 0, offset dword_0,\ ; "malloc"
                    LOAD:0000000000000498                            0>
                    LOAD:00000000000004B0                 Elf64_Sym <offset aPrintfChk - offset unk_4F8, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:00000000000004B0                            offset dword_0, 0>
                    LOAD:00000000000004C8                 Elf64_Sym <offset aItmRegistertmc - offset unk_4F8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:00000000000004C8                            offset dword_0, 0>
                    LOAD:00000000000004E0                 Elf64_Sym <offset aCxaFinalize - offset unk_4F8, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:00000000000004E0                            offset dword_0, 0>
                    LOAD:00000000000004F8 ; ELF String Table
                    LOAD:00000000000004F8 unk_4F8         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004F8                                         ; LOAD:0000000000000408↑o ...
                    LOAD:00000000000004F9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004E0↑o
                    LOAD:0000000000000508 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000004B0↑o
                    LOAD:0000000000000515 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000498↑o
                    LOAD:000000000000051C aLibcStartMain  db '__libc_start_main',0
                    LOAD:000000000000051C                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052E aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000533 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:0000000000000540 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:0000000000000547 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:0000000000000558 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005F8↓o
                    LOAD:0000000000000562 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000608↓o
                    LOAD:000000000000056D aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000618↓o
                    LOAD:0000000000000579 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000628↓o
                    LOAD:0000000000000583 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:0000000000000638↓o
                    LOAD:000000000000058E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000648↓o
                    LOAD:000000000000059A aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000059A                                         ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000005B6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:00000000000005C5 aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:00000000000005C5                                         ; DATA XREF: LOAD:00000000000004C8↑o
                    LOAD:00000000000005DF                 align 20h
                    LOAD:00000000000005E0 ; ELF GNU Symbol Version Table
                    LOAD:00000000000005E0                 dw 0
                    LOAD:00000000000005E2                 dw 2                    ; free@@GLIBC_2.2.5
                    LOAD:00000000000005E4                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:00000000000005E6                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:00000000000005E8                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:00000000000005EA                 dw 5                    ; __memcpy_chk@@GLIBC_2.3.4
                    LOAD:00000000000005EC                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:00000000000005EE                 dw 6                    ; memcpy@@GLIBC_2.14
                    LOAD:00000000000005F0                 dw 2                    ; malloc@@GLIBC_2.2.5
                    LOAD:00000000000005F2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:00000000000005F4                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:00000000000005F6                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:00000000000005F8 ; ELF GNU Symbol Version Requirements
                    LOAD:00000000000005F8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset unk_4F8, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000608                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset unk_4F8, 10h> ; "GLIBC_2.14"
                    LOAD:0000000000000618                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4F8, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000628                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4F8, 10h> ; "GLIBC_2.4"
                    LOAD:0000000000000638                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4F8, \ ; "GLIBC_2.34"
                    LOAD:0000000000000638                                10h>
                    LOAD:0000000000000648                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4F8, 0> ; "GLIBC_2.2.5"
                    LOAD:0000000000000658 ; ELF RELA Relocation Table
                    LOAD:0000000000000658                 Elf64_Rela <3D90h, 8, 12F0h> ; R_X86_64_RELATIVE +12F0h
                    LOAD:0000000000000670                 Elf64_Rela <3D98h, 8, 12B0h> ; R_X86_64_RELATIVE +12B0h
                    LOAD:0000000000000688                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:00000000000006A0                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:00000000000006B8                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:00000000000006D0                 Elf64_Rela <3FE8h, 600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:00000000000006E8                 Elf64_Rela <3FF0h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000700                 Elf64_Rela <3FF8h, 0B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000718 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000718                 Elf64_Rela <3FA8h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                    LOAD:0000000000000730                 Elf64_Rela <3FB0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000748                 Elf64_Rela <3FB8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
                    LOAD:0000000000000760                 Elf64_Rela <3FC0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
                    LOAD:0000000000000778                 Elf64_Rela <3FC8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
                    LOAD:0000000000000790                 Elf64_Rela <3FD0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000790 LOAD            ends
                    LOAD:0000000000000790
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j ...
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3F98
                    .plt:0000000000001026                 bnd jmp cs:qword_3FA0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
                    .plt:000000000000105F                 align 20h
                    .plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
                    .plt:000000000000106F                 align 10h
                    .plt:0000000000001070 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1070]
                    .plt:000000000000107F                 align 20h
                    .plt:0000000000001080 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1080]
                    .plt:000000000000108F                 align 10h
                    .plt:000000000000108F ; } // starts at 1020
                    .plt:000000000000108F _plt            ends
                    .plt:000000000000108F
                    .plt.got:0000000000001090 ; ===========================================================================
                    .plt.got:0000000000001090
                    .plt.got:0000000000001090 ; Segment type: Pure code
                    .plt.got:0000000000001090 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001090 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001090                 assume cs:_plt_got
                    .plt.got:0000000000001090                 ;org 1090h
                    .plt.got:0000000000001090                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000109B                 align 20h
                    .plt.got:000000000000109B ; } // starts at 1090
                    .plt.got:000000000000109B _plt_got        ends
                    .plt.got:000000000000109B
                    .plt.sec:00000000000010A0 ; ===========================================================================
                    .plt.sec:00000000000010A0
                    .plt.sec:00000000000010A0 ; Segment type: Pure code
                    .plt.sec:00000000000010A0 ; Segment permissions: Read/Execute
                    .plt.sec:00000000000010A0 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:00000000000010A0                 assume cs:_plt_sec
                    .plt.sec:00000000000010A0                 ;org 10A0h
                    .plt.sec:00000000000010A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
                    .plt.sec:00000000000010AB                 align 10h
                    .plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:00000000000010BB                 align 20h
                    .plt.sec:00000000000010C0 ; [0000000B BYTES: COLLAPSED FUNCTION ___memcpy_chk]
                    .plt.sec:00000000000010CB                 align 10h
                    .plt.sec:00000000000010D0 ; [0000000B BYTES: COLLAPSED FUNCTION _memcpy]
                    .plt.sec:00000000000010DB                 align 20h
                    .plt.sec:00000000000010E0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
                    .plt.sec:00000000000010EB                 align 10h
                    .plt.sec:00000000000010F0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:00000000000010FB                 align 20h
                    .plt.sec:00000000000010FB ; } // starts at 10A0
                    .plt.sec:00000000000010FB _plt_sec        ends
                    .plt.sec:00000000000010FB
                    .text:0000000000001100 ; ===========================================================================
                    .text:0000000000001100
                    .text:0000000000001100 ; Segment type: Pure code
                    .text:0000000000001100 ; Segment permissions: Read/Execute
                    .text:0000000000001100 _text           segment para public 'CODE' use64
                    .text:0000000000001100                 assume cs:_text
                    .text:0000000000001100                 ;org 1100h
                    .text:0000000000001100                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001100
                    .text:0000000000001100 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001100
                    .text:0000000000001100
                    .text:0000000000001100 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001100                 public main
                    .text:0000000000001100 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001100
                    .text:0000000000001100 var_78          = qword ptr -78h
                    .text:0000000000001100 var_70          = qword ptr -70h
                    .text:0000000000001100 var_68          = qword ptr -68h
                    .text:0000000000001100 var_60          = qword ptr -60h
                    .text:0000000000001100 var_58          = qword ptr -58h
                    .text:0000000000001100 var_50          = qword ptr -50h
                    .text:0000000000001100 var_48          = qword ptr -48h
                    .text:0000000000001100 var_40          = dword ptr -40h
                    .text:0000000000001100 var_30          = qword ptr -30h
                    .text:0000000000001100
                    .text:0000000000001100 ; __unwind {
                    .text:0000000000001100                 endbr64
                    .text:0000000000001104                 push    r13
                    .text:0000000000001106                 push    r12
                    .text:0000000000001108                 lea     r12, unk_2004
                    .text:000000000000110F                 push    rbp
                    .text:0000000000001110                 lea     rbp, aDS        ; "%d%s"
                    .text:0000000000001117                 push    rbx
                    .text:0000000000001118                 sub     rsp, 58h
                    .text:000000000000111C                 mov     rax, fs:28h
                    .text:0000000000001125                 mov     [rsp+78h+var_30], rax
                    .text:000000000000112A                 mov     rax, 300000005h
                    .text:0000000000001134                 mov     rbx, rsp
                    .text:0000000000001137                 lea     r13, [rsp+78h+var_40]
                    .text:000000000000113C                 mov     [rsp+78h+var_40], 0FFFFFFFFh
                    .text:0000000000001144                 mov     rdi, rbx
                    .text:0000000000001147                 mov     [rsp+78h+var_78], rax
                    .text:000000000000114B                 mov     rax, 200000001h
                    .text:0000000000001155                 mov     [rsp+78h+var_70], rax
                    .text:000000000000115A                 mov     rax, 500000009h
                    .text:0000000000001164                 mov     [rsp+78h+var_68], rax
                    .text:0000000000001169                 mov     rax, 600000005h
                    .text:0000000000001173                 mov     [rsp+78h+var_60], rax
                    .text:0000000000001178                 mov     rax, 800000007h
                    .text:0000000000001182                 mov     [rsp+78h+var_58], rax
                    .text:0000000000001187                 mov     rax, 400000000h
                    .text:0000000000001191                 mov     [rsp+78h+var_50], rax
                    .text:0000000000001196                 mov     rax, 0A00000004h
                    .text:00000000000011A0                 mov     [rsp+78h+var_48], rax
                    .text:00000000000011A5                 call    timsort_constprop_0
                    .text:00000000000011AA                 nop     word ptr [rax+rax+00h]
                    .text:00000000000011B0
                    .text:00000000000011B0 loc_11B0:                               ; CODE XREF: main+CB↓j
                    .text:00000000000011B0                 mov     edx, [rbx]
                    .text:00000000000011B2                 mov     rcx, r12
                    .text:00000000000011B5                 mov     rsi, rbp
                    .text:00000000000011B8                 mov     edi, 1
                    .text:00000000000011BD                 xor     eax, eax
                    .text:00000000000011BF                 add     rbx, 4
                    .text:00000000000011C3                 call    ___printf_chk
                    .text:00000000000011C8                 cmp     r13, rbx
                    .text:00000000000011CB                 jnz     short loc_11B0
                    .text:00000000000011CD                 mov     edx, [rsp+78h+var_40]
                    .text:00000000000011D1                 xor     eax, eax
                    .text:00000000000011D3                 lea     rcx, asc_200B   ; "\n"
                    .text:00000000000011DA                 mov     rsi, rbp
                    .text:00000000000011DD                 mov     edi, 1
                    .text:00000000000011E2                 call    ___printf_chk
                    .text:00000000000011E7                 mov     rax, [rsp+78h+var_30]
                    .text:00000000000011EC                 sub     rax, fs:28h
                    .text:00000000000011F5                 jnz     short loc_1204
                    .text:00000000000011F7                 add     rsp, 58h
                    .text:00000000000011FB                 xor     eax, eax
                    .text:00000000000011FD                 pop     rbx
                    .text:00000000000011FE                 pop     rbp
                    .text:00000000000011FF                 pop     r12
                    .text:0000000000001201                 pop     r13
                    .text:0000000000001203                 retn
                    .text:0000000000001204 ; ---------------------------------------------------------------------------
                    .text:0000000000001204
                    .text:0000000000001204 loc_1204:                               ; CODE XREF: main+F5↑j
                    .text:0000000000001204                 call    ___stack_chk_fail
                    .text:0000000000001204 ; } // starts at 1100
                    .text:0000000000001204 main            endp
                    .text:0000000000001204
                    .text:0000000000001204 ; ---------------------------------------------------------------------------
                    .text:0000000000001209                 align 10h
                    .text:0000000000001210
                    .text:0000000000001210 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001210
                    .text:0000000000001210 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001210
                    .text:0000000000001210                 public _start
                    .text:0000000000001210 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001210 ; __unwind {
                    .text:0000000000001210                 endbr64
                    .text:0000000000001214                 xor     ebp, ebp
                    .text:0000000000001216                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001219                 pop     rsi             ; argc
                    .text:000000000000121A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000121D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001221                 push    rax
                    .text:0000000000001222                 push    rsp             ; stack_end
                    .text:0000000000001223                 xor     r8d, r8d        ; fini
                    .text:0000000000001226                 xor     ecx, ecx        ; init
                    .text:0000000000001228                 lea     rdi, main       ; main
                    .text:000000000000122F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001235                 hlt
                    .text:0000000000001235 ; } // starts at 1210
                    .text:0000000000001235 _start          endp
                    .text:0000000000001235
                    .text:0000000000001235 ; ---------------------------------------------------------------------------
                    .text:0000000000001236                 align 20h
                    .text:0000000000001240
                    .text:0000000000001240 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001240
                    .text:0000000000001240
                    .text:0000000000001240 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_12D7↓p
                    .text:0000000000001240                 lea     rdi, __bss_start
                    .text:0000000000001247                 lea     rax, __bss_start
                    .text:000000000000124E                 cmp     rax, rdi
                    .text:0000000000001251                 jz      short locret_1268
                    .text:0000000000001253                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:000000000000125A                 test    rax, rax
                    .text:000000000000125D                 jz      short locret_1268
                    .text:000000000000125F                 jmp     rax
                    .text:000000000000125F ; ---------------------------------------------------------------------------
                    .text:0000000000001261                 align 8
                    .text:0000000000001268
                    .text:0000000000001268 locret_1268:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:0000000000001268                                         ; deregister_tm_clones+1D↑j
                    .text:0000000000001268                 retn
                    .text:0000000000001268 deregister_tm_clones endp
                    .text:0000000000001268
                    .text:0000000000001268 ; ---------------------------------------------------------------------------
                    .text:0000000000001269                 align 10h
                    .text:0000000000001270
                    .text:0000000000001270 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001270
                    .text:0000000000001270
                    .text:0000000000001270 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:0000000000001270                 lea     rdi, __bss_start
                    .text:0000000000001277                 lea     rsi, __bss_start
                    .text:000000000000127E                 sub     rsi, rdi
                    .text:0000000000001281                 mov     rax, rsi
                    .text:0000000000001284                 shr     rsi, 3Fh
                    .text:0000000000001288                 sar     rax, 3
                    .text:000000000000128C                 add     rsi, rax
                    .text:000000000000128F                 sar     rsi, 1
                    .text:0000000000001292                 jz      short locret_12A8
                    .text:0000000000001294                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:000000000000129B                 test    rax, rax
                    .text:000000000000129E                 jz      short locret_12A8
                    .text:00000000000012A0                 jmp     rax
                    .text:00000000000012A0 ; ---------------------------------------------------------------------------
                    .text:00000000000012A2                 align 8
                    .text:00000000000012A8
                    .text:00000000000012A8 locret_12A8:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:00000000000012A8                                         ; register_tm_clones+2E↑j
                    .text:00000000000012A8                 retn
                    .text:00000000000012A8 register_tm_clones endp
                    .text:00000000000012A8
                    .text:00000000000012A8 ; ---------------------------------------------------------------------------
                    .text:00000000000012A9                 align 10h
                    .text:00000000000012B0
                    .text:00000000000012B0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000012B0
                    .text:00000000000012B0
                    .text:00000000000012B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:00000000000012B0                 endbr64
                    .text:00000000000012B4                 cmp     cs:__bss_start, 0
                    .text:00000000000012BB                 jnz     short locret_12E8
                    .text:00000000000012BD                 push    rbp
                    .text:00000000000012BE                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:00000000000012C6                 mov     rbp, rsp
                    .text:00000000000012C9                 jz      short loc_12D7
                    .text:00000000000012CB                 mov     rdi, cs:__dso_handle ; void *
                    .text:00000000000012D2                 call    __cxa_finalize
                    .text:00000000000012D7
                    .text:00000000000012D7 loc_12D7:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:00000000000012D7                 call    deregister_tm_clones
                    .text:00000000000012DC                 mov     cs:__bss_start, 1
                    .text:00000000000012E3                 pop     rbp
                    .text:00000000000012E4                 retn
                    .text:00000000000012E4 ; ---------------------------------------------------------------------------
                    .text:00000000000012E5                 align 8
                    .text:00000000000012E8
                    .text:00000000000012E8 locret_12E8:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:00000000000012E8                 retn
                    .text:00000000000012E8 __do_global_dtors_aux endp
                    .text:00000000000012E8
                    .text:00000000000012E8 ; ---------------------------------------------------------------------------
                    .text:00000000000012E9                 align 10h
                    .text:00000000000012F0
                    .text:00000000000012F0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000012F0
                    .text:00000000000012F0
                    .text:00000000000012F0 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:00000000000012F0                 endbr64
                    .text:00000000000012F4                 jmp     register_tm_clones
                    .text:00000000000012F4 frame_dummy     endp
                    .text:00000000000012F4
                    .text:00000000000012F4 ; ---------------------------------------------------------------------------
                    .text:00000000000012F9                 align 20h
                    .text:0000000000001300
                    .text:0000000000001300 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001300
                    .text:0000000000001300
                    .text:0000000000001300 timsort_constprop_0 proc near           ; CODE XREF: main+A5↑p
                    .text:0000000000001300
                    .text:0000000000001300 var_870         = qword ptr -870h
                    .text:0000000000001300 var_868         = qword ptr -868h
                    .text:0000000000001300 var_860         = qword ptr -860h
                    .text:0000000000001300 var_858         = qword ptr -858h
                    .text:0000000000001300 var_850         = qword ptr -850h
                    .text:0000000000001300 var_848         = qword ptr -848h
                    .text:0000000000001300 var_840         = qword ptr -840h
                    .text:0000000000001300 var_450         = qword ptr -450h
                    .text:0000000000001300 var_448         = qword ptr -448h
                    .text:0000000000001300 var_440         = qword ptr -440h
                    .text:0000000000001300 var_40          = qword ptr -40h
                    .text:0000000000001300
                    .text:0000000000001300 ; __unwind {
                    .text:0000000000001300                 push    r15
                    .text:0000000000001302                 push    r14
                    .text:0000000000001304                 push    r13
                    .text:0000000000001306                 push    r12
                    .text:0000000000001308                 push    rbp
                    .text:0000000000001309                 push    rbx
                    .text:000000000000130A                 mov     rbx, rdi
                    .text:000000000000130D                 mov     edi, 3Ch ; '<'  ; size
                    .text:0000000000001312                 sub     rsp, 848h
                    .text:0000000000001319                 mov     rax, fs:28h
                    .text:0000000000001322                 mov     [rsp+878h+var_40], rax
                    .text:000000000000132A                 xor     eax, eax
                    .text:000000000000132C                 call    _malloc
                    .text:0000000000001331                 test    rax, rax
                    .text:0000000000001334                 jz      loc_1B6D
                    .text:000000000000133A                 mov     r13, rax
                    .text:000000000000133D                 xor     r9d, r9d
                    .text:0000000000001340                 xor     r8d, r8d
                    .text:0000000000001343                 nop     dword ptr [rax+rax+00h]
                    .text:0000000000001348
                    .text:0000000000001348 loc_1348:                               ; CODE XREF: timsort_constprop_0+1B4↓j
                    .text:0000000000001348                 lea     rbp, [r8+1]
                    .text:000000000000134C                 mov     r12d, 0Fh
                    .text:0000000000001352                 cmp     r8, 0Eh
                    .text:0000000000001356                 jz      loc_1450
                    .text:000000000000135C                 mov     eax, [rbx+rbp*4-4]
                    .text:0000000000001360                 cmp     [rbx+rbp*4], eax
                    .text:0000000000001363                 jge     loc_143D
                    .text:0000000000001369                 jmp     short loc_137D
                    .text:0000000000001369 ; ---------------------------------------------------------------------------
                    .text:000000000000136B                 align 10h
                    .text:0000000000001370
                    .text:0000000000001370 loc_1370:                               ; CODE XREF: timsort_constprop_0+88↓j
                    .text:0000000000001370                 mov     edi, [rbx+rbp*4-4]
                    .text:0000000000001374                 cmp     [rbx+rbp*4], edi
                    .text:0000000000001377                 jge     loc_18DB
                    .text:000000000000137D
                    .text:000000000000137D loc_137D:                               ; CODE XREF: timsort_constprop_0+69↑j
                    .text:000000000000137D                 mov     rax, rbp
                    .text:0000000000001380                 add     rbp, 1
                    .text:0000000000001384                 cmp     rbp, 0Fh
                    .text:0000000000001388                 jnz     short loc_1370
                    .text:000000000000138A                 mov     eax, 0Eh
                    .text:000000000000138F
                    .text:000000000000138F loc_138F:                               ; CODE XREF: timsort_constprop_0+5DE↓j
                    .text:000000000000138F                 mov     rdx, r8
                    .text:0000000000001392                 nop     word ptr [rax+rax+00h]
                    .text:0000000000001398
                    .text:0000000000001398 loc_1398:                               ; CODE XREF: timsort_constprop_0+AF↓j
                    .text:0000000000001398                 mov     ecx, [rbx+rdx*4]
                    .text:000000000000139B                 mov     esi, [rbx+rax*4]
                    .text:000000000000139E                 mov     [rbx+rdx*4], esi
                    .text:00000000000013A1                 add     rdx, 1
                    .text:00000000000013A5                 mov     [rbx+rax*4], ecx
                    .text:00000000000013A8                 sub     rax, 1
                    .text:00000000000013AC                 cmp     rdx, rax
                    .text:00000000000013AF                 jb      short loc_1398
                    .text:00000000000013B1
                    .text:00000000000013B1 loc_13B1:                               ; CODE XREF: timsort_constprop_0+137↓j
                    .text:00000000000013B1                                         ; timsort_constprop_0+5E4↓j
                    .text:00000000000013B1                 mov     r12, rbp
                    .text:00000000000013B4                 mov     eax, 20h ; ' '
                    .text:00000000000013B9                 sub     r12, r8
                    .text:00000000000013BC                 cmp     r12, rax
                    .text:00000000000013BF                 cmovb   r12, rax
                    .text:00000000000013C3                 mov     eax, 0Fh
                    .text:00000000000013C8                 add     r12, r8
                    .text:00000000000013CB                 cmp     r12, rax
                    .text:00000000000013CE                 cmova   r12, rax
                    .text:00000000000013D2                 cmp     rbp, r12
                    .text:00000000000013D5                 jnb     short loc_1450
                    .text:00000000000013D7                 lea     r11, [rbx+rbp*4]
                    .text:00000000000013DB                 mov     r10, rbp
                    .text:00000000000013DE                 lea     r14, [rbx+r8*4]
                    .text:00000000000013E2                 nop     word ptr [rax+rax+00h]
                    .text:00000000000013E8
                    .text:00000000000013E8 loc_13E8:                               ; CODE XREF: timsort_constprop_0+12A↓j
                    .text:00000000000013E8                                         ; timsort_constprop_0+1D0↓j
                    .text:00000000000013E8                 mov     edi, [r11]
                    .text:00000000000013EB                 mov     rsi, r11
                    .text:00000000000013EE                 mov     rax, r11
                    .text:00000000000013F1                 mov     rdx, r10
                    .text:00000000000013F4                 cmp     r10, r8
                    .text:00000000000013F7                 ja      short loc_1413
                    .text:00000000000013F9                 jmp     short loc_141D
                    .text:00000000000013F9 ; ---------------------------------------------------------------------------
                    .text:00000000000013FB                 align 20h
                    .text:0000000000001400
                    .text:0000000000001400 loc_1400:                               ; CODE XREF: timsort_constprop_0+11B↓j
                    .text:0000000000001400                 sub     rdx, 1
                    .text:0000000000001404                 mov     [rax], ecx
                    .text:0000000000001406                 lea     rax, [rsi-4]
                    .text:000000000000140A                 cmp     rdx, r8
                    .text:000000000000140D                 jz      loc_14C0
                    .text:0000000000001413
                    .text:0000000000001413 loc_1413:                               ; CODE XREF: timsort_constprop_0+F7↑j
                    .text:0000000000001413                 mov     ecx, [rax-4]
                    .text:0000000000001416                 mov     rsi, rax
                    .text:0000000000001419                 cmp     edi, ecx
                    .text:000000000000141B                 jl      short loc_1400
                    .text:000000000000141D
                    .text:000000000000141D loc_141D:                               ; CODE XREF: timsort_constprop_0+F9↑j
                    .text:000000000000141D                 add     r10, 1
                    .text:0000000000001421                 mov     [rsi], edi
                    .text:0000000000001423                 add     r11, 4
                    .text:0000000000001427                 cmp     r12, r10
                    .text:000000000000142A                 jnz     short loc_13E8
                    .text:000000000000142C                 jmp     short loc_1450
                    .text:000000000000142C ; ---------------------------------------------------------------------------
                    .text:000000000000142E                 align 10h
                    .text:0000000000001430
                    .text:0000000000001430 loc_1430:                               ; CODE XREF: timsort_constprop_0+145↓j
                    .text:0000000000001430                 mov     eax, [rbx+rbp*4-4]
                    .text:0000000000001434                 cmp     [rbx+rbp*4], eax
                    .text:0000000000001437                 jl      loc_13B1
                    .text:000000000000143D
                    .text:000000000000143D loc_143D:                               ; CODE XREF: timsort_constprop_0+63↑j
                    .text:000000000000143D                 add     rbp, 1
                    .text:0000000000001441                 cmp     rbp, 0Fh
                    .text:0000000000001445                 jnz     short loc_1430
                    .text:0000000000001447                 mov     r12d, 0Fh
                    .text:000000000000144D                 nop     dword ptr [rax]
                    .text:0000000000001450
                    .text:0000000000001450 loc_1450:                               ; CODE XREF: timsort_constprop_0+56↑j
                    .text:0000000000001450                                         ; timsort_constprop_0+D5↑j ...
                    .text:0000000000001450                 sub     r12, r8
                    .text:0000000000001453                 mov     [rsp+r9*8+878h+var_848], r8
                    .text:0000000000001458                 mov     [rsp+r9*8+878h+var_448], r12
                    .text:0000000000001460                 add     r9, 1
                    .text:0000000000001464                 cmp     r9, 1
                    .text:0000000000001468                 jbe     short loc_14A7
                    .text:000000000000146A                 cmp     r9, 2
                    .text:000000000000146E                 jz      loc_1766
                    .text:0000000000001474
                    .text:0000000000001474 loc_1474:                               ; CODE XREF: timsort_constprop_0+2D0↓j
                    .text:0000000000001474                 lea     r15, [r9-2]
                    .text:0000000000001478                 lea     r8, [r9-3]
                    .text:000000000000147C                 mov     r14, [rsp+r15*8+878h+var_448]
                    .text:0000000000001484                 mov     rax, [rsp+r8*8+878h+var_448]
                    .text:000000000000148C                 lea     rdi, [r9-1]
                    .text:0000000000001490                 mov     [rsp+878h+var_870], rdi
                    .text:0000000000001495                 lea     r11, [r14+r12]
                    .text:0000000000001499                 cmp     rax, r11
                    .text:000000000000149C                 jbe     short loc_14DB
                    .text:000000000000149E                 cmp     r14, r12
                    .text:00000000000014A1                 jbe     loc_16B8
                    .text:00000000000014A7
                    .text:00000000000014A7 loc_14A7:                               ; CODE XREF: timsort_constprop_0+168↑j
                    .text:00000000000014A7                                         ; timsort_constprop_0+3B3↓j ...
                    .text:00000000000014A7                 cmp     rbp, 0Fh
                    .text:00000000000014AB                 jz      loc_18E9
                    .text:00000000000014B1                 mov     r8, rbp
                    .text:00000000000014B4                 jmp     loc_1348
                    .text:00000000000014B4 ; ---------------------------------------------------------------------------
                    .text:00000000000014B9                 align 20h
                    .text:00000000000014C0
                    .text:00000000000014C0 loc_14C0:                               ; CODE XREF: timsort_constprop_0+10D↑j
                    .text:00000000000014C0                 mov     rsi, r14
                    .text:00000000000014C3                 add     r10, 1
                    .text:00000000000014C7                 add     r11, 4
                    .text:00000000000014CB                 mov     [rsi], edi
                    .text:00000000000014CD                 cmp     r12, r10
                    .text:00000000000014D0                 jnz     loc_13E8
                    .text:00000000000014D6                 jmp     loc_1450
                    .text:00000000000014DB ; ---------------------------------------------------------------------------
                    .text:00000000000014DB
                    .text:00000000000014DB loc_14DB:                               ; CODE XREF: timsort_constprop_0+19C↑j
                    .text:00000000000014DB                 cmp     rax, r12
                    .text:00000000000014DE                 jb      loc_15D5
                    .text:00000000000014E4                 mov     rax, [rsp+878h+var_870]
                    .text:00000000000014E9                 mov     r8, [rsp+r15*8+878h+var_848]
                    .text:00000000000014EE                 mov     r9, [rsp+rax*8+878h+var_848]
                    .text:00000000000014F3                 lea     rax, [r9+r12]
                    .text:00000000000014F7                 mov     [rsp+878h+var_868], rax
                    .text:00000000000014FC                 cmp     r14, r12
                    .text:00000000000014FF                 jbe     loc_16D9
                    .text:0000000000001505                 lea     rdx, ds:0[r12*4]
                    .text:000000000000150D                 lea     rsi, [rbx+r9*4]
                    .text:0000000000001511                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001516                 mov     rdi, r13
                    .text:0000000000001519                 mov     [rsp+878h+var_858], r8
                    .text:000000000000151E                 mov     [rsp+878h+var_868], r11
                    .text:0000000000001523                 mov     [rsp+878h+var_860], rax
                    .text:0000000000001528                 call    ___memcpy_chk
                    .text:000000000000152D                 mov     r8, [rsp+878h+var_858]
                    .text:0000000000001532                 mov     r11, [rsp+878h+var_868]
                    .text:0000000000001537                 add     r14, r8
                    .text:000000000000153A                 test    r12, r12
                    .text:000000000000153D                 jz      short loc_15AE
                    .text:000000000000153F                 cmp     r14, r8
                    .text:0000000000001542                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001547                 ja      short loc_1566
                    .text:0000000000001549                 jmp     short loc_1588
                    .text:0000000000001549 ; ---------------------------------------------------------------------------
                    .text:000000000000154B                 align 10h
                    .text:0000000000001550
                    .text:0000000000001550 loc_1550:                               ; CODE XREF: timsort_constprop_0+274↓j
                    .text:0000000000001550                 sub     r14, 1
                    .text:0000000000001554                 mov     eax, [rbx+r14*4]
                    .text:0000000000001558                 mov     [rbx+r10*4], eax
                    .text:000000000000155C                 cmp     r14, r8
                    .text:000000000000155F                 jbe     short loc_1588
                    .text:0000000000001561
                    .text:0000000000001561 loc_1561:                               ; CODE XREF: timsort_constprop_0+286↓j
                    .text:0000000000001561                 test    r12, r12
                    .text:0000000000001564                 jz      short loc_15AE
                    .text:0000000000001566
                    .text:0000000000001566 loc_1566:                               ; CODE XREF: timsort_constprop_0+247↑j
                    .text:0000000000001566                 mov     eax, [r13+r12*4-4]
                    .text:000000000000156B                 sub     r10, 1
                    .text:000000000000156F                 cmp     [rbx+r14*4-4], eax
                    .text:0000000000001574                 jg      short loc_1550
                    .text:0000000000001576                 sub     r12, 1
                    .text:000000000000157A                 mov     eax, [r13+r12*4+0]
                    .text:000000000000157F                 mov     [rbx+r10*4], eax
                    .text:0000000000001583                 cmp     r14, r8
                    .text:0000000000001586                 ja      short loc_1561
                    .text:0000000000001588
                    .text:0000000000001588 loc_1588:                               ; CODE XREF: timsort_constprop_0+249↑j
                    .text:0000000000001588                                         ; timsort_constprop_0+25F↑j
                    .text:0000000000001588                 test    r12, r12
                    .text:000000000000158B                 jz      short loc_15AE
                    .text:000000000000158D                 sub     r10, r12
                    .text:0000000000001590                 lea     rdx, ds:0[r12*4] ; n
                    .text:0000000000001598                 mov     rsi, r13        ; src
                    .text:000000000000159B                 mov     [rsp+878h+var_868], r11
                    .text:00000000000015A0                 lea     rdi, [rbx+r10*4] ; dest
                    .text:00000000000015A4                 call    _memcpy
                    .text:00000000000015A9                 mov     r11, [rsp+878h+var_868]
                    .text:00000000000015AE
                    .text:00000000000015AE loc_15AE:                               ; CODE XREF: timsort_constprop_0+23D↑j
                    .text:00000000000015AE                                         ; timsort_constprop_0+264↑j ...
                    .text:00000000000015AE                 mov     [rsp+r15*8+878h+var_448], r11
                    .text:00000000000015B6                 mov     r15, [rsp+878h+var_870]
                    .text:00000000000015BB
                    .text:00000000000015BB loc_15BB:                               ; CODE XREF: timsort_constprop_0+3A7↓j
                    .text:00000000000015BB                 cmp     r15, 2
                    .text:00000000000015BF                 jz      loc_1766
                    .text:00000000000015C5                 mov     r12, [rsp+r15*8+878h+var_450]
                    .text:00000000000015CD                 mov     r9, r15
                    .text:00000000000015D0                 jmp     loc_1474
                    .text:00000000000015D5 ; ---------------------------------------------------------------------------
                    .text:00000000000015D5
                    .text:00000000000015D5 loc_15D5:                               ; CODE XREF: timsort_constprop_0+1DE↑j
                    .text:00000000000015D5                                         ; timsort_constprop_0+3BB↓j
                    .text:00000000000015D5                 mov     [rsp+r15*8+878h+var_448], rax
                    .text:00000000000015DD                 mov     rdx, [rsp+r8*8+878h+var_848]
                    .text:00000000000015E2                 mov     r10, [rsp+r15*8+878h+var_848]
                    .text:00000000000015E7                 mov     [rsp+r8*8+878h+var_448], r14
                    .text:00000000000015EF                 mov     r9, [rsp+r15*8+878h+var_448]
                    .text:00000000000015F7                 mov     [rsp+r15*8+878h+var_848], rdx
                    .text:00000000000015FC                 mov     [rsp+r8*8+878h+var_848], r10
                    .text:0000000000001601                 mov     r12, [rsp+r15*8+878h+var_848]
                    .text:0000000000001606                 cmp     r14, r9
                    .text:0000000000001609                 ja      loc_1818
                    .text:000000000000160F                 lea     rsi, [rbx+r10*4]
                    .text:0000000000001613                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001618                 mov     rdi, r13
                    .text:000000000000161B                 mov     [rsp+878h+var_860], r9
                    .text:0000000000001620                 lea     rdx, ds:0[r14*4]
                    .text:0000000000001628                 mov     [rsp+878h+var_868], r8
                    .text:000000000000162D                 mov     [rsp+878h+var_870], r10
                    .text:0000000000001632                 call    ___memcpy_chk
                    .text:0000000000001637                 mov     r9, [rsp+878h+var_860]
                    .text:000000000000163C                 xor     edx, edx
                    .text:000000000000163E                 mov     r10, [rsp+878h+var_870]
                    .text:0000000000001643                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001648                 lea     rsi, [r12+r9]
                    .text:000000000000164C                 cmp     r12, rsi
                    .text:000000000000164F                 jnb     loc_1B00
                    .text:0000000000001655                 test    r14, r14
                    .text:0000000000001658                 jnz     short loc_1679
                    .text:000000000000165A                 jmp     loc_1B00
                    .text:000000000000165A ; ---------------------------------------------------------------------------
                    .text:000000000000165F                 align 20h
                    .text:0000000000001660
                    .text:0000000000001660 loc_1660:                               ; CODE XREF: timsort_constprop_0+388↓j
                    .text:0000000000001660                 mov     eax, ecx
                    .text:0000000000001662                 add     rdx, 1
                    .text:0000000000001666                 mov     [rbx+r10*4-4], eax
                    .text:000000000000166B                 cmp     r14, rdx
                    .text:000000000000166E                 jbe     short loc_1698
                    .text:0000000000001670
                    .text:0000000000001670 loc_1670:                               ; CODE XREF: timsort_constprop_0+396↓j
                    .text:0000000000001670                 cmp     rsi, r12
                    .text:0000000000001673                 jbe     loc_1B00
                    .text:0000000000001679
                    .text:0000000000001679 loc_1679:                               ; CODE XREF: timsort_constprop_0+358↑j
                    .text:0000000000001679                 mov     ecx, [r13+rdx*4+0]
                    .text:000000000000167E                 mov     eax, [rbx+r12*4]
                    .text:0000000000001682                 add     r10, 1
                    .text:0000000000001686                 cmp     ecx, eax
                    .text:0000000000001688                 jle     short loc_1660
                    .text:000000000000168A                 mov     [rbx+r10*4-4], eax
                    .text:000000000000168F                 add     r12, 1
                    .text:0000000000001693                 cmp     r14, rdx
                    .text:0000000000001696                 ja      short loc_1670
                    .text:0000000000001698
                    .text:0000000000001698 loc_1698:                               ; CODE XREF: timsort_constprop_0+36E↑j
                    .text:0000000000001698                                         ; timsort_constprop_0+57B↓j ...
                    .text:0000000000001698                 add     r9, r14
                    .text:000000000000169B                 mov     [rsp+r8*8+878h+var_448], r9
                    .text:00000000000016A3                 cmp     r15, 1
                    .text:00000000000016A7                 jnz     loc_15BB
                    .text:00000000000016AD
                    .text:00000000000016AD loc_16AD:                               ; CODE XREF: timsort_constprop_0+513↓j
                    .text:00000000000016AD                 mov     r9d, 1
                    .text:00000000000016B3                 jmp     loc_14A7
                    .text:00000000000016B8 ; ---------------------------------------------------------------------------
                    .text:00000000000016B8
                    .text:00000000000016B8 loc_16B8:                               ; CODE XREF: timsort_constprop_0+1A1↑j
                    .text:00000000000016B8                 cmp     rax, r12
                    .text:00000000000016BB                 jb      loc_15D5
                    .text:00000000000016C1                 mov     rax, [rsp+878h+var_870]
                    .text:00000000000016C6                 mov     r8, [rsp+r15*8+878h+var_848]
                    .text:00000000000016CB                 mov     r9, [rsp+rax*8+878h+var_848]
                    .text:00000000000016D0                 lea     rax, [r9+r12]
                    .text:00000000000016D4                 mov     [rsp+878h+var_868], rax
                    .text:00000000000016D9
                    .text:00000000000016D9 loc_16D9:                               ; CODE XREF: timsort_constprop_0+1FF↑j
                    .text:00000000000016D9                 lea     rdx, ds:0[r14*4]
                    .text:00000000000016E1                 lea     rsi, [rbx+r8*4]
                    .text:00000000000016E5                 mov     ecx, 3Ch ; '<'
                    .text:00000000000016EA                 mov     rdi, r13
                    .text:00000000000016ED                 mov     [rsp+878h+var_850], r9
                    .text:00000000000016F2                 mov     [rsp+878h+var_858], r11
                    .text:00000000000016F7                 mov     [rsp+878h+var_860], r8
                    .text:00000000000016FC                 call    ___memcpy_chk
                    .text:0000000000001701                 mov     r9, [rsp+878h+var_850]
                    .text:0000000000001706                 xor     edx, edx
                    .text:0000000000001708                 cmp     [rsp+878h+var_868], r9
                    .text:000000000000170D                 mov     r8, [rsp+878h+var_860]
                    .text:0000000000001712                 mov     r11, [rsp+878h+var_858]
                    .text:0000000000001717                 jbe     loc_1B3D
                    .text:000000000000171D                 test    r14, r14
                    .text:0000000000001720                 jnz     short loc_174F
                    .text:0000000000001722                 jmp     loc_1B3D
                    .text:0000000000001722 ; ---------------------------------------------------------------------------
                    .text:0000000000001727                 align 10h
                    .text:0000000000001730
                    .text:0000000000001730 loc_1730:                               ; CODE XREF: timsort_constprop_0+45E↓j
                    .text:0000000000001730                 add     rdx, 1
                    .text:0000000000001734                 mov     eax, ecx
                    .text:0000000000001736
                    .text:0000000000001736 loc_1736:                               ; CODE XREF: timsort_constprop_0+464↓j
                    .text:0000000000001736                 mov     [rbx+r8*4-4], eax
                    .text:000000000000173B                 cmp     r14, rdx
                    .text:000000000000173E                 jbe     loc_15AE
                    .text:0000000000001744                 cmp     [rsp+878h+var_868], r9
                    .text:0000000000001749                 jbe     loc_1B3D
                    .text:000000000000174F
                    .text:000000000000174F loc_174F:                               ; CODE XREF: timsort_constprop_0+420↑j
                    .text:000000000000174F                 mov     ecx, [r13+rdx*4+0]
                    .text:0000000000001754                 mov     eax, [rbx+r9*4]
                    .text:0000000000001758                 add     r8, 1
                    .text:000000000000175C                 cmp     ecx, eax
                    .text:000000000000175E                 jle     short loc_1730
                    .text:0000000000001760                 add     r9, 1
                    .text:0000000000001764                 jmp     short loc_1736
                    .text:0000000000001766 ; ---------------------------------------------------------------------------
                    .text:0000000000001766
                    .text:0000000000001766 loc_1766:                               ; CODE XREF: timsort_constprop_0+16E↑j
                    .text:0000000000001766                                         ; timsort_constprop_0+2BF↑j
                    .text:0000000000001766                 mov     r15, [rsp+878h+var_448]
                    .text:000000000000176E                 mov     r8, [rsp+878h+var_440]
                    .text:0000000000001776                 mov     r9d, 2
                    .text:000000000000177C                 cmp     r15, r8
                    .text:000000000000177F                 ja      loc_14A7
                    .text:0000000000001785                 mov     r12, [rsp+878h+var_848]
                    .text:000000000000178A                 mov     ecx, 3Ch ; '<'
                    .text:000000000000178F                 mov     rdi, r13
                    .text:0000000000001792                 mov     [rsp+878h+var_870], r8
                    .text:0000000000001797                 lea     rdx, ds:0[r15*4]
                    .text:000000000000179F                 mov     r14, [rsp+878h+var_840]
                    .text:00000000000017A4                 lea     rsi, [rbx+r12*4]
                    .text:00000000000017A8                 call    ___memcpy_chk
                    .text:00000000000017AD                 mov     r8, [rsp+878h+var_870]
                    .text:00000000000017B2                 xor     eax, eax
                    .text:00000000000017B4                 lea     rsi, [r8+r14]
                    .text:00000000000017B8                 cmp     r14, rsi
                    .text:00000000000017BB                 jnb     loc_1B92
                    .text:00000000000017C1                 test    r15, r15
                    .text:00000000000017C4                 jnz     short loc_17E9
                    .text:00000000000017C6                 jmp     loc_1B92
                    .text:00000000000017C6 ; ---------------------------------------------------------------------------
                    .text:00000000000017CB                 align 10h
                    .text:00000000000017D0
                    .text:00000000000017D0 loc_17D0:                               ; CODE XREF: timsort_constprop_0+4F8↓j
                    .text:00000000000017D0                 mov     edx, ecx
                    .text:00000000000017D2                 add     rax, 1
                    .text:00000000000017D6                 mov     [rbx+r12*4-4], edx
                    .text:00000000000017DB                 cmp     r15, rax
                    .text:00000000000017DE                 jbe     short loc_1808
                    .text:00000000000017E0
                    .text:00000000000017E0 loc_17E0:                               ; CODE XREF: timsort_constprop_0+506↓j
                    .text:00000000000017E0                 cmp     rsi, r14
                    .text:00000000000017E3                 jbe     loc_1B92
                    .text:00000000000017E9
                    .text:00000000000017E9 loc_17E9:                               ; CODE XREF: timsort_constprop_0+4C4↑j
                    .text:00000000000017E9                 mov     ecx, [r13+rax*4+0]
                    .text:00000000000017EE                 mov     edx, [rbx+r14*4]
                    .text:00000000000017F2                 add     r12, 1
                    .text:00000000000017F6                 cmp     ecx, edx
                    .text:00000000000017F8                 jle     short loc_17D0
                    .text:00000000000017FA                 mov     [rbx+r12*4-4], edx
                    .text:00000000000017FF                 add     r14, 1
                    .text:0000000000001803                 cmp     r15, rax
                    .text:0000000000001806                 ja      short loc_17E0
                    .text:0000000000001808
                    .text:0000000000001808 loc_1808:                               ; CODE XREF: timsort_constprop_0+4DE↑j
                    .text:0000000000001808                                         ; timsort_constprop_0+895↓j ...
                    .text:0000000000001808                 add     r15, r8
                    .text:000000000000180B                 mov     [rsp+878h+var_448], r15
                    .text:0000000000001813                 jmp     loc_16AD
                    .text:0000000000001818 ; ---------------------------------------------------------------------------
                    .text:0000000000001818
                    .text:0000000000001818 loc_1818:                               ; CODE XREF: timsort_constprop_0+309↑j
                    .text:0000000000001818                 lea     rdx, ds:0[r9*4]
                    .text:0000000000001820                 lea     rsi, [rbx+r12*4]
                    .text:0000000000001824                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001829                 mov     rdi, r13
                    .text:000000000000182C                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001831                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001836                 mov     [rsp+878h+var_870], r9
                    .text:000000000000183B                 call    ___memcpy_chk
                    .text:0000000000001840                 mov     r9, [rsp+878h+var_870]
                    .text:0000000000001845                 mov     r10, [rsp+878h+var_860]
                    .text:000000000000184A                 mov     r8, [rsp+878h+var_868]
                    .text:000000000000184F                 add     r12, r9
                    .text:0000000000001852                 test    r9, r9
                    .text:0000000000001855                 lea     rdx, [r14+r10]
                    .text:0000000000001859                 mov     rax, r9
                    .text:000000000000185C                 jz      short loc_18A2
                    .text:000000000000185E                 cmp     r10, rdx
                    .text:0000000000001861                 jb      short loc_1881
                    .text:0000000000001863                 jmp     short loc_18A2
                    .text:0000000000001863 ; ---------------------------------------------------------------------------
                    .text:0000000000001865                 align 8
                    .text:0000000000001868
                    .text:0000000000001868 loc_1868:                               ; CODE XREF: timsort_constprop_0+58E↓j
                    .text:0000000000001868                 sub     rdx, 1
                    .text:000000000000186C                 mov     ecx, [rbx+rdx*4]
                    .text:000000000000186F                 mov     [rbx+r12*4], ecx
                    .text:0000000000001873                 cmp     r10, rdx
                    .text:0000000000001876                 jnb     short loc_18A2
                    .text:0000000000001878
                    .text:0000000000001878 loc_1878:                               ; CODE XREF: timsort_constprop_0+5A0↓j
                    .text:0000000000001878                 test    rax, rax
                    .text:000000000000187B                 jz      loc_1698
                    .text:0000000000001881
                    .text:0000000000001881 loc_1881:                               ; CODE XREF: timsort_constprop_0+561↑j
                    .text:0000000000001881                 mov     edi, [r13+rax*4-4]
                    .text:0000000000001886                 sub     r12, 1
                    .text:000000000000188A                 cmp     [rbx+rdx*4-4], edi
                    .text:000000000000188E                 jg      short loc_1868
                    .text:0000000000001890                 sub     rax, 1
                    .text:0000000000001894                 mov     ecx, [r13+rax*4+0]
                    .text:0000000000001899                 mov     [rbx+r12*4], ecx
                    .text:000000000000189D                 cmp     r10, rdx
                    .text:00000000000018A0                 jb      short loc_1878
                    .text:00000000000018A2
                    .text:00000000000018A2 loc_18A2:                               ; CODE XREF: timsort_constprop_0+55C↑j
                    .text:00000000000018A2                                         ; timsort_constprop_0+563↑j ...
                    .text:00000000000018A2                 test    rax, rax
                    .text:00000000000018A5                 jz      loc_1698
                    .text:00000000000018AB                 sub     r12, rax
                    .text:00000000000018AE                 lea     rdx, ds:0[rax*4] ; n
                    .text:00000000000018B6                 mov     rsi, r13        ; src
                    .text:00000000000018B9                 mov     [rsp+878h+var_868], r9
                    .text:00000000000018BE                 lea     rdi, [rbx+r12*4] ; dest
                    .text:00000000000018C2                 mov     [rsp+878h+var_870], r8
                    .text:00000000000018C7                 call    _memcpy
                    .text:00000000000018CC                 mov     r8, [rsp+878h+var_870]
                    .text:00000000000018D1                 mov     r9, [rsp+878h+var_868]
                    .text:00000000000018D6                 jmp     loc_1698
                    .text:00000000000018DB ; ---------------------------------------------------------------------------
                    .text:00000000000018DB
                    .text:00000000000018DB loc_18DB:                               ; CODE XREF: timsort_constprop_0+77↑j
                    .text:00000000000018DB                 cmp     rax, r8
                    .text:00000000000018DE                 ja      loc_138F
                    .text:00000000000018E4                 jmp     loc_13B1
                    .text:00000000000018E9 ; ---------------------------------------------------------------------------
                    .text:00000000000018E9
                    .text:00000000000018E9 loc_18E9:                               ; CODE XREF: timsort_constprop_0+1AB↑j
                    .text:00000000000018E9                 cmp     r9, 1
                    .text:00000000000018ED                 jbe     loc_19DA
                    .text:00000000000018F3                 lea     rax, [rsp+878h+var_840]
                    .text:00000000000018F8                 shl     r9, 3
                    .text:00000000000018FC                 mov     [rsp+878h+var_870], rax
                    .text:0000000000001901                 lea     r10, [rsp+r9+878h+var_848]
                    .text:0000000000001906                 lea     r14, [rsp+r9+878h+var_448]
                    .text:000000000000190E                 xchg    ax, ax
                    .text:0000000000001910
                    .text:0000000000001910 loc_1910:                               ; CODE XREF: timsort_constprop_0+6D4↓j
                    .text:0000000000001910                 mov     r11, [r10-8]
                    .text:0000000000001914                 mov     r8, [r14-8]
                    .text:0000000000001918                 mov     r15, [r14-10h]
                    .text:000000000000191C                 mov     rbp, [r10-10h]
                    .text:0000000000001920                 lea     r12, [r11+r8]
                    .text:0000000000001924                 cmp     r8, r15
                    .text:0000000000001927                 jb      loc_1A0A
                    .text:000000000000192D                 lea     rdx, ds:0[r15*4]
                    .text:0000000000001935                 lea     rsi, [rbx+rbp*4]
                    .text:0000000000001939                 mov     ecx, 3Ch ; '<'
                    .text:000000000000193E                 mov     rdi, r13
                    .text:0000000000001941                 mov     [rsp+878h+var_858], r10
                    .text:0000000000001946                 mov     [rsp+878h+var_860], r11
                    .text:000000000000194B                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001950                 call    ___memcpy_chk
                    .text:0000000000001955                 mov     r11, [rsp+878h+var_860]
                    .text:000000000000195A                 xor     edx, edx
                    .text:000000000000195C                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001961                 mov     r10, [rsp+878h+var_858]
                    .text:0000000000001966                 cmp     r11, r12
                    .text:0000000000001969                 jnb     loc_1AC3
                    .text:000000000000196F                 test    r15, r15
                    .text:0000000000001972                 jnz     short loc_1998
                    .text:0000000000001974                 jmp     loc_1AC3
                    .text:0000000000001974 ; ---------------------------------------------------------------------------
                    .text:0000000000001979                 align 20h
                    .text:0000000000001980
                    .text:0000000000001980 loc_1980:                               ; CODE XREF: timsort_constprop_0+6A7↓j
                    .text:0000000000001980                 mov     eax, ecx
                    .text:0000000000001982                 add     rdx, 1
                    .text:0000000000001986                 mov     [rbx+rbp*4-4], eax
                    .text:000000000000198A                 cmp     r15, rdx
                    .text:000000000000198D                 jbe     short loc_19C0
                    .text:000000000000198F
                    .text:000000000000198F loc_198F:                               ; CODE XREF: timsort_constprop_0+6B4↓j
                    .text:000000000000198F                 cmp     r11, r12
                    .text:0000000000001992                 jnb     loc_1AC3
                    .text:0000000000001998
                    .text:0000000000001998 loc_1998:                               ; CODE XREF: timsort_constprop_0+672↑j
                    .text:0000000000001998                 mov     ecx, [r13+rdx*4+0]
                    .text:000000000000199D                 mov     eax, [rbx+r11*4]
                    .text:00000000000019A1                 add     rbp, 1
                    .text:00000000000019A5                 cmp     ecx, eax
                    .text:00000000000019A7                 jle     short loc_1980
                    .text:00000000000019A9                 mov     [rbx+rbp*4-4], eax
                    .text:00000000000019AD                 add     r11, 1
                    .text:00000000000019B1                 cmp     r15, rdx
                    .text:00000000000019B4                 ja      short loc_198F
                    .text:00000000000019B6                 db      2Eh
                    .text:00000000000019B6                 nop     word ptr [rax+rax+00000000h]
                    .text:00000000000019C0
                    .text:00000000000019C0 loc_19C0:                               ; CODE XREF: timsort_constprop_0+68D↑j
                    .text:00000000000019C0                                         ; timsort_constprop_0+763↓j ...
                    .text:00000000000019C0                 add     r8, r15
                    .text:00000000000019C3                 sub     r10, 8
                    .text:00000000000019C7                 sub     r14, 8
                    .text:00000000000019CB                 mov     [r14-8], r8
                    .text:00000000000019CF                 cmp     r10, [rsp+878h+var_870]
                    .text:00000000000019D4                 jnz     loc_1910
                    .text:00000000000019DA
                    .text:00000000000019DA loc_19DA:                               ; CODE XREF: timsort_constprop_0+5ED↑j
                    .text:00000000000019DA                 mov     rax, [rsp+878h+var_40]
                    .text:00000000000019E2                 sub     rax, fs:28h
                    .text:00000000000019EB                 jnz     loc_1BC2
                    .text:00000000000019F1                 add     rsp, 848h
                    .text:00000000000019F8                 mov     rdi, r13        ; ptr
                    .text:00000000000019FB                 pop     rbx
                    .text:00000000000019FC                 pop     rbp
                    .text:00000000000019FD                 pop     r12
                    .text:00000000000019FF                 pop     r13
                    .text:0000000000001A01                 pop     r14
                    .text:0000000000001A03                 pop     r15
                    .text:0000000000001A05                 jmp     _free
                    .text:0000000000001A0A ; ---------------------------------------------------------------------------
                    .text:0000000000001A0A
                    .text:0000000000001A0A loc_1A0A:                               ; CODE XREF: timsort_constprop_0+627↑j
                    .text:0000000000001A0A                 lea     rdx, ds:0[r8*4]
                    .text:0000000000001A12                 lea     rsi, [rbx+r11*4]
                    .text:0000000000001A16                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001A1B                 mov     rdi, r13
                    .text:0000000000001A1E                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001A23                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001A28                 call    ___memcpy_chk
                    .text:0000000000001A2D                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001A32                 lea     rdx, [rbp+r15+0]
                    .text:0000000000001A37                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001A3C                 cmp     rbp, rdx
                    .text:0000000000001A3F                 mov     rax, r8
                    .text:0000000000001A42                 jnb     short loc_1A8A
                    .text:0000000000001A44                 test    r8, r8
                    .text:0000000000001A47                 jnz     short loc_1A69
                    .text:0000000000001A49                 jmp     short loc_1A8A
                    .text:0000000000001A49 ; ---------------------------------------------------------------------------
                    .text:0000000000001A4B                 align 10h
                    .text:0000000000001A50
                    .text:0000000000001A50 loc_1A50:                               ; CODE XREF: timsort_constprop_0+776↓j
                    .text:0000000000001A50                 sub     rdx, 1
                    .text:0000000000001A54                 mov     ecx, [rbx+rdx*4]
                    .text:0000000000001A57                 mov     [rbx+r12*4], ecx
                    .text:0000000000001A5B                 cmp     rbp, rdx
                    .text:0000000000001A5E                 jnb     short loc_1A8A
                    .text:0000000000001A60
                    .text:0000000000001A60 loc_1A60:                               ; CODE XREF: timsort_constprop_0+788↓j
                    .text:0000000000001A60                 test    rax, rax
                    .text:0000000000001A63                 jz      loc_19C0
                    .text:0000000000001A69
                    .text:0000000000001A69 loc_1A69:                               ; CODE XREF: timsort_constprop_0+747↑j
                    .text:0000000000001A69                 mov     edi, [r13+rax*4-4]
                    .text:0000000000001A6E                 sub     r12, 1
                    .text:0000000000001A72                 cmp     [rbx+rdx*4-4], edi
                    .text:0000000000001A76                 jg      short loc_1A50
                    .text:0000000000001A78                 sub     rax, 1
                    .text:0000000000001A7C                 mov     ecx, [r13+rax*4+0]
                    .text:0000000000001A81                 mov     [rbx+r12*4], ecx
                    .text:0000000000001A85                 cmp     rbp, rdx
                    .text:0000000000001A88                 jb      short loc_1A60
                    .text:0000000000001A8A
                    .text:0000000000001A8A loc_1A8A:                               ; CODE XREF: timsort_constprop_0+742↑j
                    .text:0000000000001A8A                                         ; timsort_constprop_0+749↑j ...
                    .text:0000000000001A8A                 test    rax, rax
                    .text:0000000000001A8D                 jz      loc_19C0
                    .text:0000000000001A93                 sub     r12, rax
                    .text:0000000000001A96                 lea     rdx, ds:0[rax*4] ; n
                    .text:0000000000001A9E                 mov     rsi, r13        ; src
                    .text:0000000000001AA1                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001AA6                 lea     rdi, [rbx+r12*4] ; dest
                    .text:0000000000001AAA                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001AAF                 call    _memcpy
                    .text:0000000000001AB4                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001AB9                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001ABE                 jmp     loc_19C0
                    .text:0000000000001AC3 ; ---------------------------------------------------------------------------
                    .text:0000000000001AC3
                    .text:0000000000001AC3 loc_1AC3:                               ; CODE XREF: timsort_constprop_0+669↑j
                    .text:0000000000001AC3                                         ; timsort_constprop_0+674↑j ...
                    .text:0000000000001AC3                 cmp     r15, rdx
                    .text:0000000000001AC6                 jbe     loc_19C0
                    .text:0000000000001ACC                 mov     r11, r15
                    .text:0000000000001ACF                 lea     rsi, [r13+rdx*4+0] ; src
                    .text:0000000000001AD4                 lea     rdi, [rbx+rbp*4] ; dest
                    .text:0000000000001AD8                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001ADD                 sub     r11, rdx
                    .text:0000000000001AE0                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001AE5                 shl     r11, 2
                    .text:0000000000001AE9                 mov     rdx, r11        ; n
                    .text:0000000000001AEC                 call    _memcpy
                    .text:0000000000001AF1                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001AF6                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001AFB                 jmp     loc_19C0
                    .text:0000000000001B00 ; ---------------------------------------------------------------------------
                    .text:0000000000001B00
                    .text:0000000000001B00 loc_1B00:                               ; CODE XREF: timsort_constprop_0+34F↑j
                    .text:0000000000001B00                                         ; timsort_constprop_0+35A↑j ...
                    .text:0000000000001B00                 cmp     r14, rdx
                    .text:0000000000001B03                 jbe     loc_1698
                    .text:0000000000001B09                 lea     rdi, [rbx+r10*4] ; dest
                    .text:0000000000001B0D                 mov     r10, r14
                    .text:0000000000001B10                 lea     rsi, [r13+rdx*4+0] ; src
                    .text:0000000000001B15                 mov     [rsp+878h+var_868], r9
                    .text:0000000000001B1A                 sub     r10, rdx
                    .text:0000000000001B1D                 mov     [rsp+878h+var_870], r8
                    .text:0000000000001B22                 shl     r10, 2
                    .text:0000000000001B26                 mov     rdx, r10        ; n
                    .text:0000000000001B29                 call    _memcpy
                    .text:0000000000001B2E                 mov     r8, [rsp+878h+var_870]
                    .text:0000000000001B33                 mov     r9, [rsp+878h+var_868]
                    .text:0000000000001B38                 jmp     loc_1698
                    .text:0000000000001B3D ; ---------------------------------------------------------------------------
                    .text:0000000000001B3D
                    .text:0000000000001B3D loc_1B3D:                               ; CODE XREF: timsort_constprop_0+417↑j
                    .text:0000000000001B3D                                         ; timsort_constprop_0+422↑j ...
                    .text:0000000000001B3D                 cmp     r14, rdx
                    .text:0000000000001B40                 jbe     loc_15AE
                    .text:0000000000001B46                 sub     r14, rdx
                    .text:0000000000001B49                 lea     rsi, [r13+rdx*4+0] ; src
                    .text:0000000000001B4E                 lea     rdi, [rbx+r8*4] ; dest
                    .text:0000000000001B52                 mov     [rsp+878h+var_868], r11
                    .text:0000000000001B57                 shl     r14, 2
                    .text:0000000000001B5B                 mov     rdx, r14        ; n
                    .text:0000000000001B5E                 call    _memcpy
                    .text:0000000000001B63                 mov     r11, [rsp+878h+var_868]
                    .text:0000000000001B68                 jmp     loc_15AE
                    .text:0000000000001B6D ; ---------------------------------------------------------------------------
                    .text:0000000000001B6D
                    .text:0000000000001B6D loc_1B6D:                               ; CODE XREF: timsort_constprop_0+34↑j
                    .text:0000000000001B6D                 mov     rax, [rsp+878h+var_40]
                    .text:0000000000001B75                 sub     rax, fs:28h
                    .text:0000000000001B7E                 jnz     short loc_1BC2
                    .text:0000000000001B80                 add     rsp, 848h
                    .text:0000000000001B87                 pop     rbx
                    .text:0000000000001B88                 pop     rbp
                    .text:0000000000001B89                 pop     r12
                    .text:0000000000001B8B                 pop     r13
                    .text:0000000000001B8D                 pop     r14
                    .text:0000000000001B8F                 pop     r15
                    .text:0000000000001B91                 retn
                    .text:0000000000001B92 ; ---------------------------------------------------------------------------
                    .text:0000000000001B92
                    .text:0000000000001B92 loc_1B92:                               ; CODE XREF: timsort_constprop_0+4BB↑j
                    .text:0000000000001B92                                         ; timsort_constprop_0+4C6↑j ...
                    .text:0000000000001B92                 cmp     r15, rax
                    .text:0000000000001B95                 jbe     loc_1808
                    .text:0000000000001B9B                 mov     rdx, r15
                    .text:0000000000001B9E                 lea     rdi, [rbx+r12*4] ; dest
                    .text:0000000000001BA2                 lea     rsi, [r13+rax*4+0] ; src
                    .text:0000000000001BA7                 mov     [rsp+878h+var_870], r8
                    .text:0000000000001BAC                 sub     rdx, rax
                    .text:0000000000001BAF                 shl     rdx, 2          ; n
                    .text:0000000000001BB3                 call    _memcpy
                    .text:0000000000001BB8                 mov     r8, [rsp+878h+var_870]
                    .text:0000000000001BBD                 jmp     loc_1808
                    .text:0000000000001BC2 ; ---------------------------------------------------------------------------
                    .text:0000000000001BC2
                    .text:0000000000001BC2 loc_1BC2:                               ; CODE XREF: timsort_constprop_0+6EB↑j
                    .text:0000000000001BC2                                         ; timsort_constprop_0+87E↑j
                    .text:0000000000001BC2                 call    ___stack_chk_fail
                    .text:0000000000001BC2 ; } // starts at 1300
                    .text:0000000000001BC2 timsort_constprop_0 endp
                    .text:0000000000001BC2
                    .text:0000000000001BC2 _text           ends
                    .text:0000000000001BC2
                    LOAD:0000000000001BC7 ; ===========================================================================
                    LOAD:0000000000001BC7
                    LOAD:0000000000001BC7 ; Segment type: Pure code
                    LOAD:0000000000001BC7 ; Segment permissions: Read/Execute
                    LOAD:0000000000001BC7 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001BC7                 assume cs:LOAD
                    LOAD:0000000000001BC7                 ;org 1BC7h
                    LOAD:0000000000001BC7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001BC7                 align 8
                    LOAD:0000000000001BC7 LOAD            ends
                    LOAD:0000000000001BC7
                    .fini:0000000000001BC8 ; ===========================================================================
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8 ; Segment type: Pure code
                    .fini:0000000000001BC8 ; Segment permissions: Read/Execute
                    .fini:0000000000001BC8 _fini           segment dword public 'CODE' use64
                    .fini:0000000000001BC8                 assume cs:_fini
                    .fini:0000000000001BC8                 ;org 1BC8h
                    .fini:0000000000001BC8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8 ; =============== S U B R O U T I N E =======================================
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8                 public _term_proc
                    .fini:0000000000001BC8 _term_proc      proc near
                    .fini:0000000000001BC8                 endbr64                 ; _fini
                    .fini:0000000000001BCC                 sub     rsp, 8
                    .fini:0000000000001BD0                 add     rsp, 8
                    .fini:0000000000001BD4                 retn
                    .fini:0000000000001BD4 _term_proc      endp
                    .fini:0000000000001BD4
                    .fini:0000000000001BD4 _fini           ends
                    .fini:0000000000001BD4
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 unk_2004        db  20h                 ; DATA XREF: main+8↑o
                    .rodata:0000000000002005                 db    0
                    .rodata:0000000000002006 aDS             db '%d%s',0             ; DATA XREF: main+10↑o
                    .rodata:000000000000200B asc_200B        db 0Ah,0                ; DATA XREF: main+D3↑o
                    .rodata:000000000000200B _rodata         ends
                    .rodata:000000000000200B
                    LOAD:000000000000200D ; ===========================================================================
                    LOAD:000000000000200D
                    LOAD:000000000000200D ; Segment type: Pure data
                    LOAD:000000000000200D ; Segment permissions: Read
                    LOAD:000000000000200D LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000200D                 assume cs:LOAD
                    LOAD:000000000000200D                 ;org 200Dh
                    LOAD:000000000000200D                 align 10h
                    LOAD:000000000000200D LOAD            ends
                    LOAD:000000000000200D
                    .eh_frame_hdr:0000000000002010 ; ===========================================================================
                    .eh_frame_hdr:0000000000002010
                    .eh_frame_hdr:0000000000002010 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002010 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002010 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002010                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002010                 ;org 2010h
                    .eh_frame_hdr:0000000000002010 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002011                 db  1Bh
                    .eh_frame_hdr:0000000000002012                 db    3
                    .eh_frame_hdr:0000000000002013                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002014                 db  3Ch ; <
                    .eh_frame_hdr:0000000000002015                 db    0
                    .eh_frame_hdr:0000000000002016                 db    0
                    .eh_frame_hdr:0000000000002017                 db    0
                    .eh_frame_hdr:0000000000002018                 db    6
                    .eh_frame_hdr:0000000000002019                 db    0
                    .eh_frame_hdr:000000000000201A                 db    0
                    .eh_frame_hdr:000000000000201B                 db    0
                    .eh_frame_hdr:000000000000201C                 db  10h
                    .eh_frame_hdr:000000000000201D                 db 0F0h
                    .eh_frame_hdr:000000000000201E                 db 0FFh
                    .eh_frame_hdr:000000000000201F                 db 0FFh
                    .eh_frame_hdr:0000000000002020                 db  70h ; p
                    .eh_frame_hdr:0000000000002021                 db    0
                    .eh_frame_hdr:0000000000002022                 db    0
                    .eh_frame_hdr:0000000000002023                 db    0
                    .eh_frame_hdr:0000000000002024                 db  80h
                    .eh_frame_hdr:0000000000002025                 db 0F0h
                    .eh_frame_hdr:0000000000002026                 db 0FFh
                    .eh_frame_hdr:0000000000002027                 db 0FFh
                    .eh_frame_hdr:0000000000002028                 db  98h
                    .eh_frame_hdr:0000000000002029                 db    0
                    .eh_frame_hdr:000000000000202A                 db    0
                    .eh_frame_hdr:000000000000202B                 db    0
                    .eh_frame_hdr:000000000000202C                 db  90h
                    .eh_frame_hdr:000000000000202D                 db 0F0h
                    .eh_frame_hdr:000000000000202E                 db 0FFh
                    .eh_frame_hdr:000000000000202F                 db 0FFh
                    .eh_frame_hdr:0000000000002030                 db 0B0h
                    .eh_frame_hdr:0000000000002031                 db    0
                    .eh_frame_hdr:0000000000002032                 db    0
                    .eh_frame_hdr:0000000000002033                 db    0
                    .eh_frame_hdr:0000000000002034                 db 0F0h
                    .eh_frame_hdr:0000000000002035                 db 0F0h
                    .eh_frame_hdr:0000000000002036                 db 0FFh
                    .eh_frame_hdr:0000000000002037                 db 0FFh
                    .eh_frame_hdr:0000000000002038                 db  30h ; 0
                    .eh_frame_hdr:0000000000002039                 db    1
                    .eh_frame_hdr:000000000000203A                 db    0
                    .eh_frame_hdr:000000000000203B                 db    0
                    .eh_frame_hdr:000000000000203C                 db    0
                    .eh_frame_hdr:000000000000203D                 db 0F2h
                    .eh_frame_hdr:000000000000203E                 db 0FFh
                    .eh_frame_hdr:000000000000203F                 db 0FFh
                    .eh_frame_hdr:0000000000002040                 db  58h ; X
                    .eh_frame_hdr:0000000000002041                 db    0
                    .eh_frame_hdr:0000000000002042                 db    0
                    .eh_frame_hdr:0000000000002043                 db    0
                    .eh_frame_hdr:0000000000002044                 db 0F0h
                    .eh_frame_hdr:0000000000002045                 db 0F2h
                    .eh_frame_hdr:0000000000002046                 db 0FFh
                    .eh_frame_hdr:0000000000002047                 db 0FFh
                    .eh_frame_hdr:0000000000002048                 db 0C8h
                    .eh_frame_hdr:0000000000002049                 db    0
                    .eh_frame_hdr:000000000000204A                 db    0
                    .eh_frame_hdr:000000000000204B                 db    0
                    .eh_frame_hdr:000000000000204B _eh_frame_hdr   ends
                    .eh_frame_hdr:000000000000204B
                    LOAD:000000000000204C ; ===========================================================================
                    LOAD:000000000000204C
                    LOAD:000000000000204C ; Segment type: Pure data
                    LOAD:000000000000204C ; Segment permissions: Read
                    LOAD:000000000000204C LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000204C                 assume cs:LOAD
                    LOAD:000000000000204C                 ;org 204Ch
                    LOAD:000000000000204C                 align 10h
                    LOAD:000000000000204C LOAD            ends
                    LOAD:000000000000204C
                    .eh_frame:0000000000002050 ; ===========================================================================
                    .eh_frame:0000000000002050
                    .eh_frame:0000000000002050 ; Segment type: Pure data
                    .eh_frame:0000000000002050 ; Segment permissions: Read
                    .eh_frame:0000000000002050 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002050                 assume cs:_eh_frame
                    .eh_frame:0000000000002050                 ;org 2050h
                    .eh_frame:0000000000002050                 db  14h
                    .eh_frame:0000000000002051                 db    0
                    .eh_frame:0000000000002052                 db    0
                    .eh_frame:0000000000002053                 db    0
                    .eh_frame:0000000000002054                 db    0
                    .eh_frame:0000000000002055                 db    0
                    .eh_frame:0000000000002056                 db    0
                    .eh_frame:0000000000002057                 db    0
                    .eh_frame:0000000000002058                 db    1
                    .eh_frame:0000000000002059                 db  7Ah ; z
                    .eh_frame:000000000000205A                 db  52h ; R
                    .eh_frame:000000000000205B                 db    0
                    .eh_frame:000000000000205C                 db    1
                    .eh_frame:000000000000205D                 db  78h ; x
                    .eh_frame:000000000000205E                 db  10h
                    .eh_frame:000000000000205F                 db    1
                    .eh_frame:0000000000002060                 db  1Bh
                    .eh_frame:0000000000002061                 db  0Ch
                    .eh_frame:0000000000002062                 db    7
                    .eh_frame:0000000000002063                 db    8
                    .eh_frame:0000000000002064                 db  90h
                    .eh_frame:0000000000002065                 db    1
                    .eh_frame:0000000000002066                 db    0
                    .eh_frame:0000000000002067                 db    0
                    .eh_frame:0000000000002068                 db  14h
                    .eh_frame:0000000000002069                 db    0
                    .eh_frame:000000000000206A                 db    0
                    .eh_frame:000000000000206B                 db    0
                    .eh_frame:000000000000206C                 db  1Ch
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db 0A0h
                    .eh_frame:0000000000002071                 db 0F1h
                    .eh_frame:0000000000002072                 db 0FFh
                    .eh_frame:0000000000002073                 db 0FFh
                    .eh_frame:0000000000002074                 db  26h ; &
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db    0
                    .eh_frame:0000000000002079                 db  44h ; D
                    .eh_frame:000000000000207A                 db    7
                    .eh_frame:000000000000207B                 db  10h
                    .eh_frame:000000000000207C                 db    0
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db  24h ; $
                    .eh_frame:0000000000002081                 db    0
                    .eh_frame:0000000000002082                 db    0
                    .eh_frame:0000000000002083                 db    0
                    .eh_frame:0000000000002084                 db  34h ; 4
                    .eh_frame:0000000000002085                 db    0
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db  98h
                    .eh_frame:0000000000002089                 db 0EFh
                    .eh_frame:000000000000208A                 db 0FFh
                    .eh_frame:000000000000208B                 db 0FFh
                    .eh_frame:000000000000208C                 db  70h ; p
                    .eh_frame:000000000000208D                 db    0
                    .eh_frame:000000000000208E                 db    0
                    .eh_frame:000000000000208F                 db    0
                    .eh_frame:0000000000002090                 db    0
                    .eh_frame:0000000000002091                 db  0Eh
                    .eh_frame:0000000000002092                 db  10h
                    .eh_frame:0000000000002093                 db  46h ; F
                    .eh_frame:0000000000002094                 db  0Eh
                    .eh_frame:0000000000002095                 db  18h
                    .eh_frame:0000000000002096                 db  4Ah ; J
                    .eh_frame:0000000000002097                 db  0Fh
                    .eh_frame:0000000000002098                 db  0Bh
                    .eh_frame:0000000000002099                 db  77h ; w
                    .eh_frame:000000000000209A                 db    8
                    .eh_frame:000000000000209B                 db  80h
                    .eh_frame:000000000000209C                 db    0
                    .eh_frame:000000000000209D                 db  3Fh ; ?
                    .eh_frame:000000000000209E                 db  1Ah
                    .eh_frame:000000000000209F                 db  3Ah ; :
                    .eh_frame:00000000000020A0                 db  2Ah ; *
                    .eh_frame:00000000000020A1                 db  33h ; 3
                    .eh_frame:00000000000020A2                 db  24h ; $
                    .eh_frame:00000000000020A3                 db  22h ; "
                    .eh_frame:00000000000020A4                 db    0
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db  14h
                    .eh_frame:00000000000020A9                 db    0
                    .eh_frame:00000000000020AA                 db    0
                    .eh_frame:00000000000020AB                 db    0
                    .eh_frame:00000000000020AC                 db  5Ch ; \
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db 0E0h
                    .eh_frame:00000000000020B1                 db 0EFh
                    .eh_frame:00000000000020B2                 db 0FFh
                    .eh_frame:00000000000020B3                 db 0FFh
                    .eh_frame:00000000000020B4                 db  10h
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db    0
                    .eh_frame:00000000000020B9                 db    0
                    .eh_frame:00000000000020BA                 db    0
                    .eh_frame:00000000000020BB                 db    0
                    .eh_frame:00000000000020BC                 db    0
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db  14h
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db  74h ; t
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db 0D8h
                    .eh_frame:00000000000020C9                 db 0EFh
                    .eh_frame:00000000000020CA                 db 0FFh
                    .eh_frame:00000000000020CB                 db 0FFh
                    .eh_frame:00000000000020CC                 db  60h ; `
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db    0
                    .eh_frame:00000000000020D1                 db    0
                    .eh_frame:00000000000020D2                 db    0
                    .eh_frame:00000000000020D3                 db    0
                    .eh_frame:00000000000020D4                 db    0
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db  64h ; d
                    .eh_frame:00000000000020D9                 db    0
                    .eh_frame:00000000000020DA                 db    0
                    .eh_frame:00000000000020DB                 db    0
                    .eh_frame:00000000000020DC                 db  8Ch
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db  20h
                    .eh_frame:00000000000020E1                 db 0F2h
                    .eh_frame:00000000000020E2                 db 0FFh
                    .eh_frame:00000000000020E3                 db 0FFh
                    .eh_frame:00000000000020E4                 db 0C7h
                    .eh_frame:00000000000020E5                 db    8
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db    0
                    .eh_frame:00000000000020E9                 db  42h ; B
                    .eh_frame:00000000000020EA                 db  0Eh
                    .eh_frame:00000000000020EB                 db  10h
                    .eh_frame:00000000000020EC                 db  8Fh
                    .eh_frame:00000000000020ED                 db    2
                    .eh_frame:00000000000020EE                 db  42h ; B
                    .eh_frame:00000000000020EF                 db  0Eh
                    .eh_frame:00000000000020F0                 db  18h
                    .eh_frame:00000000000020F1                 db  8Eh
                    .eh_frame:00000000000020F2                 db    3
                    .eh_frame:00000000000020F3                 db  42h ; B
                    .eh_frame:00000000000020F4                 db  0Eh
                    .eh_frame:00000000000020F5                 db  20h
                    .eh_frame:00000000000020F6                 db  8Dh
                    .eh_frame:00000000000020F7                 db    4
                    .eh_frame:00000000000020F8                 db  42h ; B
                    .eh_frame:00000000000020F9                 db  0Eh
                    .eh_frame:00000000000020FA                 db  28h ; (
                    .eh_frame:00000000000020FB                 db  8Ch
                    .eh_frame:00000000000020FC                 db    5
                    .eh_frame:00000000000020FD                 db  41h ; A
                    .eh_frame:00000000000020FE                 db  0Eh
                    .eh_frame:00000000000020FF                 db  30h ; 0
                    .eh_frame:0000000000002100                 db  86h
                    .eh_frame:0000000000002101                 db    6
                    .eh_frame:0000000000002102                 db  41h ; A
                    .eh_frame:0000000000002103                 db  0Eh
                    .eh_frame:0000000000002104                 db  38h ; 8
                    .eh_frame:0000000000002105                 db  83h
                    .eh_frame:0000000000002106                 db    7
                    .eh_frame:0000000000002107                 db  4Fh ; O
                    .eh_frame:0000000000002108                 db  0Eh
                    .eh_frame:0000000000002109                 db  80h
                    .eh_frame:000000000000210A                 db  11h
                    .eh_frame:000000000000210B                 db    3
                    .eh_frame:000000000000210C                 db 0DFh
                    .eh_frame:000000000000210D                 db    6
                    .eh_frame:000000000000210E                 db  0Ah
                    .eh_frame:000000000000210F                 db  0Eh
                    .eh_frame:0000000000002110                 db  38h ; 8
                    .eh_frame:0000000000002111                 db  44h ; D
                    .eh_frame:0000000000002112                 db  0Eh
                    .eh_frame:0000000000002113                 db  30h ; 0
                    .eh_frame:0000000000002114                 db  41h ; A
                    .eh_frame:0000000000002115                 db  0Eh
                    .eh_frame:0000000000002116                 db  28h ; (
                    .eh_frame:0000000000002117                 db  42h ; B
                    .eh_frame:0000000000002118                 db  0Eh
                    .eh_frame:0000000000002119                 db  20h
                    .eh_frame:000000000000211A                 db  42h ; B
                    .eh_frame:000000000000211B                 db  0Eh
                    .eh_frame:000000000000211C                 db  18h
                    .eh_frame:000000000000211D                 db  42h ; B
                    .eh_frame:000000000000211E                 db  0Eh
                    .eh_frame:000000000000211F                 db  10h
                    .eh_frame:0000000000002120                 db  42h ; B
                    .eh_frame:0000000000002121                 db  0Eh
                    .eh_frame:0000000000002122                 db    8
                    .eh_frame:0000000000002123                 db  45h ; E
                    .eh_frame:0000000000002124                 db  0Bh
                    .eh_frame:0000000000002125                 db    3
                    .eh_frame:0000000000002126                 db  7Dh ; }
                    .eh_frame:0000000000002127                 db    1
                    .eh_frame:0000000000002128                 db  0Ah
                    .eh_frame:0000000000002129                 db  0Eh
                    .eh_frame:000000000000212A                 db  38h ; 8
                    .eh_frame:000000000000212B                 db  41h ; A
                    .eh_frame:000000000000212C                 db  0Eh
                    .eh_frame:000000000000212D                 db  30h ; 0
                    .eh_frame:000000000000212E                 db  41h ; A
                    .eh_frame:000000000000212F                 db  0Eh
                    .eh_frame:0000000000002130                 db  28h ; (
                    .eh_frame:0000000000002131                 db  42h ; B
                    .eh_frame:0000000000002132                 db  0Eh
                    .eh_frame:0000000000002133                 db  20h
                    .eh_frame:0000000000002134                 db  42h ; B
                    .eh_frame:0000000000002135                 db  0Eh
                    .eh_frame:0000000000002136                 db  18h
                    .eh_frame:0000000000002137                 db  42h ; B
                    .eh_frame:0000000000002138                 db  0Eh
                    .eh_frame:0000000000002139                 db  10h
                    .eh_frame:000000000000213A                 db  42h ; B
                    .eh_frame:000000000000213B                 db  0Eh
                    .eh_frame:000000000000213C                 db    8
                    .eh_frame:000000000000213D                 db  41h ; A
                    .eh_frame:000000000000213E                 db  0Bh
                    .eh_frame:000000000000213F                 db    0
                    .eh_frame:0000000000002140                 db  38h ; 8
                    .eh_frame:0000000000002141                 db    0
                    .eh_frame:0000000000002142                 db    0
                    .eh_frame:0000000000002143                 db    0
                    .eh_frame:0000000000002144                 db 0F4h
                    .eh_frame:0000000000002145                 db    0
                    .eh_frame:0000000000002146                 db    0
                    .eh_frame:0000000000002147                 db    0
                    .eh_frame:0000000000002148                 db 0B8h
                    .eh_frame:0000000000002149                 db 0EFh
                    .eh_frame:000000000000214A                 db 0FFh
                    .eh_frame:000000000000214B                 db 0FFh
                    .eh_frame:000000000000214C                 db    9
                    .eh_frame:000000000000214D                 db    1
                    .eh_frame:000000000000214E                 db    0
                    .eh_frame:000000000000214F                 db    0
                    .eh_frame:0000000000002150                 db    0
                    .eh_frame:0000000000002151                 db  46h ; F
                    .eh_frame:0000000000002152                 db  0Eh
                    .eh_frame:0000000000002153                 db  10h
                    .eh_frame:0000000000002154                 db  8Dh
                    .eh_frame:0000000000002155                 db    2
                    .eh_frame:0000000000002156                 db  42h ; B
                    .eh_frame:0000000000002157                 db  0Eh
                    .eh_frame:0000000000002158                 db  18h
                    .eh_frame:0000000000002159                 db  8Ch
                    .eh_frame:000000000000215A                 db    3
                    .eh_frame:000000000000215B                 db  48h ; H
                    .eh_frame:000000000000215C                 db  0Eh
                    .eh_frame:000000000000215D                 db  20h
                    .eh_frame:000000000000215E                 db  86h
                    .eh_frame:000000000000215F                 db    4
                    .eh_frame:0000000000002160                 db  48h ; H
                    .eh_frame:0000000000002161                 db  0Eh
                    .eh_frame:0000000000002162                 db  28h ; (
                    .eh_frame:0000000000002163                 db  83h
                    .eh_frame:0000000000002164                 db    5
                    .eh_frame:0000000000002165                 db  44h ; D
                    .eh_frame:0000000000002166                 db  0Eh
                    .eh_frame:0000000000002167                 db  80h
                    .eh_frame:0000000000002168                 db    1
                    .eh_frame:0000000000002169                 db    2
                    .eh_frame:000000000000216A                 db 0DFh
                    .eh_frame:000000000000216B                 db  0Ah
                    .eh_frame:000000000000216C                 db  0Eh
                    .eh_frame:000000000000216D                 db  28h ; (
                    .eh_frame:000000000000216E                 db  43h ; C
                    .eh_frame:000000000000216F                 db  0Eh
                    .eh_frame:0000000000002170                 db  20h
                    .eh_frame:0000000000002171                 db  41h ; A
                    .eh_frame:0000000000002172                 db  0Eh
                    .eh_frame:0000000000002173                 db  18h
                    .eh_frame:0000000000002174                 db  42h ; B
                    .eh_frame:0000000000002175                 db  0Eh
                    .eh_frame:0000000000002176                 db  10h
                    .eh_frame:0000000000002177                 db  42h ; B
                    .eh_frame:0000000000002178                 db  0Eh
                    .eh_frame:0000000000002179                 db    8
                    .eh_frame:000000000000217A                 db  41h ; A
                    .eh_frame:000000000000217B                 db  0Bh
                    .eh_frame:000000000000217C __FRAME_END__   db    0
                    .eh_frame:000000000000217D                 db    0
                    .eh_frame:000000000000217E                 db    0
                    .eh_frame:000000000000217F                 db    0
                    .eh_frame:000000000000217F _eh_frame       ends
                    .eh_frame:000000000000217F
                    .init_array:0000000000003D90 ; ELF Initialization Function Table
                    .init_array:0000000000003D90 ; ===========================================================================
                    .init_array:0000000000003D90
                    .init_array:0000000000003D90 ; Segment type: Pure data
                    .init_array:0000000000003D90 ; Segment permissions: Read/Write
                    .init_array:0000000000003D90 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003D90                 assume cs:_init_array
                    .init_array:0000000000003D90                 ;org 3D90h
                    .init_array:0000000000003D90 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003D90                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003D90                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003D90 _init_array     ends
                    .init_array:0000000000003D90
                    .fini_array:0000000000003D98 ; ELF Termination Function Table
                    .fini_array:0000000000003D98 ; ===========================================================================
                    .fini_array:0000000000003D98
                    .fini_array:0000000000003D98 ; Segment type: Pure data
                    .fini_array:0000000000003D98 ; Segment permissions: Read/Write
                    .fini_array:0000000000003D98 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003D98                 assume cs:_fini_array
                    .fini_array:0000000000003D98                 ;org 3D98h
                    .fini_array:0000000000003D98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003D98 _fini_array     ends
                    .fini_array:0000000000003D98
                    LOAD:0000000000003DA0 ; ELF Dynamic Information
                    LOAD:0000000000003DA0 ; ===========================================================================
                    LOAD:0000000000003DA0
                    LOAD:0000000000003DA0 ; Segment type: Pure data
                    LOAD:0000000000003DA0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DA0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DA0                 assume cs:LOAD
                    LOAD:0000000000003DA0                 ;org 3DA0h
                    LOAD:0000000000003DA0 _DYNAMIC        Elf64_Dyn <1, 60h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DA0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DA0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DB0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DC0                 Elf64_Dyn <0Dh, 1BC8h>  ; DT_FINI
                    LOAD:0000000000003DD0                 Elf64_Dyn <19h, 3D90h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003DE0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003DF0                 Elf64_Dyn <1Ah, 3D98h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E20                 Elf64_Dyn <5, 4F8h>     ; DT_STRTAB
                    LOAD:0000000000003E30                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E40                 Elf64_Dyn <0Ah, 0E7h>   ; DT_STRSZ
                    LOAD:0000000000003E50                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E60                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E70                 Elf64_Dyn <3, 3F90h>    ; DT_PLTGOT
                    LOAD:0000000000003E80                 Elf64_Dyn <2, 90h>      ; DT_PLTRELSZ
                    LOAD:0000000000003E90                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EA0                 Elf64_Dyn <17h, 718h>   ; DT_JMPREL
                    LOAD:0000000000003EB0                 Elf64_Dyn <7, 658h>     ; DT_RELA
                    LOAD:0000000000003EC0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003ED0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003EE0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003EF0                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F00                 Elf64_Dyn <6FFFFFFEh, 5F8h> ; DT_VERNEED
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFF0h, 5E0h> ; DT_VERSYM
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F40                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F50                 db    0
                    LOAD:0000000000003F51                 db    0
                    LOAD:0000000000003F52                 db    0
                    LOAD:0000000000003F53                 db    0
                    LOAD:0000000000003F54                 db    0
                    LOAD:0000000000003F55                 db    0
                    LOAD:0000000000003F56                 db    0
                    LOAD:0000000000003F57                 db    0
                    LOAD:0000000000003F58                 db    0
                    LOAD:0000000000003F59                 db    0
                    LOAD:0000000000003F5A                 db    0
                    LOAD:0000000000003F5B                 db    0
                    LOAD:0000000000003F5C                 db    0
                    LOAD:0000000000003F5D                 db    0
                    LOAD:0000000000003F5E                 db    0
                    LOAD:0000000000003F5F                 db    0
                    LOAD:0000000000003F60                 db    0
                    LOAD:0000000000003F61                 db    0
                    LOAD:0000000000003F62                 db    0
                    LOAD:0000000000003F63                 db    0
                    LOAD:0000000000003F64                 db    0
                    LOAD:0000000000003F65                 db    0
                    LOAD:0000000000003F66                 db    0
                    LOAD:0000000000003F67                 db    0
                    LOAD:0000000000003F68                 db    0
                    LOAD:0000000000003F69                 db    0
                    LOAD:0000000000003F6A                 db    0
                    LOAD:0000000000003F6B                 db    0
                    LOAD:0000000000003F6C                 db    0
                    LOAD:0000000000003F6D                 db    0
                    LOAD:0000000000003F6E                 db    0
                    LOAD:0000000000003F6F                 db    0
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F8F LOAD            ends
                    LOAD:0000000000003F8F
                    .got:0000000000003F90 ; ===========================================================================
                    .got:0000000000003F90
                    .got:0000000000003F90 ; Segment type: Pure data
                    .got:0000000000003F90 ; Segment permissions: Read/Write
                    .got:0000000000003F90 _got            segment qword public 'DATA' use64
                    .got:0000000000003F90                 assume cs:_got
                    .got:0000000000003F90                 ;org 3F90h
                    .got:0000000000003F90 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003F98 qword_3F98      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FA0 qword_3FA0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FA8 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
                    .got:0000000000003FB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FB0                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FB8 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk+4↑r
                    .got:0000000000003FC0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy+4↑r
                    .got:0000000000003FC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; void free(void *ptr)
                    extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
                    extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
                    extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004028                 extrn __libc_start_main:near
                    extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004030                 extrn __stack_chk_fail:near
                    extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004038                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
                    extern:0000000000004040 ; void *memcpy(void *dest, const void *src, size_t n)
                    extern:0000000000004040                 extrn memcpy:near       ; CODE XREF: _memcpy+4↑j
                    extern:0000000000004040                                         ; DATA XREF: .got:memcpy_ptr↑o
                    extern:0000000000004048 ; void *malloc(size_t size)
                    extern:0000000000004048                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
                    extern:0000000000004048                                         ; DATA XREF: .got:malloc_ptr↑o
                    extern:0000000000004050                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004050                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004058 ; int __cxa_finalize(void *)
                    extern:0000000000004058                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004058                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004058                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004060                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004060                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004068                 extrn __gmon_start__:near ; weak
                    extern:0000000000004068                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004068                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004070                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004070                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004070
                    extern:0000000000004070
                    extern:0000000000004070                 end _start
                    ```
                    
                - main
                    
                    ```notion
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : 7A0DE3A6B2EFC7FEBEB89E67417DE0EC9AED45900400516F42B30356F9532DCF
                    LOAD:0000000000000000 ; Input MD5    : 60C430B9A63E00DE7F0BC657F795A9EE
                    LOAD:0000000000000000 ; Input CRC32  : E84B4E78
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\timsort
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'timsort.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 37B0h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 7A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 7A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 0BD5h                ; Size in file image
                    LOAD:0000000000000110                 dq 0BD5h                ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 180h                 ; Size in file image
                    LOAD:0000000000000148                 dq 180h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2D90h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3D90h                ; Physical address
                    LOAD:0000000000000178                 dq 280h                 ; Size in file image
                    LOAD:0000000000000180                 dq 288h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DA0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DA0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2010h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2010h                ; Physical address
                    LOAD:0000000000000290                 dq 3Ch                  ; Size in file image
                    LOAD:0000000000000298                 dq 3Ch                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2D90h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3D90h                ; Physical address
                    LOAD:0000000000000300                 dq 270h                 ; Size in file image
                    LOAD:0000000000000308                 dq 270h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 83h, 3Fh, 34h, 2Eh, 0DCh, 60h, 80h, 7Ah, 4Bh, 35h, 18h ; Desc
                    LOAD:0000000000000383                 db 0D2h, 7Fh, 60h, 0C7h, 86h, 3Dh, 0FCh, 2Ah, 0FAh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 0Bh
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 0Bh, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4F8, 12h, 0, 0, offset dword_0, \ ; "free"
                    LOAD:00000000000003F0                            0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4F8, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4F8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4F8, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aMemcpyChk - offset unk_4F8, 12h, 0, 0, \ ; "__memcpy_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aGmonStart - offset unk_4F8, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aMemcpy - offset unk_4F8, 12h, 0, 0, offset dword_0,\ ; "memcpy"
                    LOAD:0000000000000480                            0>
                    LOAD:0000000000000498                 Elf64_Sym <offset aMalloc - offset unk_4F8, 12h, 0, 0, offset dword_0,\ ; "malloc"
                    LOAD:0000000000000498                            0>
                    LOAD:00000000000004B0                 Elf64_Sym <offset aPrintfChk - offset unk_4F8, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:00000000000004B0                            offset dword_0, 0>
                    LOAD:00000000000004C8                 Elf64_Sym <offset aItmRegistertmc - offset unk_4F8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:00000000000004C8                            offset dword_0, 0>
                    LOAD:00000000000004E0                 Elf64_Sym <offset aCxaFinalize - offset unk_4F8, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:00000000000004E0                            offset dword_0, 0>
                    LOAD:00000000000004F8 ; ELF String Table
                    LOAD:00000000000004F8 unk_4F8         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004F8                                         ; LOAD:0000000000000408↑o ...
                    LOAD:00000000000004F9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004E0↑o
                    LOAD:0000000000000508 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000004B0↑o
                    LOAD:0000000000000515 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000498↑o
                    LOAD:000000000000051C aLibcStartMain  db '__libc_start_main',0
                    LOAD:000000000000051C                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052E aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000533 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:0000000000000540 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:0000000000000547 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:0000000000000558 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005F8↓o
                    LOAD:0000000000000562 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000608↓o
                    LOAD:000000000000056D aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000618↓o
                    LOAD:0000000000000579 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000628↓o
                    LOAD:0000000000000583 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:0000000000000638↓o
                    LOAD:000000000000058E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000648↓o
                    LOAD:000000000000059A aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000059A                                         ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000005B6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:00000000000005C5 aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:00000000000005C5                                         ; DATA XREF: LOAD:00000000000004C8↑o
                    LOAD:00000000000005DF                 align 20h
                    LOAD:00000000000005E0 ; ELF GNU Symbol Version Table
                    LOAD:00000000000005E0                 dw 0
                    LOAD:00000000000005E2                 dw 2                    ; free@@GLIBC_2.2.5
                    LOAD:00000000000005E4                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:00000000000005E6                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:00000000000005E8                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:00000000000005EA                 dw 5                    ; __memcpy_chk@@GLIBC_2.3.4
                    LOAD:00000000000005EC                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:00000000000005EE                 dw 6                    ; memcpy@@GLIBC_2.14
                    LOAD:00000000000005F0                 dw 2                    ; malloc@@GLIBC_2.2.5
                    LOAD:00000000000005F2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:00000000000005F4                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:00000000000005F6                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:00000000000005F8 ; ELF GNU Symbol Version Requirements
                    LOAD:00000000000005F8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset unk_4F8, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000608                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset unk_4F8, 10h> ; "GLIBC_2.14"
                    LOAD:0000000000000618                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4F8, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000628                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4F8, 10h> ; "GLIBC_2.4"
                    LOAD:0000000000000638                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4F8, \ ; "GLIBC_2.34"
                    LOAD:0000000000000638                                10h>
                    LOAD:0000000000000648                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4F8, 0> ; "GLIBC_2.2.5"
                    LOAD:0000000000000658 ; ELF RELA Relocation Table
                    LOAD:0000000000000658                 Elf64_Rela <3D90h, 8, 12F0h> ; R_X86_64_RELATIVE +12F0h
                    LOAD:0000000000000670                 Elf64_Rela <3D98h, 8, 12B0h> ; R_X86_64_RELATIVE +12B0h
                    LOAD:0000000000000688                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:00000000000006A0                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:00000000000006B8                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:00000000000006D0                 Elf64_Rela <3FE8h, 600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:00000000000006E8                 Elf64_Rela <3FF0h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000700                 Elf64_Rela <3FF8h, 0B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000718 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000718                 Elf64_Rela <3FA8h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                    LOAD:0000000000000730                 Elf64_Rela <3FB0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000748                 Elf64_Rela <3FB8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
                    LOAD:0000000000000760                 Elf64_Rela <3FC0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
                    LOAD:0000000000000778                 Elf64_Rela <3FC8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
                    LOAD:0000000000000790                 Elf64_Rela <3FD0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000790 LOAD            ends
                    LOAD:0000000000000790
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j ...
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3F98
                    .plt:0000000000001026                 bnd jmp cs:qword_3FA0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
                    .plt:000000000000105F                 align 20h
                    .plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
                    .plt:000000000000106F                 align 10h
                    .plt:0000000000001070 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1070]
                    .plt:000000000000107F                 align 20h
                    .plt:0000000000001080 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1080]
                    .plt:000000000000108F                 align 10h
                    .plt:000000000000108F ; } // starts at 1020
                    .plt:000000000000108F _plt            ends
                    .plt:000000000000108F
                    .plt.got:0000000000001090 ; ===========================================================================
                    .plt.got:0000000000001090
                    .plt.got:0000000000001090 ; Segment type: Pure code
                    .plt.got:0000000000001090 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001090 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001090                 assume cs:_plt_got
                    .plt.got:0000000000001090                 ;org 1090h
                    .plt.got:0000000000001090                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000109B                 align 20h
                    .plt.got:000000000000109B ; } // starts at 1090
                    .plt.got:000000000000109B _plt_got        ends
                    .plt.got:000000000000109B
                    .plt.sec:00000000000010A0 ; ===========================================================================
                    .plt.sec:00000000000010A0
                    .plt.sec:00000000000010A0 ; Segment type: Pure code
                    .plt.sec:00000000000010A0 ; Segment permissions: Read/Execute
                    .plt.sec:00000000000010A0 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:00000000000010A0                 assume cs:_plt_sec
                    .plt.sec:00000000000010A0                 ;org 10A0h
                    .plt.sec:00000000000010A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
                    .plt.sec:00000000000010AB                 align 10h
                    .plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:00000000000010BB                 align 20h
                    .plt.sec:00000000000010C0 ; [0000000B BYTES: COLLAPSED FUNCTION ___memcpy_chk]
                    .plt.sec:00000000000010CB                 align 10h
                    .plt.sec:00000000000010D0 ; [0000000B BYTES: COLLAPSED FUNCTION _memcpy]
                    .plt.sec:00000000000010DB                 align 20h
                    .plt.sec:00000000000010E0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
                    .plt.sec:00000000000010EB                 align 10h
                    .plt.sec:00000000000010F0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:00000000000010FB                 align 20h
                    .plt.sec:00000000000010FB ; } // starts at 10A0
                    .plt.sec:00000000000010FB _plt_sec        ends
                    .plt.sec:00000000000010FB
                    .text:0000000000001100 ; ===========================================================================
                    .text:0000000000001100
                    .text:0000000000001100 ; Segment type: Pure code
                    .text:0000000000001100 ; Segment permissions: Read/Execute
                    .text:0000000000001100 _text           segment para public 'CODE' use64
                    .text:0000000000001100                 assume cs:_text
                    .text:0000000000001100                 ;org 1100h
                    .text:0000000000001100                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001100
                    .text:0000000000001100 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001100
                    .text:0000000000001100
                    .text:0000000000001100 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001100                 public main
                    .text:0000000000001100 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001100
                    .text:0000000000001100 var_78          = qword ptr -78h
                    .text:0000000000001100 var_70          = qword ptr -70h
                    .text:0000000000001100 var_68          = qword ptr -68h
                    .text:0000000000001100 var_60          = qword ptr -60h
                    .text:0000000000001100 var_58          = qword ptr -58h
                    .text:0000000000001100 var_50          = qword ptr -50h
                    .text:0000000000001100 var_48          = qword ptr -48h
                    .text:0000000000001100 var_40          = dword ptr -40h
                    .text:0000000000001100 var_30          = qword ptr -30h
                    .text:0000000000001100
                    .text:0000000000001100 ; __unwind {
                    .text:0000000000001100                 endbr64
                    .text:0000000000001104                 push    r13
                    .text:0000000000001106                 push    r12
                    .text:0000000000001108                 lea     r12, unk_2004
                    .text:000000000000110F                 push    rbp
                    .text:0000000000001110                 lea     rbp, aDS        ; "%d%s"
                    .text:0000000000001117                 push    rbx
                    .text:0000000000001118                 sub     rsp, 58h
                    .text:000000000000111C                 mov     rax, fs:28h
                    .text:0000000000001125                 mov     [rsp+78h+var_30], rax
                    .text:000000000000112A                 mov     rax, 300000005h
                    .text:0000000000001134                 mov     rbx, rsp
                    .text:0000000000001137                 lea     r13, [rsp+78h+var_40]
                    .text:000000000000113C                 mov     [rsp+78h+var_40], 0FFFFFFFFh
                    .text:0000000000001144                 mov     rdi, rbx
                    .text:0000000000001147                 mov     [rsp+78h+var_78], rax
                    .text:000000000000114B                 mov     rax, 200000001h
                    .text:0000000000001155                 mov     [rsp+78h+var_70], rax
                    .text:000000000000115A                 mov     rax, 500000009h
                    .text:0000000000001164                 mov     [rsp+78h+var_68], rax
                    .text:0000000000001169                 mov     rax, 600000005h
                    .text:0000000000001173                 mov     [rsp+78h+var_60], rax
                    .text:0000000000001178                 mov     rax, 800000007h
                    .text:0000000000001182                 mov     [rsp+78h+var_58], rax
                    .text:0000000000001187                 mov     rax, 400000000h
                    .text:0000000000001191                 mov     [rsp+78h+var_50], rax
                    .text:0000000000001196                 mov     rax, 0A00000004h
                    .text:00000000000011A0                 mov     [rsp+78h+var_48], rax
                    .text:00000000000011A5                 call    timsort_constprop_0
                    .text:00000000000011AA                 nop     word ptr [rax+rax+00h]
                    .text:00000000000011B0
                    .text:00000000000011B0 loc_11B0:                               ; CODE XREF: main+CB↓j
                    .text:00000000000011B0                 mov     edx, [rbx]
                    .text:00000000000011B2                 mov     rcx, r12
                    .text:00000000000011B5                 mov     rsi, rbp
                    .text:00000000000011B8                 mov     edi, 1
                    .text:00000000000011BD                 xor     eax, eax
                    .text:00000000000011BF                 add     rbx, 4
                    .text:00000000000011C3                 call    ___printf_chk
                    .text:00000000000011C8                 cmp     r13, rbx
                    .text:00000000000011CB                 jnz     short loc_11B0
                    .text:00000000000011CD                 mov     edx, [rsp+78h+var_40]
                    .text:00000000000011D1                 xor     eax, eax
                    .text:00000000000011D3                 lea     rcx, asc_200B   ; "\n"
                    .text:00000000000011DA                 mov     rsi, rbp
                    .text:00000000000011DD                 mov     edi, 1
                    .text:00000000000011E2                 call    ___printf_chk
                    .text:00000000000011E7                 mov     rax, [rsp+78h+var_30]
                    .text:00000000000011EC                 sub     rax, fs:28h
                    .text:00000000000011F5                 jnz     short loc_1204
                    .text:00000000000011F7                 add     rsp, 58h
                    .text:00000000000011FB                 xor     eax, eax
                    .text:00000000000011FD                 pop     rbx
                    .text:00000000000011FE                 pop     rbp
                    .text:00000000000011FF                 pop     r12
                    .text:0000000000001201                 pop     r13
                    .text:0000000000001203                 retn
                    .text:0000000000001204 ; ---------------------------------------------------------------------------
                    .text:0000000000001204
                    .text:0000000000001204 loc_1204:                               ; CODE XREF: main+F5↑j
                    .text:0000000000001204                 call    ___stack_chk_fail
                    .text:0000000000001204 ; } // starts at 1100
                    .text:0000000000001204 main            endp
                    .text:0000000000001204
                    .text:0000000000001204 ; ---------------------------------------------------------------------------
                    .text:0000000000001209                 align 10h
                    .text:0000000000001210
                    .text:0000000000001210 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001210
                    .text:0000000000001210 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001210
                    .text:0000000000001210                 public _start
                    .text:0000000000001210 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001210 ; __unwind {
                    .text:0000000000001210                 endbr64
                    .text:0000000000001214                 xor     ebp, ebp
                    .text:0000000000001216                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001219                 pop     rsi             ; argc
                    .text:000000000000121A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000121D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001221                 push    rax
                    .text:0000000000001222                 push    rsp             ; stack_end
                    .text:0000000000001223                 xor     r8d, r8d        ; fini
                    .text:0000000000001226                 xor     ecx, ecx        ; init
                    .text:0000000000001228                 lea     rdi, main       ; main
                    .text:000000000000122F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001235                 hlt
                    .text:0000000000001235 ; } // starts at 1210
                    .text:0000000000001235 _start          endp
                    .text:0000000000001235
                    .text:0000000000001235 ; ---------------------------------------------------------------------------
                    .text:0000000000001236                 align 20h
                    .text:0000000000001240
                    .text:0000000000001240 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001240
                    .text:0000000000001240
                    .text:0000000000001240 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_12D7↓p
                    .text:0000000000001240                 lea     rdi, __bss_start
                    .text:0000000000001247                 lea     rax, __bss_start
                    .text:000000000000124E                 cmp     rax, rdi
                    .text:0000000000001251                 jz      short locret_1268
                    .text:0000000000001253                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:000000000000125A                 test    rax, rax
                    .text:000000000000125D                 jz      short locret_1268
                    .text:000000000000125F                 jmp     rax
                    .text:000000000000125F ; ---------------------------------------------------------------------------
                    .text:0000000000001261                 align 8
                    .text:0000000000001268
                    .text:0000000000001268 locret_1268:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:0000000000001268                                         ; deregister_tm_clones+1D↑j
                    .text:0000000000001268                 retn
                    .text:0000000000001268 deregister_tm_clones endp
                    .text:0000000000001268
                    .text:0000000000001268 ; ---------------------------------------------------------------------------
                    .text:0000000000001269                 align 10h
                    .text:0000000000001270
                    .text:0000000000001270 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001270
                    .text:0000000000001270
                    .text:0000000000001270 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:0000000000001270                 lea     rdi, __bss_start
                    .text:0000000000001277                 lea     rsi, __bss_start
                    .text:000000000000127E                 sub     rsi, rdi
                    .text:0000000000001281                 mov     rax, rsi
                    .text:0000000000001284                 shr     rsi, 3Fh
                    .text:0000000000001288                 sar     rax, 3
                    .text:000000000000128C                 add     rsi, rax
                    .text:000000000000128F                 sar     rsi, 1
                    .text:0000000000001292                 jz      short locret_12A8
                    .text:0000000000001294                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:000000000000129B                 test    rax, rax
                    .text:000000000000129E                 jz      short locret_12A8
                    .text:00000000000012A0                 jmp     rax
                    .text:00000000000012A0 ; ---------------------------------------------------------------------------
                    .text:00000000000012A2                 align 8
                    .text:00000000000012A8
                    .text:00000000000012A8 locret_12A8:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:00000000000012A8                                         ; register_tm_clones+2E↑j
                    .text:00000000000012A8                 retn
                    .text:00000000000012A8 register_tm_clones endp
                    .text:00000000000012A8
                    .text:00000000000012A8 ; ---------------------------------------------------------------------------
                    .text:00000000000012A9                 align 10h
                    .text:00000000000012B0
                    .text:00000000000012B0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000012B0
                    .text:00000000000012B0
                    .text:00000000000012B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:00000000000012B0                 endbr64
                    .text:00000000000012B4                 cmp     cs:__bss_start, 0
                    .text:00000000000012BB                 jnz     short locret_12E8
                    .text:00000000000012BD                 push    rbp
                    .text:00000000000012BE                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:00000000000012C6                 mov     rbp, rsp
                    .text:00000000000012C9                 jz      short loc_12D7
                    .text:00000000000012CB                 mov     rdi, cs:__dso_handle ; void *
                    .text:00000000000012D2                 call    __cxa_finalize
                    .text:00000000000012D7
                    .text:00000000000012D7 loc_12D7:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:00000000000012D7                 call    deregister_tm_clones
                    .text:00000000000012DC                 mov     cs:__bss_start, 1
                    .text:00000000000012E3                 pop     rbp
                    .text:00000000000012E4                 retn
                    .text:00000000000012E4 ; ---------------------------------------------------------------------------
                    .text:00000000000012E5                 align 8
                    .text:00000000000012E8
                    .text:00000000000012E8 locret_12E8:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:00000000000012E8                 retn
                    .text:00000000000012E8 __do_global_dtors_aux endp
                    .text:00000000000012E8
                    .text:00000000000012E8 ; ---------------------------------------------------------------------------
                    .text:00000000000012E9                 align 10h
                    .text:00000000000012F0
                    .text:00000000000012F0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000012F0
                    .text:00000000000012F0
                    .text:00000000000012F0 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:00000000000012F0                 endbr64
                    .text:00000000000012F4                 jmp     register_tm_clones
                    .text:00000000000012F4 frame_dummy     endp
                    .text:00000000000012F4
                    .text:00000000000012F4 ; ---------------------------------------------------------------------------
                    .text:00000000000012F9                 align 20h
                    .text:0000000000001300
                    .text:0000000000001300 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001300
                    .text:0000000000001300
                    .text:0000000000001300 timsort_constprop_0 proc near           ; CODE XREF: main+A5↑p
                    .text:0000000000001300
                    .text:0000000000001300 var_870         = qword ptr -870h
                    .text:0000000000001300 var_868         = qword ptr -868h
                    .text:0000000000001300 var_860         = qword ptr -860h
                    .text:0000000000001300 var_858         = qword ptr -858h
                    .text:0000000000001300 var_850         = qword ptr -850h
                    .text:0000000000001300 var_848         = qword ptr -848h
                    .text:0000000000001300 var_840         = qword ptr -840h
                    .text:0000000000001300 var_450         = qword ptr -450h
                    .text:0000000000001300 var_448         = qword ptr -448h
                    .text:0000000000001300 var_440         = qword ptr -440h
                    .text:0000000000001300 var_40          = qword ptr -40h
                    .text:0000000000001300
                    .text:0000000000001300 ; __unwind {
                    .text:0000000000001300                 push    r15
                    .text:0000000000001302                 push    r14
                    .text:0000000000001304                 push    r13
                    .text:0000000000001306                 push    r12
                    .text:0000000000001308                 push    rbp
                    .text:0000000000001309                 push    rbx
                    .text:000000000000130A                 mov     rbx, rdi
                    .text:000000000000130D                 mov     edi, 3Ch ; '<'  ; size
                    .text:0000000000001312                 sub     rsp, 848h
                    .text:0000000000001319                 mov     rax, fs:28h
                    .text:0000000000001322                 mov     [rsp+878h+var_40], rax
                    .text:000000000000132A                 xor     eax, eax
                    .text:000000000000132C                 call    _malloc
                    .text:0000000000001331                 test    rax, rax
                    .text:0000000000001334                 jz      loc_1B6D
                    .text:000000000000133A                 mov     r13, rax
                    .text:000000000000133D                 xor     r9d, r9d
                    .text:0000000000001340                 xor     r8d, r8d
                    .text:0000000000001343                 nop     dword ptr [rax+rax+00h]
                    .text:0000000000001348
                    .text:0000000000001348 loc_1348:                               ; CODE XREF: timsort_constprop_0+1B4↓j
                    .text:0000000000001348                 lea     rbp, [r8+1]
                    .text:000000000000134C                 mov     r12d, 0Fh
                    .text:0000000000001352                 cmp     r8, 0Eh
                    .text:0000000000001356                 jz      loc_1450
                    .text:000000000000135C                 mov     eax, [rbx+rbp*4-4]
                    .text:0000000000001360                 cmp     [rbx+rbp*4], eax
                    .text:0000000000001363                 jge     loc_143D
                    .text:0000000000001369                 jmp     short loc_137D
                    .text:0000000000001369 ; ---------------------------------------------------------------------------
                    .text:000000000000136B                 align 10h
                    .text:0000000000001370
                    .text:0000000000001370 loc_1370:                               ; CODE XREF: timsort_constprop_0+88↓j
                    .text:0000000000001370                 mov     edi, [rbx+rbp*4-4]
                    .text:0000000000001374                 cmp     [rbx+rbp*4], edi
                    .text:0000000000001377                 jge     loc_18DB
                    .text:000000000000137D
                    .text:000000000000137D loc_137D:                               ; CODE XREF: timsort_constprop_0+69↑j
                    .text:000000000000137D                 mov     rax, rbp
                    .text:0000000000001380                 add     rbp, 1
                    .text:0000000000001384                 cmp     rbp, 0Fh
                    .text:0000000000001388                 jnz     short loc_1370
                    .text:000000000000138A                 mov     eax, 0Eh
                    .text:000000000000138F
                    .text:000000000000138F loc_138F:                               ; CODE XREF: timsort_constprop_0+5DE↓j
                    .text:000000000000138F                 mov     rdx, r8
                    .text:0000000000001392                 nop     word ptr [rax+rax+00h]
                    .text:0000000000001398
                    .text:0000000000001398 loc_1398:                               ; CODE XREF: timsort_constprop_0+AF↓j
                    .text:0000000000001398                 mov     ecx, [rbx+rdx*4]
                    .text:000000000000139B                 mov     esi, [rbx+rax*4]
                    .text:000000000000139E                 mov     [rbx+rdx*4], esi
                    .text:00000000000013A1                 add     rdx, 1
                    .text:00000000000013A5                 mov     [rbx+rax*4], ecx
                    .text:00000000000013A8                 sub     rax, 1
                    .text:00000000000013AC                 cmp     rdx, rax
                    .text:00000000000013AF                 jb      short loc_1398
                    .text:00000000000013B1
                    .text:00000000000013B1 loc_13B1:                               ; CODE XREF: timsort_constprop_0+137↓j
                    .text:00000000000013B1                                         ; timsort_constprop_0+5E4↓j
                    .text:00000000000013B1                 mov     r12, rbp
                    .text:00000000000013B4                 mov     eax, 20h ; ' '
                    .text:00000000000013B9                 sub     r12, r8
                    .text:00000000000013BC                 cmp     r12, rax
                    .text:00000000000013BF                 cmovb   r12, rax
                    .text:00000000000013C3                 mov     eax, 0Fh
                    .text:00000000000013C8                 add     r12, r8
                    .text:00000000000013CB                 cmp     r12, rax
                    .text:00000000000013CE                 cmova   r12, rax
                    .text:00000000000013D2                 cmp     rbp, r12
                    .text:00000000000013D5                 jnb     short loc_1450
                    .text:00000000000013D7                 lea     r11, [rbx+rbp*4]
                    .text:00000000000013DB                 mov     r10, rbp
                    .text:00000000000013DE                 lea     r14, [rbx+r8*4]
                    .text:00000000000013E2                 nop     word ptr [rax+rax+00h]
                    .text:00000000000013E8
                    .text:00000000000013E8 loc_13E8:                               ; CODE XREF: timsort_constprop_0+12A↓j
                    .text:00000000000013E8                                         ; timsort_constprop_0+1D0↓j
                    .text:00000000000013E8                 mov     edi, [r11]
                    .text:00000000000013EB                 mov     rsi, r11
                    .text:00000000000013EE                 mov     rax, r11
                    .text:00000000000013F1                 mov     rdx, r10
                    .text:00000000000013F4                 cmp     r10, r8
                    .text:00000000000013F7                 ja      short loc_1413
                    .text:00000000000013F9                 jmp     short loc_141D
                    .text:00000000000013F9 ; ---------------------------------------------------------------------------
                    .text:00000000000013FB                 align 20h
                    .text:0000000000001400
                    .text:0000000000001400 loc_1400:                               ; CODE XREF: timsort_constprop_0+11B↓j
                    .text:0000000000001400                 sub     rdx, 1
                    .text:0000000000001404                 mov     [rax], ecx
                    .text:0000000000001406                 lea     rax, [rsi-4]
                    .text:000000000000140A                 cmp     rdx, r8
                    .text:000000000000140D                 jz      loc_14C0
                    .text:0000000000001413
                    .text:0000000000001413 loc_1413:                               ; CODE XREF: timsort_constprop_0+F7↑j
                    .text:0000000000001413                 mov     ecx, [rax-4]
                    .text:0000000000001416                 mov     rsi, rax
                    .text:0000000000001419                 cmp     edi, ecx
                    .text:000000000000141B                 jl      short loc_1400
                    .text:000000000000141D
                    .text:000000000000141D loc_141D:                               ; CODE XREF: timsort_constprop_0+F9↑j
                    .text:000000000000141D                 add     r10, 1
                    .text:0000000000001421                 mov     [rsi], edi
                    .text:0000000000001423                 add     r11, 4
                    .text:0000000000001427                 cmp     r12, r10
                    .text:000000000000142A                 jnz     short loc_13E8
                    .text:000000000000142C                 jmp     short loc_1450
                    .text:000000000000142C ; ---------------------------------------------------------------------------
                    .text:000000000000142E                 align 10h
                    .text:0000000000001430
                    .text:0000000000001430 loc_1430:                               ; CODE XREF: timsort_constprop_0+145↓j
                    .text:0000000000001430                 mov     eax, [rbx+rbp*4-4]
                    .text:0000000000001434                 cmp     [rbx+rbp*4], eax
                    .text:0000000000001437                 jl      loc_13B1
                    .text:000000000000143D
                    .text:000000000000143D loc_143D:                               ; CODE XREF: timsort_constprop_0+63↑j
                    .text:000000000000143D                 add     rbp, 1
                    .text:0000000000001441                 cmp     rbp, 0Fh
                    .text:0000000000001445                 jnz     short loc_1430
                    .text:0000000000001447                 mov     r12d, 0Fh
                    .text:000000000000144D                 nop     dword ptr [rax]
                    .text:0000000000001450
                    .text:0000000000001450 loc_1450:                               ; CODE XREF: timsort_constprop_0+56↑j
                    .text:0000000000001450                                         ; timsort_constprop_0+D5↑j ...
                    .text:0000000000001450                 sub     r12, r8
                    .text:0000000000001453                 mov     [rsp+r9*8+878h+var_848], r8
                    .text:0000000000001458                 mov     [rsp+r9*8+878h+var_448], r12
                    .text:0000000000001460                 add     r9, 1
                    .text:0000000000001464                 cmp     r9, 1
                    .text:0000000000001468                 jbe     short loc_14A7
                    .text:000000000000146A                 cmp     r9, 2
                    .text:000000000000146E                 jz      loc_1766
                    .text:0000000000001474
                    .text:0000000000001474 loc_1474:                               ; CODE XREF: timsort_constprop_0+2D0↓j
                    .text:0000000000001474                 lea     r15, [r9-2]
                    .text:0000000000001478                 lea     r8, [r9-3]
                    .text:000000000000147C                 mov     r14, [rsp+r15*8+878h+var_448]
                    .text:0000000000001484                 mov     rax, [rsp+r8*8+878h+var_448]
                    .text:000000000000148C                 lea     rdi, [r9-1]
                    .text:0000000000001490                 mov     [rsp+878h+var_870], rdi
                    .text:0000000000001495                 lea     r11, [r14+r12]
                    .text:0000000000001499                 cmp     rax, r11
                    .text:000000000000149C                 jbe     short loc_14DB
                    .text:000000000000149E                 cmp     r14, r12
                    .text:00000000000014A1                 jbe     loc_16B8
                    .text:00000000000014A7
                    .text:00000000000014A7 loc_14A7:                               ; CODE XREF: timsort_constprop_0+168↑j
                    .text:00000000000014A7                                         ; timsort_constprop_0+3B3↓j ...
                    .text:00000000000014A7                 cmp     rbp, 0Fh
                    .text:00000000000014AB                 jz      loc_18E9
                    .text:00000000000014B1                 mov     r8, rbp
                    .text:00000000000014B4                 jmp     loc_1348
                    .text:00000000000014B4 ; ---------------------------------------------------------------------------
                    .text:00000000000014B9                 align 20h
                    .text:00000000000014C0
                    .text:00000000000014C0 loc_14C0:                               ; CODE XREF: timsort_constprop_0+10D↑j
                    .text:00000000000014C0                 mov     rsi, r14
                    .text:00000000000014C3                 add     r10, 1
                    .text:00000000000014C7                 add     r11, 4
                    .text:00000000000014CB                 mov     [rsi], edi
                    .text:00000000000014CD                 cmp     r12, r10
                    .text:00000000000014D0                 jnz     loc_13E8
                    .text:00000000000014D6                 jmp     loc_1450
                    .text:00000000000014DB ; ---------------------------------------------------------------------------
                    .text:00000000000014DB
                    .text:00000000000014DB loc_14DB:                               ; CODE XREF: timsort_constprop_0+19C↑j
                    .text:00000000000014DB                 cmp     rax, r12
                    .text:00000000000014DE                 jb      loc_15D5
                    .text:00000000000014E4                 mov     rax, [rsp+878h+var_870]
                    .text:00000000000014E9                 mov     r8, [rsp+r15*8+878h+var_848]
                    .text:00000000000014EE                 mov     r9, [rsp+rax*8+878h+var_848]
                    .text:00000000000014F3                 lea     rax, [r9+r12]
                    .text:00000000000014F7                 mov     [rsp+878h+var_868], rax
                    .text:00000000000014FC                 cmp     r14, r12
                    .text:00000000000014FF                 jbe     loc_16D9
                    .text:0000000000001505                 lea     rdx, ds:0[r12*4]
                    .text:000000000000150D                 lea     rsi, [rbx+r9*4]
                    .text:0000000000001511                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001516                 mov     rdi, r13
                    .text:0000000000001519                 mov     [rsp+878h+var_858], r8
                    .text:000000000000151E                 mov     [rsp+878h+var_868], r11
                    .text:0000000000001523                 mov     [rsp+878h+var_860], rax
                    .text:0000000000001528                 call    ___memcpy_chk
                    .text:000000000000152D                 mov     r8, [rsp+878h+var_858]
                    .text:0000000000001532                 mov     r11, [rsp+878h+var_868]
                    .text:0000000000001537                 add     r14, r8
                    .text:000000000000153A                 test    r12, r12
                    .text:000000000000153D                 jz      short loc_15AE
                    .text:000000000000153F                 cmp     r14, r8
                    .text:0000000000001542                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001547                 ja      short loc_1566
                    .text:0000000000001549                 jmp     short loc_1588
                    .text:0000000000001549 ; ---------------------------------------------------------------------------
                    .text:000000000000154B                 align 10h
                    .text:0000000000001550
                    .text:0000000000001550 loc_1550:                               ; CODE XREF: timsort_constprop_0+274↓j
                    .text:0000000000001550                 sub     r14, 1
                    .text:0000000000001554                 mov     eax, [rbx+r14*4]
                    .text:0000000000001558                 mov     [rbx+r10*4], eax
                    .text:000000000000155C                 cmp     r14, r8
                    .text:000000000000155F                 jbe     short loc_1588
                    .text:0000000000001561
                    .text:0000000000001561 loc_1561:                               ; CODE XREF: timsort_constprop_0+286↓j
                    .text:0000000000001561                 test    r12, r12
                    .text:0000000000001564                 jz      short loc_15AE
                    .text:0000000000001566
                    .text:0000000000001566 loc_1566:                               ; CODE XREF: timsort_constprop_0+247↑j
                    .text:0000000000001566                 mov     eax, [r13+r12*4-4]
                    .text:000000000000156B                 sub     r10, 1
                    .text:000000000000156F                 cmp     [rbx+r14*4-4], eax
                    .text:0000000000001574                 jg      short loc_1550
                    .text:0000000000001576                 sub     r12, 1
                    .text:000000000000157A                 mov     eax, [r13+r12*4+0]
                    .text:000000000000157F                 mov     [rbx+r10*4], eax
                    .text:0000000000001583                 cmp     r14, r8
                    .text:0000000000001586                 ja      short loc_1561
                    .text:0000000000001588
                    .text:0000000000001588 loc_1588:                               ; CODE XREF: timsort_constprop_0+249↑j
                    .text:0000000000001588                                         ; timsort_constprop_0+25F↑j
                    .text:0000000000001588                 test    r12, r12
                    .text:000000000000158B                 jz      short loc_15AE
                    .text:000000000000158D                 sub     r10, r12
                    .text:0000000000001590                 lea     rdx, ds:0[r12*4] ; n
                    .text:0000000000001598                 mov     rsi, r13        ; src
                    .text:000000000000159B                 mov     [rsp+878h+var_868], r11
                    .text:00000000000015A0                 lea     rdi, [rbx+r10*4] ; dest
                    .text:00000000000015A4                 call    _memcpy
                    .text:00000000000015A9                 mov     r11, [rsp+878h+var_868]
                    .text:00000000000015AE
                    .text:00000000000015AE loc_15AE:                               ; CODE XREF: timsort_constprop_0+23D↑j
                    .text:00000000000015AE                                         ; timsort_constprop_0+264↑j ...
                    .text:00000000000015AE                 mov     [rsp+r15*8+878h+var_448], r11
                    .text:00000000000015B6                 mov     r15, [rsp+878h+var_870]
                    .text:00000000000015BB
                    .text:00000000000015BB loc_15BB:                               ; CODE XREF: timsort_constprop_0+3A7↓j
                    .text:00000000000015BB                 cmp     r15, 2
                    .text:00000000000015BF                 jz      loc_1766
                    .text:00000000000015C5                 mov     r12, [rsp+r15*8+878h+var_450]
                    .text:00000000000015CD                 mov     r9, r15
                    .text:00000000000015D0                 jmp     loc_1474
                    .text:00000000000015D5 ; ---------------------------------------------------------------------------
                    .text:00000000000015D5
                    .text:00000000000015D5 loc_15D5:                               ; CODE XREF: timsort_constprop_0+1DE↑j
                    .text:00000000000015D5                                         ; timsort_constprop_0+3BB↓j
                    .text:00000000000015D5                 mov     [rsp+r15*8+878h+var_448], rax
                    .text:00000000000015DD                 mov     rdx, [rsp+r8*8+878h+var_848]
                    .text:00000000000015E2                 mov     r10, [rsp+r15*8+878h+var_848]
                    .text:00000000000015E7                 mov     [rsp+r8*8+878h+var_448], r14
                    .text:00000000000015EF                 mov     r9, [rsp+r15*8+878h+var_448]
                    .text:00000000000015F7                 mov     [rsp+r15*8+878h+var_848], rdx
                    .text:00000000000015FC                 mov     [rsp+r8*8+878h+var_848], r10
                    .text:0000000000001601                 mov     r12, [rsp+r15*8+878h+var_848]
                    .text:0000000000001606                 cmp     r14, r9
                    .text:0000000000001609                 ja      loc_1818
                    .text:000000000000160F                 lea     rsi, [rbx+r10*4]
                    .text:0000000000001613                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001618                 mov     rdi, r13
                    .text:000000000000161B                 mov     [rsp+878h+var_860], r9
                    .text:0000000000001620                 lea     rdx, ds:0[r14*4]
                    .text:0000000000001628                 mov     [rsp+878h+var_868], r8
                    .text:000000000000162D                 mov     [rsp+878h+var_870], r10
                    .text:0000000000001632                 call    ___memcpy_chk
                    .text:0000000000001637                 mov     r9, [rsp+878h+var_860]
                    .text:000000000000163C                 xor     edx, edx
                    .text:000000000000163E                 mov     r10, [rsp+878h+var_870]
                    .text:0000000000001643                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001648                 lea     rsi, [r12+r9]
                    .text:000000000000164C                 cmp     r12, rsi
                    .text:000000000000164F                 jnb     loc_1B00
                    .text:0000000000001655                 test    r14, r14
                    .text:0000000000001658                 jnz     short loc_1679
                    .text:000000000000165A                 jmp     loc_1B00
                    .text:000000000000165A ; ---------------------------------------------------------------------------
                    .text:000000000000165F                 align 20h
                    .text:0000000000001660
                    .text:0000000000001660 loc_1660:                               ; CODE XREF: timsort_constprop_0+388↓j
                    .text:0000000000001660                 mov     eax, ecx
                    .text:0000000000001662                 add     rdx, 1
                    .text:0000000000001666                 mov     [rbx+r10*4-4], eax
                    .text:000000000000166B                 cmp     r14, rdx
                    .text:000000000000166E                 jbe     short loc_1698
                    .text:0000000000001670
                    .text:0000000000001670 loc_1670:                               ; CODE XREF: timsort_constprop_0+396↓j
                    .text:0000000000001670                 cmp     rsi, r12
                    .text:0000000000001673                 jbe     loc_1B00
                    .text:0000000000001679
                    .text:0000000000001679 loc_1679:                               ; CODE XREF: timsort_constprop_0+358↑j
                    .text:0000000000001679                 mov     ecx, [r13+rdx*4+0]
                    .text:000000000000167E                 mov     eax, [rbx+r12*4]
                    .text:0000000000001682                 add     r10, 1
                    .text:0000000000001686                 cmp     ecx, eax
                    .text:0000000000001688                 jle     short loc_1660
                    .text:000000000000168A                 mov     [rbx+r10*4-4], eax
                    .text:000000000000168F                 add     r12, 1
                    .text:0000000000001693                 cmp     r14, rdx
                    .text:0000000000001696                 ja      short loc_1670
                    .text:0000000000001698
                    .text:0000000000001698 loc_1698:                               ; CODE XREF: timsort_constprop_0+36E↑j
                    .text:0000000000001698                                         ; timsort_constprop_0+57B↓j ...
                    .text:0000000000001698                 add     r9, r14
                    .text:000000000000169B                 mov     [rsp+r8*8+878h+var_448], r9
                    .text:00000000000016A3                 cmp     r15, 1
                    .text:00000000000016A7                 jnz     loc_15BB
                    .text:00000000000016AD
                    .text:00000000000016AD loc_16AD:                               ; CODE XREF: timsort_constprop_0+513↓j
                    .text:00000000000016AD                 mov     r9d, 1
                    .text:00000000000016B3                 jmp     loc_14A7
                    .text:00000000000016B8 ; ---------------------------------------------------------------------------
                    .text:00000000000016B8
                    .text:00000000000016B8 loc_16B8:                               ; CODE XREF: timsort_constprop_0+1A1↑j
                    .text:00000000000016B8                 cmp     rax, r12
                    .text:00000000000016BB                 jb      loc_15D5
                    .text:00000000000016C1                 mov     rax, [rsp+878h+var_870]
                    .text:00000000000016C6                 mov     r8, [rsp+r15*8+878h+var_848]
                    .text:00000000000016CB                 mov     r9, [rsp+rax*8+878h+var_848]
                    .text:00000000000016D0                 lea     rax, [r9+r12]
                    .text:00000000000016D4                 mov     [rsp+878h+var_868], rax
                    .text:00000000000016D9
                    .text:00000000000016D9 loc_16D9:                               ; CODE XREF: timsort_constprop_0+1FF↑j
                    .text:00000000000016D9                 lea     rdx, ds:0[r14*4]
                    .text:00000000000016E1                 lea     rsi, [rbx+r8*4]
                    .text:00000000000016E5                 mov     ecx, 3Ch ; '<'
                    .text:00000000000016EA                 mov     rdi, r13
                    .text:00000000000016ED                 mov     [rsp+878h+var_850], r9
                    .text:00000000000016F2                 mov     [rsp+878h+var_858], r11
                    .text:00000000000016F7                 mov     [rsp+878h+var_860], r8
                    .text:00000000000016FC                 call    ___memcpy_chk
                    .text:0000000000001701                 mov     r9, [rsp+878h+var_850]
                    .text:0000000000001706                 xor     edx, edx
                    .text:0000000000001708                 cmp     [rsp+878h+var_868], r9
                    .text:000000000000170D                 mov     r8, [rsp+878h+var_860]
                    .text:0000000000001712                 mov     r11, [rsp+878h+var_858]
                    .text:0000000000001717                 jbe     loc_1B3D
                    .text:000000000000171D                 test    r14, r14
                    .text:0000000000001720                 jnz     short loc_174F
                    .text:0000000000001722                 jmp     loc_1B3D
                    .text:0000000000001722 ; ---------------------------------------------------------------------------
                    .text:0000000000001727                 align 10h
                    .text:0000000000001730
                    .text:0000000000001730 loc_1730:                               ; CODE XREF: timsort_constprop_0+45E↓j
                    .text:0000000000001730                 add     rdx, 1
                    .text:0000000000001734                 mov     eax, ecx
                    .text:0000000000001736
                    .text:0000000000001736 loc_1736:                               ; CODE XREF: timsort_constprop_0+464↓j
                    .text:0000000000001736                 mov     [rbx+r8*4-4], eax
                    .text:000000000000173B                 cmp     r14, rdx
                    .text:000000000000173E                 jbe     loc_15AE
                    .text:0000000000001744                 cmp     [rsp+878h+var_868], r9
                    .text:0000000000001749                 jbe     loc_1B3D
                    .text:000000000000174F
                    .text:000000000000174F loc_174F:                               ; CODE XREF: timsort_constprop_0+420↑j
                    .text:000000000000174F                 mov     ecx, [r13+rdx*4+0]
                    .text:0000000000001754                 mov     eax, [rbx+r9*4]
                    .text:0000000000001758                 add     r8, 1
                    .text:000000000000175C                 cmp     ecx, eax
                    .text:000000000000175E                 jle     short loc_1730
                    .text:0000000000001760                 add     r9, 1
                    .text:0000000000001764                 jmp     short loc_1736
                    .text:0000000000001766 ; ---------------------------------------------------------------------------
                    .text:0000000000001766
                    .text:0000000000001766 loc_1766:                               ; CODE XREF: timsort_constprop_0+16E↑j
                    .text:0000000000001766                                         ; timsort_constprop_0+2BF↑j
                    .text:0000000000001766                 mov     r15, [rsp+878h+var_448]
                    .text:000000000000176E                 mov     r8, [rsp+878h+var_440]
                    .text:0000000000001776                 mov     r9d, 2
                    .text:000000000000177C                 cmp     r15, r8
                    .text:000000000000177F                 ja      loc_14A7
                    .text:0000000000001785                 mov     r12, [rsp+878h+var_848]
                    .text:000000000000178A                 mov     ecx, 3Ch ; '<'
                    .text:000000000000178F                 mov     rdi, r13
                    .text:0000000000001792                 mov     [rsp+878h+var_870], r8
                    .text:0000000000001797                 lea     rdx, ds:0[r15*4]
                    .text:000000000000179F                 mov     r14, [rsp+878h+var_840]
                    .text:00000000000017A4                 lea     rsi, [rbx+r12*4]
                    .text:00000000000017A8                 call    ___memcpy_chk
                    .text:00000000000017AD                 mov     r8, [rsp+878h+var_870]
                    .text:00000000000017B2                 xor     eax, eax
                    .text:00000000000017B4                 lea     rsi, [r8+r14]
                    .text:00000000000017B8                 cmp     r14, rsi
                    .text:00000000000017BB                 jnb     loc_1B92
                    .text:00000000000017C1                 test    r15, r15
                    .text:00000000000017C4                 jnz     short loc_17E9
                    .text:00000000000017C6                 jmp     loc_1B92
                    .text:00000000000017C6 ; ---------------------------------------------------------------------------
                    .text:00000000000017CB                 align 10h
                    .text:00000000000017D0
                    .text:00000000000017D0 loc_17D0:                               ; CODE XREF: timsort_constprop_0+4F8↓j
                    .text:00000000000017D0                 mov     edx, ecx
                    .text:00000000000017D2                 add     rax, 1
                    .text:00000000000017D6                 mov     [rbx+r12*4-4], edx
                    .text:00000000000017DB                 cmp     r15, rax
                    .text:00000000000017DE                 jbe     short loc_1808
                    .text:00000000000017E0
                    .text:00000000000017E0 loc_17E0:                               ; CODE XREF: timsort_constprop_0+506↓j
                    .text:00000000000017E0                 cmp     rsi, r14
                    .text:00000000000017E3                 jbe     loc_1B92
                    .text:00000000000017E9
                    .text:00000000000017E9 loc_17E9:                               ; CODE XREF: timsort_constprop_0+4C4↑j
                    .text:00000000000017E9                 mov     ecx, [r13+rax*4+0]
                    .text:00000000000017EE                 mov     edx, [rbx+r14*4]
                    .text:00000000000017F2                 add     r12, 1
                    .text:00000000000017F6                 cmp     ecx, edx
                    .text:00000000000017F8                 jle     short loc_17D0
                    .text:00000000000017FA                 mov     [rbx+r12*4-4], edx
                    .text:00000000000017FF                 add     r14, 1
                    .text:0000000000001803                 cmp     r15, rax
                    .text:0000000000001806                 ja      short loc_17E0
                    .text:0000000000001808
                    .text:0000000000001808 loc_1808:                               ; CODE XREF: timsort_constprop_0+4DE↑j
                    .text:0000000000001808                                         ; timsort_constprop_0+895↓j ...
                    .text:0000000000001808                 add     r15, r8
                    .text:000000000000180B                 mov     [rsp+878h+var_448], r15
                    .text:0000000000001813                 jmp     loc_16AD
                    .text:0000000000001818 ; ---------------------------------------------------------------------------
                    .text:0000000000001818
                    .text:0000000000001818 loc_1818:                               ; CODE XREF: timsort_constprop_0+309↑j
                    .text:0000000000001818                 lea     rdx, ds:0[r9*4]
                    .text:0000000000001820                 lea     rsi, [rbx+r12*4]
                    .text:0000000000001824                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001829                 mov     rdi, r13
                    .text:000000000000182C                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001831                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001836                 mov     [rsp+878h+var_870], r9
                    .text:000000000000183B                 call    ___memcpy_chk
                    .text:0000000000001840                 mov     r9, [rsp+878h+var_870]
                    .text:0000000000001845                 mov     r10, [rsp+878h+var_860]
                    .text:000000000000184A                 mov     r8, [rsp+878h+var_868]
                    .text:000000000000184F                 add     r12, r9
                    .text:0000000000001852                 test    r9, r9
                    .text:0000000000001855                 lea     rdx, [r14+r10]
                    .text:0000000000001859                 mov     rax, r9
                    .text:000000000000185C                 jz      short loc_18A2
                    .text:000000000000185E                 cmp     r10, rdx
                    .text:0000000000001861                 jb      short loc_1881
                    .text:0000000000001863                 jmp     short loc_18A2
                    .text:0000000000001863 ; ---------------------------------------------------------------------------
                    .text:0000000000001865                 align 8
                    .text:0000000000001868
                    .text:0000000000001868 loc_1868:                               ; CODE XREF: timsort_constprop_0+58E↓j
                    .text:0000000000001868                 sub     rdx, 1
                    .text:000000000000186C                 mov     ecx, [rbx+rdx*4]
                    .text:000000000000186F                 mov     [rbx+r12*4], ecx
                    .text:0000000000001873                 cmp     r10, rdx
                    .text:0000000000001876                 jnb     short loc_18A2
                    .text:0000000000001878
                    .text:0000000000001878 loc_1878:                               ; CODE XREF: timsort_constprop_0+5A0↓j
                    .text:0000000000001878                 test    rax, rax
                    .text:000000000000187B                 jz      loc_1698
                    .text:0000000000001881
                    .text:0000000000001881 loc_1881:                               ; CODE XREF: timsort_constprop_0+561↑j
                    .text:0000000000001881                 mov     edi, [r13+rax*4-4]
                    .text:0000000000001886                 sub     r12, 1
                    .text:000000000000188A                 cmp     [rbx+rdx*4-4], edi
                    .text:000000000000188E                 jg      short loc_1868
                    .text:0000000000001890                 sub     rax, 1
                    .text:0000000000001894                 mov     ecx, [r13+rax*4+0]
                    .text:0000000000001899                 mov     [rbx+r12*4], ecx
                    .text:000000000000189D                 cmp     r10, rdx
                    .text:00000000000018A0                 jb      short loc_1878
                    .text:00000000000018A2
                    .text:00000000000018A2 loc_18A2:                               ; CODE XREF: timsort_constprop_0+55C↑j
                    .text:00000000000018A2                                         ; timsort_constprop_0+563↑j ...
                    .text:00000000000018A2                 test    rax, rax
                    .text:00000000000018A5                 jz      loc_1698
                    .text:00000000000018AB                 sub     r12, rax
                    .text:00000000000018AE                 lea     rdx, ds:0[rax*4] ; n
                    .text:00000000000018B6                 mov     rsi, r13        ; src
                    .text:00000000000018B9                 mov     [rsp+878h+var_868], r9
                    .text:00000000000018BE                 lea     rdi, [rbx+r12*4] ; dest
                    .text:00000000000018C2                 mov     [rsp+878h+var_870], r8
                    .text:00000000000018C7                 call    _memcpy
                    .text:00000000000018CC                 mov     r8, [rsp+878h+var_870]
                    .text:00000000000018D1                 mov     r9, [rsp+878h+var_868]
                    .text:00000000000018D6                 jmp     loc_1698
                    .text:00000000000018DB ; ---------------------------------------------------------------------------
                    .text:00000000000018DB
                    .text:00000000000018DB loc_18DB:                               ; CODE XREF: timsort_constprop_0+77↑j
                    .text:00000000000018DB                 cmp     rax, r8
                    .text:00000000000018DE                 ja      loc_138F
                    .text:00000000000018E4                 jmp     loc_13B1
                    .text:00000000000018E9 ; ---------------------------------------------------------------------------
                    .text:00000000000018E9
                    .text:00000000000018E9 loc_18E9:                               ; CODE XREF: timsort_constprop_0+1AB↑j
                    .text:00000000000018E9                 cmp     r9, 1
                    .text:00000000000018ED                 jbe     loc_19DA
                    .text:00000000000018F3                 lea     rax, [rsp+878h+var_840]
                    .text:00000000000018F8                 shl     r9, 3
                    .text:00000000000018FC                 mov     [rsp+878h+var_870], rax
                    .text:0000000000001901                 lea     r10, [rsp+r9+878h+var_848]
                    .text:0000000000001906                 lea     r14, [rsp+r9+878h+var_448]
                    .text:000000000000190E                 xchg    ax, ax
                    .text:0000000000001910
                    .text:0000000000001910 loc_1910:                               ; CODE XREF: timsort_constprop_0+6D4↓j
                    .text:0000000000001910                 mov     r11, [r10-8]
                    .text:0000000000001914                 mov     r8, [r14-8]
                    .text:0000000000001918                 mov     r15, [r14-10h]
                    .text:000000000000191C                 mov     rbp, [r10-10h]
                    .text:0000000000001920                 lea     r12, [r11+r8]
                    .text:0000000000001924                 cmp     r8, r15
                    .text:0000000000001927                 jb      loc_1A0A
                    .text:000000000000192D                 lea     rdx, ds:0[r15*4]
                    .text:0000000000001935                 lea     rsi, [rbx+rbp*4]
                    .text:0000000000001939                 mov     ecx, 3Ch ; '<'
                    .text:000000000000193E                 mov     rdi, r13
                    .text:0000000000001941                 mov     [rsp+878h+var_858], r10
                    .text:0000000000001946                 mov     [rsp+878h+var_860], r11
                    .text:000000000000194B                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001950                 call    ___memcpy_chk
                    .text:0000000000001955                 mov     r11, [rsp+878h+var_860]
                    .text:000000000000195A                 xor     edx, edx
                    .text:000000000000195C                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001961                 mov     r10, [rsp+878h+var_858]
                    .text:0000000000001966                 cmp     r11, r12
                    .text:0000000000001969                 jnb     loc_1AC3
                    .text:000000000000196F                 test    r15, r15
                    .text:0000000000001972                 jnz     short loc_1998
                    .text:0000000000001974                 jmp     loc_1AC3
                    .text:0000000000001974 ; ---------------------------------------------------------------------------
                    .text:0000000000001979                 align 20h
                    .text:0000000000001980
                    .text:0000000000001980 loc_1980:                               ; CODE XREF: timsort_constprop_0+6A7↓j
                    .text:0000000000001980                 mov     eax, ecx
                    .text:0000000000001982                 add     rdx, 1
                    .text:0000000000001986                 mov     [rbx+rbp*4-4], eax
                    .text:000000000000198A                 cmp     r15, rdx
                    .text:000000000000198D                 jbe     short loc_19C0
                    .text:000000000000198F
                    .text:000000000000198F loc_198F:                               ; CODE XREF: timsort_constprop_0+6B4↓j
                    .text:000000000000198F                 cmp     r11, r12
                    .text:0000000000001992                 jnb     loc_1AC3
                    .text:0000000000001998
                    .text:0000000000001998 loc_1998:                               ; CODE XREF: timsort_constprop_0+672↑j
                    .text:0000000000001998                 mov     ecx, [r13+rdx*4+0]
                    .text:000000000000199D                 mov     eax, [rbx+r11*4]
                    .text:00000000000019A1                 add     rbp, 1
                    .text:00000000000019A5                 cmp     ecx, eax
                    .text:00000000000019A7                 jle     short loc_1980
                    .text:00000000000019A9                 mov     [rbx+rbp*4-4], eax
                    .text:00000000000019AD                 add     r11, 1
                    .text:00000000000019B1                 cmp     r15, rdx
                    .text:00000000000019B4                 ja      short loc_198F
                    .text:00000000000019B6                 db      2Eh
                    .text:00000000000019B6                 nop     word ptr [rax+rax+00000000h]
                    .text:00000000000019C0
                    .text:00000000000019C0 loc_19C0:                               ; CODE XREF: timsort_constprop_0+68D↑j
                    .text:00000000000019C0                                         ; timsort_constprop_0+763↓j ...
                    .text:00000000000019C0                 add     r8, r15
                    .text:00000000000019C3                 sub     r10, 8
                    .text:00000000000019C7                 sub     r14, 8
                    .text:00000000000019CB                 mov     [r14-8], r8
                    .text:00000000000019CF                 cmp     r10, [rsp+878h+var_870]
                    .text:00000000000019D4                 jnz     loc_1910
                    .text:00000000000019DA
                    .text:00000000000019DA loc_19DA:                               ; CODE XREF: timsort_constprop_0+5ED↑j
                    .text:00000000000019DA                 mov     rax, [rsp+878h+var_40]
                    .text:00000000000019E2                 sub     rax, fs:28h
                    .text:00000000000019EB                 jnz     loc_1BC2
                    .text:00000000000019F1                 add     rsp, 848h
                    .text:00000000000019F8                 mov     rdi, r13        ; ptr
                    .text:00000000000019FB                 pop     rbx
                    .text:00000000000019FC                 pop     rbp
                    .text:00000000000019FD                 pop     r12
                    .text:00000000000019FF                 pop     r13
                    .text:0000000000001A01                 pop     r14
                    .text:0000000000001A03                 pop     r15
                    .text:0000000000001A05                 jmp     _free
                    .text:0000000000001A0A ; ---------------------------------------------------------------------------
                    .text:0000000000001A0A
                    .text:0000000000001A0A loc_1A0A:                               ; CODE XREF: timsort_constprop_0+627↑j
                    .text:0000000000001A0A                 lea     rdx, ds:0[r8*4]
                    .text:0000000000001A12                 lea     rsi, [rbx+r11*4]
                    .text:0000000000001A16                 mov     ecx, 3Ch ; '<'
                    .text:0000000000001A1B                 mov     rdi, r13
                    .text:0000000000001A1E                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001A23                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001A28                 call    ___memcpy_chk
                    .text:0000000000001A2D                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001A32                 lea     rdx, [rbp+r15+0]
                    .text:0000000000001A37                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001A3C                 cmp     rbp, rdx
                    .text:0000000000001A3F                 mov     rax, r8
                    .text:0000000000001A42                 jnb     short loc_1A8A
                    .text:0000000000001A44                 test    r8, r8
                    .text:0000000000001A47                 jnz     short loc_1A69
                    .text:0000000000001A49                 jmp     short loc_1A8A
                    .text:0000000000001A49 ; ---------------------------------------------------------------------------
                    .text:0000000000001A4B                 align 10h
                    .text:0000000000001A50
                    .text:0000000000001A50 loc_1A50:                               ; CODE XREF: timsort_constprop_0+776↓j
                    .text:0000000000001A50                 sub     rdx, 1
                    .text:0000000000001A54                 mov     ecx, [rbx+rdx*4]
                    .text:0000000000001A57                 mov     [rbx+r12*4], ecx
                    .text:0000000000001A5B                 cmp     rbp, rdx
                    .text:0000000000001A5E                 jnb     short loc_1A8A
                    .text:0000000000001A60
                    .text:0000000000001A60 loc_1A60:                               ; CODE XREF: timsort_constprop_0+788↓j
                    .text:0000000000001A60                 test    rax, rax
                    .text:0000000000001A63                 jz      loc_19C0
                    .text:0000000000001A69
                    .text:0000000000001A69 loc_1A69:                               ; CODE XREF: timsort_constprop_0+747↑j
                    .text:0000000000001A69                 mov     edi, [r13+rax*4-4]
                    .text:0000000000001A6E                 sub     r12, 1
                    .text:0000000000001A72                 cmp     [rbx+rdx*4-4], edi
                    .text:0000000000001A76                 jg      short loc_1A50
                    .text:0000000000001A78                 sub     rax, 1
                    .text:0000000000001A7C                 mov     ecx, [r13+rax*4+0]
                    .text:0000000000001A81                 mov     [rbx+r12*4], ecx
                    .text:0000000000001A85                 cmp     rbp, rdx
                    .text:0000000000001A88                 jb      short loc_1A60
                    .text:0000000000001A8A
                    .text:0000000000001A8A loc_1A8A:                               ; CODE XREF: timsort_constprop_0+742↑j
                    .text:0000000000001A8A                                         ; timsort_constprop_0+749↑j ...
                    .text:0000000000001A8A                 test    rax, rax
                    .text:0000000000001A8D                 jz      loc_19C0
                    .text:0000000000001A93                 sub     r12, rax
                    .text:0000000000001A96                 lea     rdx, ds:0[rax*4] ; n
                    .text:0000000000001A9E                 mov     rsi, r13        ; src
                    .text:0000000000001AA1                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001AA6                 lea     rdi, [rbx+r12*4] ; dest
                    .text:0000000000001AAA                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001AAF                 call    _memcpy
                    .text:0000000000001AB4                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001AB9                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001ABE                 jmp     loc_19C0
                    .text:0000000000001AC3 ; ---------------------------------------------------------------------------
                    .text:0000000000001AC3
                    .text:0000000000001AC3 loc_1AC3:                               ; CODE XREF: timsort_constprop_0+669↑j
                    .text:0000000000001AC3                                         ; timsort_constprop_0+674↑j ...
                    .text:0000000000001AC3                 cmp     r15, rdx
                    .text:0000000000001AC6                 jbe     loc_19C0
                    .text:0000000000001ACC                 mov     r11, r15
                    .text:0000000000001ACF                 lea     rsi, [r13+rdx*4+0] ; src
                    .text:0000000000001AD4                 lea     rdi, [rbx+rbp*4] ; dest
                    .text:0000000000001AD8                 mov     [rsp+878h+var_860], r10
                    .text:0000000000001ADD                 sub     r11, rdx
                    .text:0000000000001AE0                 mov     [rsp+878h+var_868], r8
                    .text:0000000000001AE5                 shl     r11, 2
                    .text:0000000000001AE9                 mov     rdx, r11        ; n
                    .text:0000000000001AEC                 call    _memcpy
                    .text:0000000000001AF1                 mov     r8, [rsp+878h+var_868]
                    .text:0000000000001AF6                 mov     r10, [rsp+878h+var_860]
                    .text:0000000000001AFB                 jmp     loc_19C0
                    .text:0000000000001B00 ; ---------------------------------------------------------------------------
                    .text:0000000000001B00
                    .text:0000000000001B00 loc_1B00:                               ; CODE XREF: timsort_constprop_0+34F↑j
                    .text:0000000000001B00                                         ; timsort_constprop_0+35A↑j ...
                    .text:0000000000001B00                 cmp     r14, rdx
                    .text:0000000000001B03                 jbe     loc_1698
                    .text:0000000000001B09                 lea     rdi, [rbx+r10*4] ; dest
                    .text:0000000000001B0D                 mov     r10, r14
                    .text:0000000000001B10                 lea     rsi, [r13+rdx*4+0] ; src
                    .text:0000000000001B15                 mov     [rsp+878h+var_868], r9
                    .text:0000000000001B1A                 sub     r10, rdx
                    .text:0000000000001B1D                 mov     [rsp+878h+var_870], r8
                    .text:0000000000001B22                 shl     r10, 2
                    .text:0000000000001B26                 mov     rdx, r10        ; n
                    .text:0000000000001B29                 call    _memcpy
                    .text:0000000000001B2E                 mov     r8, [rsp+878h+var_870]
                    .text:0000000000001B33                 mov     r9, [rsp+878h+var_868]
                    .text:0000000000001B38                 jmp     loc_1698
                    .text:0000000000001B3D ; ---------------------------------------------------------------------------
                    .text:0000000000001B3D
                    .text:0000000000001B3D loc_1B3D:                               ; CODE XREF: timsort_constprop_0+417↑j
                    .text:0000000000001B3D                                         ; timsort_constprop_0+422↑j ...
                    .text:0000000000001B3D                 cmp     r14, rdx
                    .text:0000000000001B40                 jbe     loc_15AE
                    .text:0000000000001B46                 sub     r14, rdx
                    .text:0000000000001B49                 lea     rsi, [r13+rdx*4+0] ; src
                    .text:0000000000001B4E                 lea     rdi, [rbx+r8*4] ; dest
                    .text:0000000000001B52                 mov     [rsp+878h+var_868], r11
                    .text:0000000000001B57                 shl     r14, 2
                    .text:0000000000001B5B                 mov     rdx, r14        ; n
                    .text:0000000000001B5E                 call    _memcpy
                    .text:0000000000001B63                 mov     r11, [rsp+878h+var_868]
                    .text:0000000000001B68                 jmp     loc_15AE
                    .text:0000000000001B6D ; ---------------------------------------------------------------------------
                    .text:0000000000001B6D
                    .text:0000000000001B6D loc_1B6D:                               ; CODE XREF: timsort_constprop_0+34↑j
                    .text:0000000000001B6D                 mov     rax, [rsp+878h+var_40]
                    .text:0000000000001B75                 sub     rax, fs:28h
                    .text:0000000000001B7E                 jnz     short loc_1BC2
                    .text:0000000000001B80                 add     rsp, 848h
                    .text:0000000000001B87                 pop     rbx
                    .text:0000000000001B88                 pop     rbp
                    .text:0000000000001B89                 pop     r12
                    .text:0000000000001B8B                 pop     r13
                    .text:0000000000001B8D                 pop     r14
                    .text:0000000000001B8F                 pop     r15
                    .text:0000000000001B91                 retn
                    .text:0000000000001B92 ; ---------------------------------------------------------------------------
                    .text:0000000000001B92
                    .text:0000000000001B92 loc_1B92:                               ; CODE XREF: timsort_constprop_0+4BB↑j
                    .text:0000000000001B92                                         ; timsort_constprop_0+4C6↑j ...
                    .text:0000000000001B92                 cmp     r15, rax
                    .text:0000000000001B95                 jbe     loc_1808
                    .text:0000000000001B9B                 mov     rdx, r15
                    .text:0000000000001B9E                 lea     rdi, [rbx+r12*4] ; dest
                    .text:0000000000001BA2                 lea     rsi, [r13+rax*4+0] ; src
                    .text:0000000000001BA7                 mov     [rsp+878h+var_870], r8
                    .text:0000000000001BAC                 sub     rdx, rax
                    .text:0000000000001BAF                 shl     rdx, 2          ; n
                    .text:0000000000001BB3                 call    _memcpy
                    .text:0000000000001BB8                 mov     r8, [rsp+878h+var_870]
                    .text:0000000000001BBD                 jmp     loc_1808
                    .text:0000000000001BC2 ; ---------------------------------------------------------------------------
                    .text:0000000000001BC2
                    .text:0000000000001BC2 loc_1BC2:                               ; CODE XREF: timsort_constprop_0+6EB↑j
                    .text:0000000000001BC2                                         ; timsort_constprop_0+87E↑j
                    .text:0000000000001BC2                 call    ___stack_chk_fail
                    .text:0000000000001BC2 ; } // starts at 1300
                    .text:0000000000001BC2 timsort_constprop_0 endp
                    .text:0000000000001BC2
                    .text:0000000000001BC2 _text           ends
                    .text:0000000000001BC2
                    LOAD:0000000000001BC7 ; ===========================================================================
                    LOAD:0000000000001BC7
                    LOAD:0000000000001BC7 ; Segment type: Pure code
                    LOAD:0000000000001BC7 ; Segment permissions: Read/Execute
                    LOAD:0000000000001BC7 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001BC7                 assume cs:LOAD
                    LOAD:0000000000001BC7                 ;org 1BC7h
                    LOAD:0000000000001BC7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001BC7                 align 8
                    LOAD:0000000000001BC7 LOAD            ends
                    LOAD:0000000000001BC7
                    .fini:0000000000001BC8 ; ===========================================================================
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8 ; Segment type: Pure code
                    .fini:0000000000001BC8 ; Segment permissions: Read/Execute
                    .fini:0000000000001BC8 _fini           segment dword public 'CODE' use64
                    .fini:0000000000001BC8                 assume cs:_fini
                    .fini:0000000000001BC8                 ;org 1BC8h
                    .fini:0000000000001BC8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8 ; =============== S U B R O U T I N E =======================================
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8
                    .fini:0000000000001BC8                 public _term_proc
                    .fini:0000000000001BC8 _term_proc      proc near
                    .fini:0000000000001BC8                 endbr64                 ; _fini
                    .fini:0000000000001BCC                 sub     rsp, 8
                    .fini:0000000000001BD0                 add     rsp, 8
                    .fini:0000000000001BD4                 retn
                    .fini:0000000000001BD4 _term_proc      endp
                    .fini:0000000000001BD4
                    .fini:0000000000001BD4 _fini           ends
                    .fini:0000000000001BD4
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 unk_2004        db  20h                 ; DATA XREF: main+8↑o
                    .rodata:0000000000002005                 db    0
                    .rodata:0000000000002006 aDS             db '%d%s',0             ; DATA XREF: main+10↑o
                    .rodata:000000000000200B asc_200B        db 0Ah,0                ; DATA XREF: main+D3↑o
                    .rodata:000000000000200B _rodata         ends
                    .rodata:000000000000200B
                    LOAD:000000000000200D ; ===========================================================================
                    LOAD:000000000000200D
                    LOAD:000000000000200D ; Segment type: Pure data
                    LOAD:000000000000200D ; Segment permissions: Read
                    LOAD:000000000000200D LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000200D                 assume cs:LOAD
                    LOAD:000000000000200D                 ;org 200Dh
                    LOAD:000000000000200D                 align 10h
                    LOAD:000000000000200D LOAD            ends
                    LOAD:000000000000200D
                    .eh_frame_hdr:0000000000002010 ; ===========================================================================
                    .eh_frame_hdr:0000000000002010
                    .eh_frame_hdr:0000000000002010 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002010 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002010 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002010                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002010                 ;org 2010h
                    .eh_frame_hdr:0000000000002010 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002011                 db  1Bh
                    .eh_frame_hdr:0000000000002012                 db    3
                    .eh_frame_hdr:0000000000002013                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002014                 db  3Ch ; <
                    .eh_frame_hdr:0000000000002015                 db    0
                    .eh_frame_hdr:0000000000002016                 db    0
                    .eh_frame_hdr:0000000000002017                 db    0
                    .eh_frame_hdr:0000000000002018                 db    6
                    .eh_frame_hdr:0000000000002019                 db    0
                    .eh_frame_hdr:000000000000201A                 db    0
                    .eh_frame_hdr:000000000000201B                 db    0
                    .eh_frame_hdr:000000000000201C                 db  10h
                    .eh_frame_hdr:000000000000201D                 db 0F0h
                    .eh_frame_hdr:000000000000201E                 db 0FFh
                    .eh_frame_hdr:000000000000201F                 db 0FFh
                    .eh_frame_hdr:0000000000002020                 db  70h ; p
                    .eh_frame_hdr:0000000000002021                 db    0
                    .eh_frame_hdr:0000000000002022                 db    0
                    .eh_frame_hdr:0000000000002023                 db    0
                    .eh_frame_hdr:0000000000002024                 db  80h
                    .eh_frame_hdr:0000000000002025                 db 0F0h
                    .eh_frame_hdr:0000000000002026                 db 0FFh
                    .eh_frame_hdr:0000000000002027                 db 0FFh
                    .eh_frame_hdr:0000000000002028                 db  98h
                    .eh_frame_hdr:0000000000002029                 db    0
                    .eh_frame_hdr:000000000000202A                 db    0
                    .eh_frame_hdr:000000000000202B                 db    0
                    .eh_frame_hdr:000000000000202C                 db  90h
                    .eh_frame_hdr:000000000000202D                 db 0F0h
                    .eh_frame_hdr:000000000000202E                 db 0FFh
                    .eh_frame_hdr:000000000000202F                 db 0FFh
                    .eh_frame_hdr:0000000000002030                 db 0B0h
                    .eh_frame_hdr:0000000000002031                 db    0
                    .eh_frame_hdr:0000000000002032                 db    0
                    .eh_frame_hdr:0000000000002033                 db    0
                    .eh_frame_hdr:0000000000002034                 db 0F0h
                    .eh_frame_hdr:0000000000002035                 db 0F0h
                    .eh_frame_hdr:0000000000002036                 db 0FFh
                    .eh_frame_hdr:0000000000002037                 db 0FFh
                    .eh_frame_hdr:0000000000002038                 db  30h ; 0
                    .eh_frame_hdr:0000000000002039                 db    1
                    .eh_frame_hdr:000000000000203A                 db    0
                    .eh_frame_hdr:000000000000203B                 db    0
                    .eh_frame_hdr:000000000000203C                 db    0
                    .eh_frame_hdr:000000000000203D                 db 0F2h
                    .eh_frame_hdr:000000000000203E                 db 0FFh
                    .eh_frame_hdr:000000000000203F                 db 0FFh
                    .eh_frame_hdr:0000000000002040                 db  58h ; X
                    .eh_frame_hdr:0000000000002041                 db    0
                    .eh_frame_hdr:0000000000002042                 db    0
                    .eh_frame_hdr:0000000000002043                 db    0
                    .eh_frame_hdr:0000000000002044                 db 0F0h
                    .eh_frame_hdr:0000000000002045                 db 0F2h
                    .eh_frame_hdr:0000000000002046                 db 0FFh
                    .eh_frame_hdr:0000000000002047                 db 0FFh
                    .eh_frame_hdr:0000000000002048                 db 0C8h
                    .eh_frame_hdr:0000000000002049                 db    0
                    .eh_frame_hdr:000000000000204A                 db    0
                    .eh_frame_hdr:000000000000204B                 db    0
                    .eh_frame_hdr:000000000000204B _eh_frame_hdr   ends
                    .eh_frame_hdr:000000000000204B
                    LOAD:000000000000204C ; ===========================================================================
                    LOAD:000000000000204C
                    LOAD:000000000000204C ; Segment type: Pure data
                    LOAD:000000000000204C ; Segment permissions: Read
                    LOAD:000000000000204C LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000204C                 assume cs:LOAD
                    LOAD:000000000000204C                 ;org 204Ch
                    LOAD:000000000000204C                 align 10h
                    LOAD:000000000000204C LOAD            ends
                    LOAD:000000000000204C
                    .eh_frame:0000000000002050 ; ===========================================================================
                    .eh_frame:0000000000002050
                    .eh_frame:0000000000002050 ; Segment type: Pure data
                    .eh_frame:0000000000002050 ; Segment permissions: Read
                    .eh_frame:0000000000002050 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002050                 assume cs:_eh_frame
                    .eh_frame:0000000000002050                 ;org 2050h
                    .eh_frame:0000000000002050                 db  14h
                    .eh_frame:0000000000002051                 db    0
                    .eh_frame:0000000000002052                 db    0
                    .eh_frame:0000000000002053                 db    0
                    .eh_frame:0000000000002054                 db    0
                    .eh_frame:0000000000002055                 db    0
                    .eh_frame:0000000000002056                 db    0
                    .eh_frame:0000000000002057                 db    0
                    .eh_frame:0000000000002058                 db    1
                    .eh_frame:0000000000002059                 db  7Ah ; z
                    .eh_frame:000000000000205A                 db  52h ; R
                    .eh_frame:000000000000205B                 db    0
                    .eh_frame:000000000000205C                 db    1
                    .eh_frame:000000000000205D                 db  78h ; x
                    .eh_frame:000000000000205E                 db  10h
                    .eh_frame:000000000000205F                 db    1
                    .eh_frame:0000000000002060                 db  1Bh
                    .eh_frame:0000000000002061                 db  0Ch
                    .eh_frame:0000000000002062                 db    7
                    .eh_frame:0000000000002063                 db    8
                    .eh_frame:0000000000002064                 db  90h
                    .eh_frame:0000000000002065                 db    1
                    .eh_frame:0000000000002066                 db    0
                    .eh_frame:0000000000002067                 db    0
                    .eh_frame:0000000000002068                 db  14h
                    .eh_frame:0000000000002069                 db    0
                    .eh_frame:000000000000206A                 db    0
                    .eh_frame:000000000000206B                 db    0
                    .eh_frame:000000000000206C                 db  1Ch
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db 0A0h
                    .eh_frame:0000000000002071                 db 0F1h
                    .eh_frame:0000000000002072                 db 0FFh
                    .eh_frame:0000000000002073                 db 0FFh
                    .eh_frame:0000000000002074                 db  26h ; &
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db    0
                    .eh_frame:0000000000002079                 db  44h ; D
                    .eh_frame:000000000000207A                 db    7
                    .eh_frame:000000000000207B                 db  10h
                    .eh_frame:000000000000207C                 db    0
                    .eh_frame:000000000000207D                 db    0
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db  24h ; $
                    .eh_frame:0000000000002081                 db    0
                    .eh_frame:0000000000002082                 db    0
                    .eh_frame:0000000000002083                 db    0
                    .eh_frame:0000000000002084                 db  34h ; 4
                    .eh_frame:0000000000002085                 db    0
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db  98h
                    .eh_frame:0000000000002089                 db 0EFh
                    .eh_frame:000000000000208A                 db 0FFh
                    .eh_frame:000000000000208B                 db 0FFh
                    .eh_frame:000000000000208C                 db  70h ; p
                    .eh_frame:000000000000208D                 db    0
                    .eh_frame:000000000000208E                 db    0
                    .eh_frame:000000000000208F                 db    0
                    .eh_frame:0000000000002090                 db    0
                    .eh_frame:0000000000002091                 db  0Eh
                    .eh_frame:0000000000002092                 db  10h
                    .eh_frame:0000000000002093                 db  46h ; F
                    .eh_frame:0000000000002094                 db  0Eh
                    .eh_frame:0000000000002095                 db  18h
                    .eh_frame:0000000000002096                 db  4Ah ; J
                    .eh_frame:0000000000002097                 db  0Fh
                    .eh_frame:0000000000002098                 db  0Bh
                    .eh_frame:0000000000002099                 db  77h ; w
                    .eh_frame:000000000000209A                 db    8
                    .eh_frame:000000000000209B                 db  80h
                    .eh_frame:000000000000209C                 db    0
                    .eh_frame:000000000000209D                 db  3Fh ; ?
                    .eh_frame:000000000000209E                 db  1Ah
                    .eh_frame:000000000000209F                 db  3Ah ; :
                    .eh_frame:00000000000020A0                 db  2Ah ; *
                    .eh_frame:00000000000020A1                 db  33h ; 3
                    .eh_frame:00000000000020A2                 db  24h ; $
                    .eh_frame:00000000000020A3                 db  22h ; "
                    .eh_frame:00000000000020A4                 db    0
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db  14h
                    .eh_frame:00000000000020A9                 db    0
                    .eh_frame:00000000000020AA                 db    0
                    .eh_frame:00000000000020AB                 db    0
                    .eh_frame:00000000000020AC                 db  5Ch ; \
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db 0E0h
                    .eh_frame:00000000000020B1                 db 0EFh
                    .eh_frame:00000000000020B2                 db 0FFh
                    .eh_frame:00000000000020B3                 db 0FFh
                    .eh_frame:00000000000020B4                 db  10h
                    .eh_frame:00000000000020B5                 db    0
                    .eh_frame:00000000000020B6                 db    0
                    .eh_frame:00000000000020B7                 db    0
                    .eh_frame:00000000000020B8                 db    0
                    .eh_frame:00000000000020B9                 db    0
                    .eh_frame:00000000000020BA                 db    0
                    .eh_frame:00000000000020BB                 db    0
                    .eh_frame:00000000000020BC                 db    0
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db  14h
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db  74h ; t
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db 0D8h
                    .eh_frame:00000000000020C9                 db 0EFh
                    .eh_frame:00000000000020CA                 db 0FFh
                    .eh_frame:00000000000020CB                 db 0FFh
                    .eh_frame:00000000000020CC                 db  60h ; `
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db    0
                    .eh_frame:00000000000020D1                 db    0
                    .eh_frame:00000000000020D2                 db    0
                    .eh_frame:00000000000020D3                 db    0
                    .eh_frame:00000000000020D4                 db    0
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db  64h ; d
                    .eh_frame:00000000000020D9                 db    0
                    .eh_frame:00000000000020DA                 db    0
                    .eh_frame:00000000000020DB                 db    0
                    .eh_frame:00000000000020DC                 db  8Ch
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db  20h
                    .eh_frame:00000000000020E1                 db 0F2h
                    .eh_frame:00000000000020E2                 db 0FFh
                    .eh_frame:00000000000020E3                 db 0FFh
                    .eh_frame:00000000000020E4                 db 0C7h
                    .eh_frame:00000000000020E5                 db    8
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db    0
                    .eh_frame:00000000000020E9                 db  42h ; B
                    .eh_frame:00000000000020EA                 db  0Eh
                    .eh_frame:00000000000020EB                 db  10h
                    .eh_frame:00000000000020EC                 db  8Fh
                    .eh_frame:00000000000020ED                 db    2
                    .eh_frame:00000000000020EE                 db  42h ; B
                    .eh_frame:00000000000020EF                 db  0Eh
                    .eh_frame:00000000000020F0                 db  18h
                    .eh_frame:00000000000020F1                 db  8Eh
                    .eh_frame:00000000000020F2                 db    3
                    .eh_frame:00000000000020F3                 db  42h ; B
                    .eh_frame:00000000000020F4                 db  0Eh
                    .eh_frame:00000000000020F5                 db  20h
                    .eh_frame:00000000000020F6                 db  8Dh
                    .eh_frame:00000000000020F7                 db    4
                    .eh_frame:00000000000020F8                 db  42h ; B
                    .eh_frame:00000000000020F9                 db  0Eh
                    .eh_frame:00000000000020FA                 db  28h ; (
                    .eh_frame:00000000000020FB                 db  8Ch
                    .eh_frame:00000000000020FC                 db    5
                    .eh_frame:00000000000020FD                 db  41h ; A
                    .eh_frame:00000000000020FE                 db  0Eh
                    .eh_frame:00000000000020FF                 db  30h ; 0
                    .eh_frame:0000000000002100                 db  86h
                    .eh_frame:0000000000002101                 db    6
                    .eh_frame:0000000000002102                 db  41h ; A
                    .eh_frame:0000000000002103                 db  0Eh
                    .eh_frame:0000000000002104                 db  38h ; 8
                    .eh_frame:0000000000002105                 db  83h
                    .eh_frame:0000000000002106                 db    7
                    .eh_frame:0000000000002107                 db  4Fh ; O
                    .eh_frame:0000000000002108                 db  0Eh
                    .eh_frame:0000000000002109                 db  80h
                    .eh_frame:000000000000210A                 db  11h
                    .eh_frame:000000000000210B                 db    3
                    .eh_frame:000000000000210C                 db 0DFh
                    .eh_frame:000000000000210D                 db    6
                    .eh_frame:000000000000210E                 db  0Ah
                    .eh_frame:000000000000210F                 db  0Eh
                    .eh_frame:0000000000002110                 db  38h ; 8
                    .eh_frame:0000000000002111                 db  44h ; D
                    .eh_frame:0000000000002112                 db  0Eh
                    .eh_frame:0000000000002113                 db  30h ; 0
                    .eh_frame:0000000000002114                 db  41h ; A
                    .eh_frame:0000000000002115                 db  0Eh
                    .eh_frame:0000000000002116                 db  28h ; (
                    .eh_frame:0000000000002117                 db  42h ; B
                    .eh_frame:0000000000002118                 db  0Eh
                    .eh_frame:0000000000002119                 db  20h
                    .eh_frame:000000000000211A                 db  42h ; B
                    .eh_frame:000000000000211B                 db  0Eh
                    .eh_frame:000000000000211C                 db  18h
                    .eh_frame:000000000000211D                 db  42h ; B
                    .eh_frame:000000000000211E                 db  0Eh
                    .eh_frame:000000000000211F                 db  10h
                    .eh_frame:0000000000002120                 db  42h ; B
                    .eh_frame:0000000000002121                 db  0Eh
                    .eh_frame:0000000000002122                 db    8
                    .eh_frame:0000000000002123                 db  45h ; E
                    .eh_frame:0000000000002124                 db  0Bh
                    .eh_frame:0000000000002125                 db    3
                    .eh_frame:0000000000002126                 db  7Dh ; }
                    .eh_frame:0000000000002127                 db    1
                    .eh_frame:0000000000002128                 db  0Ah
                    .eh_frame:0000000000002129                 db  0Eh
                    .eh_frame:000000000000212A                 db  38h ; 8
                    .eh_frame:000000000000212B                 db  41h ; A
                    .eh_frame:000000000000212C                 db  0Eh
                    .eh_frame:000000000000212D                 db  30h ; 0
                    .eh_frame:000000000000212E                 db  41h ; A
                    .eh_frame:000000000000212F                 db  0Eh
                    .eh_frame:0000000000002130                 db  28h ; (
                    .eh_frame:0000000000002131                 db  42h ; B
                    .eh_frame:0000000000002132                 db  0Eh
                    .eh_frame:0000000000002133                 db  20h
                    .eh_frame:0000000000002134                 db  42h ; B
                    .eh_frame:0000000000002135                 db  0Eh
                    .eh_frame:0000000000002136                 db  18h
                    .eh_frame:0000000000002137                 db  42h ; B
                    .eh_frame:0000000000002138                 db  0Eh
                    .eh_frame:0000000000002139                 db  10h
                    .eh_frame:000000000000213A                 db  42h ; B
                    .eh_frame:000000000000213B                 db  0Eh
                    .eh_frame:000000000000213C                 db    8
                    .eh_frame:000000000000213D                 db  41h ; A
                    .eh_frame:000000000000213E                 db  0Bh
                    .eh_frame:000000000000213F                 db    0
                    .eh_frame:0000000000002140                 db  38h ; 8
                    .eh_frame:0000000000002141                 db    0
                    .eh_frame:0000000000002142                 db    0
                    .eh_frame:0000000000002143                 db    0
                    .eh_frame:0000000000002144                 db 0F4h
                    .eh_frame:0000000000002145                 db    0
                    .eh_frame:0000000000002146                 db    0
                    .eh_frame:0000000000002147                 db    0
                    .eh_frame:0000000000002148                 db 0B8h
                    .eh_frame:0000000000002149                 db 0EFh
                    .eh_frame:000000000000214A                 db 0FFh
                    .eh_frame:000000000000214B                 db 0FFh
                    .eh_frame:000000000000214C                 db    9
                    .eh_frame:000000000000214D                 db    1
                    .eh_frame:000000000000214E                 db    0
                    .eh_frame:000000000000214F                 db    0
                    .eh_frame:0000000000002150                 db    0
                    .eh_frame:0000000000002151                 db  46h ; F
                    .eh_frame:0000000000002152                 db  0Eh
                    .eh_frame:0000000000002153                 db  10h
                    .eh_frame:0000000000002154                 db  8Dh
                    .eh_frame:0000000000002155                 db    2
                    .eh_frame:0000000000002156                 db  42h ; B
                    .eh_frame:0000000000002157                 db  0Eh
                    .eh_frame:0000000000002158                 db  18h
                    .eh_frame:0000000000002159                 db  8Ch
                    .eh_frame:000000000000215A                 db    3
                    .eh_frame:000000000000215B                 db  48h ; H
                    .eh_frame:000000000000215C                 db  0Eh
                    .eh_frame:000000000000215D                 db  20h
                    .eh_frame:000000000000215E                 db  86h
                    .eh_frame:000000000000215F                 db    4
                    .eh_frame:0000000000002160                 db  48h ; H
                    .eh_frame:0000000000002161                 db  0Eh
                    .eh_frame:0000000000002162                 db  28h ; (
                    .eh_frame:0000000000002163                 db  83h
                    .eh_frame:0000000000002164                 db    5
                    .eh_frame:0000000000002165                 db  44h ; D
                    .eh_frame:0000000000002166                 db  0Eh
                    .eh_frame:0000000000002167                 db  80h
                    .eh_frame:0000000000002168                 db    1
                    .eh_frame:0000000000002169                 db    2
                    .eh_frame:000000000000216A                 db 0DFh
                    .eh_frame:000000000000216B                 db  0Ah
                    .eh_frame:000000000000216C                 db  0Eh
                    .eh_frame:000000000000216D                 db  28h ; (
                    .eh_frame:000000000000216E                 db  43h ; C
                    .eh_frame:000000000000216F                 db  0Eh
                    .eh_frame:0000000000002170                 db  20h
                    .eh_frame:0000000000002171                 db  41h ; A
                    .eh_frame:0000000000002172                 db  0Eh
                    .eh_frame:0000000000002173                 db  18h
                    .eh_frame:0000000000002174                 db  42h ; B
                    .eh_frame:0000000000002175                 db  0Eh
                    .eh_frame:0000000000002176                 db  10h
                    .eh_frame:0000000000002177                 db  42h ; B
                    .eh_frame:0000000000002178                 db  0Eh
                    .eh_frame:0000000000002179                 db    8
                    .eh_frame:000000000000217A                 db  41h ; A
                    .eh_frame:000000000000217B                 db  0Bh
                    .eh_frame:000000000000217C __FRAME_END__   db    0
                    .eh_frame:000000000000217D                 db    0
                    .eh_frame:000000000000217E                 db    0
                    .eh_frame:000000000000217F                 db    0
                    .eh_frame:000000000000217F _eh_frame       ends
                    .eh_frame:000000000000217F
                    .init_array:0000000000003D90 ; ELF Initialization Function Table
                    .init_array:0000000000003D90 ; ===========================================================================
                    .init_array:0000000000003D90
                    .init_array:0000000000003D90 ; Segment type: Pure data
                    .init_array:0000000000003D90 ; Segment permissions: Read/Write
                    .init_array:0000000000003D90 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003D90                 assume cs:_init_array
                    .init_array:0000000000003D90                 ;org 3D90h
                    .init_array:0000000000003D90 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003D90                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003D90                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003D90 _init_array     ends
                    .init_array:0000000000003D90
                    .fini_array:0000000000003D98 ; ELF Termination Function Table
                    .fini_array:0000000000003D98 ; ===========================================================================
                    .fini_array:0000000000003D98
                    .fini_array:0000000000003D98 ; Segment type: Pure data
                    .fini_array:0000000000003D98 ; Segment permissions: Read/Write
                    .fini_array:0000000000003D98 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003D98                 assume cs:_fini_array
                    .fini_array:0000000000003D98                 ;org 3D98h
                    .fini_array:0000000000003D98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003D98 _fini_array     ends
                    .fini_array:0000000000003D98
                    LOAD:0000000000003DA0 ; ELF Dynamic Information
                    LOAD:0000000000003DA0 ; ===========================================================================
                    LOAD:0000000000003DA0
                    LOAD:0000000000003DA0 ; Segment type: Pure data
                    LOAD:0000000000003DA0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DA0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DA0                 assume cs:LOAD
                    LOAD:0000000000003DA0                 ;org 3DA0h
                    LOAD:0000000000003DA0 _DYNAMIC        Elf64_Dyn <1, 60h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DA0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DA0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DB0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DC0                 Elf64_Dyn <0Dh, 1BC8h>  ; DT_FINI
                    LOAD:0000000000003DD0                 Elf64_Dyn <19h, 3D90h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003DE0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003DF0                 Elf64_Dyn <1Ah, 3D98h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E20                 Elf64_Dyn <5, 4F8h>     ; DT_STRTAB
                    LOAD:0000000000003E30                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E40                 Elf64_Dyn <0Ah, 0E7h>   ; DT_STRSZ
                    LOAD:0000000000003E50                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E60                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E70                 Elf64_Dyn <3, 3F90h>    ; DT_PLTGOT
                    LOAD:0000000000003E80                 Elf64_Dyn <2, 90h>      ; DT_PLTRELSZ
                    LOAD:0000000000003E90                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EA0                 Elf64_Dyn <17h, 718h>   ; DT_JMPREL
                    LOAD:0000000000003EB0                 Elf64_Dyn <7, 658h>     ; DT_RELA
                    LOAD:0000000000003EC0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003ED0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003EE0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003EF0                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F00                 Elf64_Dyn <6FFFFFFEh, 5F8h> ; DT_VERNEED
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFF0h, 5E0h> ; DT_VERSYM
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F40                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F50                 db    0
                    LOAD:0000000000003F51                 db    0
                    LOAD:0000000000003F52                 db    0
                    LOAD:0000000000003F53                 db    0
                    LOAD:0000000000003F54                 db    0
                    LOAD:0000000000003F55                 db    0
                    LOAD:0000000000003F56                 db    0
                    LOAD:0000000000003F57                 db    0
                    LOAD:0000000000003F58                 db    0
                    LOAD:0000000000003F59                 db    0
                    LOAD:0000000000003F5A                 db    0
                    LOAD:0000000000003F5B                 db    0
                    LOAD:0000000000003F5C                 db    0
                    LOAD:0000000000003F5D                 db    0
                    LOAD:0000000000003F5E                 db    0
                    LOAD:0000000000003F5F                 db    0
                    LOAD:0000000000003F60                 db    0
                    LOAD:0000000000003F61                 db    0
                    LOAD:0000000000003F62                 db    0
                    LOAD:0000000000003F63                 db    0
                    LOAD:0000000000003F64                 db    0
                    LOAD:0000000000003F65                 db    0
                    LOAD:0000000000003F66                 db    0
                    LOAD:0000000000003F67                 db    0
                    LOAD:0000000000003F68                 db    0
                    LOAD:0000000000003F69                 db    0
                    LOAD:0000000000003F6A                 db    0
                    LOAD:0000000000003F6B                 db    0
                    LOAD:0000000000003F6C                 db    0
                    LOAD:0000000000003F6D                 db    0
                    LOAD:0000000000003F6E                 db    0
                    LOAD:0000000000003F6F                 db    0
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F8F LOAD            ends
                    LOAD:0000000000003F8F
                    .got:0000000000003F90 ; ===========================================================================
                    .got:0000000000003F90
                    .got:0000000000003F90 ; Segment type: Pure data
                    .got:0000000000003F90 ; Segment permissions: Read/Write
                    .got:0000000000003F90 _got            segment qword public 'DATA' use64
                    .got:0000000000003F90                 assume cs:_got
                    .got:0000000000003F90                 ;org 3F90h
                    .got:0000000000003F90 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003F98 qword_3F98      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FA0 qword_3FA0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FA8 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
                    .got:0000000000003FB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FB0                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FB8 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk+4↑r
                    .got:0000000000003FC0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy+4↑r
                    .got:0000000000003FC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; void free(void *ptr)
                    extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
                    extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
                    extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004028                 extrn __libc_start_main:near
                    extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004030                 extrn __stack_chk_fail:near
                    extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004038                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
                    extern:0000000000004040 ; void *memcpy(void *dest, const void *src, size_t n)
                    extern:0000000000004040                 extrn memcpy:near       ; CODE XREF: _memcpy+4↑j
                    extern:0000000000004040                                         ; DATA XREF: .got:memcpy_ptr↑o
                    extern:0000000000004048 ; void *malloc(size_t size)
                    extern:0000000000004048                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
                    extern:0000000000004048                                         ; DATA XREF: .got:malloc_ptr↑o
                    extern:0000000000004050                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004050                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004058 ; int __cxa_finalize(void *)
                    extern:0000000000004058                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004058                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004058                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004060                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004060                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004068                 extrn __gmon_start__:near ; weak
                    extern:0000000000004068                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004068                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004070                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004070                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004070
                    extern:0000000000004070
                    extern:0000000000004070                 end _start
                    ```
                    
            - chatGPT IR
                - timsort.constprop.0
                    
                    ```less
                    ; ModuleID = 'timsort_constprop_0'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: timsort_constprop_0 ; Address: 0x1300
                    ; Intent: Sort 16 i32s in-place at %a (ascending, stable insertion-sort stand-in for timsort) (confidence=0.88). Evidence: fixed 16-element window (0..15), comparisons/moves, malloc(60) temp buffer typical of timsort scratch usage.
                    ; Preconditions: %a points to at least 16 contiguous i32 elements.
                    ; Postconditions: %a[0..15] is nondecreasing.
                    
                    ; Only the needed extern declarations:
                    
                    declare i8* @malloc(i64)
                    declare void @free(i8*)
                    
                    define dso_local void @timsort_constprop_0(i32* %a) local_unnamed_addr {
                    entry:
                    %buf = call i8* @malloc(i64 60)
                    %isnull = icmp eq i8* %buf, null
                    br i1 %isnull, label %ret, label %outer
                    
                    outer: ; preds = entry, %nexti
                    %i = phi i64 [ 1, entry ], [ %i.next, %nexti ]
                    %ai = getelementptr inbounds i32, i32* %a, i64 %i
                    %key = load i32, i32* %ai, align 4
                    %j0 = add i64 %i, -1
                    br label %inner
                    
                    inner: ; preds = %shift, %outer
                    %j = phi i64 [ %j0, %outer ], [ %j.next, %shift ]
                    %jneg = icmp slt i64 %j, 0
                    br i1 %jneg, label %insert, label %check
                    
                    check: ; preds = %inner
                    %ajptr = getelementptr inbounds i32, i32* %a, i64 %j
                    %aj = load i32, i32* %ajptr, align 4
                    %cmp = icmp sgt i32 %aj, %key
                    br i1 %cmp, label %shift, label %insert
                    
                    shift: ; preds = %check
                    %jp1 = add i64 %j, 1
                    %dst = getelementptr inbounds i32, i32* %a, i64 %jp1
                    store i32 %aj, i32* %dst, align 4
                    %j.next = add i64 %j, -1
                    br label %inner
                    
                    insert: ; preds = %check, %inner
                    %jp1b = add i64 %j, 1
                    %dst2 = getelementptr inbounds i32, i32* %a, i64 %jp1b
                    store i32 %key, i32* %dst2, align 4
                    %i.lt.15 = icmp ult i64 %i, 15
                    br i1 %i.lt.15, label %nexti, label %after_outer
                    
                    nexti: ; preds = %insert
                    %i.next = add i64 %i, 1
                    br label %outer
                    
                    after_outer: ; preds = %insert
                    call void @free(i8* %buf)
                    br label %ret
                    
                    ret: ; preds = %after_outer, %entry
                    ret void
                    }
                    ```
                    
                - main
    - 난독화 o
        - BFS
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "BFS",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1340",
                      "end": "0x1366",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x1370",
                      "end": "0x1399",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x13a0",
                      "end": "0x13d9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x13e0",
                      "end": "0x1419",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1420",
                      "end": "0x1429",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4058",
                      "end": "0x4060",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".malloc",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10c0",
                      "end": "0x133d",
                      "size": 637,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x142c",
                      "end": "0x1439",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "malloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 25
                user? candidates: 8
                ```
                
            - chatGPT 함수 리스트
                
                ```less
                main
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```less
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : 5759502C7FC31F9EB412DB09AA5625E2DC880A80F87C29699BA1EBB12FB61D44
                    LOAD:0000000000000000 ; Input MD5    : CD413FEC6741DDB6AAEE6E2E4F77999F
                    LOAD:0000000000000000 ; Input CRC32  : 487DD0A1
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\BFS
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'BFS.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 3728h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 718h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 718h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 439h                 ; Size in file image
                    LOAD:0000000000000110                 dq 439h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 144h                 ; Size in file image
                    LOAD:0000000000000148                 dq 144h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DA0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000178                 dq 270h                 ; Size in file image
                    LOAD:0000000000000180                 dq 278h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DB0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DB0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2038h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2038h                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DA0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DA0h                ; Physical address
                    LOAD:0000000000000300                 dq 260h                 ; Size in file image
                    LOAD:0000000000000308                 dq 260h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 61h, 0BBh, 88h, 0F5h, 6Eh, 0D6h, 0CCh, 39h, 0F8h, 0E2h ; Desc
                    LOAD:0000000000000382                 db 0A0h, 0C9h, 83h, 38h, 84h, 0A2h, 8Ah, 5Dh, 3, 0FDh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 9
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 9, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4C8, 12h, 0, 0, offset dword_0, \ ; "free"
                    LOAD:00000000000003F0                            0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4C8, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4C8, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aGmonStart - offset unk_4C8, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aMalloc - offset unk_4C8, 12h, 0, 0, offset dword_0,\ ; "malloc"
                    LOAD:0000000000000468                            0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aPrintfChk - offset unk_4C8, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498                 Elf64_Sym <offset aItmRegistertmc - offset unk_4C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000498                            offset dword_0, 0>
                    LOAD:00000000000004B0                 Elf64_Sym <offset aCxaFinalize - offset unk_4C8, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:00000000000004B0                            offset dword_0, 0>
                    LOAD:00000000000004C8 ; ELF String Table
                    LOAD:00000000000004C8 unk_4C8         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C8                                         ; LOAD:0000000000000408↑o ...
                    LOAD:00000000000004C9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004B0↑o
                    LOAD:00000000000004D8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004E5 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:00000000000004EC aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004EC                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:00000000000004FE aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000503 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:0000000000000514 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000051E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000005B8↓o
                    LOAD:000000000000052A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000005C8↓o
                    LOAD:0000000000000534 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005D8↓o
                    LOAD:000000000000053F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000005E8↓o
                    LOAD:000000000000054B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000054B                                         ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:0000000000000567 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:0000000000000576 aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:0000000000000576                                         ; DATA XREF: LOAD:0000000000000498↑o
                    LOAD:0000000000000590 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000590                 dw 0
                    LOAD:0000000000000592                 dw 2                    ; free@@GLIBC_2.2.5
                    LOAD:0000000000000594                 dw 3                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000596                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:0000000000000598                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000059A                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000059C                 dw 2                    ; malloc@@GLIBC_2.2.5
                    LOAD:000000000000059E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:00000000000005A0                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:00000000000005A2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:00000000000005A4                 dw 0
                    LOAD:00000000000005A6                 dw 0
                    LOAD:00000000000005A8 ; ELF GNU Symbol Version Requirements
                    LOAD:00000000000005A8                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_4C8, 10h, 0> ; "libc.so.6"
                    LOAD:00000000000005B8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4C8, 10h> ; "GLIBC_2.3.4"
                    LOAD:00000000000005C8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4C8, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005D8                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4C8, \ ; "GLIBC_2.34"
                    LOAD:00000000000005D8                                10h>
                    LOAD:00000000000005E8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4C8, 0> ; "GLIBC_2.2.5"
                    LOAD:00000000000005F8 ; ELF RELA Relocation Table
                    LOAD:00000000000005F8                 Elf64_Rela <3DA0h, 8, 1420h> ; R_X86_64_RELATIVE +1420h
                    LOAD:0000000000000610                 Elf64_Rela <3DA8h, 8, 13E0h> ; R_X86_64_RELATIVE +13E0h
                    LOAD:0000000000000628                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000640                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000658                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000670                 Elf64_Rela <3FE8h, 500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000688                 Elf64_Rela <3FF0h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:00000000000006A0                 Elf64_Rela <3FF8h, 900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:00000000000006B8 ; ELF JMPREL Relocation Table
                    LOAD:00000000000006B8                 Elf64_Rela <3FB8h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
                    LOAD:00000000000006D0                 Elf64_Rela <3FC0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:00000000000006E8                 Elf64_Rela <3FC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT malloc
                    LOAD:0000000000000700                 Elf64_Rela <3FD0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000700 LOAD            ends
                    LOAD:0000000000000700
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j ...
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FA8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FB0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
                    .plt:000000000000105F                 align 20h
                    .plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
                    .plt:000000000000106F                 align 10h
                    .plt:000000000000106F ; } // starts at 1020
                    .plt:000000000000106F _plt            ends
                    .plt:000000000000106F
                    .plt.got:0000000000001070 ; ===========================================================================
                    .plt.got:0000000000001070
                    .plt.got:0000000000001070 ; Segment type: Pure code
                    .plt.got:0000000000001070 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001070 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001070                 assume cs:_plt_got
                    .plt.got:0000000000001070                 ;org 1070h
                    .plt.got:0000000000001070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000107B                 align 20h
                    .plt.got:000000000000107B ; } // starts at 1070
                    .plt.got:000000000000107B _plt_got        ends
                    .plt.got:000000000000107B
                    .plt.sec:0000000000001080 ; ===========================================================================
                    .plt.sec:0000000000001080
                    .plt.sec:0000000000001080 ; Segment type: Pure code
                    .plt.sec:0000000000001080 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001080 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001080                 assume cs:_plt_sec
                    .plt.sec:0000000000001080                 ;org 1080h
                    .plt.sec:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001080 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
                    .plt.sec:000000000000108B                 align 10h
                    .plt.sec:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000109B                 align 20h
                    .plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
                    .plt.sec:00000000000010AB                 align 10h
                    .plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:00000000000010BB                 align 20h
                    .plt.sec:00000000000010BB ; } // starts at 1080
                    .plt.sec:00000000000010BB _plt_sec        ends
                    .plt.sec:00000000000010BB
                    .text:00000000000010C0 ; ===========================================================================
                    .text:00000000000010C0
                    .text:00000000000010C0 ; Segment type: Pure code
                    .text:00000000000010C0 ; Segment permissions: Read/Execute
                    .text:00000000000010C0 _text           segment para public 'CODE' use64
                    .text:00000000000010C0                 assume cs:_text
                    .text:00000000000010C0                 ;org 10C0h
                    .text:00000000000010C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:00000000000010C0
                    .text:00000000000010C0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000010C0
                    .text:00000000000010C0
                    .text:00000000000010C0 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:00000000000010C0                 public main
                    .text:00000000000010C0 main            proc near               ; DATA XREF: _start+18↓o
                    .text:00000000000010C0
                    .text:00000000000010C0 var_158         = xmmword ptr -158h
                    .text:00000000000010C0 var_148         = qword ptr -148h
                    .text:00000000000010C0 var_140         = dword ptr -140h
                    .text:00000000000010C0 var_138         = byte ptr -138h
                    .text:00000000000010C0 var_F8          = dword ptr -0F8h
                    .text:00000000000010C0 var_F4          = qword ptr -0F4h
                    .text:00000000000010C0 var_DC          = dword ptr -0DCh
                    .text:00000000000010C0 var_D0          = qword ptr -0D0h
                    .text:00000000000010C0 var_C0          = dword ptr -0C0h
                    .text:00000000000010C0 var_AC          = dword ptr -0ACh
                    .text:00000000000010C0 var_A0          = dword ptr -0A0h
                    .text:00000000000010C0 var_84          = dword ptr -84h
                    .text:00000000000010C0 var_74          = dword ptr -74h
                    .text:00000000000010C0 var_64          = dword ptr -64h
                    .text:00000000000010C0 var_5C          = dword ptr -5Ch
                    .text:00000000000010C0 var_54          = dword ptr -54h
                    .text:00000000000010C0 var_3C          = dword ptr -3Ch
                    .text:00000000000010C0 var_30          = qword ptr -30h
                    .text:00000000000010C0
                    .text:00000000000010C0 ; __unwind {
                    .text:00000000000010C0                 endbr64
                    .text:00000000000010C4                 push    r14
                    .text:00000000000010C6                 mov     ecx, 18h
                    .text:00000000000010CB                 pcmpeqd xmm0, xmm0
                    .text:00000000000010CF                 push    r13
                    .text:00000000000010D1                 push    r12
                    .text:00000000000010D3                 push    rbp
                    .text:00000000000010D4                 push    rbx
                    .text:00000000000010D5                 sub     rsp, 130h
                    .text:00000000000010DC                 mov     rax, fs:28h
                    .text:00000000000010E5                 mov     [rsp+158h+var_30], rax
                    .text:00000000000010ED                 xor     eax, eax
                    .text:00000000000010EF                 lea     r13, [rsp+158h+var_F8]
                    .text:00000000000010F4                 mov     [rsp+158h+var_140], 0FFFFFFFFh
                    .text:00000000000010FC                 mov     rdi, r13
                    .text:00000000000010FF                 movaps  [rsp+158h+var_158], xmm0
                    .text:0000000000001103                 mov     [rsp+158h+var_148], 0FFFFFFFFFFFFFFFFh
                    .text:000000000000110C                 rep stosq
                    .text:000000000000110F                 mov     [rsp+158h+var_DC], 1
                    .text:0000000000001117                 mov     rax, 100000001h
                    .text:0000000000001121                 mov     [rsp+158h+var_F4], rax
                    .text:0000000000001126                 mov     [rsp+158h+var_D0], rax
                    .text:000000000000112E                 mov     [rsp+158h+var_C0], 1
                    .text:0000000000001139                 mov     [rsp+158h+var_AC], 1
                    .text:0000000000001144                 mov     [rsp+158h+var_A0], 1
                    .text:000000000000114F                 mov     dword ptr [rdi], 0
                    .text:0000000000001155                 mov     edi, 38h ; '8'  ; size
                    .text:000000000000115A                 mov     [rsp+158h+var_84], 1
                    .text:0000000000001165                 mov     [rsp+158h+var_74], 1
                    .text:0000000000001170                 mov     [rsp+158h+var_64], 1
                    .text:000000000000117B                 mov     [rsp+158h+var_5C], 1
                    .text:0000000000001186                 mov     [rsp+158h+var_54], 1
                    .text:0000000000001191                 mov     [rsp+158h+var_3C], 1
                    .text:000000000000119C                 call    _malloc
                    .text:00000000000011A1                 test    rax, rax
                    .text:00000000000011A4                 jz      loc_131B
                    .text:00000000000011AA                 mov     dword ptr [rsp+158h+var_158], 0
                    .text:00000000000011B1                 mov     rdi, rax        ; ptr
                    .text:00000000000011B4                 xor     edx, edx
                    .text:00000000000011B6                 xor     ebp, ebp
                    .text:00000000000011B8                 mov     qword ptr [rax], 0
                    .text:00000000000011BF                 mov     esi, 1
                    .text:00000000000011C4                 xor     eax, eax
                    .text:00000000000011C6                 lea     r12, [rsp+158h+var_138]
                    .text:00000000000011CB                 mov     rbx, rsp
                    .text:00000000000011CE                 xchg    ax, ax
                    .text:00000000000011D0
                    .text:00000000000011D0 loc_11D0:                               ; CODE XREF: main+182↓j
                    .text:00000000000011D0                 lea     rcx, ds:0[rax*8]
                    .text:00000000000011D8                 add     rbp, 1
                    .text:00000000000011DC                 lea     r8, [rbx+rax*4]
                    .text:00000000000011E0                 sub     rcx, rax
                    .text:00000000000011E3                 mov     [r12+rbp*8-8], rax
                    .text:00000000000011E8                 xor     eax, eax
                    .text:00000000000011EA                 lea     rcx, [r13+rcx*4+0]
                    .text:00000000000011EF                 jmp     short loc_11FB
                    .text:00000000000011EF ; ---------------------------------------------------------------------------
                    .text:00000000000011F1                 align 8
                    .text:00000000000011F8
                    .text:00000000000011F8 loc_11F8:                               ; CODE XREF: main+168↓j
                    .text:00000000000011F8                 mov     edx, [rcx+rax*4]
                    .text:00000000000011FB
                    .text:00000000000011FB loc_11FB:                               ; CODE XREF: main+12F↑j
                    .text:00000000000011FB                 test    edx, edx
                    .text:00000000000011FD                 jz      short loc_1220
                    .text:00000000000011FF                 cmp     dword ptr [rbx+rax*4], 0FFFFFFFFh
                    .text:0000000000001203                 jnz     short loc_1220
                    .text:0000000000001205                 mov     edx, [r8]
                    .text:0000000000001208                 mov     [rdi+rsi*8], rax
                    .text:000000000000120C                 add     rsi, 1
                    .text:0000000000001210                 add     edx, 1
                    .text:0000000000001213                 mov     [rbx+rax*4], edx
                    .text:0000000000001216                 db      2Eh
                    .text:0000000000001216                 nop     word ptr [rax+rax+00000000h]
                    .text:0000000000001220
                    .text:0000000000001220 loc_1220:                               ; CODE XREF: main+13D↑j
                    .text:0000000000001220                                         ; main+143↑j
                    .text:0000000000001220                 add     rax, 1
                    .text:0000000000001224                 cmp     rax, 7
                    .text:0000000000001228                 jnz     short loc_11F8
                    .text:000000000000122A                 cmp     rbp, rsi
                    .text:000000000000122D                 jnb     short loc_1248
                    .text:000000000000122F                 mov     rax, [rdi+rbp*8]
                    .text:0000000000001233                 lea     rdx, ds:0[rax*8]
                    .text:000000000000123B                 sub     rdx, rax
                    .text:000000000000123E                 mov     edx, [rsp+rdx*4+158h+var_F8]
                    .text:0000000000001242                 jmp     short loc_11D0
                    .text:0000000000001242 ; ---------------------------------------------------------------------------
                    .text:0000000000001244                 align 8
                    .text:0000000000001248
                    .text:0000000000001248 loc_1248:                               ; CODE XREF: main+16D↑j
                    .text:0000000000001248                 call    _free
                    .text:000000000000124D                 xor     edx, edx
                    .text:000000000000124F                 mov     edi, 1
                    .text:0000000000001254                 xor     eax, eax
                    .text:0000000000001256                 lea     rsi, aBfsOrderFromZu ; "BFS order from %zu: "
                    .text:000000000000125D                 lea     rbp, [rsp+rbp*8+158h+var_140]
                    .text:0000000000001262                 call    ___printf_chk
                    .text:0000000000001267                 lea     r13, aZuS       ; "%zu%s"
                    .text:000000000000126E                 lea     r14, aBfsOrderFromZu+13h ; " "
                    .text:0000000000001275
                    .text:0000000000001275 loc_1275:                               ; CODE XREF: main+256↓j
                    .text:0000000000001275                 mov     rdx, [r12]
                    .text:0000000000001279                 cmp     rbp, r12
                    .text:000000000000127C                 jnz     loc_1300
                    .text:0000000000001282                 lea     rcx, aDistZuZuD+16h ; ""
                    .text:0000000000001289                 mov     rsi, r13
                    .text:000000000000128C                 mov     edi, 1
                    .text:0000000000001291                 xor     eax, eax
                    .text:0000000000001293                 call    ___printf_chk
                    .text:0000000000001298
                    .text:0000000000001298 loc_1298:                               ; CODE XREF: main+273↓j
                    .text:0000000000001298                 lea     rsi, aDistZuZuD+15h ; "\n"
                    .text:000000000000129F                 mov     edi, 1
                    .text:00000000000012A4                 xor     eax, eax
                    .text:00000000000012A6                 xor     ebp, ebp
                    .text:00000000000012A8                 call    ___printf_chk
                    .text:00000000000012AD                 lea     r12, aDistZuZuD ; "dist(%zu -> %zu) = %d\n"
                    .text:00000000000012B4                 nop     dword ptr [rax+00h]
                    .text:00000000000012B8
                    .text:00000000000012B8 loc_12B8:                               ; CODE XREF: main+218↓j
                    .text:00000000000012B8                 mov     r8d, [rbx+rbp*4]
                    .text:00000000000012BC                 mov     rcx, rbp
                    .text:00000000000012BF                 xor     edx, edx
                    .text:00000000000012C1                 mov     rsi, r12
                    .text:00000000000012C4                 mov     edi, 1
                    .text:00000000000012C9                 xor     eax, eax
                    .text:00000000000012CB                 add     rbp, 1
                    .text:00000000000012CF                 call    ___printf_chk
                    .text:00000000000012D4                 cmp     rbp, 7
                    .text:00000000000012D8                 jnz     short loc_12B8
                    .text:00000000000012DA                 mov     rax, [rsp+158h+var_30]
                    .text:00000000000012E2                 sub     rax, fs:28h
                    .text:00000000000012EB                 jnz     short loc_1338
                    .text:00000000000012ED                 add     rsp, 130h
                    .text:00000000000012F4                 xor     eax, eax
                    .text:00000000000012F6                 pop     rbx
                    .text:00000000000012F7                 pop     rbp
                    .text:00000000000012F8                 pop     r12
                    .text:00000000000012FA                 pop     r13
                    .text:00000000000012FC                 pop     r14
                    .text:00000000000012FE                 retn
                    .text:00000000000012FE ; ---------------------------------------------------------------------------
                    .text:00000000000012FF                 align 20h
                    .text:0000000000001300
                    .text:0000000000001300 loc_1300:                               ; CODE XREF: main+1BC↑j
                    .text:0000000000001300                 mov     rcx, r14
                    .text:0000000000001303                 mov     rsi, r13
                    .text:0000000000001306                 mov     edi, 1
                    .text:000000000000130B                 xor     eax, eax
                    .text:000000000000130D                 call    ___printf_chk
                    .text:0000000000001312                 add     r12, 8
                    .text:0000000000001316                 jmp     loc_1275
                    .text:000000000000131B ; ---------------------------------------------------------------------------
                    .text:000000000000131B
                    .text:000000000000131B loc_131B:                               ; CODE XREF: main+E4↑j
                    .text:000000000000131B                 xor     edx, edx
                    .text:000000000000131D                 lea     rsi, aBfsOrderFromZu ; "BFS order from %zu: "
                    .text:0000000000001324                 mov     edi, 1
                    .text:0000000000001329                 xor     eax, eax
                    .text:000000000000132B                 call    ___printf_chk
                    .text:0000000000001330                 mov     rbx, rsp
                    .text:0000000000001333                 jmp     loc_1298
                    .text:0000000000001338 ; ---------------------------------------------------------------------------
                    .text:0000000000001338
                    .text:0000000000001338 loc_1338:                               ; CODE XREF: main+22B↑j
                    .text:0000000000001338                 call    ___stack_chk_fail
                    .text:0000000000001338 ; } // starts at 10C0
                    .text:0000000000001338 main            endp
                    .text:0000000000001338
                    .text:0000000000001338 ; ---------------------------------------------------------------------------
                    .text:000000000000133D                 align 20h
                    .text:0000000000001340
                    .text:0000000000001340 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001340
                    .text:0000000000001340 ; Attributes: noreturn fuzzy-sp
                    .text:0000000000001340
                    .text:0000000000001340                 public _start
                    .text:0000000000001340 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:0000000000001340 ; __unwind {
                    .text:0000000000001340                 endbr64
                    .text:0000000000001344                 xor     ebp, ebp
                    .text:0000000000001346                 mov     r9, rdx         ; rtld_fini
                    .text:0000000000001349                 pop     rsi             ; argc
                    .text:000000000000134A                 mov     rdx, rsp        ; ubp_av
                    .text:000000000000134D                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:0000000000001351                 push    rax
                    .text:0000000000001352                 push    rsp             ; stack_end
                    .text:0000000000001353                 xor     r8d, r8d        ; fini
                    .text:0000000000001356                 xor     ecx, ecx        ; init
                    .text:0000000000001358                 lea     rdi, main       ; main
                    .text:000000000000135F                 call    cs:__libc_start_main_ptr
                    .text:0000000000001365                 hlt
                    .text:0000000000001365 ; } // starts at 1340
                    .text:0000000000001365 _start          endp
                    .text:0000000000001365
                    .text:0000000000001365 ; ---------------------------------------------------------------------------
                    .text:0000000000001366                 align 10h
                    .text:0000000000001370
                    .text:0000000000001370 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001370
                    .text:0000000000001370
                    .text:0000000000001370 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1407↓p
                    .text:0000000000001370                 lea     rdi, __bss_start
                    .text:0000000000001377                 lea     rax, __bss_start
                    .text:000000000000137E                 cmp     rax, rdi
                    .text:0000000000001381                 jz      short locret_1398
                    .text:0000000000001383                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:000000000000138A                 test    rax, rax
                    .text:000000000000138D                 jz      short locret_1398
                    .text:000000000000138F                 jmp     rax
                    .text:000000000000138F ; ---------------------------------------------------------------------------
                    .text:0000000000001391                 align 8
                    .text:0000000000001398
                    .text:0000000000001398 locret_1398:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:0000000000001398                                         ; deregister_tm_clones+1D↑j
                    .text:0000000000001398                 retn
                    .text:0000000000001398 deregister_tm_clones endp
                    .text:0000000000001398
                    .text:0000000000001398 ; ---------------------------------------------------------------------------
                    .text:0000000000001399                 align 20h
                    .text:00000000000013A0
                    .text:00000000000013A0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000013A0
                    .text:00000000000013A0
                    .text:00000000000013A0 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:00000000000013A0                 lea     rdi, __bss_start
                    .text:00000000000013A7                 lea     rsi, __bss_start
                    .text:00000000000013AE                 sub     rsi, rdi
                    .text:00000000000013B1                 mov     rax, rsi
                    .text:00000000000013B4                 shr     rsi, 3Fh
                    .text:00000000000013B8                 sar     rax, 3
                    .text:00000000000013BC                 add     rsi, rax
                    .text:00000000000013BF                 sar     rsi, 1
                    .text:00000000000013C2                 jz      short locret_13D8
                    .text:00000000000013C4                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:00000000000013CB                 test    rax, rax
                    .text:00000000000013CE                 jz      short locret_13D8
                    .text:00000000000013D0                 jmp     rax
                    .text:00000000000013D0 ; ---------------------------------------------------------------------------
                    .text:00000000000013D2                 align 8
                    .text:00000000000013D8
                    .text:00000000000013D8 locret_13D8:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:00000000000013D8                                         ; register_tm_clones+2E↑j
                    .text:00000000000013D8                 retn
                    .text:00000000000013D8 register_tm_clones endp
                    .text:00000000000013D8
                    .text:00000000000013D8 ; ---------------------------------------------------------------------------
                    .text:00000000000013D9                 align 20h
                    .text:00000000000013E0
                    .text:00000000000013E0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000013E0
                    .text:00000000000013E0
                    .text:00000000000013E0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:00000000000013E0                 endbr64
                    .text:00000000000013E4                 cmp     cs:__bss_start, 0
                    .text:00000000000013EB                 jnz     short locret_1418
                    .text:00000000000013ED                 push    rbp
                    .text:00000000000013EE                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:00000000000013F6                 mov     rbp, rsp
                    .text:00000000000013F9                 jz      short loc_1407
                    .text:00000000000013FB                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001402                 call    __cxa_finalize
                    .text:0000000000001407
                    .text:0000000000001407 loc_1407:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001407                 call    deregister_tm_clones
                    .text:000000000000140C                 mov     cs:__bss_start, 1
                    .text:0000000000001413                 pop     rbp
                    .text:0000000000001414                 retn
                    .text:0000000000001414 ; ---------------------------------------------------------------------------
                    .text:0000000000001415                 align 8
                    .text:0000000000001418
                    .text:0000000000001418 locret_1418:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001418                 retn
                    .text:0000000000001418 __do_global_dtors_aux endp
                    .text:0000000000001418
                    .text:0000000000001418 ; ---------------------------------------------------------------------------
                    .text:0000000000001419                 align 20h
                    .text:0000000000001420
                    .text:0000000000001420 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001420
                    .text:0000000000001420
                    .text:0000000000001420 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001420                 endbr64
                    .text:0000000000001424                 jmp     register_tm_clones
                    .text:0000000000001424 frame_dummy     endp
                    .text:0000000000001424
                    .text:0000000000001424 _text           ends
                    .text:0000000000001424
                    LOAD:0000000000001429 ; ===========================================================================
                    LOAD:0000000000001429
                    LOAD:0000000000001429 ; Segment type: Pure code
                    LOAD:0000000000001429 ; Segment permissions: Read/Execute
                    LOAD:0000000000001429 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001429                 assume cs:LOAD
                    LOAD:0000000000001429                 ;org 1429h
                    LOAD:0000000000001429                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001429                 align 4
                    LOAD:0000000000001429 LOAD            ends
                    LOAD:0000000000001429
                    .fini:000000000000142C ; ===========================================================================
                    .fini:000000000000142C
                    .fini:000000000000142C ; Segment type: Pure code
                    .fini:000000000000142C ; Segment permissions: Read/Execute
                    .fini:000000000000142C _fini           segment dword public 'CODE' use64
                    .fini:000000000000142C                 assume cs:_fini
                    .fini:000000000000142C                 ;org 142Ch
                    .fini:000000000000142C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000142C
                    .fini:000000000000142C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000142C
                    .fini:000000000000142C
                    .fini:000000000000142C                 public _term_proc
                    .fini:000000000000142C _term_proc      proc near
                    .fini:000000000000142C                 endbr64                 ; _fini
                    .fini:0000000000001430                 sub     rsp, 8
                    .fini:0000000000001434                 add     rsp, 8
                    .fini:0000000000001438                 retn
                    .fini:0000000000001438 _term_proc      endp
                    .fini:0000000000001438
                    .fini:0000000000001438 _fini           ends
                    .fini:0000000000001438
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 aBfsOrderFromZu db 'BFS order from %zu: ',0
                    .rodata:0000000000002004                                         ; DATA XREF: main+196↑o
                    .rodata:0000000000002004                                         ; main+25D↑o
                    .rodata:0000000000002019 aDistZuZuD      db 'dist(%zu -> %zu) = %d',0Ah,0
                    .rodata:0000000000002019                                         ; DATA XREF: main+1ED↑o
                    .rodata:0000000000002030 aZuS            db '%zu%s',0            ; DATA XREF: main+1A7↑o
                    .rodata:0000000000002030 _rodata         ends
                    .rodata:0000000000002030
                    LOAD:0000000000002036 ; ===========================================================================
                    LOAD:0000000000002036
                    LOAD:0000000000002036 ; Segment type: Pure data
                    LOAD:0000000000002036 ; Segment permissions: Read
                    LOAD:0000000000002036 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000002036                 assume cs:LOAD
                    LOAD:0000000000002036                 ;org 2036h
                    LOAD:0000000000002036                 align 8
                    LOAD:0000000000002036 LOAD            ends
                    LOAD:0000000000002036
                    .eh_frame_hdr:0000000000002038 ; ===========================================================================
                    .eh_frame_hdr:0000000000002038
                    .eh_frame_hdr:0000000000002038 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002038 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002038 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002038                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002038                 ;org 2038h
                    .eh_frame_hdr:0000000000002038 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002039                 db  1Bh
                    .eh_frame_hdr:000000000000203A                 db    3
                    .eh_frame_hdr:000000000000203B                 db  3Bh ; ;
                    .eh_frame_hdr:000000000000203C                 db  34h ; 4
                    .eh_frame_hdr:000000000000203D                 db    0
                    .eh_frame_hdr:000000000000203E                 db    0
                    .eh_frame_hdr:000000000000203F                 db    0
                    .eh_frame_hdr:0000000000002040                 db    5
                    .eh_frame_hdr:0000000000002041                 db    0
                    .eh_frame_hdr:0000000000002042                 db    0
                    .eh_frame_hdr:0000000000002043                 db    0
                    .eh_frame_hdr:0000000000002044                 db 0E8h
                    .eh_frame_hdr:0000000000002045                 db 0EFh
                    .eh_frame_hdr:0000000000002046                 db 0FFh
                    .eh_frame_hdr:0000000000002047                 db 0FFh
                    .eh_frame_hdr:0000000000002048                 db  68h ; h
                    .eh_frame_hdr:0000000000002049                 db    0
                    .eh_frame_hdr:000000000000204A                 db    0
                    .eh_frame_hdr:000000000000204B                 db    0
                    .eh_frame_hdr:000000000000204C                 db  38h ; 8
                    .eh_frame_hdr:000000000000204D                 db 0F0h
                    .eh_frame_hdr:000000000000204E                 db 0FFh
                    .eh_frame_hdr:000000000000204F                 db 0FFh
                    .eh_frame_hdr:0000000000002050                 db  90h
                    .eh_frame_hdr:0000000000002051                 db    0
                    .eh_frame_hdr:0000000000002052                 db    0
                    .eh_frame_hdr:0000000000002053                 db    0
                    .eh_frame_hdr:0000000000002054                 db  48h ; H
                    .eh_frame_hdr:0000000000002055                 db 0F0h
                    .eh_frame_hdr:0000000000002056                 db 0FFh
                    .eh_frame_hdr:0000000000002057                 db 0FFh
                    .eh_frame_hdr:0000000000002058                 db 0A8h
                    .eh_frame_hdr:0000000000002059                 db    0
                    .eh_frame_hdr:000000000000205A                 db    0
                    .eh_frame_hdr:000000000000205B                 db    0
                    .eh_frame_hdr:000000000000205C                 db  88h
                    .eh_frame_hdr:000000000000205D                 db 0F0h
                    .eh_frame_hdr:000000000000205E                 db 0FFh
                    .eh_frame_hdr:000000000000205F                 db 0FFh
                    .eh_frame_hdr:0000000000002060                 db 0C0h
                    .eh_frame_hdr:0000000000002061                 db    0
                    .eh_frame_hdr:0000000000002062                 db    0
                    .eh_frame_hdr:0000000000002063                 db    0
                    .eh_frame_hdr:0000000000002064                 db    8
                    .eh_frame_hdr:0000000000002065                 db 0F3h
                    .eh_frame_hdr:0000000000002066                 db 0FFh
                    .eh_frame_hdr:0000000000002067                 db 0FFh
                    .eh_frame_hdr:0000000000002068                 db  50h ; P
                    .eh_frame_hdr:0000000000002069                 db    0
                    .eh_frame_hdr:000000000000206A                 db    0
                    .eh_frame_hdr:000000000000206B                 db    0
                    .eh_frame_hdr:000000000000206B _eh_frame_hdr   ends
                    .eh_frame_hdr:000000000000206B
                    LOAD:000000000000206C ; ===========================================================================
                    LOAD:000000000000206C
                    LOAD:000000000000206C ; Segment type: Pure data
                    LOAD:000000000000206C ; Segment permissions: Read
                    LOAD:000000000000206C LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000206C                 assume cs:LOAD
                    LOAD:000000000000206C                 ;org 206Ch
                    LOAD:000000000000206C                 align 10h
                    LOAD:000000000000206C LOAD            ends
                    LOAD:000000000000206C
                    .eh_frame:0000000000002070 ; ===========================================================================
                    .eh_frame:0000000000002070
                    .eh_frame:0000000000002070 ; Segment type: Pure data
                    .eh_frame:0000000000002070 ; Segment permissions: Read
                    .eh_frame:0000000000002070 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002070                 assume cs:_eh_frame
                    .eh_frame:0000000000002070                 ;org 2070h
                    .eh_frame:0000000000002070                 db  14h
                    .eh_frame:0000000000002071                 db    0
                    .eh_frame:0000000000002072                 db    0
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db    0
                    .eh_frame:0000000000002075                 db    0
                    .eh_frame:0000000000002076                 db    0
                    .eh_frame:0000000000002077                 db    0
                    .eh_frame:0000000000002078                 db    1
                    .eh_frame:0000000000002079                 db  7Ah ; z
                    .eh_frame:000000000000207A                 db  52h ; R
                    .eh_frame:000000000000207B                 db    0
                    .eh_frame:000000000000207C                 db    1
                    .eh_frame:000000000000207D                 db  78h ; x
                    .eh_frame:000000000000207E                 db  10h
                    .eh_frame:000000000000207F                 db    1
                    .eh_frame:0000000000002080                 db  1Bh
                    .eh_frame:0000000000002081                 db  0Ch
                    .eh_frame:0000000000002082                 db    7
                    .eh_frame:0000000000002083                 db    8
                    .eh_frame:0000000000002084                 db  90h
                    .eh_frame:0000000000002085                 db    1
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db  14h
                    .eh_frame:0000000000002089                 db    0
                    .eh_frame:000000000000208A                 db    0
                    .eh_frame:000000000000208B                 db    0
                    .eh_frame:000000000000208C                 db  1Ch
                    .eh_frame:000000000000208D                 db    0
                    .eh_frame:000000000000208E                 db    0
                    .eh_frame:000000000000208F                 db    0
                    .eh_frame:0000000000002090                 db 0B0h
                    .eh_frame:0000000000002091                 db 0F2h
                    .eh_frame:0000000000002092                 db 0FFh
                    .eh_frame:0000000000002093                 db 0FFh
                    .eh_frame:0000000000002094                 db  26h ; &
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db    0
                    .eh_frame:0000000000002099                 db  44h ; D
                    .eh_frame:000000000000209A                 db    7
                    .eh_frame:000000000000209B                 db  10h
                    .eh_frame:000000000000209C                 db    0
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db  24h ; $
                    .eh_frame:00000000000020A1                 db    0
                    .eh_frame:00000000000020A2                 db    0
                    .eh_frame:00000000000020A3                 db    0
                    .eh_frame:00000000000020A4                 db  34h ; 4
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db  78h ; x
                    .eh_frame:00000000000020A9                 db 0EFh
                    .eh_frame:00000000000020AA                 db 0FFh
                    .eh_frame:00000000000020AB                 db 0FFh
                    .eh_frame:00000000000020AC                 db  50h ; P
                    .eh_frame:00000000000020AD                 db    0
                    .eh_frame:00000000000020AE                 db    0
                    .eh_frame:00000000000020AF                 db    0
                    .eh_frame:00000000000020B0                 db    0
                    .eh_frame:00000000000020B1                 db  0Eh
                    .eh_frame:00000000000020B2                 db  10h
                    .eh_frame:00000000000020B3                 db  46h ; F
                    .eh_frame:00000000000020B4                 db  0Eh
                    .eh_frame:00000000000020B5                 db  18h
                    .eh_frame:00000000000020B6                 db  4Ah ; J
                    .eh_frame:00000000000020B7                 db  0Fh
                    .eh_frame:00000000000020B8                 db  0Bh
                    .eh_frame:00000000000020B9                 db  77h ; w
                    .eh_frame:00000000000020BA                 db    8
                    .eh_frame:00000000000020BB                 db  80h
                    .eh_frame:00000000000020BC                 db    0
                    .eh_frame:00000000000020BD                 db  3Fh ; ?
                    .eh_frame:00000000000020BE                 db  1Ah
                    .eh_frame:00000000000020BF                 db  3Ah ; :
                    .eh_frame:00000000000020C0                 db  2Ah ; *
                    .eh_frame:00000000000020C1                 db  33h ; 3
                    .eh_frame:00000000000020C2                 db  24h ; $
                    .eh_frame:00000000000020C3                 db  22h ; "
                    .eh_frame:00000000000020C4                 db    0
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  14h
                    .eh_frame:00000000000020C9                 db    0
                    .eh_frame:00000000000020CA                 db    0
                    .eh_frame:00000000000020CB                 db    0
                    .eh_frame:00000000000020CC                 db  5Ch ; \
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db 0A0h
                    .eh_frame:00000000000020D1                 db 0EFh
                    .eh_frame:00000000000020D2                 db 0FFh
                    .eh_frame:00000000000020D3                 db 0FFh
                    .eh_frame:00000000000020D4                 db  10h
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db    0
                    .eh_frame:00000000000020D9                 db    0
                    .eh_frame:00000000000020DA                 db    0
                    .eh_frame:00000000000020DB                 db    0
                    .eh_frame:00000000000020DC                 db    0
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db  14h
                    .eh_frame:00000000000020E1                 db    0
                    .eh_frame:00000000000020E2                 db    0
                    .eh_frame:00000000000020E3                 db    0
                    .eh_frame:00000000000020E4                 db  74h ; t
                    .eh_frame:00000000000020E5                 db    0
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db  98h
                    .eh_frame:00000000000020E9                 db 0EFh
                    .eh_frame:00000000000020EA                 db 0FFh
                    .eh_frame:00000000000020EB                 db 0FFh
                    .eh_frame:00000000000020EC                 db  40h ; @
                    .eh_frame:00000000000020ED                 db    0
                    .eh_frame:00000000000020EE                 db    0
                    .eh_frame:00000000000020EF                 db    0
                    .eh_frame:00000000000020F0                 db    0
                    .eh_frame:00000000000020F1                 db    0
                    .eh_frame:00000000000020F2                 db    0
                    .eh_frame:00000000000020F3                 db    0
                    .eh_frame:00000000000020F4                 db    0
                    .eh_frame:00000000000020F5                 db    0
                    .eh_frame:00000000000020F6                 db    0
                    .eh_frame:00000000000020F7                 db    0
                    .eh_frame:00000000000020F8                 db  44h ; D
                    .eh_frame:00000000000020F9                 db    0
                    .eh_frame:00000000000020FA                 db    0
                    .eh_frame:00000000000020FB                 db    0
                    .eh_frame:00000000000020FC                 db  8Ch
                    .eh_frame:00000000000020FD                 db    0
                    .eh_frame:00000000000020FE                 db    0
                    .eh_frame:00000000000020FF                 db    0
                    .eh_frame:0000000000002100                 db 0C0h
                    .eh_frame:0000000000002101                 db 0EFh
                    .eh_frame:0000000000002102                 db 0FFh
                    .eh_frame:0000000000002103                 db 0FFh
                    .eh_frame:0000000000002104                 db  7Dh ; }
                    .eh_frame:0000000000002105                 db    2
                    .eh_frame:0000000000002106                 db    0
                    .eh_frame:0000000000002107                 db    0
                    .eh_frame:0000000000002108                 db    0
                    .eh_frame:0000000000002109                 db  46h ; F
                    .eh_frame:000000000000210A                 db  0Eh
                    .eh_frame:000000000000210B                 db  10h
                    .eh_frame:000000000000210C                 db  8Eh
                    .eh_frame:000000000000210D                 db    2
                    .eh_frame:000000000000210E                 db  4Bh ; K
                    .eh_frame:000000000000210F                 db  0Eh
                    .eh_frame:0000000000002110                 db  18h
                    .eh_frame:0000000000002111                 db  8Dh
                    .eh_frame:0000000000002112                 db    3
                    .eh_frame:0000000000002113                 db  42h ; B
                    .eh_frame:0000000000002114                 db  0Eh
                    .eh_frame:0000000000002115                 db  20h
                    .eh_frame:0000000000002116                 db  8Ch
                    .eh_frame:0000000000002117                 db    4
                    .eh_frame:0000000000002118                 db  41h ; A
                    .eh_frame:0000000000002119                 db  0Eh
                    .eh_frame:000000000000211A                 db  28h ; (
                    .eh_frame:000000000000211B                 db  86h
                    .eh_frame:000000000000211C                 db    5
                    .eh_frame:000000000000211D                 db  41h ; A
                    .eh_frame:000000000000211E                 db  0Eh
                    .eh_frame:000000000000211F                 db  30h ; 0
                    .eh_frame:0000000000002120                 db  83h
                    .eh_frame:0000000000002121                 db    6
                    .eh_frame:0000000000002122                 db  47h ; G
                    .eh_frame:0000000000002123                 db  0Eh
                    .eh_frame:0000000000002124                 db 0E0h
                    .eh_frame:0000000000002125                 db    2
                    .eh_frame:0000000000002126                 db    3
                    .eh_frame:0000000000002127                 db  18h
                    .eh_frame:0000000000002128                 db    2
                    .eh_frame:0000000000002129                 db  0Ah
                    .eh_frame:000000000000212A                 db  0Eh
                    .eh_frame:000000000000212B                 db  30h ; 0
                    .eh_frame:000000000000212C                 db  43h ; C
                    .eh_frame:000000000000212D                 db  0Eh
                    .eh_frame:000000000000212E                 db  28h ; (
                    .eh_frame:000000000000212F                 db  41h ; A
                    .eh_frame:0000000000002130                 db  0Eh
                    .eh_frame:0000000000002131                 db  20h
                    .eh_frame:0000000000002132                 db  42h ; B
                    .eh_frame:0000000000002133                 db  0Eh
                    .eh_frame:0000000000002134                 db  18h
                    .eh_frame:0000000000002135                 db  42h ; B
                    .eh_frame:0000000000002136                 db  0Eh
                    .eh_frame:0000000000002137                 db  10h
                    .eh_frame:0000000000002138                 db  42h ; B
                    .eh_frame:0000000000002139                 db  0Eh
                    .eh_frame:000000000000213A                 db    8
                    .eh_frame:000000000000213B                 db  42h ; B
                    .eh_frame:000000000000213C                 db  0Bh
                    .eh_frame:000000000000213D                 db    0
                    .eh_frame:000000000000213E                 db    0
                    .eh_frame:000000000000213F                 db    0
                    .eh_frame:0000000000002140 __FRAME_END__   db    0
                    .eh_frame:0000000000002141                 db    0
                    .eh_frame:0000000000002142                 db    0
                    .eh_frame:0000000000002143                 db    0
                    .eh_frame:0000000000002143 _eh_frame       ends
                    .eh_frame:0000000000002143
                    .init_array:0000000000003DA0 ; ELF Initialization Function Table
                    .init_array:0000000000003DA0 ; ===========================================================================
                    .init_array:0000000000003DA0
                    .init_array:0000000000003DA0 ; Segment type: Pure data
                    .init_array:0000000000003DA0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DA0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DA0                 assume cs:_init_array
                    .init_array:0000000000003DA0                 ;org 3DA0h
                    .init_array:0000000000003DA0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DA0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DA0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DA0 _init_array     ends
                    .init_array:0000000000003DA0
                    .fini_array:0000000000003DA8 ; ELF Termination Function Table
                    .fini_array:0000000000003DA8 ; ===========================================================================
                    .fini_array:0000000000003DA8
                    .fini_array:0000000000003DA8 ; Segment type: Pure data
                    .fini_array:0000000000003DA8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DA8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DA8                 assume cs:_fini_array
                    .fini_array:0000000000003DA8                 ;org 3DA8h
                    .fini_array:0000000000003DA8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DA8 _fini_array     ends
                    .fini_array:0000000000003DA8
                    LOAD:0000000000003DB0 ; ELF Dynamic Information
                    LOAD:0000000000003DB0 ; ===========================================================================
                    LOAD:0000000000003DB0
                    LOAD:0000000000003DB0 ; Segment type: Pure data
                    LOAD:0000000000003DB0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DB0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DB0                 assume cs:LOAD
                    LOAD:0000000000003DB0                 ;org 3DB0h
                    LOAD:0000000000003DB0 _DYNAMIC        Elf64_Dyn <1, 4Ch>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DB0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DB0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DC0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Dh, 142Ch>  ; DT_FINI
                    LOAD:0000000000003DE0                 Elf64_Dyn <19h, 3DA0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003DF0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E00                 Elf64_Dyn <1Ah, 3DA8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E20                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E30                 Elf64_Dyn <5, 4C8h>     ; DT_STRTAB
                    LOAD:0000000000003E40                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <0Ah, 0C8h>   ; DT_STRSZ
                    LOAD:0000000000003E60                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E70                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E80                 Elf64_Dyn <3, 3FA0h>    ; DT_PLTGOT
                    LOAD:0000000000003E90                 Elf64_Dyn <2, 60h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EA0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EB0                 Elf64_Dyn <17h, 6B8h>   ; DT_JMPREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <7, 5F8h>     ; DT_RELA
                    LOAD:0000000000003ED0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EE0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003EF0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F00                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFEh, 5A8h> ; DT_VERNEED
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFF0h, 590h> ; DT_VERSYM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F50                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F60                 db    0
                    LOAD:0000000000003F61                 db    0
                    LOAD:0000000000003F62                 db    0
                    LOAD:0000000000003F63                 db    0
                    LOAD:0000000000003F64                 db    0
                    LOAD:0000000000003F65                 db    0
                    LOAD:0000000000003F66                 db    0
                    LOAD:0000000000003F67                 db    0
                    LOAD:0000000000003F68                 db    0
                    LOAD:0000000000003F69                 db    0
                    LOAD:0000000000003F6A                 db    0
                    LOAD:0000000000003F6B                 db    0
                    LOAD:0000000000003F6C                 db    0
                    LOAD:0000000000003F6D                 db    0
                    LOAD:0000000000003F6E                 db    0
                    LOAD:0000000000003F6F                 db    0
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003F9F LOAD            ends
                    LOAD:0000000000003F9F
                    .got:0000000000003FA0 ; ===========================================================================
                    .got:0000000000003FA0
                    .got:0000000000003FA0 ; Segment type: Pure data
                    .got:0000000000003FA0 ; Segment permissions: Read/Write
                    .got:0000000000003FA0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FA0                 assume cs:_got
                    .got:0000000000003FA0                 ;org 3FA0h
                    .got:0000000000003FA0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FA8 qword_3FA8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FB0 qword_3FB0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FB8 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
                    .got:0000000000003FC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC0                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; void free(void *ptr)
                    extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
                    extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
                    extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004028                 extrn __libc_start_main:near
                    extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004030                 extrn __stack_chk_fail:near
                    extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004038 ; void *malloc(size_t size)
                    extern:0000000000004038                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:malloc_ptr↑o
                    extern:0000000000004040                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004040                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004048 ; int __cxa_finalize(void *)
                    extern:0000000000004048                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004048                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004050                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004058                 extrn __gmon_start__:near ; weak
                    extern:0000000000004058                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004058                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004060                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004060                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004060
                    extern:0000000000004060
                    extern:0000000000004060                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```less
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x10C0
                    ; Intent: BFS over a fixed 7-node graph; prints traversal order from 0 and distances (confidence=0.90). Evidence: adjacency matrix constants; queue (malloc/free); prints “BFS order from %zu:” and “dist(%zu -> %zu) = %d\n”
                    ; Preconditions: Graph has 7 vertices labeled 0..6; edges initialized per constants below.
                    ; Postconditions: Prints BFS order from source 0 (space-separated, no trailing space), newline, then distances from 0 to all vertices.
                    
                    @.str_bfs = private unnamed_addr constant [21 x i8] c"BFS order from %zu: \00"
                    @.str_zu_s = private unnamed_addr constant [6 x i8] c"%zu%s\00"
                    @.str_dist = private unnamed_addr constant [23 x i8] c"dist(%zu -> %zu) = %d\0A\00"
                    @.space = private unnamed_addr constant [2 x i8] c" \00"
                    @.nl = private unnamed_addr constant [2 x i8] c"\0A\00"
                    @.empty = private unnamed_addr constant [1 x i8] zeroinitializer
                    
                    ; Only the needed extern declarations:
                    declare i8* @malloc(i64)
                    declare void @free(i8*)
                    declare i32 @__printf_chk(i32, i8*, ...)
                    declare void @llvm.memset.p0i8.i64(i8*, i8, i64, i1)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    ; locals
                    %adj = alloca [7 x [7 x i32]], align 16
                    %dist = alloca [7 x i32], align 16
                    %order = alloca [7 x i64], align 16
                    
                    ; adj[:] = 0 (49 * 4 = 196 bytes)
                    %adj.i8 = bitcast [7 x [7 x i32]]* %adj to i8*
                    call void @llvm.memset.p0i8.i64(i8* %adj.i8, i8 0, i64 196, i1 false)
                    
                    ; dist[:] = -1
                    br label %dist.init
                    
                    dist.init:
                    %di = phi i64 [ 0, %entry ], [ %di.next, %dist.init.body ]
                    %di.cmp = icmp ult i64 %di, 7
                    br i1 %di.cmp, label %dist.init.body, label %dist.init.done
                    
                    dist.init.body:
                    %dist.ptr = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %di
                    store i32 -1, i32* %dist.ptr, align 4
                    %di.next = add i64 %di, 1
                    br label %dist.init
                    
                    dist.init.done:
                    ; dist[0] = 0
                    %dist0 = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 0
                    store i32 0, i32* %dist0, align 4
                    
                    ; Set edges (undirected):
                    ; 0-1, 0-2, 1-3, 1-4, 2-5, 4-5, 5-6
                    ; 0 -> 1
                    %a01 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 0, i64 1
                    store i32 1, i32* %a01, align 4
                    ; 0 -> 2
                    %a02 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 0, i64 2
                    store i32 1, i32* %a02, align 4
                    ; 1 -> 0
                    %a10 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 1, i64 0
                    store i32 1, i32* %a10, align 4
                    ; 1 -> 3
                    %a13 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 1, i64 3
                    store i32 1, i32* %a13, align 4
                    ; 1 -> 4
                    %a14 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 1, i64 4
                    store i32 1, i32* %a14, align 4
                    ; 2 -> 0
                    %a20 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 2, i64 0
                    store i32 1, i32* %a20, align 4
                    ; 2 -> 5
                    %a25 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 2, i64 5
                    store i32 1, i32* %a25, align 4
                    ; 3 -> 1
                    %a31 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 3, i64 1
                    store i32 1, i32* %a31, align 4
                    ; 4 -> 1
                    %a41 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 4, i64 1
                    store i32 1, i32* %a41, align 4
                    ; 4 -> 5
                    %a45 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 4, i64 5
                    store i32 1, i32* %a45, align 4
                    ; 5 -> 2
                    %a52 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 5, i64 2
                    store i32 1, i32* %a52, align 4
                    ; 5 -> 4
                    %a54 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 5, i64 4
                    store i32 1, i32* %a54, align 4
                    ; 5 -> 6
                    %a56 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 5, i64 6
                    store i32 1, i32* %a56, align 4
                    ; 6 -> 5
                    %a65 = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 6, i64 5
                    store i32 1, i32* %a65, align 4
                    
                    ; queue = malloc(7 * 8)
                    %qraw = call i8* @malloc(i64 56)
                    %qnull = icmp eq i8* %qraw, null
                    br i1 %qnull, label %malloc.fail, label %bfs.init
                    
                    bfs.init:
                    %q = bitcast i8* %qraw to i64*
                    ; queue[0] = 0
                    %q0 = getelementptr inbounds i64, i64* %q, i64 0
                    store i64 0, i64* %q0, align 8
                    br label %bfs.loop
                    
                    bfs.loop:
                    %head = phi i64 [ 0, %bfs.init ], [ %head.next, %bfs.iter.end ]
                    %tail = phi i64 [ 1, %bfs.init ], [ %tail.out, %bfs.iter.end ]
                    %count = phi i64 [ 0, %bfs.init ], [ %count.next, %bfs.iter.end ]
                    %cond = icmp ult i64 %head, %tail
                    br i1 %cond, label %bfs.iter, label %bfs.done
                    
                    bfs.iter:
                    ; i = queue[head]; head++
                    %iptr = getelementptr inbounds i64, i64* %q, i64 %head
                    %i = load i64, i64* %iptr, align 8
                    %head.next = add i64 %head, 1
                    ; order[count] = i; count++
                    %ord.ptr = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 %count
                    store i64 %i, i64* %ord.ptr, align 8
                    %count.next = add i64 %count, 1
                    ; inner loop j = 0..6
                    br label %inner
                    
                    inner:
                    %j = phi i64 [ 0, %bfs.iter ], [ %j.next, %inner.cont ]
                    %tail.cur = phi i64 [ %tail, %bfs.iter ], [ %tail.upd, %inner.cont ]
                    ; edge?
                    %adj.cell = getelementptr inbounds [7 x [7 x i32]], [7 x [7 x i32]]* %adj, i64 0, i64 %i, i64 %j
                    %edge = load i32, i32* %adj.cell, align 4
                    %has.edge = icmp ne i32 %edge, 0
                    br i1 %has.edge, label %check.unvisited, label %skip.edge
                    
                    check.unvisited:
                    %dist.j = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %j
                    %dj = load i32, i32* %dist.j, align 4
                    %unvis = icmp eq i32 %dj, -1
                    br i1 %unvis, label %enqueue, label %skip.edge
                    
                    enqueue:
                    ; queue[tail] = j
                    %q.tail = getelementptr inbounds i64, i64* %q, i64 %tail.cur
                    store i64 %j, i64* %q.tail, align 8
                    ; dist[j] = dist[i] + 1
                    %dist.i = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %i
                    %di = load i32, i32* %dist.i, align 4
                    %di1 = add i32 %di, 1
                    store i32 %di1, i32* %dist.j, align 4
                    ; tail++
                    %tail.plus = add i64 %tail.cur, 1
                    br label %inner.cont
                    
                    skip.edge:
                    br label %inner.cont
                    
                    inner.cont:
                    %tail.upd = phi i64 [ %tail.cur, %skip.edge ], [ %tail.plus, %enqueue ]
                    %j.next = add i64 %j, 1
                    %j.done = icmp eq i64 %j.next, 7
                    br i1 %j.done, label %bfs.iter.end, label %inner
                    
                    bfs.iter.end:
                    %tail.out = phi i64 [ %tail.upd, %inner.cont ]
                    br label %bfs.loop
                    
                    bfs.done:
                    call void @free(i8* %qraw)
                    br label %print.header
                    
                    malloc.fail:
                    br label %print.header
                    
                    print.header:
                    %fmt.bfs.ptr = getelementptr inbounds [21 x i8], [21 x i8]* @.str_bfs, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.bfs.ptr, i64 0)
                    ; count_final = (malloc failed ? 0 : %count)
                    %count.final = phi i64 [ 0, %malloc.fail ], [ %count, %bfs.done ]
                    ; print order items with suffix " " except last -> ""
                    %fmt.zu.ptr = getelementptr inbounds [6 x i8], [6 x i8]* @.str_zu_s, i64 0, i64 0
                    %sp.ptr = getelementptr inbounds [2 x i8], [2 x i8]* @.space, i64 0, i64 0
                    %empty.ptr = getelementptr inbounds [1 x i8], [1 x i8]* @.empty, i64 0, i64 0
                    br label %order.loop
                    
                    order.loop:
                    %k = phi i64 [ 0, %print.header ], [ %k.next, %order.body.end ]
                    %k.cond = icmp ult i64 %k, %count.final
                    br i1 %k.cond, label %order.body, label %order.done
                    
                    order.body:
                    %ord.k.ptr = getelementptr inbounds [7 x i64], [7 x i64]* %order, i64 0, i64 %k
                    %ord.k = load i64, i64* %ord.k.ptr, align 8
                    %k1 = add i64 %k, 1
                    %has.more = icmp ult i64 %k1, %count.final
                    %suf = select i1 %has.more, i8* %sp.ptr, i8* %empty.ptr
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.zu.ptr, i64 %ord.k, i8* %suf)
                    %k.next = add i64 %k, 1
                    br label %order.body.end
                    
                    order.body.end:
                    br label %order.loop
                    
                    order.done:
                    ; newline
                    %nl.ptr = getelementptr inbounds [2 x i8], [2 x i8]* @.nl, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %nl.ptr)
                    
                    ; print distances
                    %fmt.dist.ptr = getelementptr inbounds [23 x i8], [23 x i8]* @.str_dist, i64 0, i64 0
                    br label %dist.loop
                    
                    dist.loop:
                    %t = phi i64 [ 0, %order.done ], [ %t.next, %dist.loop.body ]
                    %t.cond = icmp ult i64 %t, 7
                    br i1 %t.cond, label %dist.loop.body, label %ret
                    
                    dist.loop.body:
                    %dist.t.ptr = getelementptr inbounds [7 x i32], [7 x i32]* %dist, i64 0, i64 %t
                    %dv = load i32, i32* %dist.t.ptr, align 4
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmt.dist.ptr, i64 0, i64 %t, i32 %dv)
                    %t.next = add i64 %t, 1
                    br label %dist.loop
                    
                    ret:
                    ret i32 0
                    }
                    ```
                    
        - binarysearch
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "binarysearch",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x11b0",
                      "end": "0x11d6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x11e0",
                      "end": "0x1209",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x1210",
                      "end": "0x1249",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1250",
                      "end": "0x1289",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1290",
                      "end": "0x1299",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x11a8",
                      "size": 296,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x129c",
                      "end": "0x12a9",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 19
                user? candidates: 6
                ```
                
            - chatGPT 함수 리스트
                
                ```less
                ["main"]
                ```
                
            - ida 디스어셈블리
                - main
                    
                    ```less
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
                    LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
                    LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
                    LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
                    LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Input SHA256 : A7C57623E81F542AAE0275C087CB8465DA11555124C768E12D6AB34DCBB814E6
                    LOAD:0000000000000000 ; Input MD5    : FE6B40B48AB4308ED932E402A7B4FFBF
                    LOAD:0000000000000000 ; Input CRC32  : E8683EBC
                    LOAD:0000000000000000 ; Compiler     : GNU C++
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\binarysearch
                    LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
                    LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
                    LOAD:0000000000000000 ; Needed Library 'libc.so.6'
                    LOAD:0000000000000000 ;
                    LOAD:0000000000000000 ; Source File : 'Scrt1.o'
                    LOAD:0000000000000000 ; Source File : 'binarysearch.c'
                    LOAD:0000000000000000 ; Source File : 'crtstuff.c'
                    LOAD:0000000000000000
                    LOAD:0000000000000000                 .686p
                    LOAD:0000000000000000                 .mmx
                    LOAD:0000000000000000                 .model flat
                    LOAD:0000000000000000 .intel_syntax noprefix
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; ===========================================================================
                    LOAD:0000000000000000
                    LOAD:0000000000000000 ; Segment type: Pure data
                    LOAD:0000000000000000 ; Segment permissions: Read
                    LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000000000                 assume cs:LOAD
                    LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
                    LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
                    LOAD:0000000000000000                                         ; File format: \x7FELF
                    LOAD:0000000000000004                 db 2                    ; File class: 64-bit
                    LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
                    LOAD:0000000000000006                 db 1                    ; File version
                    LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
                    LOAD:0000000000000008                 db 0                    ; ABI Version
                    LOAD:0000000000000009                 db 7 dup(0)             ; Padding
                    LOAD:0000000000000010                 dw 3                    ; File type: Shared object
                    LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
                    LOAD:0000000000000014                 dd 1                    ; File version
                    LOAD:0000000000000018                 dq offset _start        ; Entry point
                    LOAD:0000000000000020                 dq 40h                  ; PHT file offset
                    LOAD:0000000000000028                 dq 36D8h                ; SHT file offset
                    LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
                    LOAD:0000000000000034                 dw 40h                  ; ELF header size
                    LOAD:0000000000000036                 dw 38h                  ; PHT entry size
                    LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
                    LOAD:000000000000003A                 dw 40h                  ; SHT entry size
                    LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
                    LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
                    LOAD:0000000000000040 ; ELF64 Program Header
                    LOAD:0000000000000040 ; PHT Entry 0
                    LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
                    LOAD:0000000000000040                                         ; Type: PHDR
                    LOAD:0000000000000044                 dd 4                    ; Flags
                    LOAD:0000000000000048                 dq 40h                  ; File offset
                    LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
                    LOAD:0000000000000058                 dq 40h                  ; Physical address
                    LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
                    LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
                    LOAD:0000000000000070                 dq 8                    ; Alignment
                    LOAD:0000000000000078 ; PHT Entry 1
                    LOAD:0000000000000078                 dd 3                    ; Type: INTERP
                    LOAD:000000000000007C                 dd 4                    ; Flags
                    LOAD:0000000000000080                 dq 318h                 ; File offset
                    LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
                    LOAD:0000000000000090                 dq 318h                 ; Physical address
                    LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
                    LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
                    LOAD:00000000000000A8                 dq 1                    ; Alignment
                    LOAD:00000000000000B0 ; PHT Entry 2
                    LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000B4                 dd 4                    ; Flags
                    LOAD:00000000000000B8                 dq 0                    ; File offset
                    LOAD:00000000000000C0                 dq 0                    ; Virtual address
                    LOAD:00000000000000C8                 dq 0                    ; Physical address
                    LOAD:00000000000000D0                 dq 6A8h                 ; Size in file image
                    LOAD:00000000000000D8                 dq 6A8h                 ; Size in memory image
                    LOAD:00000000000000E0                 dq 1000h                ; Alignment
                    LOAD:00000000000000E8 ; PHT Entry 3
                    LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
                    LOAD:00000000000000EC                 dd 5                    ; Flags
                    LOAD:00000000000000F0                 dq 1000h                ; File offset
                    LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
                    LOAD:0000000000000100                 dq 1000h                ; Physical address
                    LOAD:0000000000000108                 dq 2A9h                 ; Size in file image
                    LOAD:0000000000000110                 dq 2A9h                 ; Size in memory image
                    LOAD:0000000000000118                 dq 1000h                ; Alignment
                    LOAD:0000000000000120 ; PHT Entry 4
                    LOAD:0000000000000120                 dd 1                    ; Type: LOAD
                    LOAD:0000000000000124                 dd 4                    ; Flags
                    LOAD:0000000000000128                 dq 2000h                ; File offset
                    LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
                    LOAD:0000000000000138                 dq 2000h                ; Physical address
                    LOAD:0000000000000140                 dq 130h                 ; Size in file image
                    LOAD:0000000000000148                 dq 130h                 ; Size in memory image
                    LOAD:0000000000000150                 dq 1000h                ; Alignment
                    LOAD:0000000000000158 ; PHT Entry 5
                    LOAD:0000000000000158                 dd 1                    ; Type: LOAD
                    LOAD:000000000000015C                 dd 6                    ; Flags
                    LOAD:0000000000000160                 dq 2DB0h                ; File offset
                    LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:0000000000000170                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000178                 dq 260h                 ; Size in file image
                    LOAD:0000000000000180                 dq 268h                 ; Size in memory image
                    LOAD:0000000000000188                 dq 1000h                ; Alignment
                    LOAD:0000000000000190 ; PHT Entry 6
                    LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
                    LOAD:0000000000000194                 dd 6                    ; Flags
                    LOAD:0000000000000198                 dq 2DC0h                ; File offset
                    LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
                    LOAD:00000000000001A8                 dq 3DC0h                ; Physical address
                    LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
                    LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
                    LOAD:00000000000001C0                 dq 8                    ; Alignment
                    LOAD:00000000000001C8 ; PHT Entry 7
                    LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
                    LOAD:00000000000001CC                 dd 4                    ; Flags
                    LOAD:00000000000001D0                 dq 338h                 ; File offset
                    LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
                    LOAD:00000000000001E0                 dq 338h                 ; Physical address
                    LOAD:00000000000001E8                 dq 30h                  ; Size in file image
                    LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
                    LOAD:00000000000001F8                 dq 8                    ; Alignment
                    LOAD:0000000000000200 ; PHT Entry 8
                    LOAD:0000000000000200                 dd 4                    ; Type: NOTE
                    LOAD:0000000000000204                 dd 4                    ; Flags
                    LOAD:0000000000000208                 dq 368h                 ; File offset
                    LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
                    LOAD:0000000000000218                 dq 368h                 ; Physical address
                    LOAD:0000000000000220                 dq 44h                  ; Size in file image
                    LOAD:0000000000000228                 dq 44h                  ; Size in memory image
                    LOAD:0000000000000230                 dq 4                    ; Alignment
                    LOAD:0000000000000238 ; PHT Entry 9
                    LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
                    LOAD:000000000000023C                 dd 4                    ; Flags
                    LOAD:0000000000000240                 dq 338h                 ; File offset
                    LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
                    LOAD:0000000000000250                 dq 338h                 ; Physical address
                    LOAD:0000000000000258                 dq 30h                  ; Size in file image
                    LOAD:0000000000000260                 dq 30h                  ; Size in memory image
                    LOAD:0000000000000268                 dq 8                    ; Alignment
                    LOAD:0000000000000270 ; PHT Entry 10
                    LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
                    LOAD:0000000000000274                 dd 4                    ; Flags
                    LOAD:0000000000000278                 dq 2030h                ; File offset
                    LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
                    LOAD:0000000000000288                 dq 2030h                ; Physical address
                    LOAD:0000000000000290                 dq 34h                  ; Size in file image
                    LOAD:0000000000000298                 dq 34h                  ; Size in memory image
                    LOAD:00000000000002A0                 dq 4                    ; Alignment
                    LOAD:00000000000002A8 ; PHT Entry 11
                    LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
                    LOAD:00000000000002AC                 dd 6                    ; Flags
                    LOAD:00000000000002B0                 dq 0                    ; File offset
                    LOAD:00000000000002B8                 dq 0                    ; Virtual address
                    LOAD:00000000000002C0                 dq 0                    ; Physical address
                    LOAD:00000000000002C8                 dq 0                    ; Size in file image
                    LOAD:00000000000002D0                 dq 0                    ; Size in memory image
                    LOAD:00000000000002D8                 dq 10h                  ; Alignment
                    LOAD:00000000000002E0 ; PHT Entry 12
                    LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
                    LOAD:00000000000002E4                 dd 4                    ; Flags
                    LOAD:00000000000002E8                 dq 2DB0h                ; File offset
                    LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
                    LOAD:00000000000002F8                 dq 3DB0h                ; Physical address
                    LOAD:0000000000000300                 dq 250h                 ; Size in file image
                    LOAD:0000000000000308                 dq 250h                 ; Size in memory image
                    LOAD:0000000000000310                 dq 1                    ; Alignment
                    LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
                    LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
                    LOAD:0000000000000334                 align 8
                    LOAD:0000000000000338 ; ELF Note Entry
                    LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
                    LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
                    LOAD:0000000000000338                                         ; Name Size
                    LOAD:000000000000033C                 dd 20h                  ; Desc Size
                    LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
                    LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
                    LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
                    LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
                    LOAD:0000000000000368 ; ELF Note Entry
                    LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
                    LOAD:0000000000000368                                         ; Name Size
                    LOAD:000000000000036C                 dd 14h                  ; Desc Size
                    LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
                    LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
                    LOAD:0000000000000378                 db 2Fh, 0B3h, 0EDh, 0C8h, 82h, 0E8h, 1Ch, 0AEh, 42h, 0DEh ; Desc
                    LOAD:0000000000000382                 db 5Bh, 89h, 0EDh, 0BAh, 88h, 80h, 0ECh, 3Ah, 0BDh, 8Eh
                    LOAD:000000000000038C ; ELF Note Entry
                    LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
                    LOAD:0000000000000390                 dd 10h                  ; Desc Size
                    LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
                    LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
                    LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
                    LOAD:00000000000003AC                 align 10h
                    LOAD:00000000000003B0 ; ELF GNU Hash Table
                    LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
                    LOAD:00000000000003B4 elf_gnu_hash_symbias dd 7
                    LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
                    LOAD:00000000000003BC elf_gnu_hash_shift dd 6
                    LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
                    LOAD:00000000000003C8 elf_gnu_hash_bucket dd 7, 0
                    LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
                    LOAD:00000000000003D8 ; ELF Symbol Table
                    LOAD:00000000000003D8                 Elf64_Sym <0>
                    LOAD:00000000000003F0                 Elf64_Sym <offset aLibcStartMain - offset unk_498, 12h, 0, 0, \ ; "__libc_start_main"
                    LOAD:00000000000003F0                            offset dword_0, 0>
                    LOAD:0000000000000408                 Elf64_Sym <offset aItmDeregistert - offset unk_498, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
                    LOAD:0000000000000408                            offset dword_0, 0>
                    LOAD:0000000000000420                 Elf64_Sym <offset aStackChkFail - offset unk_498, 12h, 0, 0, \ ; "__stack_chk_fail"
                    LOAD:0000000000000420                            offset dword_0, 0>
                    LOAD:0000000000000438                 Elf64_Sym <offset aGmonStart - offset unk_498, 20h, 0, 0, \ ; "__gmon_start__"
                    LOAD:0000000000000438                            offset dword_0, 0>
                    LOAD:0000000000000450                 Elf64_Sym <offset aPrintfChk - offset unk_498, 12h, 0, 0, \ ; "__printf_chk"
                    LOAD:0000000000000450                            offset dword_0, 0>
                    LOAD:0000000000000468                 Elf64_Sym <offset aItmRegistertmc - offset unk_498, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
                    LOAD:0000000000000468                            offset dword_0, 0>
                    LOAD:0000000000000480                 Elf64_Sym <offset aCxaFinalize - offset unk_498, 22h, 0, 0, \ ; "__cxa_finalize"
                    LOAD:0000000000000480                            offset dword_0, 0>
                    LOAD:0000000000000498 ; ELF String Table
                    LOAD:0000000000000498 unk_498         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:0000000000000498                                         ; LOAD:0000000000000408↑o ...
                    LOAD:0000000000000499 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000480↑o
                    LOAD:00000000000004A8 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
                    LOAD:00000000000004B5 aLibcStartMain  db '__libc_start_main',0
                    LOAD:00000000000004B5                                         ; DATA XREF: LOAD:00000000000003F0↑o
                    LOAD:00000000000004C7 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000420↑o
                    LOAD:00000000000004D8 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000568↓o
                    LOAD:00000000000004E2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000578↓o
                    LOAD:00000000000004EE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000588↓o
                    LOAD:00000000000004FA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000598↓o
                    LOAD:0000000000000504 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000000000005A8↓o
                    LOAD:000000000000050F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
                    LOAD:000000000000050F                                         ; DATA XREF: LOAD:0000000000000408↑o
                    LOAD:000000000000052B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000438↑o
                    LOAD:000000000000053A aItmRegistertmc db '_ITM_registerTMCloneTable',0
                    LOAD:000000000000053A                                         ; DATA XREF: LOAD:0000000000000468↑o
                    LOAD:0000000000000554 ; ELF GNU Symbol Version Table
                    LOAD:0000000000000554                 dw 0
                    LOAD:0000000000000556                 dw 2                    ; __libc_start_main@@GLIBC_2.34
                    LOAD:0000000000000558                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
                    LOAD:000000000000055A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
                    LOAD:000000000000055C                 dw 1                    ; global symbol: __gmon_start__
                    LOAD:000000000000055E                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
                    LOAD:0000000000000560                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
                    LOAD:0000000000000562                 dw 5                    ; __cxa_finalize@@GLIBC_2.2.5
                    LOAD:0000000000000564                 dw 0
                    LOAD:0000000000000566                 dw 0
                    LOAD:0000000000000568 ; ELF GNU Symbol Version Requirements
                    LOAD:0000000000000568                 Elf64_Verneed <1, 4, offset aLibcSo6 - offset unk_498, 10h, 0> ; "libc.so.6"
                    LOAD:0000000000000578                 Elf64_Vernaux <9691A75h, 0, 5, offset aGlibc225 - offset unk_498, 10h> ; "GLIBC_2.2.5"
                    LOAD:0000000000000588                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset unk_498, 10h> ; "GLIBC_2.3.4"
                    LOAD:0000000000000598                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_498, 10h> ; "GLIBC_2.4"
                    LOAD:00000000000005A8                 Elf64_Vernaux <69691B4h, 0, 2, offset aGlibc234_0 - offset unk_498, 0> ; "GLIBC_2.34"
                    LOAD:00000000000005B8 ; ELF RELA Relocation Table
                    LOAD:00000000000005B8                 Elf64_Rela <3DB0h, 8, 1290h> ; R_X86_64_RELATIVE +1290h
                    LOAD:00000000000005D0                 Elf64_Rela <3DB8h, 8, 1250h> ; R_X86_64_RELATIVE +1250h
                    LOAD:00000000000005E8                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
                    LOAD:0000000000000600                 Elf64_Rela <3FD8h, 100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
                    LOAD:0000000000000618                 Elf64_Rela <3FE0h, 200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
                    LOAD:0000000000000630                 Elf64_Rela <3FE8h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
                    LOAD:0000000000000648                 Elf64_Rela <3FF0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
                    LOAD:0000000000000660                 Elf64_Rela <3FF8h, 700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
                    LOAD:0000000000000678 ; ELF JMPREL Relocation Table
                    LOAD:0000000000000678                 Elf64_Rela <3FC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
                    LOAD:0000000000000690                 Elf64_Rela <3FD0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
                    LOAD:0000000000000690 LOAD            ends
                    LOAD:0000000000000690
                    .init:0000000000001000 ; ===========================================================================
                    .init:0000000000001000
                    .init:0000000000001000 ; Segment type: Pure code
                    .init:0000000000001000 ; Segment permissions: Read/Execute
                    .init:0000000000001000 _init           segment dword public 'CODE' use64
                    .init:0000000000001000                 assume cs:_init
                    .init:0000000000001000                 ;org 1000h
                    .init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .init:0000000000001000
                    .init:0000000000001000 ; =============== S U B R O U T I N E =======================================
                    .init:0000000000001000
                    .init:0000000000001000
                    .init:0000000000001000                 public _init_proc
                    .init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
                    .init:0000000000001000                 endbr64                 ; _init
                    .init:0000000000001004                 sub     rsp, 8
                    .init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
                    .init:000000000000100F                 test    rax, rax
                    .init:0000000000001012                 jz      short loc_1016
                    .init:0000000000001014                 call    rax ; __gmon_start__
                    .init:0000000000001016
                    .init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
                    .init:0000000000001016                 add     rsp, 8
                    .init:000000000000101A                 retn
                    .init:000000000000101A _init_proc      endp
                    .init:000000000000101A
                    .init:000000000000101A _init           ends
                    .init:000000000000101A
                    LOAD:000000000000101B ; ===========================================================================
                    LOAD:000000000000101B
                    LOAD:000000000000101B ; Segment type: Pure code
                    LOAD:000000000000101B ; Segment permissions: Read/Execute
                    LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
                    LOAD:000000000000101B                 assume cs:LOAD
                    LOAD:000000000000101B                 ;org 101Bh
                    LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:000000000000101B                 align 20h
                    LOAD:000000000000101B LOAD            ends
                    LOAD:000000000000101B
                    .plt:0000000000001020 ; ===========================================================================
                    .plt:0000000000001020
                    .plt:0000000000001020 ; Segment type: Pure code
                    .plt:0000000000001020 ; Segment permissions: Read/Execute
                    .plt:0000000000001020 _plt            segment para public 'CODE' use64
                    .plt:0000000000001020                 assume cs:_plt
                    .plt:0000000000001020                 ;org 1020h
                    .plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt:0000000000001020
                    .plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
                    .plt:0000000000001020
                    .plt:0000000000001020
                    .plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
                    .plt:0000000000001020                                         ; sub_1040+9↓j
                    .plt:0000000000001020 ; __unwind {
                    .plt:0000000000001020                 push    cs:qword_3FB8
                    .plt:0000000000001026                 bnd jmp cs:qword_3FC0
                    .plt:0000000000001026 sub_1020        endp
                    .plt:0000000000001026
                    .plt:0000000000001026 ; ---------------------------------------------------------------------------
                    .plt:000000000000102D                 align 10h
                    .plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
                    .plt:000000000000103F                 align 20h
                    .plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
                    .plt:000000000000104F                 align 10h
                    .plt:000000000000104F ; } // starts at 1020
                    .plt:000000000000104F _plt            ends
                    .plt:000000000000104F
                    .plt.got:0000000000001050 ; ===========================================================================
                    .plt.got:0000000000001050
                    .plt.got:0000000000001050 ; Segment type: Pure code
                    .plt.got:0000000000001050 ; Segment permissions: Read/Execute
                    .plt.got:0000000000001050 _plt_got        segment para public 'CODE' use64
                    .plt.got:0000000000001050                 assume cs:_plt_got
                    .plt.got:0000000000001050                 ;org 1050h
                    .plt.got:0000000000001050                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.got:0000000000001050 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
                    .plt.got:000000000000105B                 align 20h
                    .plt.got:000000000000105B ; } // starts at 1050
                    .plt.got:000000000000105B _plt_got        ends
                    .plt.got:000000000000105B
                    .plt.sec:0000000000001060 ; ===========================================================================
                    .plt.sec:0000000000001060
                    .plt.sec:0000000000001060 ; Segment type: Pure code
                    .plt.sec:0000000000001060 ; Segment permissions: Read/Execute
                    .plt.sec:0000000000001060 _plt_sec        segment para public 'CODE' use64
                    .plt.sec:0000000000001060                 assume cs:_plt_sec
                    .plt.sec:0000000000001060                 ;org 1060h
                    .plt.sec:0000000000001060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .plt.sec:0000000000001060 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
                    .plt.sec:000000000000106B                 align 10h
                    .plt.sec:0000000000001070 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
                    .plt.sec:000000000000107B                 align 20h
                    .plt.sec:000000000000107B ; } // starts at 1060
                    .plt.sec:000000000000107B _plt_sec        ends
                    .plt.sec:000000000000107B
                    .text:0000000000001080 ; ===========================================================================
                    .text:0000000000001080
                    .text:0000000000001080 ; Segment type: Pure code
                    .text:0000000000001080 ; Segment permissions: Read/Execute
                    .text:0000000000001080 _text           segment para public 'CODE' use64
                    .text:0000000000001080                 assume cs:_text
                    .text:0000000000001080                 ;org 1080h
                    .text:0000000000001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .text:0000000000001080
                    .text:0000000000001080 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001080
                    .text:0000000000001080
                    .text:0000000000001080 ; int __fastcall main(int argc, const char **argv, const char **envp)
                    .text:0000000000001080                 public main
                    .text:0000000000001080 main            proc near               ; DATA XREF: _start+18↓o
                    .text:0000000000001080
                    .text:0000000000001080 var_64          = byte ptr -64h
                    .text:0000000000001080 var_60          = qword ptr -60h
                    .text:0000000000001080 var_58          = qword ptr -58h
                    .text:0000000000001080 var_50          = qword ptr -50h
                    .text:0000000000001080 var_48          = qword ptr -48h
                    .text:0000000000001080 var_40          = qword ptr -40h
                    .text:0000000000001080 var_38          = dword ptr -38h
                    .text:0000000000001080 var_30          = qword ptr -30h
                    .text:0000000000001080
                    .text:0000000000001080 ; __unwind {
                    .text:0000000000001080                 endbr64
                    .text:0000000000001084                 push    r13
                    .text:0000000000001086                 mov     r8d, 2
                    .text:000000000000108C                 push    r12
                    .text:000000000000108E                 lea     r12, aKeyDNotFound ; "key %d -> not found\n"
                    .text:0000000000001095                 push    rbp
                    .text:0000000000001096                 lea     rbp, aKeyDIndexLd ; "key %d -> index %ld\n"
                    .text:000000000000109D                 push    rbx
                    .text:000000000000109E                 sub     rsp, 48h
                    .text:00000000000010A2                 mov     rax, fs:28h
                    .text:00000000000010AB                 mov     [rsp+68h+var_30], rax
                    .text:00000000000010B0                 xor     eax, eax
                    .text:00000000000010B2                 mov     [rsp+68h+var_38], 0Ch
                    .text:00000000000010BA                 lea     r13, [rsp+68h+var_64]
                    .text:00000000000010BF                 mov     rax, 200000000h
                    .text:00000000000010C9                 mov     [rsp+68h+var_50], rax
                    .text:00000000000010CE                 lea     rbx, [rsp+68h+var_58]
                    .text:00000000000010D3                 mov     rax, 300000002h
                    .text:00000000000010DD                 mov     [rsp+68h+var_48], rax
                    .text:00000000000010E2                 mov     rax, 900000007h
                    .text:00000000000010EC                 mov     [rsp+68h+var_40], rax
                    .text:00000000000010F1                 mov     rax, 0FFFFFFFB00000005h
                    .text:00000000000010FB                 mov     [rsp+68h+var_58], 0FFFFFFFFFFFFFFFBh
                    .text:0000000000001104                 mov     [rsp+68h+var_60], rax
                    .text:0000000000001109
                    .text:0000000000001109 loc_1109:                               ; CODE XREF: main+DF↓j
                    .text:0000000000001109                 mov     edx, 9
                    .text:000000000000110E                 xor     ecx, ecx
                    .text:0000000000001110                 jmp     short loc_112E
                    .text:0000000000001110 ; ---------------------------------------------------------------------------
                    .text:0000000000001112                 align 8
                    .text:0000000000001118
                    .text:0000000000001118 loc_1118:                               ; CODE XREF: main+B1↓j
                    .text:0000000000001118                 mov     rax, rdx
                    .text:000000000000111B                 sub     rax, rcx
                    .text:000000000000111E                 shr     rax, 1
                    .text:0000000000001121                 add     rax, rcx
                    .text:0000000000001124                 cmp     dword ptr [rsp+rax*4+68h+var_58], r8d
                    .text:0000000000001129                 jl      short loc_1168
                    .text:000000000000112B                 mov     rdx, rax
                    .text:000000000000112E
                    .text:000000000000112E loc_112E:                               ; CODE XREF: main+90↑j
                    .text:000000000000112E                                         ; main+EC↓j
                    .text:000000000000112E                 cmp     rdx, rcx
                    .text:0000000000001131                 ja      short loc_1118
                    .text:0000000000001133                 mov     edx, r8d
                    .text:0000000000001136                 cmp     rcx, 8
                    .text:000000000000113A                 ja      short loc_116E
                    .text:000000000000113C                 cmp     dword ptr [rsp+rcx*4+68h+var_58], r8d
                    .text:0000000000001141                 jnz     short loc_116E
                    .text:0000000000001143                 mov     rsi, rbp
                    .text:0000000000001146                 mov     edi, 1
                    .text:000000000000114B                 xor     eax, eax
                    .text:000000000000114D                 add     r13, 4
                    .text:0000000000001151                 call    ___printf_chk
                    .text:0000000000001156                 cmp     rbx, r13
                    .text:0000000000001159                 jz      short loc_1186
                    .text:000000000000115B
                    .text:000000000000115B loc_115B:                               ; CODE XREF: main+104↓j
                    .text:000000000000115B                 mov     r8d, [r13+0]
                    .text:000000000000115F                 jmp     short loc_1109
                    .text:000000000000115F ; ---------------------------------------------------------------------------
                    .text:0000000000001161                 align 8
                    .text:0000000000001168
                    .text:0000000000001168 loc_1168:                               ; CODE XREF: main+A9↑j
                    .text:0000000000001168                 lea     rcx, [rax+1]
                    .text:000000000000116C                 jmp     short loc_112E
                    .text:000000000000116E ; ---------------------------------------------------------------------------
                    .text:000000000000116E
                    .text:000000000000116E loc_116E:                               ; CODE XREF: main+BA↑j
                    .text:000000000000116E                                         ; main+C1↑j
                    .text:000000000000116E                 mov     rsi, r12
                    .text:0000000000001171                 mov     edi, 1
                    .text:0000000000001176                 xor     eax, eax
                    .text:0000000000001178                 add     r13, 4
                    .text:000000000000117C                 call    ___printf_chk
                    .text:0000000000001181                 cmp     rbx, r13
                    .text:0000000000001184                 jnz     short loc_115B
                    .text:0000000000001186
                    .text:0000000000001186 loc_1186:                               ; CODE XREF: main+D9↑j
                    .text:0000000000001186                 mov     rax, [rsp+68h+var_30]
                    .text:000000000000118B                 sub     rax, fs:28h
                    .text:0000000000001194                 jnz     short loc_11A3
                    .text:0000000000001196                 add     rsp, 48h
                    .text:000000000000119A                 xor     eax, eax
                    .text:000000000000119C                 pop     rbx
                    .text:000000000000119D                 pop     rbp
                    .text:000000000000119E                 pop     r12
                    .text:00000000000011A0                 pop     r13
                    .text:00000000000011A2                 retn
                    .text:00000000000011A3 ; ---------------------------------------------------------------------------
                    .text:00000000000011A3
                    .text:00000000000011A3 loc_11A3:                               ; CODE XREF: main+114↑j
                    .text:00000000000011A3                 call    ___stack_chk_fail
                    .text:00000000000011A3 ; } // starts at 1080
                    .text:00000000000011A3 main            endp
                    .text:00000000000011A3
                    .text:00000000000011A3 ; ---------------------------------------------------------------------------
                    .text:00000000000011A8                 align 10h
                    .text:00000000000011B0
                    .text:00000000000011B0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011B0
                    .text:00000000000011B0 ; Attributes: noreturn fuzzy-sp
                    .text:00000000000011B0
                    .text:00000000000011B0                 public _start
                    .text:00000000000011B0 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
                    .text:00000000000011B0 ; __unwind {
                    .text:00000000000011B0                 endbr64
                    .text:00000000000011B4                 xor     ebp, ebp
                    .text:00000000000011B6                 mov     r9, rdx         ; rtld_fini
                    .text:00000000000011B9                 pop     rsi             ; argc
                    .text:00000000000011BA                 mov     rdx, rsp        ; ubp_av
                    .text:00000000000011BD                 and     rsp, 0FFFFFFFFFFFFFFF0h
                    .text:00000000000011C1                 push    rax
                    .text:00000000000011C2                 push    rsp             ; stack_end
                    .text:00000000000011C3                 xor     r8d, r8d        ; fini
                    .text:00000000000011C6                 xor     ecx, ecx        ; init
                    .text:00000000000011C8                 lea     rdi, main       ; main
                    .text:00000000000011CF                 call    cs:__libc_start_main_ptr
                    .text:00000000000011D5                 hlt
                    .text:00000000000011D5 ; } // starts at 11B0
                    .text:00000000000011D5 _start          endp
                    .text:00000000000011D5
                    .text:00000000000011D5 ; ---------------------------------------------------------------------------
                    .text:00000000000011D6                 align 20h
                    .text:00000000000011E0
                    .text:00000000000011E0 ; =============== S U B R O U T I N E =======================================
                    .text:00000000000011E0
                    .text:00000000000011E0
                    .text:00000000000011E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1277↓p
                    .text:00000000000011E0                 lea     rdi, __bss_start
                    .text:00000000000011E7                 lea     rax, __bss_start
                    .text:00000000000011EE                 cmp     rax, rdi
                    .text:00000000000011F1                 jz      short locret_1208
                    .text:00000000000011F3                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
                    .text:00000000000011FA                 test    rax, rax
                    .text:00000000000011FD                 jz      short locret_1208
                    .text:00000000000011FF                 jmp     rax
                    .text:00000000000011FF ; ---------------------------------------------------------------------------
                    .text:0000000000001201                 align 8
                    .text:0000000000001208
                    .text:0000000000001208 locret_1208:                            ; CODE XREF: deregister_tm_clones+11↑j
                    .text:0000000000001208                                         ; deregister_tm_clones+1D↑j
                    .text:0000000000001208                 retn
                    .text:0000000000001208 deregister_tm_clones endp
                    .text:0000000000001208
                    .text:0000000000001208 ; ---------------------------------------------------------------------------
                    .text:0000000000001209                 align 10h
                    .text:0000000000001210
                    .text:0000000000001210 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001210
                    .text:0000000000001210
                    .text:0000000000001210 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
                    .text:0000000000001210                 lea     rdi, __bss_start
                    .text:0000000000001217                 lea     rsi, __bss_start
                    .text:000000000000121E                 sub     rsi, rdi
                    .text:0000000000001221                 mov     rax, rsi
                    .text:0000000000001224                 shr     rsi, 3Fh
                    .text:0000000000001228                 sar     rax, 3
                    .text:000000000000122C                 add     rsi, rax
                    .text:000000000000122F                 sar     rsi, 1
                    .text:0000000000001232                 jz      short locret_1248
                    .text:0000000000001234                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
                    .text:000000000000123B                 test    rax, rax
                    .text:000000000000123E                 jz      short locret_1248
                    .text:0000000000001240                 jmp     rax
                    .text:0000000000001240 ; ---------------------------------------------------------------------------
                    .text:0000000000001242                 align 8
                    .text:0000000000001248
                    .text:0000000000001248 locret_1248:                            ; CODE XREF: register_tm_clones+22↑j
                    .text:0000000000001248                                         ; register_tm_clones+2E↑j
                    .text:0000000000001248                 retn
                    .text:0000000000001248 register_tm_clones endp
                    .text:0000000000001248
                    .text:0000000000001248 ; ---------------------------------------------------------------------------
                    .text:0000000000001249                 align 10h
                    .text:0000000000001250
                    .text:0000000000001250 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001250
                    .text:0000000000001250
                    .text:0000000000001250 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
                    .text:0000000000001250                 endbr64
                    .text:0000000000001254                 cmp     cs:__bss_start, 0
                    .text:000000000000125B                 jnz     short locret_1288
                    .text:000000000000125D                 push    rbp
                    .text:000000000000125E                 cmp     cs:__cxa_finalize_ptr, 0
                    .text:0000000000001266                 mov     rbp, rsp
                    .text:0000000000001269                 jz      short loc_1277
                    .text:000000000000126B                 mov     rdi, cs:__dso_handle ; void *
                    .text:0000000000001272                 call    __cxa_finalize
                    .text:0000000000001277
                    .text:0000000000001277 loc_1277:                               ; CODE XREF: __do_global_dtors_aux+19↑j
                    .text:0000000000001277                 call    deregister_tm_clones
                    .text:000000000000127C                 mov     cs:__bss_start, 1
                    .text:0000000000001283                 pop     rbp
                    .text:0000000000001284                 retn
                    .text:0000000000001284 ; ---------------------------------------------------------------------------
                    .text:0000000000001285                 align 8
                    .text:0000000000001288
                    .text:0000000000001288 locret_1288:                            ; CODE XREF: __do_global_dtors_aux+B↑j
                    .text:0000000000001288                 retn
                    .text:0000000000001288 __do_global_dtors_aux endp
                    .text:0000000000001288
                    .text:0000000000001288 ; ---------------------------------------------------------------------------
                    .text:0000000000001289                 align 10h
                    .text:0000000000001290
                    .text:0000000000001290 ; =============== S U B R O U T I N E =======================================
                    .text:0000000000001290
                    .text:0000000000001290
                    .text:0000000000001290 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
                    .text:0000000000001290                 endbr64
                    .text:0000000000001294                 jmp     register_tm_clones
                    .text:0000000000001294 frame_dummy     endp
                    .text:0000000000001294
                    .text:0000000000001294 _text           ends
                    .text:0000000000001294
                    LOAD:0000000000001299 ; ===========================================================================
                    LOAD:0000000000001299
                    LOAD:0000000000001299 ; Segment type: Pure code
                    LOAD:0000000000001299 ; Segment permissions: Read/Execute
                    LOAD:0000000000001299 LOAD            segment mempage public 'CODE' use64
                    LOAD:0000000000001299                 assume cs:LOAD
                    LOAD:0000000000001299                 ;org 1299h
                    LOAD:0000000000001299                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    LOAD:0000000000001299                 align 4
                    LOAD:0000000000001299 LOAD            ends
                    LOAD:0000000000001299
                    .fini:000000000000129C ; ===========================================================================
                    .fini:000000000000129C
                    .fini:000000000000129C ; Segment type: Pure code
                    .fini:000000000000129C ; Segment permissions: Read/Execute
                    .fini:000000000000129C _fini           segment dword public 'CODE' use64
                    .fini:000000000000129C                 assume cs:_fini
                    .fini:000000000000129C                 ;org 129Ch
                    .fini:000000000000129C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .fini:000000000000129C
                    .fini:000000000000129C ; =============== S U B R O U T I N E =======================================
                    .fini:000000000000129C
                    .fini:000000000000129C
                    .fini:000000000000129C                 public _term_proc
                    .fini:000000000000129C _term_proc      proc near
                    .fini:000000000000129C                 endbr64                 ; _fini
                    .fini:00000000000012A0                 sub     rsp, 8
                    .fini:00000000000012A4                 add     rsp, 8
                    .fini:00000000000012A8                 retn
                    .fini:00000000000012A8 _term_proc      endp
                    .fini:00000000000012A8
                    .fini:00000000000012A8 _fini           ends
                    .fini:00000000000012A8
                    .rodata:0000000000002000 ; ===========================================================================
                    .rodata:0000000000002000
                    .rodata:0000000000002000 ; Segment type: Pure data
                    .rodata:0000000000002000 ; Segment permissions: Read
                    .rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
                    .rodata:0000000000002000                 assume cs:_rodata
                    .rodata:0000000000002000                 ;org 2000h
                    .rodata:0000000000002000                 public _IO_stdin_used
                    .rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
                    .rodata:0000000000002001                 db    0
                    .rodata:0000000000002002                 db    2
                    .rodata:0000000000002003                 db    0
                    .rodata:0000000000002004 aKeyDIndexLd    db 'key %d -> index %ld',0Ah,0
                    .rodata:0000000000002004                                         ; DATA XREF: main+16↑o
                    .rodata:0000000000002019 aKeyDNotFound   db 'key %d -> not found',0Ah,0
                    .rodata:0000000000002019                                         ; DATA XREF: main+E↑o
                    .rodata:0000000000002019 _rodata         ends
                    .rodata:0000000000002019
                    LOAD:000000000000202E ; ===========================================================================
                    LOAD:000000000000202E
                    LOAD:000000000000202E ; Segment type: Pure data
                    LOAD:000000000000202E ; Segment permissions: Read
                    LOAD:000000000000202E LOAD            segment mempage public 'DATA' use64
                    LOAD:000000000000202E                 assume cs:LOAD
                    LOAD:000000000000202E                 ;org 202Eh
                    LOAD:000000000000202E                 align 10h
                    LOAD:000000000000202E LOAD            ends
                    LOAD:000000000000202E
                    .eh_frame_hdr:0000000000002030 ; ===========================================================================
                    .eh_frame_hdr:0000000000002030
                    .eh_frame_hdr:0000000000002030 ; Segment type: Pure data
                    .eh_frame_hdr:0000000000002030 ; Segment permissions: Read
                    .eh_frame_hdr:0000000000002030 _eh_frame_hdr   segment dword public 'CONST' use64
                    .eh_frame_hdr:0000000000002030                 assume cs:_eh_frame_hdr
                    .eh_frame_hdr:0000000000002030                 ;org 2030h
                    .eh_frame_hdr:0000000000002030 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
                    .eh_frame_hdr:0000000000002031                 db  1Bh
                    .eh_frame_hdr:0000000000002032                 db    3
                    .eh_frame_hdr:0000000000002033                 db  3Bh ; ;
                    .eh_frame_hdr:0000000000002034                 db  34h ; 4
                    .eh_frame_hdr:0000000000002035                 db    0
                    .eh_frame_hdr:0000000000002036                 db    0
                    .eh_frame_hdr:0000000000002037                 db    0
                    .eh_frame_hdr:0000000000002038                 db    5
                    .eh_frame_hdr:0000000000002039                 db    0
                    .eh_frame_hdr:000000000000203A                 db    0
                    .eh_frame_hdr:000000000000203B                 db    0
                    .eh_frame_hdr:000000000000203C                 db 0F0h
                    .eh_frame_hdr:000000000000203D                 db 0EFh
                    .eh_frame_hdr:000000000000203E                 db 0FFh
                    .eh_frame_hdr:000000000000203F                 db 0FFh
                    .eh_frame_hdr:0000000000002040                 db  68h ; h
                    .eh_frame_hdr:0000000000002041                 db    0
                    .eh_frame_hdr:0000000000002042                 db    0
                    .eh_frame_hdr:0000000000002043                 db    0
                    .eh_frame_hdr:0000000000002044                 db  20h
                    .eh_frame_hdr:0000000000002045                 db 0F0h
                    .eh_frame_hdr:0000000000002046                 db 0FFh
                    .eh_frame_hdr:0000000000002047                 db 0FFh
                    .eh_frame_hdr:0000000000002048                 db  90h
                    .eh_frame_hdr:0000000000002049                 db    0
                    .eh_frame_hdr:000000000000204A                 db    0
                    .eh_frame_hdr:000000000000204B                 db    0
                    .eh_frame_hdr:000000000000204C                 db  30h ; 0
                    .eh_frame_hdr:000000000000204D                 db 0F0h
                    .eh_frame_hdr:000000000000204E                 db 0FFh
                    .eh_frame_hdr:000000000000204F                 db 0FFh
                    .eh_frame_hdr:0000000000002050                 db 0A8h
                    .eh_frame_hdr:0000000000002051                 db    0
                    .eh_frame_hdr:0000000000002052                 db    0
                    .eh_frame_hdr:0000000000002053                 db    0
                    .eh_frame_hdr:0000000000002054                 db  50h ; P
                    .eh_frame_hdr:0000000000002055                 db 0F0h
                    .eh_frame_hdr:0000000000002056                 db 0FFh
                    .eh_frame_hdr:0000000000002057                 db 0FFh
                    .eh_frame_hdr:0000000000002058                 db 0C0h
                    .eh_frame_hdr:0000000000002059                 db    0
                    .eh_frame_hdr:000000000000205A                 db    0
                    .eh_frame_hdr:000000000000205B                 db    0
                    .eh_frame_hdr:000000000000205C                 db  80h
                    .eh_frame_hdr:000000000000205D                 db 0F1h
                    .eh_frame_hdr:000000000000205E                 db 0FFh
                    .eh_frame_hdr:000000000000205F                 db 0FFh
                    .eh_frame_hdr:0000000000002060                 db  50h ; P
                    .eh_frame_hdr:0000000000002061                 db    0
                    .eh_frame_hdr:0000000000002062                 db    0
                    .eh_frame_hdr:0000000000002063                 db    0
                    .eh_frame_hdr:0000000000002063 _eh_frame_hdr   ends
                    .eh_frame_hdr:0000000000002063
                    LOAD:0000000000002064 ; ===========================================================================
                    LOAD:0000000000002064
                    LOAD:0000000000002064 ; Segment type: Pure data
                    LOAD:0000000000002064 ; Segment permissions: Read
                    LOAD:0000000000002064 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000002064                 assume cs:LOAD
                    LOAD:0000000000002064                 ;org 2064h
                    LOAD:0000000000002064                 align 8
                    LOAD:0000000000002064 LOAD            ends
                    LOAD:0000000000002064
                    .eh_frame:0000000000002068 ; ===========================================================================
                    .eh_frame:0000000000002068
                    .eh_frame:0000000000002068 ; Segment type: Pure data
                    .eh_frame:0000000000002068 ; Segment permissions: Read
                    .eh_frame:0000000000002068 _eh_frame       segment qword public 'CONST' use64
                    .eh_frame:0000000000002068                 assume cs:_eh_frame
                    .eh_frame:0000000000002068                 ;org 2068h
                    .eh_frame:0000000000002068                 db  14h
                    .eh_frame:0000000000002069                 db    0
                    .eh_frame:000000000000206A                 db    0
                    .eh_frame:000000000000206B                 db    0
                    .eh_frame:000000000000206C                 db    0
                    .eh_frame:000000000000206D                 db    0
                    .eh_frame:000000000000206E                 db    0
                    .eh_frame:000000000000206F                 db    0
                    .eh_frame:0000000000002070                 db    1
                    .eh_frame:0000000000002071                 db  7Ah ; z
                    .eh_frame:0000000000002072                 db  52h ; R
                    .eh_frame:0000000000002073                 db    0
                    .eh_frame:0000000000002074                 db    1
                    .eh_frame:0000000000002075                 db  78h ; x
                    .eh_frame:0000000000002076                 db  10h
                    .eh_frame:0000000000002077                 db    1
                    .eh_frame:0000000000002078                 db  1Bh
                    .eh_frame:0000000000002079                 db  0Ch
                    .eh_frame:000000000000207A                 db    7
                    .eh_frame:000000000000207B                 db    8
                    .eh_frame:000000000000207C                 db  90h
                    .eh_frame:000000000000207D                 db    1
                    .eh_frame:000000000000207E                 db    0
                    .eh_frame:000000000000207F                 db    0
                    .eh_frame:0000000000002080                 db  14h
                    .eh_frame:0000000000002081                 db    0
                    .eh_frame:0000000000002082                 db    0
                    .eh_frame:0000000000002083                 db    0
                    .eh_frame:0000000000002084                 db  1Ch
                    .eh_frame:0000000000002085                 db    0
                    .eh_frame:0000000000002086                 db    0
                    .eh_frame:0000000000002087                 db    0
                    .eh_frame:0000000000002088                 db  28h ; (
                    .eh_frame:0000000000002089                 db 0F1h
                    .eh_frame:000000000000208A                 db 0FFh
                    .eh_frame:000000000000208B                 db 0FFh
                    .eh_frame:000000000000208C                 db  26h ; &
                    .eh_frame:000000000000208D                 db    0
                    .eh_frame:000000000000208E                 db    0
                    .eh_frame:000000000000208F                 db    0
                    .eh_frame:0000000000002090                 db    0
                    .eh_frame:0000000000002091                 db  44h ; D
                    .eh_frame:0000000000002092                 db    7
                    .eh_frame:0000000000002093                 db  10h
                    .eh_frame:0000000000002094                 db    0
                    .eh_frame:0000000000002095                 db    0
                    .eh_frame:0000000000002096                 db    0
                    .eh_frame:0000000000002097                 db    0
                    .eh_frame:0000000000002098                 db  24h ; $
                    .eh_frame:0000000000002099                 db    0
                    .eh_frame:000000000000209A                 db    0
                    .eh_frame:000000000000209B                 db    0
                    .eh_frame:000000000000209C                 db  34h ; 4
                    .eh_frame:000000000000209D                 db    0
                    .eh_frame:000000000000209E                 db    0
                    .eh_frame:000000000000209F                 db    0
                    .eh_frame:00000000000020A0                 db  80h
                    .eh_frame:00000000000020A1                 db 0EFh
                    .eh_frame:00000000000020A2                 db 0FFh
                    .eh_frame:00000000000020A3                 db 0FFh
                    .eh_frame:00000000000020A4                 db  30h ; 0
                    .eh_frame:00000000000020A5                 db    0
                    .eh_frame:00000000000020A6                 db    0
                    .eh_frame:00000000000020A7                 db    0
                    .eh_frame:00000000000020A8                 db    0
                    .eh_frame:00000000000020A9                 db  0Eh
                    .eh_frame:00000000000020AA                 db  10h
                    .eh_frame:00000000000020AB                 db  46h ; F
                    .eh_frame:00000000000020AC                 db  0Eh
                    .eh_frame:00000000000020AD                 db  18h
                    .eh_frame:00000000000020AE                 db  4Ah ; J
                    .eh_frame:00000000000020AF                 db  0Fh
                    .eh_frame:00000000000020B0                 db  0Bh
                    .eh_frame:00000000000020B1                 db  77h ; w
                    .eh_frame:00000000000020B2                 db    8
                    .eh_frame:00000000000020B3                 db  80h
                    .eh_frame:00000000000020B4                 db    0
                    .eh_frame:00000000000020B5                 db  3Fh ; ?
                    .eh_frame:00000000000020B6                 db  1Ah
                    .eh_frame:00000000000020B7                 db  3Ah ; :
                    .eh_frame:00000000000020B8                 db  2Ah ; *
                    .eh_frame:00000000000020B9                 db  33h ; 3
                    .eh_frame:00000000000020BA                 db  24h ; $
                    .eh_frame:00000000000020BB                 db  22h ; "
                    .eh_frame:00000000000020BC                 db    0
                    .eh_frame:00000000000020BD                 db    0
                    .eh_frame:00000000000020BE                 db    0
                    .eh_frame:00000000000020BF                 db    0
                    .eh_frame:00000000000020C0                 db  14h
                    .eh_frame:00000000000020C1                 db    0
                    .eh_frame:00000000000020C2                 db    0
                    .eh_frame:00000000000020C3                 db    0
                    .eh_frame:00000000000020C4                 db  5Ch ; \
                    .eh_frame:00000000000020C5                 db    0
                    .eh_frame:00000000000020C6                 db    0
                    .eh_frame:00000000000020C7                 db    0
                    .eh_frame:00000000000020C8                 db  88h
                    .eh_frame:00000000000020C9                 db 0EFh
                    .eh_frame:00000000000020CA                 db 0FFh
                    .eh_frame:00000000000020CB                 db 0FFh
                    .eh_frame:00000000000020CC                 db  10h
                    .eh_frame:00000000000020CD                 db    0
                    .eh_frame:00000000000020CE                 db    0
                    .eh_frame:00000000000020CF                 db    0
                    .eh_frame:00000000000020D0                 db    0
                    .eh_frame:00000000000020D1                 db    0
                    .eh_frame:00000000000020D2                 db    0
                    .eh_frame:00000000000020D3                 db    0
                    .eh_frame:00000000000020D4                 db    0
                    .eh_frame:00000000000020D5                 db    0
                    .eh_frame:00000000000020D6                 db    0
                    .eh_frame:00000000000020D7                 db    0
                    .eh_frame:00000000000020D8                 db  14h
                    .eh_frame:00000000000020D9                 db    0
                    .eh_frame:00000000000020DA                 db    0
                    .eh_frame:00000000000020DB                 db    0
                    .eh_frame:00000000000020DC                 db  74h ; t
                    .eh_frame:00000000000020DD                 db    0
                    .eh_frame:00000000000020DE                 db    0
                    .eh_frame:00000000000020DF                 db    0
                    .eh_frame:00000000000020E0                 db  80h
                    .eh_frame:00000000000020E1                 db 0EFh
                    .eh_frame:00000000000020E2                 db 0FFh
                    .eh_frame:00000000000020E3                 db 0FFh
                    .eh_frame:00000000000020E4                 db  20h
                    .eh_frame:00000000000020E5                 db    0
                    .eh_frame:00000000000020E6                 db    0
                    .eh_frame:00000000000020E7                 db    0
                    .eh_frame:00000000000020E8                 db    0
                    .eh_frame:00000000000020E9                 db    0
                    .eh_frame:00000000000020EA                 db    0
                    .eh_frame:00000000000020EB                 db    0
                    .eh_frame:00000000000020EC                 db    0
                    .eh_frame:00000000000020ED                 db    0
                    .eh_frame:00000000000020EE                 db    0
                    .eh_frame:00000000000020EF                 db    0
                    .eh_frame:00000000000020F0                 db  38h ; 8
                    .eh_frame:00000000000020F1                 db    0
                    .eh_frame:00000000000020F2                 db    0
                    .eh_frame:00000000000020F3                 db    0
                    .eh_frame:00000000000020F4                 db  8Ch
                    .eh_frame:00000000000020F5                 db    0
                    .eh_frame:00000000000020F6                 db    0
                    .eh_frame:00000000000020F7                 db    0
                    .eh_frame:00000000000020F8                 db  88h
                    .eh_frame:00000000000020F9                 db 0EFh
                    .eh_frame:00000000000020FA                 db 0FFh
                    .eh_frame:00000000000020FB                 db 0FFh
                    .eh_frame:00000000000020FC                 db  28h ; (
                    .eh_frame:00000000000020FD                 db    1
                    .eh_frame:00000000000020FE                 db    0
                    .eh_frame:00000000000020FF                 db    0
                    .eh_frame:0000000000002100                 db    0
                    .eh_frame:0000000000002101                 db  46h ; F
                    .eh_frame:0000000000002102                 db  0Eh
                    .eh_frame:0000000000002103                 db  10h
                    .eh_frame:0000000000002104                 db  8Dh
                    .eh_frame:0000000000002105                 db    2
                    .eh_frame:0000000000002106                 db  48h ; H
                    .eh_frame:0000000000002107                 db  0Eh
                    .eh_frame:0000000000002108                 db  18h
                    .eh_frame:0000000000002109                 db  8Ch
                    .eh_frame:000000000000210A                 db    3
                    .eh_frame:000000000000210B                 db  48h ; H
                    .eh_frame:000000000000210C                 db  0Eh
                    .eh_frame:000000000000210D                 db  20h
                    .eh_frame:000000000000210E                 db  86h
                    .eh_frame:000000000000210F                 db    4
                    .eh_frame:0000000000002110                 db  48h ; H
                    .eh_frame:0000000000002111                 db  0Eh
                    .eh_frame:0000000000002112                 db  28h ; (
                    .eh_frame:0000000000002113                 db  83h
                    .eh_frame:0000000000002114                 db    5
                    .eh_frame:0000000000002115                 db  44h ; D
                    .eh_frame:0000000000002116                 db  0Eh
                    .eh_frame:0000000000002117                 db  70h ; p
                    .eh_frame:0000000000002118                 db    2
                    .eh_frame:0000000000002119                 db 0F8h
                    .eh_frame:000000000000211A                 db  0Ah
                    .eh_frame:000000000000211B                 db  0Eh
                    .eh_frame:000000000000211C                 db  28h ; (
                    .eh_frame:000000000000211D                 db  43h ; C
                    .eh_frame:000000000000211E                 db  0Eh
                    .eh_frame:000000000000211F                 db  20h
                    .eh_frame:0000000000002120                 db  41h ; A
                    .eh_frame:0000000000002121                 db  0Eh
                    .eh_frame:0000000000002122                 db  18h
                    .eh_frame:0000000000002123                 db  42h ; B
                    .eh_frame:0000000000002124                 db  0Eh
                    .eh_frame:0000000000002125                 db  10h
                    .eh_frame:0000000000002126                 db  42h ; B
                    .eh_frame:0000000000002127                 db  0Eh
                    .eh_frame:0000000000002128                 db    8
                    .eh_frame:0000000000002129                 db  41h ; A
                    .eh_frame:000000000000212A                 db  0Bh
                    .eh_frame:000000000000212B                 db    0
                    .eh_frame:000000000000212C __FRAME_END__   db    0
                    .eh_frame:000000000000212D                 db    0
                    .eh_frame:000000000000212E                 db    0
                    .eh_frame:000000000000212F                 db    0
                    .eh_frame:000000000000212F _eh_frame       ends
                    .eh_frame:000000000000212F
                    .init_array:0000000000003DB0 ; ELF Initialization Function Table
                    .init_array:0000000000003DB0 ; ===========================================================================
                    .init_array:0000000000003DB0
                    .init_array:0000000000003DB0 ; Segment type: Pure data
                    .init_array:0000000000003DB0 ; Segment permissions: Read/Write
                    .init_array:0000000000003DB0 _init_array     segment qword public 'DATA' use64
                    .init_array:0000000000003DB0                 assume cs:_init_array
                    .init_array:0000000000003DB0                 ;org 3DB0h
                    .init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy
                    .init_array:0000000000003DB0                                         ; DATA XREF: LOAD:0000000000000168↑o
                    .init_array:0000000000003DB0                                         ; LOAD:00000000000002F0↑o
                    .init_array:0000000000003DB0 _init_array     ends
                    .init_array:0000000000003DB0
                    .fini_array:0000000000003DB8 ; ELF Termination Function Table
                    .fini_array:0000000000003DB8 ; ===========================================================================
                    .fini_array:0000000000003DB8
                    .fini_array:0000000000003DB8 ; Segment type: Pure data
                    .fini_array:0000000000003DB8 ; Segment permissions: Read/Write
                    .fini_array:0000000000003DB8 _fini_array     segment qword public 'DATA' use64
                    .fini_array:0000000000003DB8                 assume cs:_fini_array
                    .fini_array:0000000000003DB8                 ;org 3DB8h
                    .fini_array:0000000000003DB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
                    .fini_array:0000000000003DB8 _fini_array     ends
                    .fini_array:0000000000003DB8
                    LOAD:0000000000003DC0 ; ELF Dynamic Information
                    LOAD:0000000000003DC0 ; ===========================================================================
                    LOAD:0000000000003DC0
                    LOAD:0000000000003DC0 ; Segment type: Pure data
                    LOAD:0000000000003DC0 ; Segment permissions: Read/Write
                    LOAD:0000000000003DC0 LOAD            segment mempage public 'DATA' use64
                    LOAD:0000000000003DC0                 assume cs:LOAD
                    LOAD:0000000000003DC0                 ;org 3DC0h
                    LOAD:0000000000003DC0 _DYNAMIC        Elf64_Dyn <1, 40h>      ; DATA XREF: LOAD:00000000000001A0↑o
                    LOAD:0000000000003DC0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
                    LOAD:0000000000003DC0                                         ; DT_NEEDED libc.so.6
                    LOAD:0000000000003DD0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
                    LOAD:0000000000003DE0                 Elf64_Dyn <0Dh, 129Ch>  ; DT_FINI
                    LOAD:0000000000003DF0                 Elf64_Dyn <19h, 3DB0h>  ; DT_INIT_ARRAY
                    LOAD:0000000000003E00                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
                    LOAD:0000000000003E10                 Elf64_Dyn <1Ah, 3DB8h>  ; DT_FINI_ARRAY
                    LOAD:0000000000003E20                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
                    LOAD:0000000000003E30                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
                    LOAD:0000000000003E40                 Elf64_Dyn <5, 498h>     ; DT_STRTAB
                    LOAD:0000000000003E50                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
                    LOAD:0000000000003E60                 Elf64_Dyn <0Ah, 0BCh>   ; DT_STRSZ
                    LOAD:0000000000003E70                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
                    LOAD:0000000000003E80                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
                    LOAD:0000000000003E90                 Elf64_Dyn <3, 3FB0h>    ; DT_PLTGOT
                    LOAD:0000000000003EA0                 Elf64_Dyn <2, 30h>      ; DT_PLTRELSZ
                    LOAD:0000000000003EB0                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
                    LOAD:0000000000003EC0                 Elf64_Dyn <17h, 678h>   ; DT_JMPREL
                    LOAD:0000000000003ED0                 Elf64_Dyn <7, 5B8h>     ; DT_RELA
                    LOAD:0000000000003EE0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
                    LOAD:0000000000003EF0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
                    LOAD:0000000000003F00                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
                    LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
                    LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFFEh, 568h> ; DT_VERNEED
                    LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
                    LOAD:0000000000003F40                 Elf64_Dyn <6FFFFFF0h, 554h> ; DT_VERSYM
                    LOAD:0000000000003F50                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
                    LOAD:0000000000003F60                 Elf64_Dyn <0>           ; DT_NULL
                    LOAD:0000000000003F70                 db    0
                    LOAD:0000000000003F71                 db    0
                    LOAD:0000000000003F72                 db    0
                    LOAD:0000000000003F73                 db    0
                    LOAD:0000000000003F74                 db    0
                    LOAD:0000000000003F75                 db    0
                    LOAD:0000000000003F76                 db    0
                    LOAD:0000000000003F77                 db    0
                    LOAD:0000000000003F78                 db    0
                    LOAD:0000000000003F79                 db    0
                    LOAD:0000000000003F7A                 db    0
                    LOAD:0000000000003F7B                 db    0
                    LOAD:0000000000003F7C                 db    0
                    LOAD:0000000000003F7D                 db    0
                    LOAD:0000000000003F7E                 db    0
                    LOAD:0000000000003F7F                 db    0
                    LOAD:0000000000003F80                 db    0
                    LOAD:0000000000003F81                 db    0
                    LOAD:0000000000003F82                 db    0
                    LOAD:0000000000003F83                 db    0
                    LOAD:0000000000003F84                 db    0
                    LOAD:0000000000003F85                 db    0
                    LOAD:0000000000003F86                 db    0
                    LOAD:0000000000003F87                 db    0
                    LOAD:0000000000003F88                 db    0
                    LOAD:0000000000003F89                 db    0
                    LOAD:0000000000003F8A                 db    0
                    LOAD:0000000000003F8B                 db    0
                    LOAD:0000000000003F8C                 db    0
                    LOAD:0000000000003F8D                 db    0
                    LOAD:0000000000003F8E                 db    0
                    LOAD:0000000000003F8F                 db    0
                    LOAD:0000000000003F90                 db    0
                    LOAD:0000000000003F91                 db    0
                    LOAD:0000000000003F92                 db    0
                    LOAD:0000000000003F93                 db    0
                    LOAD:0000000000003F94                 db    0
                    LOAD:0000000000003F95                 db    0
                    LOAD:0000000000003F96                 db    0
                    LOAD:0000000000003F97                 db    0
                    LOAD:0000000000003F98                 db    0
                    LOAD:0000000000003F99                 db    0
                    LOAD:0000000000003F9A                 db    0
                    LOAD:0000000000003F9B                 db    0
                    LOAD:0000000000003F9C                 db    0
                    LOAD:0000000000003F9D                 db    0
                    LOAD:0000000000003F9E                 db    0
                    LOAD:0000000000003F9F                 db    0
                    LOAD:0000000000003FA0                 db    0
                    LOAD:0000000000003FA1                 db    0
                    LOAD:0000000000003FA2                 db    0
                    LOAD:0000000000003FA3                 db    0
                    LOAD:0000000000003FA4                 db    0
                    LOAD:0000000000003FA5                 db    0
                    LOAD:0000000000003FA6                 db    0
                    LOAD:0000000000003FA7                 db    0
                    LOAD:0000000000003FA8                 db    0
                    LOAD:0000000000003FA9                 db    0
                    LOAD:0000000000003FAA                 db    0
                    LOAD:0000000000003FAB                 db    0
                    LOAD:0000000000003FAC                 db    0
                    LOAD:0000000000003FAD                 db    0
                    LOAD:0000000000003FAE                 db    0
                    LOAD:0000000000003FAF                 db    0
                    LOAD:0000000000003FAF LOAD            ends
                    LOAD:0000000000003FAF
                    .got:0000000000003FB0 ; ===========================================================================
                    .got:0000000000003FB0
                    .got:0000000000003FB0 ; Segment type: Pure data
                    .got:0000000000003FB0 ; Segment permissions: Read/Write
                    .got:0000000000003FB0 _got            segment qword public 'DATA' use64
                    .got:0000000000003FB0                 assume cs:_got
                    .got:0000000000003FB0                 ;org 3FB0h
                    .got:0000000000003FB0 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
                    .got:0000000000003FB8 qword_3FB8      dq 0                    ; DATA XREF: sub_1020↑r
                    .got:0000000000003FC0 qword_3FC0      dq 0                    ; DATA XREF: sub_1020+6↑r
                    .got:0000000000003FC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
                    .got:0000000000003FC8                                         ; DATA XREF: ___stack_chk_fail+4↑r
                    .got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
                    .got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
                    .got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
                    .got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
                    .got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
                    .got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
                    .got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
                    .got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
                    .got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
                    .got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
                    .got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
                    .got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
                    .got:0000000000003FF8 _got            ends
                    .got:0000000000003FF8
                    .data:0000000000004000 ; ===========================================================================
                    .data:0000000000004000
                    .data:0000000000004000 ; Segment type: Pure data
                    .data:0000000000004000 ; Segment permissions: Read/Write
                    .data:0000000000004000 _data           segment qword public 'DATA' use64
                    .data:0000000000004000                 assume cs:_data
                    .data:0000000000004000                 ;org 4000h
                    .data:0000000000004000                 public __data_start ; weak
                    .data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
                    .data:0000000000004000                                         ; data_start
                    .data:0000000000004001                 db    0
                    .data:0000000000004002                 db    0
                    .data:0000000000004003                 db    0
                    .data:0000000000004004                 db    0
                    .data:0000000000004005                 db    0
                    .data:0000000000004006                 db    0
                    .data:0000000000004007                 db    0
                    .data:0000000000004008                 public __dso_handle
                    .data:0000000000004008 ; void *_dso_handle
                    .data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
                    .data:0000000000004008                                         ; .data:__dso_handle↓o
                    .data:0000000000004008 _data           ends
                    .data:0000000000004008
                    .bss:0000000000004010 ; ===========================================================================
                    .bss:0000000000004010
                    .bss:0000000000004010 ; Segment type: Uninitialized
                    .bss:0000000000004010 ; Segment permissions: Read/Write
                    .bss:0000000000004010 _bss            segment byte public 'BSS' use64
                    .bss:0000000000004010                 assume cs:_bss
                    .bss:0000000000004010                 ;org 4010h
                    .bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                    .bss:0000000000004010                 public __bss_start
                    .bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
                    .bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
                    .bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
                    .bss:0000000000004010                                         ; completed.0
                    .bss:0000000000004010                                         ; _edata
                    .bss:0000000000004011                 align 8
                    .bss:0000000000004011 _bss            ends
                    .bss:0000000000004011
                    .prgend:0000000000004018 ; ===========================================================================
                    .prgend:0000000000004018
                    .prgend:0000000000004018 ; Segment type: Zero-length
                    .prgend:0000000000004018 _prgend         segment byte public '' use64
                    .prgend:0000000000004018 _end            label byte
                    .prgend:0000000000004018 _prgend         ends
                    .prgend:0000000000004018
                    extern:0000000000004020 ; ===========================================================================
                    extern:0000000000004020
                    extern:0000000000004020 ; Segment type: Externs
                    extern:0000000000004020 ; extern
                    extern:0000000000004020 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
                    extern:0000000000004020                 extrn __libc_start_main:near
                    extern:0000000000004020                                         ; CODE XREF: _start+1F↑p
                    extern:0000000000004020                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
                    extern:0000000000004028                 extrn __stack_chk_fail:near
                    extern:0000000000004028                                         ; CODE XREF: ___stack_chk_fail+4↑j
                    extern:0000000000004028                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
                    extern:0000000000004030                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
                    extern:0000000000004030                                         ; DATA XREF: .got:__printf_chk_ptr↑o
                    extern:0000000000004038 ; int __cxa_finalize(void *)
                    extern:0000000000004038                 extrn __imp___cxa_finalize:near ; weak
                    extern:0000000000004038                                         ; CODE XREF: __cxa_finalize+4↑j
                    extern:0000000000004038                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
                    extern:0000000000004040                 extrn _ITM_deregisterTMCloneTable ; weak
                    extern:0000000000004040                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
                    extern:0000000000004048                 extrn __gmon_start__:near ; weak
                    extern:0000000000004048                                         ; CODE XREF: _init_proc+14↑p
                    extern:0000000000004048                                         ; DATA XREF: .got:__gmon_start___ptr↑o
                    extern:0000000000004050                 extrn _ITM_registerTMCloneTable ; weak
                    extern:0000000000004050                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
                    extern:0000000000004050
                    extern:0000000000004050
                    extern:0000000000004050                 end _start
                    ```
                    
            - chatGPT IR
                - main
                    
                    ```less
                    ; ModuleID = 'main'
                    target triple = "x86_64-unknown-linux-gnu"
                    
                    ; Symbol: main ; Address: 0x1080
                    ; Intent: Print results of binary search for 3 keys (2, 5, -5) over a sorted int array [-5,-1,0,2,2,3,7,9,12] using lower_bound-style search (confidence=0.95). Evidence: printf formats “key %d -> index %ld”/“not found”, loop with mid=(lo+hi)/2 and hi initialized to 9.
                    
                    @.str_found = private unnamed_addr constant [21 x i8] c"key %d -> index %ld\0A\00"
                    @.str_notfound = private unnamed_addr constant [21 x i8] c"key %d -> not found\0A\00"
                    @nums = private unnamed_addr constant [9 x i32] [i32 -5, i32 -1, i32 0, i32 2, i32 2, i32 3, i32 7, i32 9, i32 12], align 4
                    @queries = private unnamed_addr constant [3 x i32] [i32 2, i32 5, i32 -5], align 4
                    
                    ; Only the needed extern declarations:
                    declare i32 @__printf_chk(i32, i8*, ...)
                    
                    define dso_local i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
                    entry:
                    br label %q.loop
                    
                    q.loop: ; qi in [0..3)
                    %qi = phi i64 [ 0, %entry ], [ %qi.next, %after_print ]
                    %qdone = icmp eq i64 %qi, 3
                    br i1 %qdone, label %exit, label %q.body
                    
                    q.body:
                    %qptr = getelementptr inbounds [3 x i32], [3 x i32]* @queries, i64 0, i64 %qi
                    %key32 = load i32, i32* %qptr, align 4
                    ; lower_bound over nums[0..9) (N=9): lo=0, hi=9
                    br label %bs.cond
                    
                    bs.cond:
                    %lo = phi i64 [ 0, %q.body ], [ %lo.next, %bs.step ]
                    %hi = phi i64 [ 9, %q.body ], [ %hi.next, %bs.step ]
                    %cont = icmp ult i64 %lo, %hi
                    br i1 %cont, label %bs.step, label %bs.end
                    
                    bs.step:
                    %sum = add i64 %lo, %hi
                    %mid = lshr i64 %sum, 1
                    %midptr = getelementptr inbounds [9 x i32], [9 x i32]* @nums, i64 0, i64 %mid
                    %midval = load i32, i32* %midptr, align 4
                    %cmp = icmp slt i32 %midval, %key32
                    %lo.cand = add i64 %mid, 1
                    %lo.next = select i1 %cmp, i64 %lo.cand, i64 %lo
                    %hi.next = select i1 %cmp, i64 %hi, i64 %mid
                    br label %bs.cond
                    
                    bs.end:
                    ; check if lo <= 8 && nums[lo] == key
                    %inrange = icmp ule i64 %lo, 8
                    br i1 %inrange, label %check.eq, label %print_nf
                    
                    check.eq:
                    %foundptr = getelementptr inbounds [9 x i32], [9 x i32]* @nums, i64 0, i64 %lo
                    %foundval = load i32, i32* %foundptr, align 4
                    %eq = icmp eq i32 %foundval, %key32
                    br i1 %eq, label %print_found, label %print_nf
                    
                    print_found:
                    %fmtf = getelementptr inbounds [21 x i8], [21 x i8]* @.str_found, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmtf, i32 %key32, i64 %lo)
                    br label %after_print
                    
                    print_nf:
                    %fmtn = getelementptr inbounds [21 x i8], [21 x i8]* @.str_notfound, i64 0, i64 0
                    call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %fmtn, i32 %key32)
                    br label %after_print
                    
                    after_print:
                    %qi.next = add i64 %qi, 1
                    br label %q.loop
                    
                    exit:
                    ret i32 0
                    }
                    ```
                    
        - bubblesort
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "bubblesort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1190",
                      "end": "0x11b6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x11c0",
                      "end": "0x11e9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x11f0",
                      "end": "0x1229",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1230",
                      "end": "0x1269",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1270",
                      "end": "0x1279",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x118d",
                      "size": 269,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x127c",
                      "end": "0x1289",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 19
                user? candidates: 6
                ```
                
            - chatGPT 함수 리스트
                
                ```less
                main
                ```
                
            - ida 디스어셈블리
                
                ```less
                
                ```
                
            - chatGPT IR
        - DFS
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "DFS",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1390",
                      "end": "0x13b6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x13c0",
                      "end": "0x13e9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x13f0",
                      "end": "0x1429",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1430",
                      "end": "0x1469",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1470",
                      "end": "0x1479",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4060",
                      "end": "0x4068",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1070",
                      "start": "0x1070",
                      "end": "0x107f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".calloc",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".malloc",
                      "start": "0x10c0",
                      "end": "0x10cb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10d0",
                      "end": "0x10db",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10e0",
                      "end": "0x1383",
                      "size": 675,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x147c",
                      "end": "0x1489",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "calloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "malloc",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4050",
                      "end": "0x4058",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 28
                user? candidates: 9
                ```
                
            - chatGPT 함수 리스트
                
                ```less
                main
                ```
                
            - ida 디스어셈블리
            - chatGPT IR
        - dijkstra
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "dijkstra",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1430",
                      "end": "0x1456",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x1460",
                      "end": "0x1489",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x1490",
                      "end": "0x14c9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x14d0",
                      "end": "0x1509",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1510",
                      "end": "0x1519",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4058",
                      "end": "0x4060",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".calloc",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10c0",
                      "end": "0x142c",
                      "size": 876,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x151c",
                      "end": "0x1529",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "calloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 25
                user? candidates: 8
                ```
                
            - chatGPT 함수 리스트
                
                ```less
                main
                ```
                
            - ida 디스어셈블리
            - chatGPT IR
        - insertionsort
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "insertionsort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x11a0",
                      "end": "0x11c6",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x11d0",
                      "end": "0x11f9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x1200",
                      "end": "0x1239",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1240",
                      "end": "0x1279",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1280",
                      "end": "0x1289",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x1196",
                      "size": 278,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x128c",
                      "end": "0x1299",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 19
                user? candidates: 6
                ```
                
            - chatGPT 함수 리스트
                
                ```less
                main
                ```
                
            - ida 디스어셈블리
            - chatGPT IR
        - mergesort
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "mergesort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1270",
                      "end": "0x1296",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x12a0",
                      "end": "0x12c9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x12d0",
                      "end": "0x1309",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x1310",
                      "end": "0x1349",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1350",
                      "end": "0x1359",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4058",
                      "end": "0x4060",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1050",
                      "start": "0x1050",
                      "end": "0x105f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1060",
                      "start": "0x1060",
                      "end": "0x106f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".free",
                      "start": "0x1080",
                      "end": "0x108b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1090",
                      "end": "0x109b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".malloc",
                      "start": "0x10a0",
                      "end": "0x10ab",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x10b0",
                      "end": "0x10bb",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x10c0",
                      "end": "0x1268",
                      "size": 424,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x135c",
                      "end": "0x1369",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "free",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "malloc",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4040",
                      "end": "0x4048",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 25
                user? candidates: 8
                ```
                
            - chatGPT 함수 리스트
            - ida 디스어셈블리
            - chatGPT IR
        - quicksort
            - ida 함수 리스트
                
                ```less
                ===== FUNCTION LIST (JSON) =====
                {
                  "binary": "quicksort",
                  "arch": "",
                  "bits": 64,
                  "functions": [
                    {
                      "name": "_start",
                      "start": "0x1150",
                      "end": "0x1176",
                      "size": 38,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "deregister_tm_clones",
                      "start": "0x1180",
                      "end": "0x11a9",
                      "size": 41,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "register_tm_clones",
                      "start": "0x11b0",
                      "end": "0x11e9",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__do_global_dtors_aux",
                      "start": "0x11f0",
                      "end": "0x1229",
                      "size": 57,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "frame_dummy",
                      "start": "0x1230",
                      "end": "0x1239",
                      "size": 9,
                      "segment": ".text",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__libc_start_main",
                      "start": "0x4020",
                      "end": "0x4028",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__gmon_start__",
                      "start": "0x4048",
                      "end": "0x4050",
                      "size": 8,
                      "segment": "extern",
                      "category": "crt/runtime",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1020",
                      "start": "0x1020",
                      "end": "0x102d",
                      "size": 13,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1030",
                      "start": "0x1030",
                      "end": "0x103f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "sub_1040",
                      "start": "0x1040",
                      "end": "0x104f",
                      "size": 15,
                      "segment": ".plt",
                      "category": "plt",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__cxa_finalize",
                      "start": "0x1050",
                      "end": "0x105b",
                      "size": 11,
                      "segment": ".plt.got",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__stack_chk_fail",
                      "start": "0x1060",
                      "end": "0x106b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".__printf_chk",
                      "start": "0x1070",
                      "end": "0x107b",
                      "size": 11,
                      "segment": ".plt.sec",
                      "category": "plt",
                      "thunk": true,
                      "callees": []
                    },
                    {
                      "name": ".init_proc",
                      "start": "0x1000",
                      "end": "0x101b",
                      "size": 27,
                      "segment": ".init",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "main",
                      "start": "0x1080",
                      "end": "0x114d",
                      "size": 205,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "quick_sort",
                      "start": "0x1240",
                      "end": "0x1330",
                      "size": 240,
                      "segment": ".text",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": ".term_proc",
                      "start": "0x1330",
                      "end": "0x133d",
                      "size": 13,
                      "segment": ".fini",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__stack_chk_fail",
                      "start": "0x4028",
                      "end": "0x4030",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__printf_chk",
                      "start": "0x4030",
                      "end": "0x4038",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    },
                    {
                      "name": "__imp___cxa_finalize",
                      "start": "0x4038",
                      "end": "0x4040",
                      "size": 8,
                      "segment": "extern",
                      "category": "user?",
                      "thunk": false,
                      "callees": []
                    }
                  ]
                }
                
                ----- SUMMARY -----
                total functions: 20
                user? candidates: 7
                ```
                
            - chatGPT 함수 리스트
                
                ```less
                [\"main\",\"quick_sort\"]
                ```
                
            - ida 디스어셈블리
            - chatGPT IR
        - timsort
            - ida 함수 리스트
            - chatGPT 함수 리스트
                
                ```less
                "[\"main\",\"timsort.constprop.0\"]"
                ```
                
            - ida 디스어셈블리
            - chatGPT IR
- GPT 프롬프트
    - 함수 뽑는 gpt
        - 난독화 x
            
            ```python
            Role
            Receive an IDA function list and select only the minimal set of internal functions required to emit IR. Output must be a JSON array of function names only—no extra text.
            
            Rules
            1) Include only internal (.text) functions reachable from the target (or entrypoints).
            2) Exclude CRT/startup/teardown and PLT/import stubs/thunks and logging-only wrappers.
               Patterns to skip: _start, __libc_start_main, __gmon_start__, __cxa_*, __chkstk, __scrt_*, *.plt, __imp_*, j__*
            3) Do not include external library calls (they will be IR declares).
            4) Include callbacks passed as function pointers if internally defined and reachable.
            5) Do not invent names not present in the input.
            
            Output format
            ["fnA","fnB","fnC"]
            
            ```
            
        - 난독화 o
            
            ```less
            Role
            Receive an IDA function list and select only the minimal set of internal functions required to emit IR. Output must be a JSON array of function names only—no extra text.
            
            Obfuscation context
            The program was source-level obfuscated (e.g., arithmetic encoding, opaque predicates, control-flow flattening, dispatcher/helpers, decoy/dummy functions). Apply the rules below with these additions:
            A) Include obfuscator-inserted helpers (e.g., init/opaque/encode/decode/dispatcher functions) only if they are actually reachable from entrypoints or already-included functions. Do not include dead decoys with zero inbound references.
            B) Exclude wrappers/thunks that merely forward to excluded externals or perform logging only. If a helper transforms data that is subsequently used by reachable code (e.g., constant/string decryptors, arithmetic encoders), include it.
            C) If the obfuscator split logic into many tiny helpers, include only those that have direct call edges from included functions.
            D) If multiple internal names alias the same implementation and only one is referenced, include only the referenced one. Do not invent or rename functions.
            E) Callbacks passed by function pointer that are internally defined and reachable must be included.
            
            Rules
            
            Include only internal (.text) functions reachable from the target (or entrypoints).
            
            Exclude CRT/startup/teardown and PLT/import stubs/thunks and logging-only wrappers.
            Patterns to skip: _start, _libc_start_main, gmon_start, cxa, __chkstk, _scrt, .plt, _imp, j*
            
            Do not include external library calls (they will be IR declares).
            
            Include callbacks passed as function pointers if internally defined and reachable.
            
            Do not invent names not present in the input.
            
            Output format
            ["fnA","fnB","fnC"]
            ```
            

[레퍼런스](https://www.notion.so/26a7b33e9907800b8c62ccd197cb172f?pvs=21)

ir 유효성

|  |  | valid_rate | verify_rate | codegen_rate | diff_equal_rate |
| --- | --- | --- | --- | --- | --- |
| BFS | llm3 | 1 | 1 | 1 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
| binarysearch | llm3 | 1 | 1 | 1 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
| bubblesort | llm3 | 0 | 0 | 0 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
| DFS | llm3 | 0 | 0 | 0 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
| dijkstra | llm3 | 0 | 0 | 0 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
| insertionsort | llm3 | 1 | 1 | 1 | 0 |
|  | mcsema | 0 | 0 | 0 | 0 |
| mergesort | llm3 | 0 | 0 | 0 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
| quicksort | llm3 | 0 | 0 | 0 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
| timsort | llm3 | 0 | 0 | 0 | 0 |
|  | mcsema | 1 | 1 | 1 | 0 |
|  |  |  |  |  |  |

재컴파일 (출력 결과값)

난독화 x

|  | llm3 | truth | = |
| --- | --- | --- | --- |
| BFS | BFS order from 0: 0 1 2 6 5 4
dist(0 -> 0) = 0
dist(0 -> 1) = 1
dist(0 -> 2) = 1
dist(0 -> 3) = -1
dist(0 -> 4) = 3
dist(0 -> 5) = 2
dist(0 -> 6) = 1 | BFS order from 0: 0 1 2 3 4 5 6
dist(0 -> 0) = 0
dist(0 -> 1) = 1
dist(0 -> 2) = 1
dist(0 -> 3) = 2
dist(0 -> 4) = 2
dist(0 -> 5) = 2
dist(0 -> 6) = 3 | x |
| binartysearch | key 2 -> index 3
key 5 -> not found
key -5 -> index 0 | key 2 -> index 3
key 5 -> not found
key -5 -> index 0 | o |
| insertionsort | 0 1 2 3 4 5 6 7 8 9 | 0 1 2 3 4 5 6 7 8 9  | o |
|  |  |  |  |

난독화 o

|  | llm3 | truth | = |
| --- | --- | --- | --- |
| binartysearch | key 2 -> index 3
key 5 -> not found
key -5 -> index 0 | key 2 -> index 3
key 5 -> not found
key -5 -> index 0 | o |
|  |  |  |  |