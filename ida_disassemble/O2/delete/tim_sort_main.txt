LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-2137-ACAB-99                      |
LOAD:0000000000000000 ; |                              elf <elv@ven>                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7A0DE3A6B2EFC7FEBEB89E67417DE0EC9AED45900400516F42B30356F9532DCF
LOAD:0000000000000000 ; Input MD5    : 60C430B9A63E00DE7F0BC657F795A9EE
LOAD:0000000000000000 ; Input CRC32  : E84B4E78
LOAD:0000000000000000 ; Compiler     : GNU C++
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : C:\Users\EMSEC\Desktop\binary\linux_binary\timsort
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'Scrt1.o'
LOAD:0000000000000000 ; Source File : 'timsort.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure data
LOAD:0000000000000000 ; Segment permissions: Read
LOAD:0000000000000000 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000003F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000408↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset _start        ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 37B0h                ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 0Dh                  ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 1Fh                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 1Eh                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 2D8h                 ; Size in file image
LOAD:0000000000000068                 dq 2D8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 318h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 318h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 4                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7A8h                 ; Size in file image
LOAD:00000000000000D8                 dq 7A8h                 ; Size in memory image
LOAD:00000000000000E0                 dq 1000h                ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 5                    ; Flags
LOAD:00000000000000F0                 dq 1000h                ; File offset
LOAD:00000000000000F8                 dq offset _init_proc    ; Virtual address
LOAD:0000000000000100                 dq 1000h                ; Physical address
LOAD:0000000000000108                 dq 0BD5h                ; Size in file image
LOAD:0000000000000110                 dq 0BD5h                ; Size in memory image
LOAD:0000000000000118                 dq 1000h                ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 1                    ; Type: LOAD
LOAD:0000000000000124                 dd 4                    ; Flags
LOAD:0000000000000128                 dq 2000h                ; File offset
LOAD:0000000000000130                 dq offset _IO_stdin_used ; Virtual address
LOAD:0000000000000138                 dq 2000h                ; Physical address
LOAD:0000000000000140                 dq 180h                 ; Size in file image
LOAD:0000000000000148                 dq 180h                 ; Size in memory image
LOAD:0000000000000150                 dq 1000h                ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 1                    ; Type: LOAD
LOAD:000000000000015C                 dd 6                    ; Flags
LOAD:0000000000000160                 dq 2D90h                ; File offset
LOAD:0000000000000168                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000170                 dq 3D90h                ; Physical address
LOAD:0000000000000178                 dq 280h                 ; Size in file image
LOAD:0000000000000180                 dq 288h                 ; Size in memory image
LOAD:0000000000000188                 dq 1000h                ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000194                 dd 6                    ; Flags
LOAD:0000000000000198                 dq 2DA0h                ; File offset
LOAD:00000000000001A0                 dq offset _DYNAMIC      ; Virtual address
LOAD:00000000000001A8                 dq 3DA0h                ; Physical address
LOAD:00000000000001B0                 dq 1F0h                 ; Size in file image
LOAD:00000000000001B8                 dq 1F0h                 ; Size in memory image
LOAD:00000000000001C0                 dq 8                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 4                    ; Type: NOTE
LOAD:00000000000001CC                 dd 4                    ; Flags
LOAD:00000000000001D0                 dq 338h                 ; File offset
LOAD:00000000000001D8                 dq offset dword_338     ; Virtual address
LOAD:00000000000001E0                 dq 338h                 ; Physical address
LOAD:00000000000001E8                 dq 30h                  ; Size in file image
LOAD:00000000000001F0                 dq 30h                  ; Size in memory image
LOAD:00000000000001F8                 dq 8                    ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 4                    ; Type: NOTE
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 368h                 ; File offset
LOAD:0000000000000210                 dq offset dword_368     ; Virtual address
LOAD:0000000000000218                 dq 368h                 ; Physical address
LOAD:0000000000000220                 dq 44h                  ; Size in file image
LOAD:0000000000000228                 dq 44h                  ; Size in memory image
LOAD:0000000000000230                 dq 4                    ; Alignment
LOAD:0000000000000238 ; PHT Entry 9
LOAD:0000000000000238                 dd 6474E553h            ; Type: 6474E553
LOAD:000000000000023C                 dd 4                    ; Flags
LOAD:0000000000000240                 dq 338h                 ; File offset
LOAD:0000000000000248                 dq offset dword_338     ; Virtual address
LOAD:0000000000000250                 dq 338h                 ; Physical address
LOAD:0000000000000258                 dq 30h                  ; Size in file image
LOAD:0000000000000260                 dq 30h                  ; Size in memory image
LOAD:0000000000000268                 dq 8                    ; Alignment
LOAD:0000000000000270 ; PHT Entry 10
LOAD:0000000000000270                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000274                 dd 4                    ; Flags
LOAD:0000000000000278                 dq 2010h                ; File offset
LOAD:0000000000000280                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:0000000000000288                 dq 2010h                ; Physical address
LOAD:0000000000000290                 dq 3Ch                  ; Size in file image
LOAD:0000000000000298                 dq 3Ch                  ; Size in memory image
LOAD:00000000000002A0                 dq 4                    ; Alignment
LOAD:00000000000002A8 ; PHT Entry 11
LOAD:00000000000002A8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000002AC                 dd 6                    ; Flags
LOAD:00000000000002B0                 dq 0                    ; File offset
LOAD:00000000000002B8                 dq 0                    ; Virtual address
LOAD:00000000000002C0                 dq 0                    ; Physical address
LOAD:00000000000002C8                 dq 0                    ; Size in file image
LOAD:00000000000002D0                 dq 0                    ; Size in memory image
LOAD:00000000000002D8                 dq 10h                  ; Alignment
LOAD:00000000000002E0 ; PHT Entry 12
LOAD:00000000000002E0                 dd 6474E552h            ; Type: RO-AFTER
LOAD:00000000000002E4                 dd 4                    ; Flags
LOAD:00000000000002E8                 dq 2D90h                ; File offset
LOAD:00000000000002F0                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:00000000000002F8                 dq 3D90h                ; Physical address
LOAD:0000000000000300                 dq 270h                 ; Size in file image
LOAD:0000000000000308                 dq 270h                 ; Size in memory image
LOAD:0000000000000310                 dq 1                    ; Alignment
LOAD:0000000000000318 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000318                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000334                 align 8
LOAD:0000000000000338 ; ELF Note Entry
LOAD:0000000000000338 dword_338       dd 4                    ; DATA XREF: LOAD:00000000000001D8↑o
LOAD:0000000000000338                                         ; LOAD:0000000000000248↑o
LOAD:0000000000000338                                         ; Name Size
LOAD:000000000000033C                 dd 20h                  ; Desc Size
LOAD:0000000000000340                 dd 5                    ; Type: NT_GNU_PROPERTY_TYPE_0
LOAD:0000000000000344 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000348                 db 2, 2 dup(0), 0C0h, 4, 3 dup(0), 3, 7 dup(0), 2, 80h ; Desc
LOAD:000000000000035A                 db 0, 0C0h, 4, 3 dup(0), 1, 7 dup(0)
LOAD:0000000000000368 ; ELF Note Entry
LOAD:0000000000000368 dword_368       dd 4                    ; DATA XREF: LOAD:0000000000000210↑o
LOAD:0000000000000368                                         ; Name Size
LOAD:000000000000036C                 dd 14h                  ; Desc Size
LOAD:0000000000000370                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000374 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000378                 db 83h, 3Fh, 34h, 2Eh, 0DCh, 60h, 80h, 7Ah, 4Bh, 35h, 18h ; Desc
LOAD:0000000000000383                 db 0D2h, 7Fh, 60h, 0C7h, 86h, 3Dh, 0FCh, 2Ah, 0FAh
LOAD:000000000000038C ; ELF Note Entry
LOAD:000000000000038C __abi_tag       dd 4                    ; Name Size
LOAD:0000000000000390                 dd 10h                  ; Desc Size
LOAD:0000000000000394                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000398 aGnu_1          db 'GNU',0              ; Name
LOAD:000000000000039C                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:00000000000003AC                 align 10h
LOAD:00000000000003B0 ; ELF GNU Hash Table
LOAD:00000000000003B0 elf_gnu_hash_nbuckets dd 2
LOAD:00000000000003B4 elf_gnu_hash_symbias dd 0Bh
LOAD:00000000000003B8 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000003BC elf_gnu_hash_shift dd 6
LOAD:00000000000003C0 elf_gnu_hash_indexes dq 810000h
LOAD:00000000000003C8 elf_gnu_hash_bucket dd 0Bh, 0
LOAD:00000000000003D0 elf_gnu_hash_chain dd 6DCE65D1h, 0
LOAD:00000000000003D8 ; ELF Symbol Table
LOAD:00000000000003D8                 Elf64_Sym <0>
LOAD:00000000000003F0                 Elf64_Sym <offset aFree - offset unk_4F8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000003F0                            0>
LOAD:0000000000000408                 Elf64_Sym <offset aLibcStartMain - offset unk_4F8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aItmDeregistert - offset unk_4F8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000420                            offset dword_0, 0>
LOAD:0000000000000438                 Elf64_Sym <offset aStackChkFail - offset unk_4F8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aMemcpyChk - offset unk_4F8, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:0000000000000450                            offset dword_0, 0>
LOAD:0000000000000468                 Elf64_Sym <offset aGmonStart - offset unk_4F8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000468                            offset dword_0, 0>
LOAD:0000000000000480                 Elf64_Sym <offset aMemcpy - offset unk_4F8, 12h, 0, 0, offset dword_0,\ ; "memcpy"
LOAD:0000000000000480                            0>
LOAD:0000000000000498                 Elf64_Sym <offset aMalloc - offset unk_4F8, 12h, 0, 0, offset dword_0,\ ; "malloc"
LOAD:0000000000000498                            0>
LOAD:00000000000004B0                 Elf64_Sym <offset aPrintfChk - offset unk_4F8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000004B0                            offset dword_0, 0>
LOAD:00000000000004C8                 Elf64_Sym <offset aItmRegistertmc - offset unk_4F8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000004C8                            offset dword_0, 0>
LOAD:00000000000004E0                 Elf64_Sym <offset aCxaFinalize - offset unk_4F8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000004E0                            offset dword_0, 0>
LOAD:00000000000004F8 ; ELF String Table
LOAD:00000000000004F8 unk_4F8         db    0                 ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:00000000000004F8                                         ; LOAD:0000000000000408↑o ...
LOAD:00000000000004F9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004E0↑o
LOAD:0000000000000508 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000004B0↑o
LOAD:0000000000000515 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000498↑o
LOAD:000000000000051C aLibcStartMain  db '__libc_start_main',0
LOAD:000000000000051C                                         ; DATA XREF: LOAD:0000000000000408↑o
LOAD:000000000000052E aFree           db 'free',0             ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:0000000000000533 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000450↑o
LOAD:0000000000000540 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000480↑o
LOAD:0000000000000547 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000438↑o
LOAD:0000000000000558 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000005F8↓o
LOAD:0000000000000562 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000608↓o
LOAD:000000000000056D aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000618↓o
LOAD:0000000000000579 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000628↓o
LOAD:0000000000000583 aGlibc234_0     db 'GLIBC_2.34',0       ; DATA XREF: LOAD:0000000000000638↓o
LOAD:000000000000058E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000648↓o
LOAD:000000000000059A aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:000000000000059A                                         ; DATA XREF: LOAD:0000000000000420↑o
LOAD:00000000000005B6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000468↑o
LOAD:00000000000005C5 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000000000005C5                                         ; DATA XREF: LOAD:00000000000004C8↑o
LOAD:00000000000005DF                 align 20h
LOAD:00000000000005E0 ; ELF GNU Symbol Version Table
LOAD:00000000000005E0                 dw 0
LOAD:00000000000005E2                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:00000000000005E4                 dw 3                    ; __libc_start_main@@GLIBC_2.34
LOAD:00000000000005E6                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:00000000000005E8                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:00000000000005EA                 dw 5                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:00000000000005EC                 dw 1                    ; global symbol: __gmon_start__
LOAD:00000000000005EE                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:00000000000005F0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:00000000000005F2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:00000000000005F4                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:00000000000005F6                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000005F8 ; ELF GNU Symbol Version Requirements
LOAD:00000000000005F8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset unk_4F8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000608                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset unk_4F8, 10h> ; "GLIBC_2.14"
LOAD:0000000000000618                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset unk_4F8, 10h> ; "GLIBC_2.3.4"
LOAD:0000000000000628                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset unk_4F8, 10h> ; "GLIBC_2.4"
LOAD:0000000000000638                 Elf64_Vernaux <69691B4h, 0, 3, offset aGlibc234_0 - offset unk_4F8, \ ; "GLIBC_2.34"
LOAD:0000000000000638                                10h>
LOAD:0000000000000648                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset unk_4F8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000658 ; ELF RELA Relocation Table
LOAD:0000000000000658                 Elf64_Rela <3D90h, 8, 12F0h> ; R_X86_64_RELATIVE +12F0h
LOAD:0000000000000670                 Elf64_Rela <3D98h, 8, 12B0h> ; R_X86_64_RELATIVE +12B0h
LOAD:0000000000000688                 Elf64_Rela <4008h, 8, 4008h> ; R_X86_64_RELATIVE +4008h
LOAD:00000000000006A0                 Elf64_Rela <3FD8h, 200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000006B8                 Elf64_Rela <3FE0h, 300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000006D0                 Elf64_Rela <3FE8h, 600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000006E8                 Elf64_Rela <3FF0h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000700                 Elf64_Rela <3FF8h, 0B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000718 ; ELF JMPREL Relocation Table
LOAD:0000000000000718                 Elf64_Rela <3FA8h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000730                 Elf64_Rela <3FB0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000748                 Elf64_Rela <3FB8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:0000000000000760                 Elf64_Rela <3FC0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000000778                 Elf64_Rela <3FC8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000000790                 Elf64_Rela <3FD0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000000790 LOAD            ends
LOAD:0000000000000790
.init:0000000000001000 ; ===========================================================================
.init:0000000000001000
.init:0000000000001000 ; Segment type: Pure code
.init:0000000000001000 ; Segment permissions: Read/Execute
.init:0000000000001000 _init           segment dword public 'CODE' use64
.init:0000000000001000                 assume cs:_init
.init:0000000000001000                 ;org 1000h
.init:0000000000001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001000
.init:0000000000001000 ; =============== S U B R O U T I N E =======================================
.init:0000000000001000
.init:0000000000001000
.init:0000000000001000                 public _init_proc
.init:0000000000001000 _init_proc      proc near               ; DATA XREF: LOAD:00000000000000F8↑o
.init:0000000000001000                 endbr64                 ; _init
.init:0000000000001004                 sub     rsp, 8
.init:0000000000001008                 mov     rax, cs:__gmon_start___ptr
.init:000000000000100F                 test    rax, rax
.init:0000000000001012                 jz      short loc_1016
.init:0000000000001014                 call    rax ; __gmon_start__
.init:0000000000001016
.init:0000000000001016 loc_1016:                               ; CODE XREF: _init_proc+12↑j
.init:0000000000001016                 add     rsp, 8
.init:000000000000101A                 retn
.init:000000000000101A _init_proc      endp
.init:000000000000101A
.init:000000000000101A _init           ends
.init:000000000000101A
LOAD:000000000000101B ; ===========================================================================
LOAD:000000000000101B
LOAD:000000000000101B ; Segment type: Pure code
LOAD:000000000000101B ; Segment permissions: Read/Execute
LOAD:000000000000101B LOAD            segment mempage public 'CODE' use64
LOAD:000000000000101B                 assume cs:LOAD
LOAD:000000000000101B                 ;org 101Bh
LOAD:000000000000101B                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000101B                 align 20h
LOAD:000000000000101B LOAD            ends
LOAD:000000000000101B
.plt:0000000000001020 ; ===========================================================================
.plt:0000000000001020
.plt:0000000000001020 ; Segment type: Pure code
.plt:0000000000001020 ; Segment permissions: Read/Execute
.plt:0000000000001020 _plt            segment para public 'CODE' use64
.plt:0000000000001020                 assume cs:_plt
.plt:0000000000001020                 ;org 1020h
.plt:0000000000001020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001020
.plt:0000000000001020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001020
.plt:0000000000001020
.plt:0000000000001020 sub_1020        proc near               ; CODE XREF: sub_1030+9↓j
.plt:0000000000001020                                         ; sub_1040+9↓j ...
.plt:0000000000001020 ; __unwind {
.plt:0000000000001020                 push    cs:qword_3F98
.plt:0000000000001026                 bnd jmp cs:qword_3FA0
.plt:0000000000001026 sub_1020        endp
.plt:0000000000001026
.plt:0000000000001026 ; ---------------------------------------------------------------------------
.plt:000000000000102D                 align 10h
.plt:0000000000001030 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1030]
.plt:000000000000103F                 align 20h
.plt:0000000000001040 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1040]
.plt:000000000000104F                 align 10h
.plt:0000000000001050 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1050]
.plt:000000000000105F                 align 20h
.plt:0000000000001060 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1060]
.plt:000000000000106F                 align 10h
.plt:0000000000001070 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1070]
.plt:000000000000107F                 align 20h
.plt:0000000000001080 ; [0000000F BYTES: COLLAPSED FUNCTION sub_1080]
.plt:000000000000108F                 align 10h
.plt:000000000000108F ; } // starts at 1020
.plt:000000000000108F _plt            ends
.plt:000000000000108F
.plt.got:0000000000001090 ; ===========================================================================
.plt.got:0000000000001090
.plt.got:0000000000001090 ; Segment type: Pure code
.plt.got:0000000000001090 ; Segment permissions: Read/Execute
.plt.got:0000000000001090 _plt_got        segment para public 'CODE' use64
.plt.got:0000000000001090                 assume cs:_plt_got
.plt.got:0000000000001090                 ;org 1090h
.plt.got:0000000000001090                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001090 ; [0000000B BYTES: COLLAPSED FUNCTION __cxa_finalize]
.plt.got:000000000000109B                 align 20h
.plt.got:000000000000109B ; } // starts at 1090
.plt.got:000000000000109B _plt_got        ends
.plt.got:000000000000109B
.plt.sec:00000000000010A0 ; ===========================================================================
.plt.sec:00000000000010A0
.plt.sec:00000000000010A0 ; Segment type: Pure code
.plt.sec:00000000000010A0 ; Segment permissions: Read/Execute
.plt.sec:00000000000010A0 _plt_sec        segment para public 'CODE' use64
.plt.sec:00000000000010A0                 assume cs:_plt_sec
.plt.sec:00000000000010A0                 ;org 10A0h
.plt.sec:00000000000010A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.sec:00000000000010A0 ; [0000000B BYTES: COLLAPSED FUNCTION _free]
.plt.sec:00000000000010AB                 align 10h
.plt.sec:00000000000010B0 ; [0000000B BYTES: COLLAPSED FUNCTION ___stack_chk_fail]
.plt.sec:00000000000010BB                 align 20h
.plt.sec:00000000000010C0 ; [0000000B BYTES: COLLAPSED FUNCTION ___memcpy_chk]
.plt.sec:00000000000010CB                 align 10h
.plt.sec:00000000000010D0 ; [0000000B BYTES: COLLAPSED FUNCTION _memcpy]
.plt.sec:00000000000010DB                 align 20h
.plt.sec:00000000000010E0 ; [0000000B BYTES: COLLAPSED FUNCTION _malloc]
.plt.sec:00000000000010EB                 align 10h
.plt.sec:00000000000010F0 ; [0000000B BYTES: COLLAPSED FUNCTION ___printf_chk]
.plt.sec:00000000000010FB                 align 20h
.plt.sec:00000000000010FB ; } // starts at 10A0
.plt.sec:00000000000010FB _plt_sec        ends
.plt.sec:00000000000010FB
.text:0000000000001100 ; ===========================================================================
.text:0000000000001100
.text:0000000000001100 ; Segment type: Pure code
.text:0000000000001100 ; Segment permissions: Read/Execute
.text:0000000000001100 _text           segment para public 'CODE' use64
.text:0000000000001100                 assume cs:_text
.text:0000000000001100                 ;org 1100h
.text:0000000000001100                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001100
.text:0000000000001100 ; =============== S U B R O U T I N E =======================================
.text:0000000000001100
.text:0000000000001100
.text:0000000000001100 ; int __fastcall main(int argc, const char **argv, const char **envp)
.text:0000000000001100                 public main
.text:0000000000001100 main            proc near               ; DATA XREF: _start+18↓o
.text:0000000000001100
.text:0000000000001100 var_78          = qword ptr -78h
.text:0000000000001100 var_70          = qword ptr -70h
.text:0000000000001100 var_68          = qword ptr -68h
.text:0000000000001100 var_60          = qword ptr -60h
.text:0000000000001100 var_58          = qword ptr -58h
.text:0000000000001100 var_50          = qword ptr -50h
.text:0000000000001100 var_48          = qword ptr -48h
.text:0000000000001100 var_40          = dword ptr -40h
.text:0000000000001100 var_30          = qword ptr -30h
.text:0000000000001100
.text:0000000000001100 ; __unwind {
.text:0000000000001100                 endbr64
.text:0000000000001104                 push    r13
.text:0000000000001106                 push    r12
.text:0000000000001108                 lea     r12, unk_2004
.text:000000000000110F                 push    rbp
.text:0000000000001110                 lea     rbp, aDS        ; "%d%s"
.text:0000000000001117                 push    rbx
.text:0000000000001118                 sub     rsp, 58h
.text:000000000000111C                 mov     rax, fs:28h
.text:0000000000001125                 mov     [rsp+78h+var_30], rax
.text:000000000000112A                 mov     rax, 300000005h
.text:0000000000001134                 mov     rbx, rsp
.text:0000000000001137                 lea     r13, [rsp+78h+var_40]
.text:000000000000113C                 mov     [rsp+78h+var_40], 0FFFFFFFFh
.text:0000000000001144                 mov     rdi, rbx
.text:0000000000001147                 mov     [rsp+78h+var_78], rax
.text:000000000000114B                 mov     rax, 200000001h
.text:0000000000001155                 mov     [rsp+78h+var_70], rax
.text:000000000000115A                 mov     rax, 500000009h
.text:0000000000001164                 mov     [rsp+78h+var_68], rax
.text:0000000000001169                 mov     rax, 600000005h
.text:0000000000001173                 mov     [rsp+78h+var_60], rax
.text:0000000000001178                 mov     rax, 800000007h
.text:0000000000001182                 mov     [rsp+78h+var_58], rax
.text:0000000000001187                 mov     rax, 400000000h
.text:0000000000001191                 mov     [rsp+78h+var_50], rax
.text:0000000000001196                 mov     rax, 0A00000004h
.text:00000000000011A0                 mov     [rsp+78h+var_48], rax
.text:00000000000011A5                 call    timsort_constprop_0
.text:00000000000011AA                 nop     word ptr [rax+rax+00h]
.text:00000000000011B0
.text:00000000000011B0 loc_11B0:                               ; CODE XREF: main+CB↓j
.text:00000000000011B0                 mov     edx, [rbx]
.text:00000000000011B2                 mov     rcx, r12
.text:00000000000011B5                 mov     rsi, rbp
.text:00000000000011B8                 mov     edi, 1
.text:00000000000011BD                 xor     eax, eax
.text:00000000000011BF                 add     rbx, 4
.text:00000000000011C3                 call    ___printf_chk
.text:00000000000011C8                 cmp     r13, rbx
.text:00000000000011CB                 jnz     short loc_11B0
.text:00000000000011CD                 mov     edx, [rsp+78h+var_40]
.text:00000000000011D1                 xor     eax, eax
.text:00000000000011D3                 lea     rcx, asc_200B   ; "\n"
.text:00000000000011DA                 mov     rsi, rbp
.text:00000000000011DD                 mov     edi, 1
.text:00000000000011E2                 call    ___printf_chk
.text:00000000000011E7                 mov     rax, [rsp+78h+var_30]
.text:00000000000011EC                 sub     rax, fs:28h
.text:00000000000011F5                 jnz     short loc_1204
.text:00000000000011F7                 add     rsp, 58h
.text:00000000000011FB                 xor     eax, eax
.text:00000000000011FD                 pop     rbx
.text:00000000000011FE                 pop     rbp
.text:00000000000011FF                 pop     r12
.text:0000000000001201                 pop     r13
.text:0000000000001203                 retn
.text:0000000000001204 ; ---------------------------------------------------------------------------
.text:0000000000001204
.text:0000000000001204 loc_1204:                               ; CODE XREF: main+F5↑j
.text:0000000000001204                 call    ___stack_chk_fail
.text:0000000000001204 ; } // starts at 1100
.text:0000000000001204 main            endp
.text:0000000000001204
.text:0000000000001204 ; ---------------------------------------------------------------------------
.text:0000000000001209                 align 10h
.text:0000000000001210
.text:0000000000001210 ; =============== S U B R O U T I N E =======================================
.text:0000000000001210
.text:0000000000001210 ; Attributes: noreturn fuzzy-sp
.text:0000000000001210
.text:0000000000001210                 public _start
.text:0000000000001210 _start          proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001210 ; __unwind {
.text:0000000000001210                 endbr64
.text:0000000000001214                 xor     ebp, ebp
.text:0000000000001216                 mov     r9, rdx         ; rtld_fini
.text:0000000000001219                 pop     rsi             ; argc
.text:000000000000121A                 mov     rdx, rsp        ; ubp_av
.text:000000000000121D                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001221                 push    rax
.text:0000000000001222                 push    rsp             ; stack_end
.text:0000000000001223                 xor     r8d, r8d        ; fini
.text:0000000000001226                 xor     ecx, ecx        ; init
.text:0000000000001228                 lea     rdi, main       ; main
.text:000000000000122F                 call    cs:__libc_start_main_ptr
.text:0000000000001235                 hlt
.text:0000000000001235 ; } // starts at 1210
.text:0000000000001235 _start          endp
.text:0000000000001235
.text:0000000000001235 ; ---------------------------------------------------------------------------
.text:0000000000001236                 align 20h
.text:0000000000001240
.text:0000000000001240 ; =============== S U B R O U T I N E =======================================
.text:0000000000001240
.text:0000000000001240
.text:0000000000001240 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_12D7↓p
.text:0000000000001240                 lea     rdi, __bss_start
.text:0000000000001247                 lea     rax, __bss_start
.text:000000000000124E                 cmp     rax, rdi
.text:0000000000001251                 jz      short locret_1268
.text:0000000000001253                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000125A                 test    rax, rax
.text:000000000000125D                 jz      short locret_1268
.text:000000000000125F                 jmp     rax
.text:000000000000125F ; ---------------------------------------------------------------------------
.text:0000000000001261                 align 8
.text:0000000000001268
.text:0000000000001268 locret_1268:                            ; CODE XREF: deregister_tm_clones+11↑j
.text:0000000000001268                                         ; deregister_tm_clones+1D↑j
.text:0000000000001268                 retn
.text:0000000000001268 deregister_tm_clones endp
.text:0000000000001268
.text:0000000000001268 ; ---------------------------------------------------------------------------
.text:0000000000001269                 align 10h
.text:0000000000001270
.text:0000000000001270 ; =============== S U B R O U T I N E =======================================
.text:0000000000001270
.text:0000000000001270
.text:0000000000001270 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
.text:0000000000001270                 lea     rdi, __bss_start
.text:0000000000001277                 lea     rsi, __bss_start
.text:000000000000127E                 sub     rsi, rdi
.text:0000000000001281                 mov     rax, rsi
.text:0000000000001284                 shr     rsi, 3Fh
.text:0000000000001288                 sar     rax, 3
.text:000000000000128C                 add     rsi, rax
.text:000000000000128F                 sar     rsi, 1
.text:0000000000001292                 jz      short locret_12A8
.text:0000000000001294                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000129B                 test    rax, rax
.text:000000000000129E                 jz      short locret_12A8
.text:00000000000012A0                 jmp     rax
.text:00000000000012A0 ; ---------------------------------------------------------------------------
.text:00000000000012A2                 align 8
.text:00000000000012A8
.text:00000000000012A8 locret_12A8:                            ; CODE XREF: register_tm_clones+22↑j
.text:00000000000012A8                                         ; register_tm_clones+2E↑j
.text:00000000000012A8                 retn
.text:00000000000012A8 register_tm_clones endp
.text:00000000000012A8
.text:00000000000012A8 ; ---------------------------------------------------------------------------
.text:00000000000012A9                 align 10h
.text:00000000000012B0
.text:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000012B0
.text:00000000000012B0
.text:00000000000012B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000012B0                 endbr64
.text:00000000000012B4                 cmp     cs:__bss_start, 0
.text:00000000000012BB                 jnz     short locret_12E8
.text:00000000000012BD                 push    rbp
.text:00000000000012BE                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000012C6                 mov     rbp, rsp
.text:00000000000012C9                 jz      short loc_12D7
.text:00000000000012CB                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000012D2                 call    __cxa_finalize
.text:00000000000012D7
.text:00000000000012D7 loc_12D7:                               ; CODE XREF: __do_global_dtors_aux+19↑j
.text:00000000000012D7                 call    deregister_tm_clones
.text:00000000000012DC                 mov     cs:__bss_start, 1
.text:00000000000012E3                 pop     rbp
.text:00000000000012E4                 retn
.text:00000000000012E4 ; ---------------------------------------------------------------------------
.text:00000000000012E5                 align 8
.text:00000000000012E8
.text:00000000000012E8 locret_12E8:                            ; CODE XREF: __do_global_dtors_aux+B↑j
.text:00000000000012E8                 retn
.text:00000000000012E8 __do_global_dtors_aux endp
.text:00000000000012E8
.text:00000000000012E8 ; ---------------------------------------------------------------------------
.text:00000000000012E9                 align 10h
.text:00000000000012F0
.text:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000012F0
.text:00000000000012F0
.text:00000000000012F0 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000012F0                 endbr64
.text:00000000000012F4                 jmp     register_tm_clones
.text:00000000000012F4 frame_dummy     endp
.text:00000000000012F4
.text:00000000000012F4 ; ---------------------------------------------------------------------------
.text:00000000000012F9                 align 20h
.text:0000000000001300
.text:0000000000001300 ; =============== S U B R O U T I N E =======================================
.text:0000000000001300
.text:0000000000001300
.text:0000000000001300 timsort_constprop_0 proc near           ; CODE XREF: main+A5↑p
.text:0000000000001300
.text:0000000000001300 var_870         = qword ptr -870h
.text:0000000000001300 var_868         = qword ptr -868h
.text:0000000000001300 var_860         = qword ptr -860h
.text:0000000000001300 var_858         = qword ptr -858h
.text:0000000000001300 var_850         = qword ptr -850h
.text:0000000000001300 var_848         = qword ptr -848h
.text:0000000000001300 var_840         = qword ptr -840h
.text:0000000000001300 var_450         = qword ptr -450h
.text:0000000000001300 var_448         = qword ptr -448h
.text:0000000000001300 var_440         = qword ptr -440h
.text:0000000000001300 var_40          = qword ptr -40h
.text:0000000000001300
.text:0000000000001300 ; __unwind {
.text:0000000000001300                 push    r15
.text:0000000000001302                 push    r14
.text:0000000000001304                 push    r13
.text:0000000000001306                 push    r12
.text:0000000000001308                 push    rbp
.text:0000000000001309                 push    rbx
.text:000000000000130A                 mov     rbx, rdi
.text:000000000000130D                 mov     edi, 3Ch ; '<'  ; size
.text:0000000000001312                 sub     rsp, 848h
.text:0000000000001319                 mov     rax, fs:28h
.text:0000000000001322                 mov     [rsp+878h+var_40], rax
.text:000000000000132A                 xor     eax, eax
.text:000000000000132C                 call    _malloc
.text:0000000000001331                 test    rax, rax
.text:0000000000001334                 jz      loc_1B6D
.text:000000000000133A                 mov     r13, rax
.text:000000000000133D                 xor     r9d, r9d
.text:0000000000001340                 xor     r8d, r8d
.text:0000000000001343                 nop     dword ptr [rax+rax+00h]
.text:0000000000001348
.text:0000000000001348 loc_1348:                               ; CODE XREF: timsort_constprop_0+1B4↓j
.text:0000000000001348                 lea     rbp, [r8+1]
.text:000000000000134C                 mov     r12d, 0Fh
.text:0000000000001352                 cmp     r8, 0Eh
.text:0000000000001356                 jz      loc_1450
.text:000000000000135C                 mov     eax, [rbx+rbp*4-4]
.text:0000000000001360                 cmp     [rbx+rbp*4], eax
.text:0000000000001363                 jge     loc_143D
.text:0000000000001369                 jmp     short loc_137D
.text:0000000000001369 ; ---------------------------------------------------------------------------
.text:000000000000136B                 align 10h
.text:0000000000001370
.text:0000000000001370 loc_1370:                               ; CODE XREF: timsort_constprop_0+88↓j
.text:0000000000001370                 mov     edi, [rbx+rbp*4-4]
.text:0000000000001374                 cmp     [rbx+rbp*4], edi
.text:0000000000001377                 jge     loc_18DB
.text:000000000000137D
.text:000000000000137D loc_137D:                               ; CODE XREF: timsort_constprop_0+69↑j
.text:000000000000137D                 mov     rax, rbp
.text:0000000000001380                 add     rbp, 1
.text:0000000000001384                 cmp     rbp, 0Fh
.text:0000000000001388                 jnz     short loc_1370
.text:000000000000138A                 mov     eax, 0Eh
.text:000000000000138F
.text:000000000000138F loc_138F:                               ; CODE XREF: timsort_constprop_0+5DE↓j
.text:000000000000138F                 mov     rdx, r8
.text:0000000000001392                 nop     word ptr [rax+rax+00h]
.text:0000000000001398
.text:0000000000001398 loc_1398:                               ; CODE XREF: timsort_constprop_0+AF↓j
.text:0000000000001398                 mov     ecx, [rbx+rdx*4]
.text:000000000000139B                 mov     esi, [rbx+rax*4]
.text:000000000000139E                 mov     [rbx+rdx*4], esi
.text:00000000000013A1                 add     rdx, 1
.text:00000000000013A5                 mov     [rbx+rax*4], ecx
.text:00000000000013A8                 sub     rax, 1
.text:00000000000013AC                 cmp     rdx, rax
.text:00000000000013AF                 jb      short loc_1398
.text:00000000000013B1
.text:00000000000013B1 loc_13B1:                               ; CODE XREF: timsort_constprop_0+137↓j
.text:00000000000013B1                                         ; timsort_constprop_0+5E4↓j
.text:00000000000013B1                 mov     r12, rbp
.text:00000000000013B4                 mov     eax, 20h ; ' '
.text:00000000000013B9                 sub     r12, r8
.text:00000000000013BC                 cmp     r12, rax
.text:00000000000013BF                 cmovb   r12, rax
.text:00000000000013C3                 mov     eax, 0Fh
.text:00000000000013C8                 add     r12, r8
.text:00000000000013CB                 cmp     r12, rax
.text:00000000000013CE                 cmova   r12, rax
.text:00000000000013D2                 cmp     rbp, r12
.text:00000000000013D5                 jnb     short loc_1450
.text:00000000000013D7                 lea     r11, [rbx+rbp*4]
.text:00000000000013DB                 mov     r10, rbp
.text:00000000000013DE                 lea     r14, [rbx+r8*4]
.text:00000000000013E2                 nop     word ptr [rax+rax+00h]
.text:00000000000013E8
.text:00000000000013E8 loc_13E8:                               ; CODE XREF: timsort_constprop_0+12A↓j
.text:00000000000013E8                                         ; timsort_constprop_0+1D0↓j
.text:00000000000013E8                 mov     edi, [r11]
.text:00000000000013EB                 mov     rsi, r11
.text:00000000000013EE                 mov     rax, r11
.text:00000000000013F1                 mov     rdx, r10
.text:00000000000013F4                 cmp     r10, r8
.text:00000000000013F7                 ja      short loc_1413
.text:00000000000013F9                 jmp     short loc_141D
.text:00000000000013F9 ; ---------------------------------------------------------------------------
.text:00000000000013FB                 align 20h
.text:0000000000001400
.text:0000000000001400 loc_1400:                               ; CODE XREF: timsort_constprop_0+11B↓j
.text:0000000000001400                 sub     rdx, 1
.text:0000000000001404                 mov     [rax], ecx
.text:0000000000001406                 lea     rax, [rsi-4]
.text:000000000000140A                 cmp     rdx, r8
.text:000000000000140D                 jz      loc_14C0
.text:0000000000001413
.text:0000000000001413 loc_1413:                               ; CODE XREF: timsort_constprop_0+F7↑j
.text:0000000000001413                 mov     ecx, [rax-4]
.text:0000000000001416                 mov     rsi, rax
.text:0000000000001419                 cmp     edi, ecx
.text:000000000000141B                 jl      short loc_1400
.text:000000000000141D
.text:000000000000141D loc_141D:                               ; CODE XREF: timsort_constprop_0+F9↑j
.text:000000000000141D                 add     r10, 1
.text:0000000000001421                 mov     [rsi], edi
.text:0000000000001423                 add     r11, 4
.text:0000000000001427                 cmp     r12, r10
.text:000000000000142A                 jnz     short loc_13E8
.text:000000000000142C                 jmp     short loc_1450
.text:000000000000142C ; ---------------------------------------------------------------------------
.text:000000000000142E                 align 10h
.text:0000000000001430
.text:0000000000001430 loc_1430:                               ; CODE XREF: timsort_constprop_0+145↓j
.text:0000000000001430                 mov     eax, [rbx+rbp*4-4]
.text:0000000000001434                 cmp     [rbx+rbp*4], eax
.text:0000000000001437                 jl      loc_13B1
.text:000000000000143D
.text:000000000000143D loc_143D:                               ; CODE XREF: timsort_constprop_0+63↑j
.text:000000000000143D                 add     rbp, 1
.text:0000000000001441                 cmp     rbp, 0Fh
.text:0000000000001445                 jnz     short loc_1430
.text:0000000000001447                 mov     r12d, 0Fh
.text:000000000000144D                 nop     dword ptr [rax]
.text:0000000000001450
.text:0000000000001450 loc_1450:                               ; CODE XREF: timsort_constprop_0+56↑j
.text:0000000000001450                                         ; timsort_constprop_0+D5↑j ...
.text:0000000000001450                 sub     r12, r8
.text:0000000000001453                 mov     [rsp+r9*8+878h+var_848], r8
.text:0000000000001458                 mov     [rsp+r9*8+878h+var_448], r12
.text:0000000000001460                 add     r9, 1
.text:0000000000001464                 cmp     r9, 1
.text:0000000000001468                 jbe     short loc_14A7
.text:000000000000146A                 cmp     r9, 2
.text:000000000000146E                 jz      loc_1766
.text:0000000000001474
.text:0000000000001474 loc_1474:                               ; CODE XREF: timsort_constprop_0+2D0↓j
.text:0000000000001474                 lea     r15, [r9-2]
.text:0000000000001478                 lea     r8, [r9-3]
.text:000000000000147C                 mov     r14, [rsp+r15*8+878h+var_448]
.text:0000000000001484                 mov     rax, [rsp+r8*8+878h+var_448]
.text:000000000000148C                 lea     rdi, [r9-1]
.text:0000000000001490                 mov     [rsp+878h+var_870], rdi
.text:0000000000001495                 lea     r11, [r14+r12]
.text:0000000000001499                 cmp     rax, r11
.text:000000000000149C                 jbe     short loc_14DB
.text:000000000000149E                 cmp     r14, r12
.text:00000000000014A1                 jbe     loc_16B8
.text:00000000000014A7
.text:00000000000014A7 loc_14A7:                               ; CODE XREF: timsort_constprop_0+168↑j
.text:00000000000014A7                                         ; timsort_constprop_0+3B3↓j ...
.text:00000000000014A7                 cmp     rbp, 0Fh
.text:00000000000014AB                 jz      loc_18E9
.text:00000000000014B1                 mov     r8, rbp
.text:00000000000014B4                 jmp     loc_1348
.text:00000000000014B4 ; ---------------------------------------------------------------------------
.text:00000000000014B9                 align 20h
.text:00000000000014C0
.text:00000000000014C0 loc_14C0:                               ; CODE XREF: timsort_constprop_0+10D↑j
.text:00000000000014C0                 mov     rsi, r14
.text:00000000000014C3                 add     r10, 1
.text:00000000000014C7                 add     r11, 4
.text:00000000000014CB                 mov     [rsi], edi
.text:00000000000014CD                 cmp     r12, r10
.text:00000000000014D0                 jnz     loc_13E8
.text:00000000000014D6                 jmp     loc_1450
.text:00000000000014DB ; ---------------------------------------------------------------------------
.text:00000000000014DB
.text:00000000000014DB loc_14DB:                               ; CODE XREF: timsort_constprop_0+19C↑j
.text:00000000000014DB                 cmp     rax, r12
.text:00000000000014DE                 jb      loc_15D5
.text:00000000000014E4                 mov     rax, [rsp+878h+var_870]
.text:00000000000014E9                 mov     r8, [rsp+r15*8+878h+var_848]
.text:00000000000014EE                 mov     r9, [rsp+rax*8+878h+var_848]
.text:00000000000014F3                 lea     rax, [r9+r12]
.text:00000000000014F7                 mov     [rsp+878h+var_868], rax
.text:00000000000014FC                 cmp     r14, r12
.text:00000000000014FF                 jbe     loc_16D9
.text:0000000000001505                 lea     rdx, ds:0[r12*4]
.text:000000000000150D                 lea     rsi, [rbx+r9*4]
.text:0000000000001511                 mov     ecx, 3Ch ; '<'
.text:0000000000001516                 mov     rdi, r13
.text:0000000000001519                 mov     [rsp+878h+var_858], r8
.text:000000000000151E                 mov     [rsp+878h+var_868], r11
.text:0000000000001523                 mov     [rsp+878h+var_860], rax
.text:0000000000001528                 call    ___memcpy_chk
.text:000000000000152D                 mov     r8, [rsp+878h+var_858]
.text:0000000000001532                 mov     r11, [rsp+878h+var_868]
.text:0000000000001537                 add     r14, r8
.text:000000000000153A                 test    r12, r12
.text:000000000000153D                 jz      short loc_15AE
.text:000000000000153F                 cmp     r14, r8
.text:0000000000001542                 mov     r10, [rsp+878h+var_860]
.text:0000000000001547                 ja      short loc_1566
.text:0000000000001549                 jmp     short loc_1588
.text:0000000000001549 ; ---------------------------------------------------------------------------
.text:000000000000154B                 align 10h
.text:0000000000001550
.text:0000000000001550 loc_1550:                               ; CODE XREF: timsort_constprop_0+274↓j
.text:0000000000001550                 sub     r14, 1
.text:0000000000001554                 mov     eax, [rbx+r14*4]
.text:0000000000001558                 mov     [rbx+r10*4], eax
.text:000000000000155C                 cmp     r14, r8
.text:000000000000155F                 jbe     short loc_1588
.text:0000000000001561
.text:0000000000001561 loc_1561:                               ; CODE XREF: timsort_constprop_0+286↓j
.text:0000000000001561                 test    r12, r12
.text:0000000000001564                 jz      short loc_15AE
.text:0000000000001566
.text:0000000000001566 loc_1566:                               ; CODE XREF: timsort_constprop_0+247↑j
.text:0000000000001566                 mov     eax, [r13+r12*4-4]
.text:000000000000156B                 sub     r10, 1
.text:000000000000156F                 cmp     [rbx+r14*4-4], eax
.text:0000000000001574                 jg      short loc_1550
.text:0000000000001576                 sub     r12, 1
.text:000000000000157A                 mov     eax, [r13+r12*4+0]
.text:000000000000157F                 mov     [rbx+r10*4], eax
.text:0000000000001583                 cmp     r14, r8
.text:0000000000001586                 ja      short loc_1561
.text:0000000000001588
.text:0000000000001588 loc_1588:                               ; CODE XREF: timsort_constprop_0+249↑j
.text:0000000000001588                                         ; timsort_constprop_0+25F↑j
.text:0000000000001588                 test    r12, r12
.text:000000000000158B                 jz      short loc_15AE
.text:000000000000158D                 sub     r10, r12
.text:0000000000001590                 lea     rdx, ds:0[r12*4] ; n
.text:0000000000001598                 mov     rsi, r13        ; src
.text:000000000000159B                 mov     [rsp+878h+var_868], r11
.text:00000000000015A0                 lea     rdi, [rbx+r10*4] ; dest
.text:00000000000015A4                 call    _memcpy
.text:00000000000015A9                 mov     r11, [rsp+878h+var_868]
.text:00000000000015AE
.text:00000000000015AE loc_15AE:                               ; CODE XREF: timsort_constprop_0+23D↑j
.text:00000000000015AE                                         ; timsort_constprop_0+264↑j ...
.text:00000000000015AE                 mov     [rsp+r15*8+878h+var_448], r11
.text:00000000000015B6                 mov     r15, [rsp+878h+var_870]
.text:00000000000015BB
.text:00000000000015BB loc_15BB:                               ; CODE XREF: timsort_constprop_0+3A7↓j
.text:00000000000015BB                 cmp     r15, 2
.text:00000000000015BF                 jz      loc_1766
.text:00000000000015C5                 mov     r12, [rsp+r15*8+878h+var_450]
.text:00000000000015CD                 mov     r9, r15
.text:00000000000015D0                 jmp     loc_1474
.text:00000000000015D5 ; ---------------------------------------------------------------------------
.text:00000000000015D5
.text:00000000000015D5 loc_15D5:                               ; CODE XREF: timsort_constprop_0+1DE↑j
.text:00000000000015D5                                         ; timsort_constprop_0+3BB↓j
.text:00000000000015D5                 mov     [rsp+r15*8+878h+var_448], rax
.text:00000000000015DD                 mov     rdx, [rsp+r8*8+878h+var_848]
.text:00000000000015E2                 mov     r10, [rsp+r15*8+878h+var_848]
.text:00000000000015E7                 mov     [rsp+r8*8+878h+var_448], r14
.text:00000000000015EF                 mov     r9, [rsp+r15*8+878h+var_448]
.text:00000000000015F7                 mov     [rsp+r15*8+878h+var_848], rdx
.text:00000000000015FC                 mov     [rsp+r8*8+878h+var_848], r10
.text:0000000000001601                 mov     r12, [rsp+r15*8+878h+var_848]
.text:0000000000001606                 cmp     r14, r9
.text:0000000000001609                 ja      loc_1818
.text:000000000000160F                 lea     rsi, [rbx+r10*4]
.text:0000000000001613                 mov     ecx, 3Ch ; '<'
.text:0000000000001618                 mov     rdi, r13
.text:000000000000161B                 mov     [rsp+878h+var_860], r9
.text:0000000000001620                 lea     rdx, ds:0[r14*4]
.text:0000000000001628                 mov     [rsp+878h+var_868], r8
.text:000000000000162D                 mov     [rsp+878h+var_870], r10
.text:0000000000001632                 call    ___memcpy_chk
.text:0000000000001637                 mov     r9, [rsp+878h+var_860]
.text:000000000000163C                 xor     edx, edx
.text:000000000000163E                 mov     r10, [rsp+878h+var_870]
.text:0000000000001643                 mov     r8, [rsp+878h+var_868]
.text:0000000000001648                 lea     rsi, [r12+r9]
.text:000000000000164C                 cmp     r12, rsi
.text:000000000000164F                 jnb     loc_1B00
.text:0000000000001655                 test    r14, r14
.text:0000000000001658                 jnz     short loc_1679
.text:000000000000165A                 jmp     loc_1B00
.text:000000000000165A ; ---------------------------------------------------------------------------
.text:000000000000165F                 align 20h
.text:0000000000001660
.text:0000000000001660 loc_1660:                               ; CODE XREF: timsort_constprop_0+388↓j
.text:0000000000001660                 mov     eax, ecx
.text:0000000000001662                 add     rdx, 1
.text:0000000000001666                 mov     [rbx+r10*4-4], eax
.text:000000000000166B                 cmp     r14, rdx
.text:000000000000166E                 jbe     short loc_1698
.text:0000000000001670
.text:0000000000001670 loc_1670:                               ; CODE XREF: timsort_constprop_0+396↓j
.text:0000000000001670                 cmp     rsi, r12
.text:0000000000001673                 jbe     loc_1B00
.text:0000000000001679
.text:0000000000001679 loc_1679:                               ; CODE XREF: timsort_constprop_0+358↑j
.text:0000000000001679                 mov     ecx, [r13+rdx*4+0]
.text:000000000000167E                 mov     eax, [rbx+r12*4]
.text:0000000000001682                 add     r10, 1
.text:0000000000001686                 cmp     ecx, eax
.text:0000000000001688                 jle     short loc_1660
.text:000000000000168A                 mov     [rbx+r10*4-4], eax
.text:000000000000168F                 add     r12, 1
.text:0000000000001693                 cmp     r14, rdx
.text:0000000000001696                 ja      short loc_1670
.text:0000000000001698
.text:0000000000001698 loc_1698:                               ; CODE XREF: timsort_constprop_0+36E↑j
.text:0000000000001698                                         ; timsort_constprop_0+57B↓j ...
.text:0000000000001698                 add     r9, r14
.text:000000000000169B                 mov     [rsp+r8*8+878h+var_448], r9
.text:00000000000016A3                 cmp     r15, 1
.text:00000000000016A7                 jnz     loc_15BB
.text:00000000000016AD
.text:00000000000016AD loc_16AD:                               ; CODE XREF: timsort_constprop_0+513↓j
.text:00000000000016AD                 mov     r9d, 1
.text:00000000000016B3                 jmp     loc_14A7
.text:00000000000016B8 ; ---------------------------------------------------------------------------
.text:00000000000016B8
.text:00000000000016B8 loc_16B8:                               ; CODE XREF: timsort_constprop_0+1A1↑j
.text:00000000000016B8                 cmp     rax, r12
.text:00000000000016BB                 jb      loc_15D5
.text:00000000000016C1                 mov     rax, [rsp+878h+var_870]
.text:00000000000016C6                 mov     r8, [rsp+r15*8+878h+var_848]
.text:00000000000016CB                 mov     r9, [rsp+rax*8+878h+var_848]
.text:00000000000016D0                 lea     rax, [r9+r12]
.text:00000000000016D4                 mov     [rsp+878h+var_868], rax
.text:00000000000016D9
.text:00000000000016D9 loc_16D9:                               ; CODE XREF: timsort_constprop_0+1FF↑j
.text:00000000000016D9                 lea     rdx, ds:0[r14*4]
.text:00000000000016E1                 lea     rsi, [rbx+r8*4]
.text:00000000000016E5                 mov     ecx, 3Ch ; '<'
.text:00000000000016EA                 mov     rdi, r13
.text:00000000000016ED                 mov     [rsp+878h+var_850], r9
.text:00000000000016F2                 mov     [rsp+878h+var_858], r11
.text:00000000000016F7                 mov     [rsp+878h+var_860], r8
.text:00000000000016FC                 call    ___memcpy_chk
.text:0000000000001701                 mov     r9, [rsp+878h+var_850]
.text:0000000000001706                 xor     edx, edx
.text:0000000000001708                 cmp     [rsp+878h+var_868], r9
.text:000000000000170D                 mov     r8, [rsp+878h+var_860]
.text:0000000000001712                 mov     r11, [rsp+878h+var_858]
.text:0000000000001717                 jbe     loc_1B3D
.text:000000000000171D                 test    r14, r14
.text:0000000000001720                 jnz     short loc_174F
.text:0000000000001722                 jmp     loc_1B3D
.text:0000000000001722 ; ---------------------------------------------------------------------------
.text:0000000000001727                 align 10h
.text:0000000000001730
.text:0000000000001730 loc_1730:                               ; CODE XREF: timsort_constprop_0+45E↓j
.text:0000000000001730                 add     rdx, 1
.text:0000000000001734                 mov     eax, ecx
.text:0000000000001736
.text:0000000000001736 loc_1736:                               ; CODE XREF: timsort_constprop_0+464↓j
.text:0000000000001736                 mov     [rbx+r8*4-4], eax
.text:000000000000173B                 cmp     r14, rdx
.text:000000000000173E                 jbe     loc_15AE
.text:0000000000001744                 cmp     [rsp+878h+var_868], r9
.text:0000000000001749                 jbe     loc_1B3D
.text:000000000000174F
.text:000000000000174F loc_174F:                               ; CODE XREF: timsort_constprop_0+420↑j
.text:000000000000174F                 mov     ecx, [r13+rdx*4+0]
.text:0000000000001754                 mov     eax, [rbx+r9*4]
.text:0000000000001758                 add     r8, 1
.text:000000000000175C                 cmp     ecx, eax
.text:000000000000175E                 jle     short loc_1730
.text:0000000000001760                 add     r9, 1
.text:0000000000001764                 jmp     short loc_1736
.text:0000000000001766 ; ---------------------------------------------------------------------------
.text:0000000000001766
.text:0000000000001766 loc_1766:                               ; CODE XREF: timsort_constprop_0+16E↑j
.text:0000000000001766                                         ; timsort_constprop_0+2BF↑j
.text:0000000000001766                 mov     r15, [rsp+878h+var_448]
.text:000000000000176E                 mov     r8, [rsp+878h+var_440]
.text:0000000000001776                 mov     r9d, 2
.text:000000000000177C                 cmp     r15, r8
.text:000000000000177F                 ja      loc_14A7
.text:0000000000001785                 mov     r12, [rsp+878h+var_848]
.text:000000000000178A                 mov     ecx, 3Ch ; '<'
.text:000000000000178F                 mov     rdi, r13
.text:0000000000001792                 mov     [rsp+878h+var_870], r8
.text:0000000000001797                 lea     rdx, ds:0[r15*4]
.text:000000000000179F                 mov     r14, [rsp+878h+var_840]
.text:00000000000017A4                 lea     rsi, [rbx+r12*4]
.text:00000000000017A8                 call    ___memcpy_chk
.text:00000000000017AD                 mov     r8, [rsp+878h+var_870]
.text:00000000000017B2                 xor     eax, eax
.text:00000000000017B4                 lea     rsi, [r8+r14]
.text:00000000000017B8                 cmp     r14, rsi
.text:00000000000017BB                 jnb     loc_1B92
.text:00000000000017C1                 test    r15, r15
.text:00000000000017C4                 jnz     short loc_17E9
.text:00000000000017C6                 jmp     loc_1B92
.text:00000000000017C6 ; ---------------------------------------------------------------------------
.text:00000000000017CB                 align 10h
.text:00000000000017D0
.text:00000000000017D0 loc_17D0:                               ; CODE XREF: timsort_constprop_0+4F8↓j
.text:00000000000017D0                 mov     edx, ecx
.text:00000000000017D2                 add     rax, 1
.text:00000000000017D6                 mov     [rbx+r12*4-4], edx
.text:00000000000017DB                 cmp     r15, rax
.text:00000000000017DE                 jbe     short loc_1808
.text:00000000000017E0
.text:00000000000017E0 loc_17E0:                               ; CODE XREF: timsort_constprop_0+506↓j
.text:00000000000017E0                 cmp     rsi, r14
.text:00000000000017E3                 jbe     loc_1B92
.text:00000000000017E9
.text:00000000000017E9 loc_17E9:                               ; CODE XREF: timsort_constprop_0+4C4↑j
.text:00000000000017E9                 mov     ecx, [r13+rax*4+0]
.text:00000000000017EE                 mov     edx, [rbx+r14*4]
.text:00000000000017F2                 add     r12, 1
.text:00000000000017F6                 cmp     ecx, edx
.text:00000000000017F8                 jle     short loc_17D0
.text:00000000000017FA                 mov     [rbx+r12*4-4], edx
.text:00000000000017FF                 add     r14, 1
.text:0000000000001803                 cmp     r15, rax
.text:0000000000001806                 ja      short loc_17E0
.text:0000000000001808
.text:0000000000001808 loc_1808:                               ; CODE XREF: timsort_constprop_0+4DE↑j
.text:0000000000001808                                         ; timsort_constprop_0+895↓j ...
.text:0000000000001808                 add     r15, r8
.text:000000000000180B                 mov     [rsp+878h+var_448], r15
.text:0000000000001813                 jmp     loc_16AD
.text:0000000000001818 ; ---------------------------------------------------------------------------
.text:0000000000001818
.text:0000000000001818 loc_1818:                               ; CODE XREF: timsort_constprop_0+309↑j
.text:0000000000001818                 lea     rdx, ds:0[r9*4]
.text:0000000000001820                 lea     rsi, [rbx+r12*4]
.text:0000000000001824                 mov     ecx, 3Ch ; '<'
.text:0000000000001829                 mov     rdi, r13
.text:000000000000182C                 mov     [rsp+878h+var_860], r10
.text:0000000000001831                 mov     [rsp+878h+var_868], r8
.text:0000000000001836                 mov     [rsp+878h+var_870], r9
.text:000000000000183B                 call    ___memcpy_chk
.text:0000000000001840                 mov     r9, [rsp+878h+var_870]
.text:0000000000001845                 mov     r10, [rsp+878h+var_860]
.text:000000000000184A                 mov     r8, [rsp+878h+var_868]
.text:000000000000184F                 add     r12, r9
.text:0000000000001852                 test    r9, r9
.text:0000000000001855                 lea     rdx, [r14+r10]
.text:0000000000001859                 mov     rax, r9
.text:000000000000185C                 jz      short loc_18A2
.text:000000000000185E                 cmp     r10, rdx
.text:0000000000001861                 jb      short loc_1881
.text:0000000000001863                 jmp     short loc_18A2
.text:0000000000001863 ; ---------------------------------------------------------------------------
.text:0000000000001865                 align 8
.text:0000000000001868
.text:0000000000001868 loc_1868:                               ; CODE XREF: timsort_constprop_0+58E↓j
.text:0000000000001868                 sub     rdx, 1
.text:000000000000186C                 mov     ecx, [rbx+rdx*4]
.text:000000000000186F                 mov     [rbx+r12*4], ecx
.text:0000000000001873                 cmp     r10, rdx
.text:0000000000001876                 jnb     short loc_18A2
.text:0000000000001878
.text:0000000000001878 loc_1878:                               ; CODE XREF: timsort_constprop_0+5A0↓j
.text:0000000000001878                 test    rax, rax
.text:000000000000187B                 jz      loc_1698
.text:0000000000001881
.text:0000000000001881 loc_1881:                               ; CODE XREF: timsort_constprop_0+561↑j
.text:0000000000001881                 mov     edi, [r13+rax*4-4]
.text:0000000000001886                 sub     r12, 1
.text:000000000000188A                 cmp     [rbx+rdx*4-4], edi
.text:000000000000188E                 jg      short loc_1868
.text:0000000000001890                 sub     rax, 1
.text:0000000000001894                 mov     ecx, [r13+rax*4+0]
.text:0000000000001899                 mov     [rbx+r12*4], ecx
.text:000000000000189D                 cmp     r10, rdx
.text:00000000000018A0                 jb      short loc_1878
.text:00000000000018A2
.text:00000000000018A2 loc_18A2:                               ; CODE XREF: timsort_constprop_0+55C↑j
.text:00000000000018A2                                         ; timsort_constprop_0+563↑j ...
.text:00000000000018A2                 test    rax, rax
.text:00000000000018A5                 jz      loc_1698
.text:00000000000018AB                 sub     r12, rax
.text:00000000000018AE                 lea     rdx, ds:0[rax*4] ; n
.text:00000000000018B6                 mov     rsi, r13        ; src
.text:00000000000018B9                 mov     [rsp+878h+var_868], r9
.text:00000000000018BE                 lea     rdi, [rbx+r12*4] ; dest
.text:00000000000018C2                 mov     [rsp+878h+var_870], r8
.text:00000000000018C7                 call    _memcpy
.text:00000000000018CC                 mov     r8, [rsp+878h+var_870]
.text:00000000000018D1                 mov     r9, [rsp+878h+var_868]
.text:00000000000018D6                 jmp     loc_1698
.text:00000000000018DB ; ---------------------------------------------------------------------------
.text:00000000000018DB
.text:00000000000018DB loc_18DB:                               ; CODE XREF: timsort_constprop_0+77↑j
.text:00000000000018DB                 cmp     rax, r8
.text:00000000000018DE                 ja      loc_138F
.text:00000000000018E4                 jmp     loc_13B1
.text:00000000000018E9 ; ---------------------------------------------------------------------------
.text:00000000000018E9
.text:00000000000018E9 loc_18E9:                               ; CODE XREF: timsort_constprop_0+1AB↑j
.text:00000000000018E9                 cmp     r9, 1
.text:00000000000018ED                 jbe     loc_19DA
.text:00000000000018F3                 lea     rax, [rsp+878h+var_840]
.text:00000000000018F8                 shl     r9, 3
.text:00000000000018FC                 mov     [rsp+878h+var_870], rax
.text:0000000000001901                 lea     r10, [rsp+r9+878h+var_848]
.text:0000000000001906                 lea     r14, [rsp+r9+878h+var_448]
.text:000000000000190E                 xchg    ax, ax
.text:0000000000001910
.text:0000000000001910 loc_1910:                               ; CODE XREF: timsort_constprop_0+6D4↓j
.text:0000000000001910                 mov     r11, [r10-8]
.text:0000000000001914                 mov     r8, [r14-8]
.text:0000000000001918                 mov     r15, [r14-10h]
.text:000000000000191C                 mov     rbp, [r10-10h]
.text:0000000000001920                 lea     r12, [r11+r8]
.text:0000000000001924                 cmp     r8, r15
.text:0000000000001927                 jb      loc_1A0A
.text:000000000000192D                 lea     rdx, ds:0[r15*4]
.text:0000000000001935                 lea     rsi, [rbx+rbp*4]
.text:0000000000001939                 mov     ecx, 3Ch ; '<'
.text:000000000000193E                 mov     rdi, r13
.text:0000000000001941                 mov     [rsp+878h+var_858], r10
.text:0000000000001946                 mov     [rsp+878h+var_860], r11
.text:000000000000194B                 mov     [rsp+878h+var_868], r8
.text:0000000000001950                 call    ___memcpy_chk
.text:0000000000001955                 mov     r11, [rsp+878h+var_860]
.text:000000000000195A                 xor     edx, edx
.text:000000000000195C                 mov     r8, [rsp+878h+var_868]
.text:0000000000001961                 mov     r10, [rsp+878h+var_858]
.text:0000000000001966                 cmp     r11, r12
.text:0000000000001969                 jnb     loc_1AC3
.text:000000000000196F                 test    r15, r15
.text:0000000000001972                 jnz     short loc_1998
.text:0000000000001974                 jmp     loc_1AC3
.text:0000000000001974 ; ---------------------------------------------------------------------------
.text:0000000000001979                 align 20h
.text:0000000000001980
.text:0000000000001980 loc_1980:                               ; CODE XREF: timsort_constprop_0+6A7↓j
.text:0000000000001980                 mov     eax, ecx
.text:0000000000001982                 add     rdx, 1
.text:0000000000001986                 mov     [rbx+rbp*4-4], eax
.text:000000000000198A                 cmp     r15, rdx
.text:000000000000198D                 jbe     short loc_19C0
.text:000000000000198F
.text:000000000000198F loc_198F:                               ; CODE XREF: timsort_constprop_0+6B4↓j
.text:000000000000198F                 cmp     r11, r12
.text:0000000000001992                 jnb     loc_1AC3
.text:0000000000001998
.text:0000000000001998 loc_1998:                               ; CODE XREF: timsort_constprop_0+672↑j
.text:0000000000001998                 mov     ecx, [r13+rdx*4+0]
.text:000000000000199D                 mov     eax, [rbx+r11*4]
.text:00000000000019A1                 add     rbp, 1
.text:00000000000019A5                 cmp     ecx, eax
.text:00000000000019A7                 jle     short loc_1980
.text:00000000000019A9                 mov     [rbx+rbp*4-4], eax
.text:00000000000019AD                 add     r11, 1
.text:00000000000019B1                 cmp     r15, rdx
.text:00000000000019B4                 ja      short loc_198F
.text:00000000000019B6                 db      2Eh
.text:00000000000019B6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000019C0
.text:00000000000019C0 loc_19C0:                               ; CODE XREF: timsort_constprop_0+68D↑j
.text:00000000000019C0                                         ; timsort_constprop_0+763↓j ...
.text:00000000000019C0                 add     r8, r15
.text:00000000000019C3                 sub     r10, 8
.text:00000000000019C7                 sub     r14, 8
.text:00000000000019CB                 mov     [r14-8], r8
.text:00000000000019CF                 cmp     r10, [rsp+878h+var_870]
.text:00000000000019D4                 jnz     loc_1910
.text:00000000000019DA
.text:00000000000019DA loc_19DA:                               ; CODE XREF: timsort_constprop_0+5ED↑j
.text:00000000000019DA                 mov     rax, [rsp+878h+var_40]
.text:00000000000019E2                 sub     rax, fs:28h
.text:00000000000019EB                 jnz     loc_1BC2
.text:00000000000019F1                 add     rsp, 848h
.text:00000000000019F8                 mov     rdi, r13        ; ptr
.text:00000000000019FB                 pop     rbx
.text:00000000000019FC                 pop     rbp
.text:00000000000019FD                 pop     r12
.text:00000000000019FF                 pop     r13
.text:0000000000001A01                 pop     r14
.text:0000000000001A03                 pop     r15
.text:0000000000001A05                 jmp     _free
.text:0000000000001A0A ; ---------------------------------------------------------------------------
.text:0000000000001A0A
.text:0000000000001A0A loc_1A0A:                               ; CODE XREF: timsort_constprop_0+627↑j
.text:0000000000001A0A                 lea     rdx, ds:0[r8*4]
.text:0000000000001A12                 lea     rsi, [rbx+r11*4]
.text:0000000000001A16                 mov     ecx, 3Ch ; '<'
.text:0000000000001A1B                 mov     rdi, r13
.text:0000000000001A1E                 mov     [rsp+878h+var_860], r10
.text:0000000000001A23                 mov     [rsp+878h+var_868], r8
.text:0000000000001A28                 call    ___memcpy_chk
.text:0000000000001A2D                 mov     r8, [rsp+878h+var_868]
.text:0000000000001A32                 lea     rdx, [rbp+r15+0]
.text:0000000000001A37                 mov     r10, [rsp+878h+var_860]
.text:0000000000001A3C                 cmp     rbp, rdx
.text:0000000000001A3F                 mov     rax, r8
.text:0000000000001A42                 jnb     short loc_1A8A
.text:0000000000001A44                 test    r8, r8
.text:0000000000001A47                 jnz     short loc_1A69
.text:0000000000001A49                 jmp     short loc_1A8A
.text:0000000000001A49 ; ---------------------------------------------------------------------------
.text:0000000000001A4B                 align 10h
.text:0000000000001A50
.text:0000000000001A50 loc_1A50:                               ; CODE XREF: timsort_constprop_0+776↓j
.text:0000000000001A50                 sub     rdx, 1
.text:0000000000001A54                 mov     ecx, [rbx+rdx*4]
.text:0000000000001A57                 mov     [rbx+r12*4], ecx
.text:0000000000001A5B                 cmp     rbp, rdx
.text:0000000000001A5E                 jnb     short loc_1A8A
.text:0000000000001A60
.text:0000000000001A60 loc_1A60:                               ; CODE XREF: timsort_constprop_0+788↓j
.text:0000000000001A60                 test    rax, rax
.text:0000000000001A63                 jz      loc_19C0
.text:0000000000001A69
.text:0000000000001A69 loc_1A69:                               ; CODE XREF: timsort_constprop_0+747↑j
.text:0000000000001A69                 mov     edi, [r13+rax*4-4]
.text:0000000000001A6E                 sub     r12, 1
.text:0000000000001A72                 cmp     [rbx+rdx*4-4], edi
.text:0000000000001A76                 jg      short loc_1A50
.text:0000000000001A78                 sub     rax, 1
.text:0000000000001A7C                 mov     ecx, [r13+rax*4+0]
.text:0000000000001A81                 mov     [rbx+r12*4], ecx
.text:0000000000001A85                 cmp     rbp, rdx
.text:0000000000001A88                 jb      short loc_1A60
.text:0000000000001A8A
.text:0000000000001A8A loc_1A8A:                               ; CODE XREF: timsort_constprop_0+742↑j
.text:0000000000001A8A                                         ; timsort_constprop_0+749↑j ...
.text:0000000000001A8A                 test    rax, rax
.text:0000000000001A8D                 jz      loc_19C0
.text:0000000000001A93                 sub     r12, rax
.text:0000000000001A96                 lea     rdx, ds:0[rax*4] ; n
.text:0000000000001A9E                 mov     rsi, r13        ; src
.text:0000000000001AA1                 mov     [rsp+878h+var_860], r10
.text:0000000000001AA6                 lea     rdi, [rbx+r12*4] ; dest
.text:0000000000001AAA                 mov     [rsp+878h+var_868], r8
.text:0000000000001AAF                 call    _memcpy
.text:0000000000001AB4                 mov     r8, [rsp+878h+var_868]
.text:0000000000001AB9                 mov     r10, [rsp+878h+var_860]
.text:0000000000001ABE                 jmp     loc_19C0
.text:0000000000001AC3 ; ---------------------------------------------------------------------------
.text:0000000000001AC3
.text:0000000000001AC3 loc_1AC3:                               ; CODE XREF: timsort_constprop_0+669↑j
.text:0000000000001AC3                                         ; timsort_constprop_0+674↑j ...
.text:0000000000001AC3                 cmp     r15, rdx
.text:0000000000001AC6                 jbe     loc_19C0
.text:0000000000001ACC                 mov     r11, r15
.text:0000000000001ACF                 lea     rsi, [r13+rdx*4+0] ; src
.text:0000000000001AD4                 lea     rdi, [rbx+rbp*4] ; dest
.text:0000000000001AD8                 mov     [rsp+878h+var_860], r10
.text:0000000000001ADD                 sub     r11, rdx
.text:0000000000001AE0                 mov     [rsp+878h+var_868], r8
.text:0000000000001AE5                 shl     r11, 2
.text:0000000000001AE9                 mov     rdx, r11        ; n
.text:0000000000001AEC                 call    _memcpy
.text:0000000000001AF1                 mov     r8, [rsp+878h+var_868]
.text:0000000000001AF6                 mov     r10, [rsp+878h+var_860]
.text:0000000000001AFB                 jmp     loc_19C0
.text:0000000000001B00 ; ---------------------------------------------------------------------------
.text:0000000000001B00
.text:0000000000001B00 loc_1B00:                               ; CODE XREF: timsort_constprop_0+34F↑j
.text:0000000000001B00                                         ; timsort_constprop_0+35A↑j ...
.text:0000000000001B00                 cmp     r14, rdx
.text:0000000000001B03                 jbe     loc_1698
.text:0000000000001B09                 lea     rdi, [rbx+r10*4] ; dest
.text:0000000000001B0D                 mov     r10, r14
.text:0000000000001B10                 lea     rsi, [r13+rdx*4+0] ; src
.text:0000000000001B15                 mov     [rsp+878h+var_868], r9
.text:0000000000001B1A                 sub     r10, rdx
.text:0000000000001B1D                 mov     [rsp+878h+var_870], r8
.text:0000000000001B22                 shl     r10, 2
.text:0000000000001B26                 mov     rdx, r10        ; n
.text:0000000000001B29                 call    _memcpy
.text:0000000000001B2E                 mov     r8, [rsp+878h+var_870]
.text:0000000000001B33                 mov     r9, [rsp+878h+var_868]
.text:0000000000001B38                 jmp     loc_1698
.text:0000000000001B3D ; ---------------------------------------------------------------------------
.text:0000000000001B3D
.text:0000000000001B3D loc_1B3D:                               ; CODE XREF: timsort_constprop_0+417↑j
.text:0000000000001B3D                                         ; timsort_constprop_0+422↑j ...
.text:0000000000001B3D                 cmp     r14, rdx
.text:0000000000001B40                 jbe     loc_15AE
.text:0000000000001B46                 sub     r14, rdx
.text:0000000000001B49                 lea     rsi, [r13+rdx*4+0] ; src
.text:0000000000001B4E                 lea     rdi, [rbx+r8*4] ; dest
.text:0000000000001B52                 mov     [rsp+878h+var_868], r11
.text:0000000000001B57                 shl     r14, 2
.text:0000000000001B5B                 mov     rdx, r14        ; n
.text:0000000000001B5E                 call    _memcpy
.text:0000000000001B63                 mov     r11, [rsp+878h+var_868]
.text:0000000000001B68                 jmp     loc_15AE
.text:0000000000001B6D ; ---------------------------------------------------------------------------
.text:0000000000001B6D
.text:0000000000001B6D loc_1B6D:                               ; CODE XREF: timsort_constprop_0+34↑j
.text:0000000000001B6D                 mov     rax, [rsp+878h+var_40]
.text:0000000000001B75                 sub     rax, fs:28h
.text:0000000000001B7E                 jnz     short loc_1BC2
.text:0000000000001B80                 add     rsp, 848h
.text:0000000000001B87                 pop     rbx
.text:0000000000001B88                 pop     rbp
.text:0000000000001B89                 pop     r12
.text:0000000000001B8B                 pop     r13
.text:0000000000001B8D                 pop     r14
.text:0000000000001B8F                 pop     r15
.text:0000000000001B91                 retn
.text:0000000000001B92 ; ---------------------------------------------------------------------------
.text:0000000000001B92
.text:0000000000001B92 loc_1B92:                               ; CODE XREF: timsort_constprop_0+4BB↑j
.text:0000000000001B92                                         ; timsort_constprop_0+4C6↑j ...
.text:0000000000001B92                 cmp     r15, rax
.text:0000000000001B95                 jbe     loc_1808
.text:0000000000001B9B                 mov     rdx, r15
.text:0000000000001B9E                 lea     rdi, [rbx+r12*4] ; dest
.text:0000000000001BA2                 lea     rsi, [r13+rax*4+0] ; src
.text:0000000000001BA7                 mov     [rsp+878h+var_870], r8
.text:0000000000001BAC                 sub     rdx, rax
.text:0000000000001BAF                 shl     rdx, 2          ; n
.text:0000000000001BB3                 call    _memcpy
.text:0000000000001BB8                 mov     r8, [rsp+878h+var_870]
.text:0000000000001BBD                 jmp     loc_1808
.text:0000000000001BC2 ; ---------------------------------------------------------------------------
.text:0000000000001BC2
.text:0000000000001BC2 loc_1BC2:                               ; CODE XREF: timsort_constprop_0+6EB↑j
.text:0000000000001BC2                                         ; timsort_constprop_0+87E↑j
.text:0000000000001BC2                 call    ___stack_chk_fail
.text:0000000000001BC2 ; } // starts at 1300
.text:0000000000001BC2 timsort_constprop_0 endp
.text:0000000000001BC2
.text:0000000000001BC2 _text           ends
.text:0000000000001BC2
LOAD:0000000000001BC7 ; ===========================================================================
LOAD:0000000000001BC7
LOAD:0000000000001BC7 ; Segment type: Pure code
LOAD:0000000000001BC7 ; Segment permissions: Read/Execute
LOAD:0000000000001BC7 LOAD            segment mempage public 'CODE' use64
LOAD:0000000000001BC7                 assume cs:LOAD
LOAD:0000000000001BC7                 ;org 1BC7h
LOAD:0000000000001BC7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001BC7                 align 8
LOAD:0000000000001BC7 LOAD            ends
LOAD:0000000000001BC7
.fini:0000000000001BC8 ; ===========================================================================
.fini:0000000000001BC8
.fini:0000000000001BC8 ; Segment type: Pure code
.fini:0000000000001BC8 ; Segment permissions: Read/Execute
.fini:0000000000001BC8 _fini           segment dword public 'CODE' use64
.fini:0000000000001BC8                 assume cs:_fini
.fini:0000000000001BC8                 ;org 1BC8h
.fini:0000000000001BC8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000001BC8
.fini:0000000000001BC8 ; =============== S U B R O U T I N E =======================================
.fini:0000000000001BC8
.fini:0000000000001BC8
.fini:0000000000001BC8                 public _term_proc
.fini:0000000000001BC8 _term_proc      proc near
.fini:0000000000001BC8                 endbr64                 ; _fini
.fini:0000000000001BCC                 sub     rsp, 8
.fini:0000000000001BD0                 add     rsp, 8
.fini:0000000000001BD4                 retn
.fini:0000000000001BD4 _term_proc      endp
.fini:0000000000001BD4
.fini:0000000000001BD4 _fini           ends
.fini:0000000000001BD4
.rodata:0000000000002000 ; ===========================================================================
.rodata:0000000000002000
.rodata:0000000000002000 ; Segment type: Pure data
.rodata:0000000000002000 ; Segment permissions: Read
.rodata:0000000000002000 _rodata         segment dword public 'CONST' use64
.rodata:0000000000002000                 assume cs:_rodata
.rodata:0000000000002000                 ;org 2000h
.rodata:0000000000002000                 public _IO_stdin_used
.rodata:0000000000002000 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000000000000130↑o
.rodata:0000000000002001                 db    0
.rodata:0000000000002002                 db    2
.rodata:0000000000002003                 db    0
.rodata:0000000000002004 unk_2004        db  20h                 ; DATA XREF: main+8↑o
.rodata:0000000000002005                 db    0
.rodata:0000000000002006 aDS             db '%d%s',0             ; DATA XREF: main+10↑o
.rodata:000000000000200B asc_200B        db 0Ah,0                ; DATA XREF: main+D3↑o
.rodata:000000000000200B _rodata         ends
.rodata:000000000000200B
LOAD:000000000000200D ; ===========================================================================
LOAD:000000000000200D
LOAD:000000000000200D ; Segment type: Pure data
LOAD:000000000000200D ; Segment permissions: Read
LOAD:000000000000200D LOAD            segment mempage public 'DATA' use64
LOAD:000000000000200D                 assume cs:LOAD
LOAD:000000000000200D                 ;org 200Dh
LOAD:000000000000200D                 align 10h
LOAD:000000000000200D LOAD            ends
LOAD:000000000000200D
.eh_frame_hdr:0000000000002010 ; ===========================================================================
.eh_frame_hdr:0000000000002010
.eh_frame_hdr:0000000000002010 ; Segment type: Pure data
.eh_frame_hdr:0000000000002010 ; Segment permissions: Read
.eh_frame_hdr:0000000000002010 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000002010                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000002010                 ;org 2010h
.eh_frame_hdr:0000000000002010 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000000000000280↑o
.eh_frame_hdr:0000000000002011                 db  1Bh
.eh_frame_hdr:0000000000002012                 db    3
.eh_frame_hdr:0000000000002013                 db  3Bh ; ;
.eh_frame_hdr:0000000000002014                 db  3Ch ; <
.eh_frame_hdr:0000000000002015                 db    0
.eh_frame_hdr:0000000000002016                 db    0
.eh_frame_hdr:0000000000002017                 db    0
.eh_frame_hdr:0000000000002018                 db    6
.eh_frame_hdr:0000000000002019                 db    0
.eh_frame_hdr:000000000000201A                 db    0
.eh_frame_hdr:000000000000201B                 db    0
.eh_frame_hdr:000000000000201C                 db  10h
.eh_frame_hdr:000000000000201D                 db 0F0h
.eh_frame_hdr:000000000000201E                 db 0FFh
.eh_frame_hdr:000000000000201F                 db 0FFh
.eh_frame_hdr:0000000000002020                 db  70h ; p
.eh_frame_hdr:0000000000002021                 db    0
.eh_frame_hdr:0000000000002022                 db    0
.eh_frame_hdr:0000000000002023                 db    0
.eh_frame_hdr:0000000000002024                 db  80h
.eh_frame_hdr:0000000000002025                 db 0F0h
.eh_frame_hdr:0000000000002026                 db 0FFh
.eh_frame_hdr:0000000000002027                 db 0FFh
.eh_frame_hdr:0000000000002028                 db  98h
.eh_frame_hdr:0000000000002029                 db    0
.eh_frame_hdr:000000000000202A                 db    0
.eh_frame_hdr:000000000000202B                 db    0
.eh_frame_hdr:000000000000202C                 db  90h
.eh_frame_hdr:000000000000202D                 db 0F0h
.eh_frame_hdr:000000000000202E                 db 0FFh
.eh_frame_hdr:000000000000202F                 db 0FFh
.eh_frame_hdr:0000000000002030                 db 0B0h
.eh_frame_hdr:0000000000002031                 db    0
.eh_frame_hdr:0000000000002032                 db    0
.eh_frame_hdr:0000000000002033                 db    0
.eh_frame_hdr:0000000000002034                 db 0F0h
.eh_frame_hdr:0000000000002035                 db 0F0h
.eh_frame_hdr:0000000000002036                 db 0FFh
.eh_frame_hdr:0000000000002037                 db 0FFh
.eh_frame_hdr:0000000000002038                 db  30h ; 0
.eh_frame_hdr:0000000000002039                 db    1
.eh_frame_hdr:000000000000203A                 db    0
.eh_frame_hdr:000000000000203B                 db    0
.eh_frame_hdr:000000000000203C                 db    0
.eh_frame_hdr:000000000000203D                 db 0F2h
.eh_frame_hdr:000000000000203E                 db 0FFh
.eh_frame_hdr:000000000000203F                 db 0FFh
.eh_frame_hdr:0000000000002040                 db  58h ; X
.eh_frame_hdr:0000000000002041                 db    0
.eh_frame_hdr:0000000000002042                 db    0
.eh_frame_hdr:0000000000002043                 db    0
.eh_frame_hdr:0000000000002044                 db 0F0h
.eh_frame_hdr:0000000000002045                 db 0F2h
.eh_frame_hdr:0000000000002046                 db 0FFh
.eh_frame_hdr:0000000000002047                 db 0FFh
.eh_frame_hdr:0000000000002048                 db 0C8h
.eh_frame_hdr:0000000000002049                 db    0
.eh_frame_hdr:000000000000204A                 db    0
.eh_frame_hdr:000000000000204B                 db    0
.eh_frame_hdr:000000000000204B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000204B
LOAD:000000000000204C ; ===========================================================================
LOAD:000000000000204C
LOAD:000000000000204C ; Segment type: Pure data
LOAD:000000000000204C ; Segment permissions: Read
LOAD:000000000000204C LOAD            segment mempage public 'DATA' use64
LOAD:000000000000204C                 assume cs:LOAD
LOAD:000000000000204C                 ;org 204Ch
LOAD:000000000000204C                 align 10h
LOAD:000000000000204C LOAD            ends
LOAD:000000000000204C
.eh_frame:0000000000002050 ; ===========================================================================
.eh_frame:0000000000002050
.eh_frame:0000000000002050 ; Segment type: Pure data
.eh_frame:0000000000002050 ; Segment permissions: Read
.eh_frame:0000000000002050 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000002050                 assume cs:_eh_frame
.eh_frame:0000000000002050                 ;org 2050h
.eh_frame:0000000000002050                 db  14h
.eh_frame:0000000000002051                 db    0
.eh_frame:0000000000002052                 db    0
.eh_frame:0000000000002053                 db    0
.eh_frame:0000000000002054                 db    0
.eh_frame:0000000000002055                 db    0
.eh_frame:0000000000002056                 db    0
.eh_frame:0000000000002057                 db    0
.eh_frame:0000000000002058                 db    1
.eh_frame:0000000000002059                 db  7Ah ; z
.eh_frame:000000000000205A                 db  52h ; R
.eh_frame:000000000000205B                 db    0
.eh_frame:000000000000205C                 db    1
.eh_frame:000000000000205D                 db  78h ; x
.eh_frame:000000000000205E                 db  10h
.eh_frame:000000000000205F                 db    1
.eh_frame:0000000000002060                 db  1Bh
.eh_frame:0000000000002061                 db  0Ch
.eh_frame:0000000000002062                 db    7
.eh_frame:0000000000002063                 db    8
.eh_frame:0000000000002064                 db  90h
.eh_frame:0000000000002065                 db    1
.eh_frame:0000000000002066                 db    0
.eh_frame:0000000000002067                 db    0
.eh_frame:0000000000002068                 db  14h
.eh_frame:0000000000002069                 db    0
.eh_frame:000000000000206A                 db    0
.eh_frame:000000000000206B                 db    0
.eh_frame:000000000000206C                 db  1Ch
.eh_frame:000000000000206D                 db    0
.eh_frame:000000000000206E                 db    0
.eh_frame:000000000000206F                 db    0
.eh_frame:0000000000002070                 db 0A0h
.eh_frame:0000000000002071                 db 0F1h
.eh_frame:0000000000002072                 db 0FFh
.eh_frame:0000000000002073                 db 0FFh
.eh_frame:0000000000002074                 db  26h ; &
.eh_frame:0000000000002075                 db    0
.eh_frame:0000000000002076                 db    0
.eh_frame:0000000000002077                 db    0
.eh_frame:0000000000002078                 db    0
.eh_frame:0000000000002079                 db  44h ; D
.eh_frame:000000000000207A                 db    7
.eh_frame:000000000000207B                 db  10h
.eh_frame:000000000000207C                 db    0
.eh_frame:000000000000207D                 db    0
.eh_frame:000000000000207E                 db    0
.eh_frame:000000000000207F                 db    0
.eh_frame:0000000000002080                 db  24h ; $
.eh_frame:0000000000002081                 db    0
.eh_frame:0000000000002082                 db    0
.eh_frame:0000000000002083                 db    0
.eh_frame:0000000000002084                 db  34h ; 4
.eh_frame:0000000000002085                 db    0
.eh_frame:0000000000002086                 db    0
.eh_frame:0000000000002087                 db    0
.eh_frame:0000000000002088                 db  98h
.eh_frame:0000000000002089                 db 0EFh
.eh_frame:000000000000208A                 db 0FFh
.eh_frame:000000000000208B                 db 0FFh
.eh_frame:000000000000208C                 db  70h ; p
.eh_frame:000000000000208D                 db    0
.eh_frame:000000000000208E                 db    0
.eh_frame:000000000000208F                 db    0
.eh_frame:0000000000002090                 db    0
.eh_frame:0000000000002091                 db  0Eh
.eh_frame:0000000000002092                 db  10h
.eh_frame:0000000000002093                 db  46h ; F
.eh_frame:0000000000002094                 db  0Eh
.eh_frame:0000000000002095                 db  18h
.eh_frame:0000000000002096                 db  4Ah ; J
.eh_frame:0000000000002097                 db  0Fh
.eh_frame:0000000000002098                 db  0Bh
.eh_frame:0000000000002099                 db  77h ; w
.eh_frame:000000000000209A                 db    8
.eh_frame:000000000000209B                 db  80h
.eh_frame:000000000000209C                 db    0
.eh_frame:000000000000209D                 db  3Fh ; ?
.eh_frame:000000000000209E                 db  1Ah
.eh_frame:000000000000209F                 db  3Ah ; :
.eh_frame:00000000000020A0                 db  2Ah ; *
.eh_frame:00000000000020A1                 db  33h ; 3
.eh_frame:00000000000020A2                 db  24h ; $
.eh_frame:00000000000020A3                 db  22h ; "
.eh_frame:00000000000020A4                 db    0
.eh_frame:00000000000020A5                 db    0
.eh_frame:00000000000020A6                 db    0
.eh_frame:00000000000020A7                 db    0
.eh_frame:00000000000020A8                 db  14h
.eh_frame:00000000000020A9                 db    0
.eh_frame:00000000000020AA                 db    0
.eh_frame:00000000000020AB                 db    0
.eh_frame:00000000000020AC                 db  5Ch ; \
.eh_frame:00000000000020AD                 db    0
.eh_frame:00000000000020AE                 db    0
.eh_frame:00000000000020AF                 db    0
.eh_frame:00000000000020B0                 db 0E0h
.eh_frame:00000000000020B1                 db 0EFh
.eh_frame:00000000000020B2                 db 0FFh
.eh_frame:00000000000020B3                 db 0FFh
.eh_frame:00000000000020B4                 db  10h
.eh_frame:00000000000020B5                 db    0
.eh_frame:00000000000020B6                 db    0
.eh_frame:00000000000020B7                 db    0
.eh_frame:00000000000020B8                 db    0
.eh_frame:00000000000020B9                 db    0
.eh_frame:00000000000020BA                 db    0
.eh_frame:00000000000020BB                 db    0
.eh_frame:00000000000020BC                 db    0
.eh_frame:00000000000020BD                 db    0
.eh_frame:00000000000020BE                 db    0
.eh_frame:00000000000020BF                 db    0
.eh_frame:00000000000020C0                 db  14h
.eh_frame:00000000000020C1                 db    0
.eh_frame:00000000000020C2                 db    0
.eh_frame:00000000000020C3                 db    0
.eh_frame:00000000000020C4                 db  74h ; t
.eh_frame:00000000000020C5                 db    0
.eh_frame:00000000000020C6                 db    0
.eh_frame:00000000000020C7                 db    0
.eh_frame:00000000000020C8                 db 0D8h
.eh_frame:00000000000020C9                 db 0EFh
.eh_frame:00000000000020CA                 db 0FFh
.eh_frame:00000000000020CB                 db 0FFh
.eh_frame:00000000000020CC                 db  60h ; `
.eh_frame:00000000000020CD                 db    0
.eh_frame:00000000000020CE                 db    0
.eh_frame:00000000000020CF                 db    0
.eh_frame:00000000000020D0                 db    0
.eh_frame:00000000000020D1                 db    0
.eh_frame:00000000000020D2                 db    0
.eh_frame:00000000000020D3                 db    0
.eh_frame:00000000000020D4                 db    0
.eh_frame:00000000000020D5                 db    0
.eh_frame:00000000000020D6                 db    0
.eh_frame:00000000000020D7                 db    0
.eh_frame:00000000000020D8                 db  64h ; d
.eh_frame:00000000000020D9                 db    0
.eh_frame:00000000000020DA                 db    0
.eh_frame:00000000000020DB                 db    0
.eh_frame:00000000000020DC                 db  8Ch
.eh_frame:00000000000020DD                 db    0
.eh_frame:00000000000020DE                 db    0
.eh_frame:00000000000020DF                 db    0
.eh_frame:00000000000020E0                 db  20h
.eh_frame:00000000000020E1                 db 0F2h
.eh_frame:00000000000020E2                 db 0FFh
.eh_frame:00000000000020E3                 db 0FFh
.eh_frame:00000000000020E4                 db 0C7h
.eh_frame:00000000000020E5                 db    8
.eh_frame:00000000000020E6                 db    0
.eh_frame:00000000000020E7                 db    0
.eh_frame:00000000000020E8                 db    0
.eh_frame:00000000000020E9                 db  42h ; B
.eh_frame:00000000000020EA                 db  0Eh
.eh_frame:00000000000020EB                 db  10h
.eh_frame:00000000000020EC                 db  8Fh
.eh_frame:00000000000020ED                 db    2
.eh_frame:00000000000020EE                 db  42h ; B
.eh_frame:00000000000020EF                 db  0Eh
.eh_frame:00000000000020F0                 db  18h
.eh_frame:00000000000020F1                 db  8Eh
.eh_frame:00000000000020F2                 db    3
.eh_frame:00000000000020F3                 db  42h ; B
.eh_frame:00000000000020F4                 db  0Eh
.eh_frame:00000000000020F5                 db  20h
.eh_frame:00000000000020F6                 db  8Dh
.eh_frame:00000000000020F7                 db    4
.eh_frame:00000000000020F8                 db  42h ; B
.eh_frame:00000000000020F9                 db  0Eh
.eh_frame:00000000000020FA                 db  28h ; (
.eh_frame:00000000000020FB                 db  8Ch
.eh_frame:00000000000020FC                 db    5
.eh_frame:00000000000020FD                 db  41h ; A
.eh_frame:00000000000020FE                 db  0Eh
.eh_frame:00000000000020FF                 db  30h ; 0
.eh_frame:0000000000002100                 db  86h
.eh_frame:0000000000002101                 db    6
.eh_frame:0000000000002102                 db  41h ; A
.eh_frame:0000000000002103                 db  0Eh
.eh_frame:0000000000002104                 db  38h ; 8
.eh_frame:0000000000002105                 db  83h
.eh_frame:0000000000002106                 db    7
.eh_frame:0000000000002107                 db  4Fh ; O
.eh_frame:0000000000002108                 db  0Eh
.eh_frame:0000000000002109                 db  80h
.eh_frame:000000000000210A                 db  11h
.eh_frame:000000000000210B                 db    3
.eh_frame:000000000000210C                 db 0DFh
.eh_frame:000000000000210D                 db    6
.eh_frame:000000000000210E                 db  0Ah
.eh_frame:000000000000210F                 db  0Eh
.eh_frame:0000000000002110                 db  38h ; 8
.eh_frame:0000000000002111                 db  44h ; D
.eh_frame:0000000000002112                 db  0Eh
.eh_frame:0000000000002113                 db  30h ; 0
.eh_frame:0000000000002114                 db  41h ; A
.eh_frame:0000000000002115                 db  0Eh
.eh_frame:0000000000002116                 db  28h ; (
.eh_frame:0000000000002117                 db  42h ; B
.eh_frame:0000000000002118                 db  0Eh
.eh_frame:0000000000002119                 db  20h
.eh_frame:000000000000211A                 db  42h ; B
.eh_frame:000000000000211B                 db  0Eh
.eh_frame:000000000000211C                 db  18h
.eh_frame:000000000000211D                 db  42h ; B
.eh_frame:000000000000211E                 db  0Eh
.eh_frame:000000000000211F                 db  10h
.eh_frame:0000000000002120                 db  42h ; B
.eh_frame:0000000000002121                 db  0Eh
.eh_frame:0000000000002122                 db    8
.eh_frame:0000000000002123                 db  45h ; E
.eh_frame:0000000000002124                 db  0Bh
.eh_frame:0000000000002125                 db    3
.eh_frame:0000000000002126                 db  7Dh ; }
.eh_frame:0000000000002127                 db    1
.eh_frame:0000000000002128                 db  0Ah
.eh_frame:0000000000002129                 db  0Eh
.eh_frame:000000000000212A                 db  38h ; 8
.eh_frame:000000000000212B                 db  41h ; A
.eh_frame:000000000000212C                 db  0Eh
.eh_frame:000000000000212D                 db  30h ; 0
.eh_frame:000000000000212E                 db  41h ; A
.eh_frame:000000000000212F                 db  0Eh
.eh_frame:0000000000002130                 db  28h ; (
.eh_frame:0000000000002131                 db  42h ; B
.eh_frame:0000000000002132                 db  0Eh
.eh_frame:0000000000002133                 db  20h
.eh_frame:0000000000002134                 db  42h ; B
.eh_frame:0000000000002135                 db  0Eh
.eh_frame:0000000000002136                 db  18h
.eh_frame:0000000000002137                 db  42h ; B
.eh_frame:0000000000002138                 db  0Eh
.eh_frame:0000000000002139                 db  10h
.eh_frame:000000000000213A                 db  42h ; B
.eh_frame:000000000000213B                 db  0Eh
.eh_frame:000000000000213C                 db    8
.eh_frame:000000000000213D                 db  41h ; A
.eh_frame:000000000000213E                 db  0Bh
.eh_frame:000000000000213F                 db    0
.eh_frame:0000000000002140                 db  38h ; 8
.eh_frame:0000000000002141                 db    0
.eh_frame:0000000000002142                 db    0
.eh_frame:0000000000002143                 db    0
.eh_frame:0000000000002144                 db 0F4h
.eh_frame:0000000000002145                 db    0
.eh_frame:0000000000002146                 db    0
.eh_frame:0000000000002147                 db    0
.eh_frame:0000000000002148                 db 0B8h
.eh_frame:0000000000002149                 db 0EFh
.eh_frame:000000000000214A                 db 0FFh
.eh_frame:000000000000214B                 db 0FFh
.eh_frame:000000000000214C                 db    9
.eh_frame:000000000000214D                 db    1
.eh_frame:000000000000214E                 db    0
.eh_frame:000000000000214F                 db    0
.eh_frame:0000000000002150                 db    0
.eh_frame:0000000000002151                 db  46h ; F
.eh_frame:0000000000002152                 db  0Eh
.eh_frame:0000000000002153                 db  10h
.eh_frame:0000000000002154                 db  8Dh
.eh_frame:0000000000002155                 db    2
.eh_frame:0000000000002156                 db  42h ; B
.eh_frame:0000000000002157                 db  0Eh
.eh_frame:0000000000002158                 db  18h
.eh_frame:0000000000002159                 db  8Ch
.eh_frame:000000000000215A                 db    3
.eh_frame:000000000000215B                 db  48h ; H
.eh_frame:000000000000215C                 db  0Eh
.eh_frame:000000000000215D                 db  20h
.eh_frame:000000000000215E                 db  86h
.eh_frame:000000000000215F                 db    4
.eh_frame:0000000000002160                 db  48h ; H
.eh_frame:0000000000002161                 db  0Eh
.eh_frame:0000000000002162                 db  28h ; (
.eh_frame:0000000000002163                 db  83h
.eh_frame:0000000000002164                 db    5
.eh_frame:0000000000002165                 db  44h ; D
.eh_frame:0000000000002166                 db  0Eh
.eh_frame:0000000000002167                 db  80h
.eh_frame:0000000000002168                 db    1
.eh_frame:0000000000002169                 db    2
.eh_frame:000000000000216A                 db 0DFh
.eh_frame:000000000000216B                 db  0Ah
.eh_frame:000000000000216C                 db  0Eh
.eh_frame:000000000000216D                 db  28h ; (
.eh_frame:000000000000216E                 db  43h ; C
.eh_frame:000000000000216F                 db  0Eh
.eh_frame:0000000000002170                 db  20h
.eh_frame:0000000000002171                 db  41h ; A
.eh_frame:0000000000002172                 db  0Eh
.eh_frame:0000000000002173                 db  18h
.eh_frame:0000000000002174                 db  42h ; B
.eh_frame:0000000000002175                 db  0Eh
.eh_frame:0000000000002176                 db  10h
.eh_frame:0000000000002177                 db  42h ; B
.eh_frame:0000000000002178                 db  0Eh
.eh_frame:0000000000002179                 db    8
.eh_frame:000000000000217A                 db  41h ; A
.eh_frame:000000000000217B                 db  0Bh
.eh_frame:000000000000217C __FRAME_END__   db    0
.eh_frame:000000000000217D                 db    0
.eh_frame:000000000000217E                 db    0
.eh_frame:000000000000217F                 db    0
.eh_frame:000000000000217F _eh_frame       ends
.eh_frame:000000000000217F
.init_array:0000000000003D90 ; ELF Initialization Function Table
.init_array:0000000000003D90 ; ===========================================================================
.init_array:0000000000003D90
.init_array:0000000000003D90 ; Segment type: Pure data
.init_array:0000000000003D90 ; Segment permissions: Read/Write
.init_array:0000000000003D90 _init_array     segment qword public 'DATA' use64
.init_array:0000000000003D90                 assume cs:_init_array
.init_array:0000000000003D90                 ;org 3D90h
.init_array:0000000000003D90 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000003D90                                         ; DATA XREF: LOAD:0000000000000168↑o
.init_array:0000000000003D90                                         ; LOAD:00000000000002F0↑o
.init_array:0000000000003D90 _init_array     ends
.init_array:0000000000003D90
.fini_array:0000000000003D98 ; ELF Termination Function Table
.fini_array:0000000000003D98 ; ===========================================================================
.fini_array:0000000000003D98
.fini_array:0000000000003D98 ; Segment type: Pure data
.fini_array:0000000000003D98 ; Segment permissions: Read/Write
.fini_array:0000000000003D98 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000003D98                 assume cs:_fini_array
.fini_array:0000000000003D98                 ;org 3D98h
.fini_array:0000000000003D98 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000003D98 _fini_array     ends
.fini_array:0000000000003D98
LOAD:0000000000003DA0 ; ELF Dynamic Information
LOAD:0000000000003DA0 ; ===========================================================================
LOAD:0000000000003DA0
LOAD:0000000000003DA0 ; Segment type: Pure data
LOAD:0000000000003DA0 ; Segment permissions: Read/Write
LOAD:0000000000003DA0 LOAD            segment mempage public 'DATA' use64
LOAD:0000000000003DA0                 assume cs:LOAD
LOAD:0000000000003DA0                 ;org 3DA0h
LOAD:0000000000003DA0 _DYNAMIC        Elf64_Dyn <1, 60h>      ; DATA XREF: LOAD:00000000000001A0↑o
LOAD:0000000000003DA0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000003DA0                                         ; DT_NEEDED libc.so.6
LOAD:0000000000003DB0                 Elf64_Dyn <0Ch, 1000h>  ; DT_INIT
LOAD:0000000000003DC0                 Elf64_Dyn <0Dh, 1BC8h>  ; DT_FINI
LOAD:0000000000003DD0                 Elf64_Dyn <19h, 3D90h>  ; DT_INIT_ARRAY
LOAD:0000000000003DE0                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000003DF0                 Elf64_Dyn <1Ah, 3D98h>  ; DT_FINI_ARRAY
LOAD:0000000000003E00                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000003E10                 Elf64_Dyn <6FFFFEF5h, 3B0h> ; DT_GNU_HASH
LOAD:0000000000003E20                 Elf64_Dyn <5, 4F8h>     ; DT_STRTAB
LOAD:0000000000003E30                 Elf64_Dyn <6, 3D8h>     ; DT_SYMTAB
LOAD:0000000000003E40                 Elf64_Dyn <0Ah, 0E7h>   ; DT_STRSZ
LOAD:0000000000003E50                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000003E60                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000003E70                 Elf64_Dyn <3, 3F90h>    ; DT_PLTGOT
LOAD:0000000000003E80                 Elf64_Dyn <2, 90h>      ; DT_PLTRELSZ
LOAD:0000000000003E90                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000003EA0                 Elf64_Dyn <17h, 718h>   ; DT_JMPREL
LOAD:0000000000003EB0                 Elf64_Dyn <7, 658h>     ; DT_RELA
LOAD:0000000000003EC0                 Elf64_Dyn <8, 0C0h>     ; DT_RELASZ
LOAD:0000000000003ED0                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000003EE0                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000003EF0                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000003F00                 Elf64_Dyn <6FFFFFFEh, 5F8h> ; DT_VERNEED
LOAD:0000000000003F10                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000003F20                 Elf64_Dyn <6FFFFFF0h, 5E0h> ; DT_VERSYM
LOAD:0000000000003F30                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
LOAD:0000000000003F40                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000003F50                 db    0
LOAD:0000000000003F51                 db    0
LOAD:0000000000003F52                 db    0
LOAD:0000000000003F53                 db    0
LOAD:0000000000003F54                 db    0
LOAD:0000000000003F55                 db    0
LOAD:0000000000003F56                 db    0
LOAD:0000000000003F57                 db    0
LOAD:0000000000003F58                 db    0
LOAD:0000000000003F59                 db    0
LOAD:0000000000003F5A                 db    0
LOAD:0000000000003F5B                 db    0
LOAD:0000000000003F5C                 db    0
LOAD:0000000000003F5D                 db    0
LOAD:0000000000003F5E                 db    0
LOAD:0000000000003F5F                 db    0
LOAD:0000000000003F60                 db    0
LOAD:0000000000003F61                 db    0
LOAD:0000000000003F62                 db    0
LOAD:0000000000003F63                 db    0
LOAD:0000000000003F64                 db    0
LOAD:0000000000003F65                 db    0
LOAD:0000000000003F66                 db    0
LOAD:0000000000003F67                 db    0
LOAD:0000000000003F68                 db    0
LOAD:0000000000003F69                 db    0
LOAD:0000000000003F6A                 db    0
LOAD:0000000000003F6B                 db    0
LOAD:0000000000003F6C                 db    0
LOAD:0000000000003F6D                 db    0
LOAD:0000000000003F6E                 db    0
LOAD:0000000000003F6F                 db    0
LOAD:0000000000003F70                 db    0
LOAD:0000000000003F71                 db    0
LOAD:0000000000003F72                 db    0
LOAD:0000000000003F73                 db    0
LOAD:0000000000003F74                 db    0
LOAD:0000000000003F75                 db    0
LOAD:0000000000003F76                 db    0
LOAD:0000000000003F77                 db    0
LOAD:0000000000003F78                 db    0
LOAD:0000000000003F79                 db    0
LOAD:0000000000003F7A                 db    0
LOAD:0000000000003F7B                 db    0
LOAD:0000000000003F7C                 db    0
LOAD:0000000000003F7D                 db    0
LOAD:0000000000003F7E                 db    0
LOAD:0000000000003F7F                 db    0
LOAD:0000000000003F80                 db    0
LOAD:0000000000003F81                 db    0
LOAD:0000000000003F82                 db    0
LOAD:0000000000003F83                 db    0
LOAD:0000000000003F84                 db    0
LOAD:0000000000003F85                 db    0
LOAD:0000000000003F86                 db    0
LOAD:0000000000003F87                 db    0
LOAD:0000000000003F88                 db    0
LOAD:0000000000003F89                 db    0
LOAD:0000000000003F8A                 db    0
LOAD:0000000000003F8B                 db    0
LOAD:0000000000003F8C                 db    0
LOAD:0000000000003F8D                 db    0
LOAD:0000000000003F8E                 db    0
LOAD:0000000000003F8F                 db    0
LOAD:0000000000003F8F LOAD            ends
LOAD:0000000000003F8F
.got:0000000000003F90 ; ===========================================================================
.got:0000000000003F90
.got:0000000000003F90 ; Segment type: Pure data
.got:0000000000003F90 ; Segment permissions: Read/Write
.got:0000000000003F90 _got            segment qword public 'DATA' use64
.got:0000000000003F90                 assume cs:_got
.got:0000000000003F90                 ;org 3F90h
.got:0000000000003F90 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000003F98 qword_3F98      dq 0                    ; DATA XREF: sub_1020↑r
.got:0000000000003FA0 qword_3FA0      dq 0                    ; DATA XREF: sub_1020+6↑r
.got:0000000000003FA8 free_ptr        dq offset free          ; DATA XREF: _free+4↑r
.got:0000000000003FB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000003FB0                                         ; DATA XREF: ___stack_chk_fail+4↑r
.got:0000000000003FB8 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk+4↑r
.got:0000000000003FC0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy+4↑r
.got:0000000000003FC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc+4↑r
.got:0000000000003FD0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk+4↑r
.got:0000000000003FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000003FD8                                         ; DATA XREF: _start+1F↑r
.got:0000000000003FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000003FE0                                         ; DATA XREF: deregister_tm_clones+13↑r
.got:0000000000003FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000003FE8                                         ; DATA XREF: _init_proc+8↑r
.got:0000000000003FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000003FF0                                         ; DATA XREF: register_tm_clones+24↑r
.got:0000000000003FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000003FF8                                         ; DATA XREF: __cxa_finalize+4↑r
.got:0000000000003FF8                                         ; __do_global_dtors_aux+E↑r
.got:0000000000003FF8 _got            ends
.got:0000000000003FF8
.data:0000000000004000 ; ===========================================================================
.data:0000000000004000
.data:0000000000004000 ; Segment type: Pure data
.data:0000000000004000 ; Segment permissions: Read/Write
.data:0000000000004000 _data           segment qword public 'DATA' use64
.data:0000000000004000                 assume cs:_data
.data:0000000000004000                 ;org 4000h
.data:0000000000004000                 public __data_start ; weak
.data:0000000000004000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000004000                                         ; data_start
.data:0000000000004001                 db    0
.data:0000000000004002                 db    0
.data:0000000000004003                 db    0
.data:0000000000004004                 db    0
.data:0000000000004005                 db    0
.data:0000000000004006                 db    0
.data:0000000000004007                 db    0
.data:0000000000004008                 public __dso_handle
.data:0000000000004008 ; void *_dso_handle
.data:0000000000004008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+1B↑r
.data:0000000000004008                                         ; .data:__dso_handle↓o
.data:0000000000004008 _data           ends
.data:0000000000004008
.bss:0000000000004010 ; ===========================================================================
.bss:0000000000004010
.bss:0000000000004010 ; Segment type: Uninitialized
.bss:0000000000004010 ; Segment permissions: Read/Write
.bss:0000000000004010 _bss            segment byte public 'BSS' use64
.bss:0000000000004010                 assume cs:_bss
.bss:0000000000004010                 ;org 4010h
.bss:0000000000004010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000004010                 public __bss_start
.bss:0000000000004010 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones↑o
.bss:0000000000004010                                         ; deregister_tm_clones+7↑o ...
.bss:0000000000004010                                         ; Alternative name is '__TMC_END__'
.bss:0000000000004010                                         ; completed.0
.bss:0000000000004010                                         ; _edata
.bss:0000000000004011                 align 8
.bss:0000000000004011 _bss            ends
.bss:0000000000004011
.prgend:0000000000004018 ; ===========================================================================
.prgend:0000000000004018
.prgend:0000000000004018 ; Segment type: Zero-length
.prgend:0000000000004018 _prgend         segment byte public '' use64
.prgend:0000000000004018 _end            label byte
.prgend:0000000000004018 _prgend         ends
.prgend:0000000000004018
extern:0000000000004020 ; ===========================================================================
extern:0000000000004020
extern:0000000000004020 ; Segment type: Externs
extern:0000000000004020 ; extern
extern:0000000000004020 ; void free(void *ptr)
extern:0000000000004020                 extrn free:near         ; CODE XREF: _free+4↑j
extern:0000000000004020                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000004028 ; int _libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000004028                 extrn __libc_start_main:near
extern:0000000000004028                                         ; CODE XREF: _start+1F↑p
extern:0000000000004028                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000004030                 extrn __stack_chk_fail:near
extern:0000000000004030                                         ; CODE XREF: ___stack_chk_fail+4↑j
extern:0000000000004030                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000004038                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk+4↑j
extern:0000000000004038                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:0000000000004040 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000004040                 extrn memcpy:near       ; CODE XREF: _memcpy+4↑j
extern:0000000000004040                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000004048 ; void *malloc(size_t size)
extern:0000000000004048                 extrn malloc:near       ; CODE XREF: _malloc+4↑j
extern:0000000000004048                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000004050                 extrn __printf_chk:near ; CODE XREF: ___printf_chk+4↑j
extern:0000000000004050                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000004058 ; int __cxa_finalize(void *)
extern:0000000000004058                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000004058                                         ; CODE XREF: __cxa_finalize+4↑j
extern:0000000000004058                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000004060                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000004060                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000004068                 extrn __gmon_start__:near ; weak
extern:0000000000004068                                         ; CODE XREF: _init_proc+14↑p
extern:0000000000004068                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000004070                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000004070                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000004070
extern:0000000000004070
extern:0000000000004070                 end _start